// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Client {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_CSClientOpen__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSClientOpen, global::CSClientOpen.Builder> internal__static_CSClientOpen__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSClientClose__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSClientClose, global::CSClientClose.Builder> internal__static_CSClientClose__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSLogon__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSLogon, global::CSLogon.Builder> internal__static_CSLogon__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCLogon__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCLogon, global::SCLogon.Builder> internal__static_SCLogon__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSLogoff__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSLogoff, global::CSLogoff.Builder> internal__static_CSLogoff__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCLogoff__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCLogoff, global::SCLogoff.Builder> internal__static_SCLogoff__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSHungup__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSHungup, global::CSHungup.Builder> internal__static_CSHungup__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEvaluate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEvaluate, global::CSEvaluate.Builder> internal__static_CSEvaluate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEvaluate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEvaluate, global::SCEvaluate.Builder> internal__static_SCEvaluate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSVerifyCode__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSVerifyCode, global::CSVerifyCode.Builder> internal__static_CSVerifyCode__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCVerifyCode__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCVerifyCode, global::SCVerifyCode.Builder> internal__static_SCVerifyCode__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSBindMobile__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSBindMobile, global::CSBindMobile.Builder> internal__static_CSBindMobile__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCBindMobile__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCBindMobile, global::SCBindMobile.Builder> internal__static_SCBindMobile__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static Client() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxDbGllbnQucHJvdG8aEEJhc2VTdHJ1Y3QucHJvdG8iHAoMQ1NDbGllbnRP", 
          "cGVuEgwKBHRleHQYASACKAkiDwoNQ1NDbGllbnRDbG9zZSIdCgdDU0xvZ29u", 
          "EhIKCmNhcmRudW1iZXIYASACKAkibgoHU0NMb2dvbhIQCghtZW1iZXJpZBgB", 
          "IAIoBRISCgpjYXJkbnVtYmVyGAIgAigJEgwKBG5hbWUYBCACKAkSDQoFcmln", 
          "aHQYBSACKAUSDwoHYmFsYW5jZRgJIAIoBRIPCgdpbnRlZ2FsGAwgAigFIh4K", 
          "CENTTG9nb2ZmEhIKCmNhcmRudW1iZXIYASACKAkicQoIU0NMb2dvZmYSDAoE", 
          "bmFtZRgBIAIoCRISCgpjYXJkbnVtYmVyGAIgAigJEg0KBXJpZ2h0GAMgAigJ", 
          "Eg8KB2JhbGFuY2UYBCACKAUSEQoJdXNlZG1vbmV5GAUgAigFEhAKCHVzZWR0", 
          "aW1lGAYgAigFIh4KCENTSHVuZ3VwEhIKCmNhcmRudW1iZXIYASACKAkiTwoK", 
          "Q1NFdmFsdWF0ZRIRCglzdGFmZlN0YXIYASACKAUSDwoHZW52U3RhchgCIAIo", 
          "BRIPCgdkZXZTdGFyGAMgAigFEgwKBGV2YWwYBCABKAkiHQoKU0NFdmFsdWF0", 
          "ZRIPCgdpbnRlZ2FsGAEgAigFIiMKDENTVmVyaWZ5Q29kZRITCgtwaG9uZW51", 
          "bWJlchgBIAIoCSIiCgxTQ1ZlcmlmeUNvZGUSEgoKdmVyaWZ5Y29kZRgBIAIo", 
          "CSI3CgxDU0JpbmRNb2JpbGUSEwoLcGhvbmVudW1iZXIYASACKAkSEgoKdmVy", 
          "aWZ5Y29kZRgCIAIoCSIfCgxTQ0JpbmRNb2JpbGUSDwoHaW50ZWdhbBgBIAIo", 
          "BUIvCh1jb20uc2t5c29mdC5jb3JlLmF1dG8ubWVzc2FnZUIOQ2xpZW50UHJv", 
        "dG9jb2w="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_CSClientOpen__Descriptor = Descriptor.MessageTypes[0];
      internal__static_CSClientOpen__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSClientOpen, global::CSClientOpen.Builder>(internal__static_CSClientOpen__Descriptor,
              new string[] { "Text", });
      internal__static_CSClientClose__Descriptor = Descriptor.MessageTypes[1];
      internal__static_CSClientClose__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSClientClose, global::CSClientClose.Builder>(internal__static_CSClientClose__Descriptor,
              new string[] { });
      internal__static_CSLogon__Descriptor = Descriptor.MessageTypes[2];
      internal__static_CSLogon__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSLogon, global::CSLogon.Builder>(internal__static_CSLogon__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCLogon__Descriptor = Descriptor.MessageTypes[3];
      internal__static_SCLogon__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCLogon, global::SCLogon.Builder>(internal__static_SCLogon__Descriptor,
              new string[] { "Memberid", "Cardnumber", "Name", "Right", "Balance", "Integal", });
      internal__static_CSLogoff__Descriptor = Descriptor.MessageTypes[4];
      internal__static_CSLogoff__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSLogoff, global::CSLogoff.Builder>(internal__static_CSLogoff__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCLogoff__Descriptor = Descriptor.MessageTypes[5];
      internal__static_SCLogoff__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCLogoff, global::SCLogoff.Builder>(internal__static_SCLogoff__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Balance", "Usedmoney", "Usedtime", });
      internal__static_CSHungup__Descriptor = Descriptor.MessageTypes[6];
      internal__static_CSHungup__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSHungup, global::CSHungup.Builder>(internal__static_CSHungup__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_CSEvaluate__Descriptor = Descriptor.MessageTypes[7];
      internal__static_CSEvaluate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEvaluate, global::CSEvaluate.Builder>(internal__static_CSEvaluate__Descriptor,
              new string[] { "StaffStar", "EnvStar", "DevStar", "Eval", });
      internal__static_SCEvaluate__Descriptor = Descriptor.MessageTypes[8];
      internal__static_SCEvaluate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEvaluate, global::SCEvaluate.Builder>(internal__static_SCEvaluate__Descriptor,
              new string[] { "Integal", });
      internal__static_CSVerifyCode__Descriptor = Descriptor.MessageTypes[9];
      internal__static_CSVerifyCode__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSVerifyCode, global::CSVerifyCode.Builder>(internal__static_CSVerifyCode__Descriptor,
              new string[] { "Phonenumber", });
      internal__static_SCVerifyCode__Descriptor = Descriptor.MessageTypes[10];
      internal__static_SCVerifyCode__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCVerifyCode, global::SCVerifyCode.Builder>(internal__static_SCVerifyCode__Descriptor,
              new string[] { "Verifycode", });
      internal__static_CSBindMobile__Descriptor = Descriptor.MessageTypes[11];
      internal__static_CSBindMobile__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSBindMobile, global::CSBindMobile.Builder>(internal__static_CSBindMobile__Descriptor,
              new string[] { "Phonenumber", "Verifycode", });
      internal__static_SCBindMobile__Descriptor = Descriptor.MessageTypes[12];
      internal__static_SCBindMobile__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCBindMobile, global::SCBindMobile.Builder>(internal__static_SCBindMobile__Descriptor,
              new string[] { "Integal", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        global::BaseStruct.Descriptor, 
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSClientOpen : pb::GeneratedMessage<CSClientOpen, CSClientOpen.Builder> {
  private CSClientOpen() { }
  private static readonly CSClientOpen defaultInstance = new CSClientOpen().MakeReadOnly();
  private static readonly string[] _cSClientOpenFieldNames = new string[] { "text" };
  private static readonly uint[] _cSClientOpenFieldTags = new uint[] { 10 };
  public static CSClientOpen DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSClientOpen DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSClientOpen ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_CSClientOpen__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSClientOpen, CSClientOpen.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_CSClientOpen__FieldAccessorTable; }
  }
  
  public const int TextFieldNumber = 1;
  private bool hasText;
  private string text_ = "";
  public bool HasText {
    get { return hasText; }
  }
  public string Text {
    get { return text_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasText) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSClientOpenFieldNames;
    if (hasText) {
      output.WriteString(1, field_names[0], Text);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasText) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Text);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSClientOpen ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSClientOpen ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSClientOpen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSClientOpen ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSClientOpen MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSClientOpen prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSClientOpen, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSClientOpen cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSClientOpen result;
    
    private CSClientOpen PrepareBuilder() {
      if (resultIsReadOnly) {
        CSClientOpen original = result;
        result = new CSClientOpen();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSClientOpen MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSClientOpen.Descriptor; }
    }
    
    public override CSClientOpen DefaultInstanceForType {
      get { return global::CSClientOpen.DefaultInstance; }
    }
    
    public override CSClientOpen BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSClientOpen) {
        return MergeFrom((CSClientOpen) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSClientOpen other) {
      if (other == global::CSClientOpen.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasText) {
        Text = other.Text;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSClientOpenFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSClientOpenFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasText = input.ReadString(ref result.text_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasText {
      get { return result.hasText; }
    }
    public string Text {
      get { return result.Text; }
      set { SetText(value); }
    }
    public Builder SetText(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasText = true;
      result.text_ = value;
      return this;
    }
    public Builder ClearText() {
      PrepareBuilder();
      result.hasText = false;
      result.text_ = "";
      return this;
    }
  }
  static CSClientOpen() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSClientClose : pb::GeneratedMessage<CSClientClose, CSClientClose.Builder> {
  private CSClientClose() { }
  private static readonly CSClientClose defaultInstance = new CSClientClose().MakeReadOnly();
  private static readonly string[] _cSClientCloseFieldNames = new string[] {  };
  private static readonly uint[] _cSClientCloseFieldTags = new uint[] {  };
  public static CSClientClose DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSClientClose DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSClientClose ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_CSClientClose__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSClientClose, CSClientClose.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_CSClientClose__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSClientCloseFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSClientClose ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientClose ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientClose ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientClose ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientClose ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientClose ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSClientClose ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSClientClose ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSClientClose ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientClose ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSClientClose MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSClientClose prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSClientClose, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSClientClose cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSClientClose result;
    
    private CSClientClose PrepareBuilder() {
      if (resultIsReadOnly) {
        CSClientClose original = result;
        result = new CSClientClose();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSClientClose MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSClientClose.Descriptor; }
    }
    
    public override CSClientClose DefaultInstanceForType {
      get { return global::CSClientClose.DefaultInstance; }
    }
    
    public override CSClientClose BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSClientClose) {
        return MergeFrom((CSClientClose) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSClientClose other) {
      if (other == global::CSClientClose.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSClientCloseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSClientCloseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSClientClose() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSLogon : pb::GeneratedMessage<CSLogon, CSLogon.Builder> {
  private CSLogon() { }
  private static readonly CSLogon defaultInstance = new CSLogon().MakeReadOnly();
  private static readonly string[] _cSLogonFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSLogonFieldTags = new uint[] { 10 };
  public static CSLogon DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSLogon DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSLogon ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_CSLogon__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSLogon, CSLogon.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_CSLogon__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSLogonFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSLogon ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogon ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogon ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogon ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogon ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogon ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSLogon ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSLogon ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSLogon ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogon ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSLogon MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSLogon prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSLogon, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSLogon cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSLogon result;
    
    private CSLogon PrepareBuilder() {
      if (resultIsReadOnly) {
        CSLogon original = result;
        result = new CSLogon();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSLogon MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSLogon.Descriptor; }
    }
    
    public override CSLogon DefaultInstanceForType {
      get { return global::CSLogon.DefaultInstance; }
    }
    
    public override CSLogon BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSLogon) {
        return MergeFrom((CSLogon) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSLogon other) {
      if (other == global::CSLogon.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSLogonFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSLogonFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSLogon() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCLogon : pb::GeneratedMessage<SCLogon, SCLogon.Builder> {
  private SCLogon() { }
  private static readonly SCLogon defaultInstance = new SCLogon().MakeReadOnly();
  private static readonly string[] _sCLogonFieldNames = new string[] { "balance", "cardnumber", "integal", "memberid", "name", "right" };
  private static readonly uint[] _sCLogonFieldTags = new uint[] { 72, 18, 96, 8, 34, 40 };
  public static SCLogon DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCLogon DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCLogon ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_SCLogon__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCLogon, SCLogon.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_SCLogon__FieldAccessorTable; }
  }
  
  public const int MemberidFieldNumber = 1;
  private bool hasMemberid;
  private int memberid_;
  public bool HasMemberid {
    get { return hasMemberid; }
  }
  public int Memberid {
    get { return memberid_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int NameFieldNumber = 4;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int RightFieldNumber = 5;
  private bool hasRight;
  private int right_;
  public bool HasRight {
    get { return hasRight; }
  }
  public int Right {
    get { return right_; }
  }
  
  public const int BalanceFieldNumber = 9;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int IntegalFieldNumber = 12;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMemberid) return false;
      if (!hasCardnumber) return false;
      if (!hasName) return false;
      if (!hasRight) return false;
      if (!hasBalance) return false;
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCLogonFieldNames;
    if (hasMemberid) {
      output.WriteInt32(1, field_names[3], Memberid);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasName) {
      output.WriteString(4, field_names[4], Name);
    }
    if (hasRight) {
      output.WriteInt32(5, field_names[5], Right);
    }
    if (hasBalance) {
      output.WriteInt32(9, field_names[0], Balance);
    }
    if (hasIntegal) {
      output.WriteInt32(12, field_names[2], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMemberid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Memberid);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Name);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Right);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(9, Balance);
    }
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(12, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCLogon ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogon ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogon ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogon ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogon ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogon ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCLogon ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCLogon ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCLogon ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogon ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCLogon MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCLogon prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCLogon, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCLogon cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCLogon result;
    
    private SCLogon PrepareBuilder() {
      if (resultIsReadOnly) {
        SCLogon original = result;
        result = new SCLogon();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCLogon MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCLogon.Descriptor; }
    }
    
    public override SCLogon DefaultInstanceForType {
      get { return global::SCLogon.DefaultInstance; }
    }
    
    public override SCLogon BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCLogon) {
        return MergeFrom((SCLogon) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCLogon other) {
      if (other == global::SCLogon.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMemberid) {
        Memberid = other.Memberid;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCLogonFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCLogonFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMemberid = input.ReadInt32(ref result.memberid_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 34: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 40: {
            result.hasRight = input.ReadInt32(ref result.right_);
            break;
          }
          case 72: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 96: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMemberid {
      get { return result.hasMemberid; }
    }
    public int Memberid {
      get { return result.Memberid; }
      set { SetMemberid(value); }
    }
    public Builder SetMemberid(int value) {
      PrepareBuilder();
      result.hasMemberid = true;
      result.memberid_ = value;
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.hasMemberid = false;
      result.memberid_ = 0;
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public int Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(int value) {
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = 0;
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCLogon() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSLogoff : pb::GeneratedMessage<CSLogoff, CSLogoff.Builder> {
  private CSLogoff() { }
  private static readonly CSLogoff defaultInstance = new CSLogoff().MakeReadOnly();
  private static readonly string[] _cSLogoffFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSLogoffFieldTags = new uint[] { 10 };
  public static CSLogoff DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSLogoff DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSLogoff ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_CSLogoff__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSLogoff, CSLogoff.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_CSLogoff__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSLogoffFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSLogoff ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogoff ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogoff ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogoff ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogoff ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogoff ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSLogoff ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSLogoff ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSLogoff ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogoff ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSLogoff MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSLogoff prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSLogoff, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSLogoff cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSLogoff result;
    
    private CSLogoff PrepareBuilder() {
      if (resultIsReadOnly) {
        CSLogoff original = result;
        result = new CSLogoff();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSLogoff MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSLogoff.Descriptor; }
    }
    
    public override CSLogoff DefaultInstanceForType {
      get { return global::CSLogoff.DefaultInstance; }
    }
    
    public override CSLogoff BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSLogoff) {
        return MergeFrom((CSLogoff) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSLogoff other) {
      if (other == global::CSLogoff.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSLogoffFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSLogoffFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSLogoff() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCLogoff : pb::GeneratedMessage<SCLogoff, SCLogoff.Builder> {
  private SCLogoff() { }
  private static readonly SCLogoff defaultInstance = new SCLogoff().MakeReadOnly();
  private static readonly string[] _sCLogoffFieldNames = new string[] { "balance", "cardnumber", "name", "right", "usedmoney", "usedtime" };
  private static readonly uint[] _sCLogoffFieldTags = new uint[] { 32, 18, 10, 26, 40, 48 };
  public static SCLogoff DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCLogoff DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCLogoff ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_SCLogoff__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCLogoff, SCLogoff.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_SCLogoff__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int BalanceFieldNumber = 4;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int UsedmoneyFieldNumber = 5;
  private bool hasUsedmoney;
  private int usedmoney_;
  public bool HasUsedmoney {
    get { return hasUsedmoney; }
  }
  public int Usedmoney {
    get { return usedmoney_; }
  }
  
  public const int UsedtimeFieldNumber = 6;
  private bool hasUsedtime;
  private int usedtime_;
  public bool HasUsedtime {
    get { return hasUsedtime; }
  }
  public int Usedtime {
    get { return usedtime_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasBalance) return false;
      if (!hasUsedmoney) return false;
      if (!hasUsedtime) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCLogoffFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[2], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[3], Right);
    }
    if (hasBalance) {
      output.WriteInt32(4, field_names[0], Balance);
    }
    if (hasUsedmoney) {
      output.WriteInt32(5, field_names[4], Usedmoney);
    }
    if (hasUsedtime) {
      output.WriteInt32(6, field_names[5], Usedtime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Balance);
    }
    if (hasUsedmoney) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Usedmoney);
    }
    if (hasUsedtime) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Usedtime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCLogoff ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogoff ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogoff ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogoff ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogoff ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogoff ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCLogoff ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCLogoff ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCLogoff ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogoff ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCLogoff MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCLogoff prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCLogoff, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCLogoff cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCLogoff result;
    
    private SCLogoff PrepareBuilder() {
      if (resultIsReadOnly) {
        SCLogoff original = result;
        result = new SCLogoff();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCLogoff MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCLogoff.Descriptor; }
    }
    
    public override SCLogoff DefaultInstanceForType {
      get { return global::SCLogoff.DefaultInstance; }
    }
    
    public override SCLogoff BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCLogoff) {
        return MergeFrom((SCLogoff) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCLogoff other) {
      if (other == global::SCLogoff.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasUsedmoney) {
        Usedmoney = other.Usedmoney;
      }
      if (other.HasUsedtime) {
        Usedtime = other.Usedtime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCLogoffFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCLogoffFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 40: {
            result.hasUsedmoney = input.ReadInt32(ref result.usedmoney_);
            break;
          }
          case 48: {
            result.hasUsedtime = input.ReadInt32(ref result.usedtime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasUsedmoney {
      get { return result.hasUsedmoney; }
    }
    public int Usedmoney {
      get { return result.Usedmoney; }
      set { SetUsedmoney(value); }
    }
    public Builder SetUsedmoney(int value) {
      PrepareBuilder();
      result.hasUsedmoney = true;
      result.usedmoney_ = value;
      return this;
    }
    public Builder ClearUsedmoney() {
      PrepareBuilder();
      result.hasUsedmoney = false;
      result.usedmoney_ = 0;
      return this;
    }
    
    public bool HasUsedtime {
      get { return result.hasUsedtime; }
    }
    public int Usedtime {
      get { return result.Usedtime; }
      set { SetUsedtime(value); }
    }
    public Builder SetUsedtime(int value) {
      PrepareBuilder();
      result.hasUsedtime = true;
      result.usedtime_ = value;
      return this;
    }
    public Builder ClearUsedtime() {
      PrepareBuilder();
      result.hasUsedtime = false;
      result.usedtime_ = 0;
      return this;
    }
  }
  static SCLogoff() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSHungup : pb::GeneratedMessage<CSHungup, CSHungup.Builder> {
  private CSHungup() { }
  private static readonly CSHungup defaultInstance = new CSHungup().MakeReadOnly();
  private static readonly string[] _cSHungupFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSHungupFieldTags = new uint[] { 10 };
  public static CSHungup DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSHungup DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSHungup ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_CSHungup__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSHungup, CSHungup.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_CSHungup__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSHungupFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSHungup ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSHungup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSHungup ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSHungup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSHungup ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSHungup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSHungup ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSHungup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSHungup ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSHungup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSHungup MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSHungup prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSHungup, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSHungup cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSHungup result;
    
    private CSHungup PrepareBuilder() {
      if (resultIsReadOnly) {
        CSHungup original = result;
        result = new CSHungup();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSHungup MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSHungup.Descriptor; }
    }
    
    public override CSHungup DefaultInstanceForType {
      get { return global::CSHungup.DefaultInstance; }
    }
    
    public override CSHungup BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSHungup) {
        return MergeFrom((CSHungup) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSHungup other) {
      if (other == global::CSHungup.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSHungupFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSHungupFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSHungup() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEvaluate : pb::GeneratedMessage<CSEvaluate, CSEvaluate.Builder> {
  private CSEvaluate() { }
  private static readonly CSEvaluate defaultInstance = new CSEvaluate().MakeReadOnly();
  private static readonly string[] _cSEvaluateFieldNames = new string[] { "devStar", "envStar", "eval", "staffStar" };
  private static readonly uint[] _cSEvaluateFieldTags = new uint[] { 24, 16, 34, 8 };
  public static CSEvaluate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEvaluate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEvaluate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_CSEvaluate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEvaluate, CSEvaluate.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_CSEvaluate__FieldAccessorTable; }
  }
  
  public const int StaffStarFieldNumber = 1;
  private bool hasStaffStar;
  private int staffStar_;
  public bool HasStaffStar {
    get { return hasStaffStar; }
  }
  public int StaffStar {
    get { return staffStar_; }
  }
  
  public const int EnvStarFieldNumber = 2;
  private bool hasEnvStar;
  private int envStar_;
  public bool HasEnvStar {
    get { return hasEnvStar; }
  }
  public int EnvStar {
    get { return envStar_; }
  }
  
  public const int DevStarFieldNumber = 3;
  private bool hasDevStar;
  private int devStar_;
  public bool HasDevStar {
    get { return hasDevStar; }
  }
  public int DevStar {
    get { return devStar_; }
  }
  
  public const int EvalFieldNumber = 4;
  private bool hasEval;
  private string eval_ = "";
  public bool HasEval {
    get { return hasEval; }
  }
  public string Eval {
    get { return eval_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasStaffStar) return false;
      if (!hasEnvStar) return false;
      if (!hasDevStar) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEvaluateFieldNames;
    if (hasStaffStar) {
      output.WriteInt32(1, field_names[3], StaffStar);
    }
    if (hasEnvStar) {
      output.WriteInt32(2, field_names[1], EnvStar);
    }
    if (hasDevStar) {
      output.WriteInt32(3, field_names[0], DevStar);
    }
    if (hasEval) {
      output.WriteString(4, field_names[2], Eval);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStaffStar) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, StaffStar);
    }
    if (hasEnvStar) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, EnvStar);
    }
    if (hasDevStar) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, DevStar);
    }
    if (hasEval) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Eval);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEvaluate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEvaluate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEvaluate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEvaluate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEvaluate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEvaluate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEvaluate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEvaluate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEvaluate result;
    
    private CSEvaluate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEvaluate original = result;
        result = new CSEvaluate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEvaluate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEvaluate.Descriptor; }
    }
    
    public override CSEvaluate DefaultInstanceForType {
      get { return global::CSEvaluate.DefaultInstance; }
    }
    
    public override CSEvaluate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEvaluate) {
        return MergeFrom((CSEvaluate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEvaluate other) {
      if (other == global::CSEvaluate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStaffStar) {
        StaffStar = other.StaffStar;
      }
      if (other.HasEnvStar) {
        EnvStar = other.EnvStar;
      }
      if (other.HasDevStar) {
        DevStar = other.DevStar;
      }
      if (other.HasEval) {
        Eval = other.Eval;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEvaluateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEvaluateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasStaffStar = input.ReadInt32(ref result.staffStar_);
            break;
          }
          case 16: {
            result.hasEnvStar = input.ReadInt32(ref result.envStar_);
            break;
          }
          case 24: {
            result.hasDevStar = input.ReadInt32(ref result.devStar_);
            break;
          }
          case 34: {
            result.hasEval = input.ReadString(ref result.eval_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStaffStar {
      get { return result.hasStaffStar; }
    }
    public int StaffStar {
      get { return result.StaffStar; }
      set { SetStaffStar(value); }
    }
    public Builder SetStaffStar(int value) {
      PrepareBuilder();
      result.hasStaffStar = true;
      result.staffStar_ = value;
      return this;
    }
    public Builder ClearStaffStar() {
      PrepareBuilder();
      result.hasStaffStar = false;
      result.staffStar_ = 0;
      return this;
    }
    
    public bool HasEnvStar {
      get { return result.hasEnvStar; }
    }
    public int EnvStar {
      get { return result.EnvStar; }
      set { SetEnvStar(value); }
    }
    public Builder SetEnvStar(int value) {
      PrepareBuilder();
      result.hasEnvStar = true;
      result.envStar_ = value;
      return this;
    }
    public Builder ClearEnvStar() {
      PrepareBuilder();
      result.hasEnvStar = false;
      result.envStar_ = 0;
      return this;
    }
    
    public bool HasDevStar {
      get { return result.hasDevStar; }
    }
    public int DevStar {
      get { return result.DevStar; }
      set { SetDevStar(value); }
    }
    public Builder SetDevStar(int value) {
      PrepareBuilder();
      result.hasDevStar = true;
      result.devStar_ = value;
      return this;
    }
    public Builder ClearDevStar() {
      PrepareBuilder();
      result.hasDevStar = false;
      result.devStar_ = 0;
      return this;
    }
    
    public bool HasEval {
      get { return result.hasEval; }
    }
    public string Eval {
      get { return result.Eval; }
      set { SetEval(value); }
    }
    public Builder SetEval(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEval = true;
      result.eval_ = value;
      return this;
    }
    public Builder ClearEval() {
      PrepareBuilder();
      result.hasEval = false;
      result.eval_ = "";
      return this;
    }
  }
  static CSEvaluate() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEvaluate : pb::GeneratedMessage<SCEvaluate, SCEvaluate.Builder> {
  private SCEvaluate() { }
  private static readonly SCEvaluate defaultInstance = new SCEvaluate().MakeReadOnly();
  private static readonly string[] _sCEvaluateFieldNames = new string[] { "integal" };
  private static readonly uint[] _sCEvaluateFieldTags = new uint[] { 8 };
  public static SCEvaluate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEvaluate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEvaluate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_SCEvaluate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEvaluate, SCEvaluate.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_SCEvaluate__FieldAccessorTable; }
  }
  
  public const int IntegalFieldNumber = 1;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEvaluateFieldNames;
    if (hasIntegal) {
      output.WriteInt32(1, field_names[0], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEvaluate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEvaluate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEvaluate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEvaluate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEvaluate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEvaluate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEvaluate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEvaluate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEvaluate result;
    
    private SCEvaluate PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEvaluate original = result;
        result = new SCEvaluate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEvaluate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEvaluate.Descriptor; }
    }
    
    public override SCEvaluate DefaultInstanceForType {
      get { return global::SCEvaluate.DefaultInstance; }
    }
    
    public override SCEvaluate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEvaluate) {
        return MergeFrom((SCEvaluate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEvaluate other) {
      if (other == global::SCEvaluate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEvaluateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEvaluateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCEvaluate() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSVerifyCode : pb::GeneratedMessage<CSVerifyCode, CSVerifyCode.Builder> {
  private CSVerifyCode() { }
  private static readonly CSVerifyCode defaultInstance = new CSVerifyCode().MakeReadOnly();
  private static readonly string[] _cSVerifyCodeFieldNames = new string[] { "phonenumber" };
  private static readonly uint[] _cSVerifyCodeFieldTags = new uint[] { 10 };
  public static CSVerifyCode DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSVerifyCode DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSVerifyCode ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_CSVerifyCode__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSVerifyCode, CSVerifyCode.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_CSVerifyCode__FieldAccessorTable; }
  }
  
  public const int PhonenumberFieldNumber = 1;
  private bool hasPhonenumber;
  private string phonenumber_ = "";
  public bool HasPhonenumber {
    get { return hasPhonenumber; }
  }
  public string Phonenumber {
    get { return phonenumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPhonenumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSVerifyCodeFieldNames;
    if (hasPhonenumber) {
      output.WriteString(1, field_names[0], Phonenumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPhonenumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Phonenumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSVerifyCode ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSVerifyCode ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSVerifyCode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSVerifyCode MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSVerifyCode prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSVerifyCode, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSVerifyCode cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSVerifyCode result;
    
    private CSVerifyCode PrepareBuilder() {
      if (resultIsReadOnly) {
        CSVerifyCode original = result;
        result = new CSVerifyCode();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSVerifyCode MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSVerifyCode.Descriptor; }
    }
    
    public override CSVerifyCode DefaultInstanceForType {
      get { return global::CSVerifyCode.DefaultInstance; }
    }
    
    public override CSVerifyCode BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSVerifyCode) {
        return MergeFrom((CSVerifyCode) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSVerifyCode other) {
      if (other == global::CSVerifyCode.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPhonenumber) {
        Phonenumber = other.Phonenumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSVerifyCodeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSVerifyCodeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasPhonenumber = input.ReadString(ref result.phonenumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPhonenumber {
      get { return result.hasPhonenumber; }
    }
    public string Phonenumber {
      get { return result.Phonenumber; }
      set { SetPhonenumber(value); }
    }
    public Builder SetPhonenumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPhonenumber = true;
      result.phonenumber_ = value;
      return this;
    }
    public Builder ClearPhonenumber() {
      PrepareBuilder();
      result.hasPhonenumber = false;
      result.phonenumber_ = "";
      return this;
    }
  }
  static CSVerifyCode() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCVerifyCode : pb::GeneratedMessage<SCVerifyCode, SCVerifyCode.Builder> {
  private SCVerifyCode() { }
  private static readonly SCVerifyCode defaultInstance = new SCVerifyCode().MakeReadOnly();
  private static readonly string[] _sCVerifyCodeFieldNames = new string[] { "verifycode" };
  private static readonly uint[] _sCVerifyCodeFieldTags = new uint[] { 10 };
  public static SCVerifyCode DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCVerifyCode DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCVerifyCode ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_SCVerifyCode__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCVerifyCode, SCVerifyCode.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_SCVerifyCode__FieldAccessorTable; }
  }
  
  public const int VerifycodeFieldNumber = 1;
  private bool hasVerifycode;
  private string verifycode_ = "";
  public bool HasVerifycode {
    get { return hasVerifycode; }
  }
  public string Verifycode {
    get { return verifycode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasVerifycode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCVerifyCodeFieldNames;
    if (hasVerifycode) {
      output.WriteString(1, field_names[0], Verifycode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasVerifycode) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Verifycode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCVerifyCode ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCVerifyCode ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCVerifyCode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCVerifyCode MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCVerifyCode prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCVerifyCode, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCVerifyCode cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCVerifyCode result;
    
    private SCVerifyCode PrepareBuilder() {
      if (resultIsReadOnly) {
        SCVerifyCode original = result;
        result = new SCVerifyCode();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCVerifyCode MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCVerifyCode.Descriptor; }
    }
    
    public override SCVerifyCode DefaultInstanceForType {
      get { return global::SCVerifyCode.DefaultInstance; }
    }
    
    public override SCVerifyCode BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCVerifyCode) {
        return MergeFrom((SCVerifyCode) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCVerifyCode other) {
      if (other == global::SCVerifyCode.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasVerifycode) {
        Verifycode = other.Verifycode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCVerifyCodeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCVerifyCodeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasVerifycode = input.ReadString(ref result.verifycode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasVerifycode {
      get { return result.hasVerifycode; }
    }
    public string Verifycode {
      get { return result.Verifycode; }
      set { SetVerifycode(value); }
    }
    public Builder SetVerifycode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasVerifycode = true;
      result.verifycode_ = value;
      return this;
    }
    public Builder ClearVerifycode() {
      PrepareBuilder();
      result.hasVerifycode = false;
      result.verifycode_ = "";
      return this;
    }
  }
  static SCVerifyCode() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSBindMobile : pb::GeneratedMessage<CSBindMobile, CSBindMobile.Builder> {
  private CSBindMobile() { }
  private static readonly CSBindMobile defaultInstance = new CSBindMobile().MakeReadOnly();
  private static readonly string[] _cSBindMobileFieldNames = new string[] { "phonenumber", "verifycode" };
  private static readonly uint[] _cSBindMobileFieldTags = new uint[] { 10, 18 };
  public static CSBindMobile DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSBindMobile DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSBindMobile ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_CSBindMobile__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSBindMobile, CSBindMobile.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_CSBindMobile__FieldAccessorTable; }
  }
  
  public const int PhonenumberFieldNumber = 1;
  private bool hasPhonenumber;
  private string phonenumber_ = "";
  public bool HasPhonenumber {
    get { return hasPhonenumber; }
  }
  public string Phonenumber {
    get { return phonenumber_; }
  }
  
  public const int VerifycodeFieldNumber = 2;
  private bool hasVerifycode;
  private string verifycode_ = "";
  public bool HasVerifycode {
    get { return hasVerifycode; }
  }
  public string Verifycode {
    get { return verifycode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPhonenumber) return false;
      if (!hasVerifycode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSBindMobileFieldNames;
    if (hasPhonenumber) {
      output.WriteString(1, field_names[0], Phonenumber);
    }
    if (hasVerifycode) {
      output.WriteString(2, field_names[1], Verifycode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPhonenumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Phonenumber);
    }
    if (hasVerifycode) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Verifycode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSBindMobile ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSBindMobile ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSBindMobile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSBindMobile ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSBindMobile MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSBindMobile prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSBindMobile, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSBindMobile cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSBindMobile result;
    
    private CSBindMobile PrepareBuilder() {
      if (resultIsReadOnly) {
        CSBindMobile original = result;
        result = new CSBindMobile();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSBindMobile MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSBindMobile.Descriptor; }
    }
    
    public override CSBindMobile DefaultInstanceForType {
      get { return global::CSBindMobile.DefaultInstance; }
    }
    
    public override CSBindMobile BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSBindMobile) {
        return MergeFrom((CSBindMobile) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSBindMobile other) {
      if (other == global::CSBindMobile.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPhonenumber) {
        Phonenumber = other.Phonenumber;
      }
      if (other.HasVerifycode) {
        Verifycode = other.Verifycode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSBindMobileFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSBindMobileFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasPhonenumber = input.ReadString(ref result.phonenumber_);
            break;
          }
          case 18: {
            result.hasVerifycode = input.ReadString(ref result.verifycode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPhonenumber {
      get { return result.hasPhonenumber; }
    }
    public string Phonenumber {
      get { return result.Phonenumber; }
      set { SetPhonenumber(value); }
    }
    public Builder SetPhonenumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPhonenumber = true;
      result.phonenumber_ = value;
      return this;
    }
    public Builder ClearPhonenumber() {
      PrepareBuilder();
      result.hasPhonenumber = false;
      result.phonenumber_ = "";
      return this;
    }
    
    public bool HasVerifycode {
      get { return result.hasVerifycode; }
    }
    public string Verifycode {
      get { return result.Verifycode; }
      set { SetVerifycode(value); }
    }
    public Builder SetVerifycode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasVerifycode = true;
      result.verifycode_ = value;
      return this;
    }
    public Builder ClearVerifycode() {
      PrepareBuilder();
      result.hasVerifycode = false;
      result.verifycode_ = "";
      return this;
    }
  }
  static CSBindMobile() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCBindMobile : pb::GeneratedMessage<SCBindMobile, SCBindMobile.Builder> {
  private SCBindMobile() { }
  private static readonly SCBindMobile defaultInstance = new SCBindMobile().MakeReadOnly();
  private static readonly string[] _sCBindMobileFieldNames = new string[] { "integal" };
  private static readonly uint[] _sCBindMobileFieldTags = new uint[] { 8 };
  public static SCBindMobile DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCBindMobile DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCBindMobile ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Client.internal__static_SCBindMobile__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCBindMobile, SCBindMobile.Builder> InternalFieldAccessors {
    get { return global::Client.internal__static_SCBindMobile__FieldAccessorTable; }
  }
  
  public const int IntegalFieldNumber = 1;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCBindMobileFieldNames;
    if (hasIntegal) {
      output.WriteInt32(1, field_names[0], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCBindMobile ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCBindMobile ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCBindMobile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCBindMobile ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCBindMobile MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCBindMobile prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCBindMobile, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCBindMobile cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCBindMobile result;
    
    private SCBindMobile PrepareBuilder() {
      if (resultIsReadOnly) {
        SCBindMobile original = result;
        result = new SCBindMobile();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCBindMobile MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCBindMobile.Descriptor; }
    }
    
    public override SCBindMobile DefaultInstanceForType {
      get { return global::SCBindMobile.DefaultInstance; }
    }
    
    public override SCBindMobile BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCBindMobile) {
        return MergeFrom((SCBindMobile) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCBindMobile other) {
      if (other == global::SCBindMobile.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCBindMobileFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCBindMobileFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCBindMobile() {
    object.ReferenceEquals(global::Client.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
