// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Embark {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_CSEmkUserInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkUserInfo, global::CSEmkUserInfo.Builder> internal__static_CSEmkUserInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmkUserInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmkUserInfo, global::SCEmkUserInfo.Builder> internal__static_SCEmkUserInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkAddCardInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkAddCardInfo, global::CSEmkAddCardInfo.Builder> internal__static_CSEmkAddCardInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkAddFingerInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkAddFingerInfo, global::CSEmkAddFingerInfo.Builder> internal__static_CSEmkAddFingerInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkApplyMember__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkApplyMember, global::CSEmkApplyMember.Builder> internal__static_CSEmkApplyMember__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmkApplyMember__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmkApplyMember, global::SCEmkApplyMember.Builder> internal__static_SCEmkApplyMember__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkCharge__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkCharge, global::CSEmkCharge.Builder> internal__static_CSEmkCharge__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmkCharge__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmkCharge, global::SCEmkCharge.Builder> internal__static_SCEmkCharge__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkCheckin__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkCheckin, global::CSEmkCheckin.Builder> internal__static_CSEmkCheckin__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmkCheckin__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmkCheckin, global::SCEmkCheckin.Builder> internal__static_SCEmkCheckin__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkCheckout__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkCheckout, global::CSEmkCheckout.Builder> internal__static_CSEmkCheckout__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmkCheckout__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmkCheckout, global::SCEmkCheckout.Builder> internal__static_SCEmkCheckout__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkFingerInput__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkFingerInput, global::CSEmkFingerInput.Builder> internal__static_CSEmkFingerInput__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmkFingerBind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmkFingerBind, global::SCEmkFingerBind.Builder> internal__static_SCEmkFingerBind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkCancel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkCancel, global::CSEmkCancel.Builder> internal__static_CSEmkCancel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmkVerifyList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmkVerifyList, global::SCEmkVerifyList.Builder> internal__static_SCEmkVerifyList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkVerifyProc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkVerifyProc, global::CSEmkVerifyProc.Builder> internal__static_CSEmkVerifyProc__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmkOrderList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmkOrderList, global::SCEmkOrderList.Builder> internal__static_SCEmkOrderList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkOrderProc__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkOrderProc, global::CSEmkOrderProc.Builder> internal__static_CSEmkOrderProc__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static Embark() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxFbWJhcmsucHJvdG8aEEJhc2VTdHJ1Y3QucHJvdG8iNwoNQ1NFbWtVc2Vy", 
          "SW5mbxISCgpjYXJkbnVtYmVyGAEgASgJEhIKCmZpbmdlcmNvZGUYAiABKAki", 
          "TwoNU0NFbWtVc2VySW5mbxIfCgdhY2NvdW50GAEgASgLMg4uU3RydWN0QWNj", 
          "b3VudBIdCgZtZW1iZXIYAiABKAsyDS5TdHJ1Y3RNZW1iZXIiLQoQQ1NFbWtB", 
          "ZGRDYXJkSW5mbxIZCgRjYXJkGAEgAigLMgsuU3RydWN0Q2FyZCI9ChJDU0Vt", 
          "a0FkZEZpbmdlckluZm8SEgoKY2FyZG51bWJlchgBIAIoCRITCgtmaW5nZXJj", 
          "b2RlcxgCIAMoCSI3ChBDU0Vta0FwcGx5TWVtYmVyEhIKCmNhcmRudW1iZXIY", 
          "ASACKAkSDwoHY2hhbm5lbBgCIAIoBSJ3ChBTQ0Vta0FwcGx5TWVtYmVyEgwK", 
          "BG5hbWUYASACKAkSEgoKY2FyZG51bWJlchgCIAIoCRINCgVyaWdodBgDIAIo", 
          "CRIQCghyZWNoYXJnZRgEIAIoBRIPCgdiYWxhbmNlGAUgAigFEg8KB2ludGVn", 
          "YWwYBiACKAUiIQoLQ1NFbWtDaGFyZ2USEgoKY2FyZG51bWJlchgBIAIoCSJP", 
          "CgtTQ0Vta0NoYXJnZRIMCgRuYW1lGAEgAigJEhIKCmNhcmRudW1iZXIYAiAC", 
          "KAkSDQoFcmlnaHQYAyACKAkSDwoHYmFsYW5jZRgEIAIoBSIiCgxDU0Vta0No", 
          "ZWNraW4SEgoKY2FyZG51bWJlchgBIAIoCSJQCgxTQ0Vta0NoZWNraW4SDAoE", 
          "bmFtZRgBIAIoCRISCgpjYXJkbnVtYmVyGAIgAigJEg0KBXJpZ2h0GAMgAigJ", 
          "Eg8KB2JhbGFuY2UYBCACKAUiIwoNQ1NFbWtDaGVja291dBISCgpjYXJkbnVt", 
          "YmVyGAEgAigJInYKDVNDRW1rQ2hlY2tvdXQSDAoEbmFtZRgBIAIoCRISCgpj", 
          "YXJkbnVtYmVyGAIgAigJEg0KBXJpZ2h0GAMgAigJEg8KB2JhbGFuY2UYBCAC", 
          "KAUSEQoJdXNlZG1vbmV5GAUgAigFEhAKCHVzZWR0aW1lGAYgAigFIiYKEENT", 
          "RW1rRmluZ2VySW5wdXQSEgoKY2FyZG51bWJlchgBIAIoCSIRCg9TQ0Vta0Zp", 
          "bmdlckJpbmQiIQoLQ1NFbWtDYW5jZWwSEgoKY2FyZG51bWJlchgBIAIoCSI5", 
          "Cg9TQ0Vta1ZlcmlmeUxpc3QSJgoLdmVyaWZ5aW5mb3MYASADKAsyES5TdHJ1", 
          "Y3RWZXJpZnlJbmZvIjkKD0NTRW1rVmVyaWZ5UHJvYxISCgpjYXJkbnVtYmVy", 
          "GAEgAigJEhIKCmZpbmdlcmNvZGUYAiACKAkiNgoOU0NFbWtPcmRlckxpc3QS", 
          "JAoKb3JkZXJJbmZvcxgBIAMoCzIQLlN0cnVjdE9yZGVySW5mbyI1Cg5DU0Vt", 
          "a09yZGVyUHJvYxIPCgdvcmRlcmlkGAEgAigFEhIKCmZpbmdlcmNvZGUYAiAC", 
          "KAlCLwodY29tLnNreXNvZnQuY29yZS5hdXRvLm1lc3NhZ2VCDkVtYmFya1By", 
        "b3RvY29s"));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_CSEmkUserInfo__Descriptor = Descriptor.MessageTypes[0];
      internal__static_CSEmkUserInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkUserInfo, global::CSEmkUserInfo.Builder>(internal__static_CSEmkUserInfo__Descriptor,
              new string[] { "Cardnumber", "Fingercode", });
      internal__static_SCEmkUserInfo__Descriptor = Descriptor.MessageTypes[1];
      internal__static_SCEmkUserInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmkUserInfo, global::SCEmkUserInfo.Builder>(internal__static_SCEmkUserInfo__Descriptor,
              new string[] { "Account", "Member", });
      internal__static_CSEmkAddCardInfo__Descriptor = Descriptor.MessageTypes[2];
      internal__static_CSEmkAddCardInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkAddCardInfo, global::CSEmkAddCardInfo.Builder>(internal__static_CSEmkAddCardInfo__Descriptor,
              new string[] { "Card", });
      internal__static_CSEmkAddFingerInfo__Descriptor = Descriptor.MessageTypes[3];
      internal__static_CSEmkAddFingerInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkAddFingerInfo, global::CSEmkAddFingerInfo.Builder>(internal__static_CSEmkAddFingerInfo__Descriptor,
              new string[] { "Cardnumber", "Fingercodes", });
      internal__static_CSEmkApplyMember__Descriptor = Descriptor.MessageTypes[4];
      internal__static_CSEmkApplyMember__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkApplyMember, global::CSEmkApplyMember.Builder>(internal__static_CSEmkApplyMember__Descriptor,
              new string[] { "Cardnumber", "Channel", });
      internal__static_SCEmkApplyMember__Descriptor = Descriptor.MessageTypes[5];
      internal__static_SCEmkApplyMember__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmkApplyMember, global::SCEmkApplyMember.Builder>(internal__static_SCEmkApplyMember__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Recharge", "Balance", "Integal", });
      internal__static_CSEmkCharge__Descriptor = Descriptor.MessageTypes[6];
      internal__static_CSEmkCharge__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkCharge, global::CSEmkCharge.Builder>(internal__static_CSEmkCharge__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCEmkCharge__Descriptor = Descriptor.MessageTypes[7];
      internal__static_SCEmkCharge__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmkCharge, global::SCEmkCharge.Builder>(internal__static_SCEmkCharge__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Balance", });
      internal__static_CSEmkCheckin__Descriptor = Descriptor.MessageTypes[8];
      internal__static_CSEmkCheckin__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkCheckin, global::CSEmkCheckin.Builder>(internal__static_CSEmkCheckin__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCEmkCheckin__Descriptor = Descriptor.MessageTypes[9];
      internal__static_SCEmkCheckin__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmkCheckin, global::SCEmkCheckin.Builder>(internal__static_SCEmkCheckin__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Balance", });
      internal__static_CSEmkCheckout__Descriptor = Descriptor.MessageTypes[10];
      internal__static_CSEmkCheckout__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkCheckout, global::CSEmkCheckout.Builder>(internal__static_CSEmkCheckout__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCEmkCheckout__Descriptor = Descriptor.MessageTypes[11];
      internal__static_SCEmkCheckout__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmkCheckout, global::SCEmkCheckout.Builder>(internal__static_SCEmkCheckout__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Balance", "Usedmoney", "Usedtime", });
      internal__static_CSEmkFingerInput__Descriptor = Descriptor.MessageTypes[12];
      internal__static_CSEmkFingerInput__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkFingerInput, global::CSEmkFingerInput.Builder>(internal__static_CSEmkFingerInput__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCEmkFingerBind__Descriptor = Descriptor.MessageTypes[13];
      internal__static_SCEmkFingerBind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmkFingerBind, global::SCEmkFingerBind.Builder>(internal__static_SCEmkFingerBind__Descriptor,
              new string[] { });
      internal__static_CSEmkCancel__Descriptor = Descriptor.MessageTypes[14];
      internal__static_CSEmkCancel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkCancel, global::CSEmkCancel.Builder>(internal__static_CSEmkCancel__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCEmkVerifyList__Descriptor = Descriptor.MessageTypes[15];
      internal__static_SCEmkVerifyList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmkVerifyList, global::SCEmkVerifyList.Builder>(internal__static_SCEmkVerifyList__Descriptor,
              new string[] { "Verifyinfos", });
      internal__static_CSEmkVerifyProc__Descriptor = Descriptor.MessageTypes[16];
      internal__static_CSEmkVerifyProc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkVerifyProc, global::CSEmkVerifyProc.Builder>(internal__static_CSEmkVerifyProc__Descriptor,
              new string[] { "Cardnumber", "Fingercode", });
      internal__static_SCEmkOrderList__Descriptor = Descriptor.MessageTypes[17];
      internal__static_SCEmkOrderList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmkOrderList, global::SCEmkOrderList.Builder>(internal__static_SCEmkOrderList__Descriptor,
              new string[] { "OrderInfos", });
      internal__static_CSEmkOrderProc__Descriptor = Descriptor.MessageTypes[18];
      internal__static_CSEmkOrderProc__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkOrderProc, global::CSEmkOrderProc.Builder>(internal__static_CSEmkOrderProc__Descriptor,
              new string[] { "Orderid", "Fingercode", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        global::BaseStruct.Descriptor, 
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkUserInfo : pb::GeneratedMessage<CSEmkUserInfo, CSEmkUserInfo.Builder> {
  private CSEmkUserInfo() { }
  private static readonly CSEmkUserInfo defaultInstance = new CSEmkUserInfo().MakeReadOnly();
  private static readonly string[] _cSEmkUserInfoFieldNames = new string[] { "cardnumber", "fingercode" };
  private static readonly uint[] _cSEmkUserInfoFieldTags = new uint[] { 10, 18 };
  public static CSEmkUserInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkUserInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkUserInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_CSEmkUserInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkUserInfo, CSEmkUserInfo.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_CSEmkUserInfo__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int FingercodeFieldNumber = 2;
  private bool hasFingercode;
  private string fingercode_ = "";
  public bool HasFingercode {
    get { return hasFingercode; }
  }
  public string Fingercode {
    get { return fingercode_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkUserInfoFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    if (hasFingercode) {
      output.WriteString(2, field_names[1], Fingercode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    if (hasFingercode) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Fingercode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkUserInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkUserInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkUserInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkUserInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkUserInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkUserInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkUserInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkUserInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkUserInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkUserInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkUserInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkUserInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkUserInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkUserInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkUserInfo result;
    
    private CSEmkUserInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkUserInfo original = result;
        result = new CSEmkUserInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkUserInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkUserInfo.Descriptor; }
    }
    
    public override CSEmkUserInfo DefaultInstanceForType {
      get { return global::CSEmkUserInfo.DefaultInstance; }
    }
    
    public override CSEmkUserInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkUserInfo) {
        return MergeFrom((CSEmkUserInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkUserInfo other) {
      if (other == global::CSEmkUserInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasFingercode) {
        Fingercode = other.Fingercode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkUserInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkUserInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 18: {
            result.hasFingercode = input.ReadString(ref result.fingercode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasFingercode {
      get { return result.hasFingercode; }
    }
    public string Fingercode {
      get { return result.Fingercode; }
      set { SetFingercode(value); }
    }
    public Builder SetFingercode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFingercode = true;
      result.fingercode_ = value;
      return this;
    }
    public Builder ClearFingercode() {
      PrepareBuilder();
      result.hasFingercode = false;
      result.fingercode_ = "";
      return this;
    }
  }
  static CSEmkUserInfo() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmkUserInfo : pb::GeneratedMessage<SCEmkUserInfo, SCEmkUserInfo.Builder> {
  private SCEmkUserInfo() { }
  private static readonly SCEmkUserInfo defaultInstance = new SCEmkUserInfo().MakeReadOnly();
  private static readonly string[] _sCEmkUserInfoFieldNames = new string[] { "account", "member" };
  private static readonly uint[] _sCEmkUserInfoFieldTags = new uint[] { 10, 18 };
  public static SCEmkUserInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmkUserInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmkUserInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_SCEmkUserInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmkUserInfo, SCEmkUserInfo.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_SCEmkUserInfo__FieldAccessorTable; }
  }
  
  public const int AccountFieldNumber = 1;
  private bool hasAccount;
  private global::StructAccount account_;
  public bool HasAccount {
    get { return hasAccount; }
  }
  public global::StructAccount Account {
    get { return account_ ?? global::StructAccount.DefaultInstance; }
  }
  
  public const int MemberFieldNumber = 2;
  private bool hasMember;
  private global::StructMember member_;
  public bool HasMember {
    get { return hasMember; }
  }
  public global::StructMember Member {
    get { return member_ ?? global::StructMember.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (HasAccount) {
        if (!Account.IsInitialized) return false;
      }
      if (HasMember) {
        if (!Member.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmkUserInfoFieldNames;
    if (hasAccount) {
      output.WriteMessage(1, field_names[0], Account);
    }
    if (hasMember) {
      output.WriteMessage(2, field_names[1], Member);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAccount) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Account);
    }
    if (hasMember) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Member);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmkUserInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkUserInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkUserInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkUserInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkUserInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkUserInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmkUserInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmkUserInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmkUserInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkUserInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmkUserInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmkUserInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmkUserInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmkUserInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmkUserInfo result;
    
    private SCEmkUserInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmkUserInfo original = result;
        result = new SCEmkUserInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmkUserInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmkUserInfo.Descriptor; }
    }
    
    public override SCEmkUserInfo DefaultInstanceForType {
      get { return global::SCEmkUserInfo.DefaultInstance; }
    }
    
    public override SCEmkUserInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmkUserInfo) {
        return MergeFrom((SCEmkUserInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmkUserInfo other) {
      if (other == global::SCEmkUserInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccount) {
        MergeAccount(other.Account);
      }
      if (other.HasMember) {
        MergeMember(other.Member);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmkUserInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmkUserInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructAccount.Builder subBuilder = global::StructAccount.CreateBuilder();
            if (result.hasAccount) {
              subBuilder.MergeFrom(Account);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Account = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::StructMember.Builder subBuilder = global::StructMember.CreateBuilder();
            if (result.hasMember) {
              subBuilder.MergeFrom(Member);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Member = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccount {
     get { return result.hasAccount; }
    }
    public global::StructAccount Account {
      get { return result.Account; }
      set { SetAccount(value); }
    }
    public Builder SetAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = value;
      return this;
    }
    public Builder SetAccount(global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = builderForValue.Build();
      return this;
    }
    public Builder MergeAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasAccount &&
          result.account_ != global::StructAccount.DefaultInstance) {
          result.account_ = global::StructAccount.CreateBuilder(result.account_).MergeFrom(value).BuildPartial();
      } else {
        result.account_ = value;
      }
      result.hasAccount = true;
      return this;
    }
    public Builder ClearAccount() {
      PrepareBuilder();
      result.hasAccount = false;
      result.account_ = null;
      return this;
    }
    
    public bool HasMember {
     get { return result.hasMember; }
    }
    public global::StructMember Member {
      get { return result.Member; }
      set { SetMember(value); }
    }
    public Builder SetMember(global::StructMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMember = true;
      result.member_ = value;
      return this;
    }
    public Builder SetMember(global::StructMember.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMember = true;
      result.member_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMember(global::StructMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMember &&
          result.member_ != global::StructMember.DefaultInstance) {
          result.member_ = global::StructMember.CreateBuilder(result.member_).MergeFrom(value).BuildPartial();
      } else {
        result.member_ = value;
      }
      result.hasMember = true;
      return this;
    }
    public Builder ClearMember() {
      PrepareBuilder();
      result.hasMember = false;
      result.member_ = null;
      return this;
    }
  }
  static SCEmkUserInfo() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkAddCardInfo : pb::GeneratedMessage<CSEmkAddCardInfo, CSEmkAddCardInfo.Builder> {
  private CSEmkAddCardInfo() { }
  private static readonly CSEmkAddCardInfo defaultInstance = new CSEmkAddCardInfo().MakeReadOnly();
  private static readonly string[] _cSEmkAddCardInfoFieldNames = new string[] { "card" };
  private static readonly uint[] _cSEmkAddCardInfoFieldTags = new uint[] { 10 };
  public static CSEmkAddCardInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkAddCardInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkAddCardInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_CSEmkAddCardInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkAddCardInfo, CSEmkAddCardInfo.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_CSEmkAddCardInfo__FieldAccessorTable; }
  }
  
  public const int CardFieldNumber = 1;
  private bool hasCard;
  private global::StructCard card_;
  public bool HasCard {
    get { return hasCard; }
  }
  public global::StructCard Card {
    get { return card_ ?? global::StructCard.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCard) return false;
      if (!Card.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkAddCardInfoFieldNames;
    if (hasCard) {
      output.WriteMessage(1, field_names[0], Card);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCard) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Card);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkAddCardInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkAddCardInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkAddCardInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkAddCardInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkAddCardInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkAddCardInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkAddCardInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkAddCardInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkAddCardInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkAddCardInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkAddCardInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkAddCardInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkAddCardInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkAddCardInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkAddCardInfo result;
    
    private CSEmkAddCardInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkAddCardInfo original = result;
        result = new CSEmkAddCardInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkAddCardInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkAddCardInfo.Descriptor; }
    }
    
    public override CSEmkAddCardInfo DefaultInstanceForType {
      get { return global::CSEmkAddCardInfo.DefaultInstance; }
    }
    
    public override CSEmkAddCardInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkAddCardInfo) {
        return MergeFrom((CSEmkAddCardInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkAddCardInfo other) {
      if (other == global::CSEmkAddCardInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCard) {
        MergeCard(other.Card);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkAddCardInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkAddCardInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructCard.Builder subBuilder = global::StructCard.CreateBuilder();
            if (result.hasCard) {
              subBuilder.MergeFrom(Card);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Card = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCard {
     get { return result.hasCard; }
    }
    public global::StructCard Card {
      get { return result.Card; }
      set { SetCard(value); }
    }
    public Builder SetCard(global::StructCard value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCard = true;
      result.card_ = value;
      return this;
    }
    public Builder SetCard(global::StructCard.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCard = true;
      result.card_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCard(global::StructCard value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCard &&
          result.card_ != global::StructCard.DefaultInstance) {
          result.card_ = global::StructCard.CreateBuilder(result.card_).MergeFrom(value).BuildPartial();
      } else {
        result.card_ = value;
      }
      result.hasCard = true;
      return this;
    }
    public Builder ClearCard() {
      PrepareBuilder();
      result.hasCard = false;
      result.card_ = null;
      return this;
    }
  }
  static CSEmkAddCardInfo() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkAddFingerInfo : pb::GeneratedMessage<CSEmkAddFingerInfo, CSEmkAddFingerInfo.Builder> {
  private CSEmkAddFingerInfo() { }
  private static readonly CSEmkAddFingerInfo defaultInstance = new CSEmkAddFingerInfo().MakeReadOnly();
  private static readonly string[] _cSEmkAddFingerInfoFieldNames = new string[] { "cardnumber", "fingercodes" };
  private static readonly uint[] _cSEmkAddFingerInfoFieldTags = new uint[] { 10, 18 };
  public static CSEmkAddFingerInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkAddFingerInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkAddFingerInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_CSEmkAddFingerInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkAddFingerInfo, CSEmkAddFingerInfo.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_CSEmkAddFingerInfo__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int FingercodesFieldNumber = 2;
  private pbc::PopsicleList<string> fingercodes_ = new pbc::PopsicleList<string>();
  public scg::IList<string> FingercodesList {
    get { return pbc::Lists.AsReadOnly(fingercodes_); }
  }
  public int FingercodesCount {
    get { return fingercodes_.Count; }
  }
  public string GetFingercodes(int index) {
    return fingercodes_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkAddFingerInfoFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    if (fingercodes_.Count > 0) {
      output.WriteStringArray(2, field_names[1], fingercodes_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    {
      int dataSize = 0;
      foreach (string element in FingercodesList) {
        dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * fingercodes_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkAddFingerInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkAddFingerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkAddFingerInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkAddFingerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkAddFingerInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkAddFingerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkAddFingerInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkAddFingerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkAddFingerInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkAddFingerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkAddFingerInfo MakeReadOnly() {
    fingercodes_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkAddFingerInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkAddFingerInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkAddFingerInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkAddFingerInfo result;
    
    private CSEmkAddFingerInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkAddFingerInfo original = result;
        result = new CSEmkAddFingerInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkAddFingerInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkAddFingerInfo.Descriptor; }
    }
    
    public override CSEmkAddFingerInfo DefaultInstanceForType {
      get { return global::CSEmkAddFingerInfo.DefaultInstance; }
    }
    
    public override CSEmkAddFingerInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkAddFingerInfo) {
        return MergeFrom((CSEmkAddFingerInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkAddFingerInfo other) {
      if (other == global::CSEmkAddFingerInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.fingercodes_.Count != 0) {
        result.fingercodes_.Add(other.fingercodes_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkAddFingerInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkAddFingerInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 18: {
            input.ReadStringArray(tag, field_name, result.fingercodes_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<string> FingercodesList {
      get { return PrepareBuilder().fingercodes_; }
    }
    public int FingercodesCount {
      get { return result.FingercodesCount; }
    }
    public string GetFingercodes(int index) {
      return result.GetFingercodes(index);
    }
    public Builder SetFingercodes(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.fingercodes_[index] = value;
      return this;
    }
    public Builder AddFingercodes(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.fingercodes_.Add(value);
      return this;
    }
    public Builder AddRangeFingercodes(scg::IEnumerable<string> values) {
      PrepareBuilder();
      result.fingercodes_.Add(values);
      return this;
    }
    public Builder ClearFingercodes() {
      PrepareBuilder();
      result.fingercodes_.Clear();
      return this;
    }
  }
  static CSEmkAddFingerInfo() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkApplyMember : pb::GeneratedMessage<CSEmkApplyMember, CSEmkApplyMember.Builder> {
  private CSEmkApplyMember() { }
  private static readonly CSEmkApplyMember defaultInstance = new CSEmkApplyMember().MakeReadOnly();
  private static readonly string[] _cSEmkApplyMemberFieldNames = new string[] { "cardnumber", "channel" };
  private static readonly uint[] _cSEmkApplyMemberFieldTags = new uint[] { 10, 16 };
  public static CSEmkApplyMember DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkApplyMember DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkApplyMember ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_CSEmkApplyMember__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkApplyMember, CSEmkApplyMember.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_CSEmkApplyMember__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int ChannelFieldNumber = 2;
  private bool hasChannel;
  private int channel_;
  public bool HasChannel {
    get { return hasChannel; }
  }
  public int Channel {
    get { return channel_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      if (!hasChannel) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkApplyMemberFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    if (hasChannel) {
      output.WriteInt32(2, field_names[1], Channel);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    if (hasChannel) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Channel);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkApplyMember ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkApplyMember ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkApplyMember ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkApplyMember ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkApplyMember ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkApplyMember ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkApplyMember ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkApplyMember ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkApplyMember ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkApplyMember ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkApplyMember MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkApplyMember prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkApplyMember, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkApplyMember cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkApplyMember result;
    
    private CSEmkApplyMember PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkApplyMember original = result;
        result = new CSEmkApplyMember();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkApplyMember MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkApplyMember.Descriptor; }
    }
    
    public override CSEmkApplyMember DefaultInstanceForType {
      get { return global::CSEmkApplyMember.DefaultInstance; }
    }
    
    public override CSEmkApplyMember BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkApplyMember) {
        return MergeFrom((CSEmkApplyMember) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkApplyMember other) {
      if (other == global::CSEmkApplyMember.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasChannel) {
        Channel = other.Channel;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkApplyMemberFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkApplyMemberFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 16: {
            result.hasChannel = input.ReadInt32(ref result.channel_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasChannel {
      get { return result.hasChannel; }
    }
    public int Channel {
      get { return result.Channel; }
      set { SetChannel(value); }
    }
    public Builder SetChannel(int value) {
      PrepareBuilder();
      result.hasChannel = true;
      result.channel_ = value;
      return this;
    }
    public Builder ClearChannel() {
      PrepareBuilder();
      result.hasChannel = false;
      result.channel_ = 0;
      return this;
    }
  }
  static CSEmkApplyMember() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmkApplyMember : pb::GeneratedMessage<SCEmkApplyMember, SCEmkApplyMember.Builder> {
  private SCEmkApplyMember() { }
  private static readonly SCEmkApplyMember defaultInstance = new SCEmkApplyMember().MakeReadOnly();
  private static readonly string[] _sCEmkApplyMemberFieldNames = new string[] { "balance", "cardnumber", "integal", "name", "recharge", "right" };
  private static readonly uint[] _sCEmkApplyMemberFieldTags = new uint[] { 40, 18, 48, 10, 32, 26 };
  public static SCEmkApplyMember DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmkApplyMember DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmkApplyMember ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_SCEmkApplyMember__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmkApplyMember, SCEmkApplyMember.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_SCEmkApplyMember__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int RechargeFieldNumber = 4;
  private bool hasRecharge;
  private int recharge_;
  public bool HasRecharge {
    get { return hasRecharge; }
  }
  public int Recharge {
    get { return recharge_; }
  }
  
  public const int BalanceFieldNumber = 5;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int IntegalFieldNumber = 6;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasRecharge) return false;
      if (!hasBalance) return false;
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmkApplyMemberFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[3], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[5], Right);
    }
    if (hasRecharge) {
      output.WriteInt32(4, field_names[4], Recharge);
    }
    if (hasBalance) {
      output.WriteInt32(5, field_names[0], Balance);
    }
    if (hasIntegal) {
      output.WriteInt32(6, field_names[2], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasRecharge) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Recharge);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Balance);
    }
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmkApplyMember ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkApplyMember ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkApplyMember ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkApplyMember ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkApplyMember ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkApplyMember ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmkApplyMember ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmkApplyMember ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmkApplyMember ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkApplyMember ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmkApplyMember MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmkApplyMember prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmkApplyMember, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmkApplyMember cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmkApplyMember result;
    
    private SCEmkApplyMember PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmkApplyMember original = result;
        result = new SCEmkApplyMember();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmkApplyMember MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmkApplyMember.Descriptor; }
    }
    
    public override SCEmkApplyMember DefaultInstanceForType {
      get { return global::SCEmkApplyMember.DefaultInstance; }
    }
    
    public override SCEmkApplyMember BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmkApplyMember) {
        return MergeFrom((SCEmkApplyMember) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmkApplyMember other) {
      if (other == global::SCEmkApplyMember.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasRecharge) {
        Recharge = other.Recharge;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmkApplyMemberFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmkApplyMemberFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasRecharge = input.ReadInt32(ref result.recharge_);
            break;
          }
          case 40: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 48: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasRecharge {
      get { return result.hasRecharge; }
    }
    public int Recharge {
      get { return result.Recharge; }
      set { SetRecharge(value); }
    }
    public Builder SetRecharge(int value) {
      PrepareBuilder();
      result.hasRecharge = true;
      result.recharge_ = value;
      return this;
    }
    public Builder ClearRecharge() {
      PrepareBuilder();
      result.hasRecharge = false;
      result.recharge_ = 0;
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCEmkApplyMember() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkCharge : pb::GeneratedMessage<CSEmkCharge, CSEmkCharge.Builder> {
  private CSEmkCharge() { }
  private static readonly CSEmkCharge defaultInstance = new CSEmkCharge().MakeReadOnly();
  private static readonly string[] _cSEmkChargeFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSEmkChargeFieldTags = new uint[] { 10 };
  public static CSEmkCharge DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkCharge DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkCharge ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_CSEmkCharge__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkCharge, CSEmkCharge.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_CSEmkCharge__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkChargeFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkCharge ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkCharge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCharge ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkCharge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCharge ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkCharge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCharge ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkCharge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkCharge ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkCharge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkCharge MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkCharge prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkCharge, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkCharge cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkCharge result;
    
    private CSEmkCharge PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkCharge original = result;
        result = new CSEmkCharge();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkCharge MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkCharge.Descriptor; }
    }
    
    public override CSEmkCharge DefaultInstanceForType {
      get { return global::CSEmkCharge.DefaultInstance; }
    }
    
    public override CSEmkCharge BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkCharge) {
        return MergeFrom((CSEmkCharge) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkCharge other) {
      if (other == global::CSEmkCharge.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkChargeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkChargeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSEmkCharge() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmkCharge : pb::GeneratedMessage<SCEmkCharge, SCEmkCharge.Builder> {
  private SCEmkCharge() { }
  private static readonly SCEmkCharge defaultInstance = new SCEmkCharge().MakeReadOnly();
  private static readonly string[] _sCEmkChargeFieldNames = new string[] { "balance", "cardnumber", "name", "right" };
  private static readonly uint[] _sCEmkChargeFieldTags = new uint[] { 32, 18, 10, 26 };
  public static SCEmkCharge DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmkCharge DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmkCharge ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_SCEmkCharge__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmkCharge, SCEmkCharge.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_SCEmkCharge__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int BalanceFieldNumber = 4;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasBalance) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmkChargeFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[2], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[3], Right);
    }
    if (hasBalance) {
      output.WriteInt32(4, field_names[0], Balance);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Balance);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmkCharge ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkCharge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCharge ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkCharge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCharge ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkCharge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCharge ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmkCharge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmkCharge ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkCharge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmkCharge MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmkCharge prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmkCharge, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmkCharge cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmkCharge result;
    
    private SCEmkCharge PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmkCharge original = result;
        result = new SCEmkCharge();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmkCharge MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmkCharge.Descriptor; }
    }
    
    public override SCEmkCharge DefaultInstanceForType {
      get { return global::SCEmkCharge.DefaultInstance; }
    }
    
    public override SCEmkCharge BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmkCharge) {
        return MergeFrom((SCEmkCharge) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmkCharge other) {
      if (other == global::SCEmkCharge.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmkChargeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmkChargeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
  }
  static SCEmkCharge() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkCheckin : pb::GeneratedMessage<CSEmkCheckin, CSEmkCheckin.Builder> {
  private CSEmkCheckin() { }
  private static readonly CSEmkCheckin defaultInstance = new CSEmkCheckin().MakeReadOnly();
  private static readonly string[] _cSEmkCheckinFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSEmkCheckinFieldTags = new uint[] { 10 };
  public static CSEmkCheckin DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkCheckin DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkCheckin ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_CSEmkCheckin__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkCheckin, CSEmkCheckin.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_CSEmkCheckin__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkCheckinFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkCheckin ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCheckin ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkCheckin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkCheckin MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkCheckin prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkCheckin, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkCheckin cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkCheckin result;
    
    private CSEmkCheckin PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkCheckin original = result;
        result = new CSEmkCheckin();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkCheckin MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkCheckin.Descriptor; }
    }
    
    public override CSEmkCheckin DefaultInstanceForType {
      get { return global::CSEmkCheckin.DefaultInstance; }
    }
    
    public override CSEmkCheckin BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkCheckin) {
        return MergeFrom((CSEmkCheckin) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkCheckin other) {
      if (other == global::CSEmkCheckin.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkCheckinFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkCheckinFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSEmkCheckin() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmkCheckin : pb::GeneratedMessage<SCEmkCheckin, SCEmkCheckin.Builder> {
  private SCEmkCheckin() { }
  private static readonly SCEmkCheckin defaultInstance = new SCEmkCheckin().MakeReadOnly();
  private static readonly string[] _sCEmkCheckinFieldNames = new string[] { "balance", "cardnumber", "name", "right" };
  private static readonly uint[] _sCEmkCheckinFieldTags = new uint[] { 32, 18, 10, 26 };
  public static SCEmkCheckin DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmkCheckin DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmkCheckin ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_SCEmkCheckin__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmkCheckin, SCEmkCheckin.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_SCEmkCheckin__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int BalanceFieldNumber = 4;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasBalance) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmkCheckinFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[2], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[3], Right);
    }
    if (hasBalance) {
      output.WriteInt32(4, field_names[0], Balance);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Balance);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmkCheckin ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCheckin ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmkCheckin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmkCheckin MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmkCheckin prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmkCheckin, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmkCheckin cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmkCheckin result;
    
    private SCEmkCheckin PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmkCheckin original = result;
        result = new SCEmkCheckin();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmkCheckin MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmkCheckin.Descriptor; }
    }
    
    public override SCEmkCheckin DefaultInstanceForType {
      get { return global::SCEmkCheckin.DefaultInstance; }
    }
    
    public override SCEmkCheckin BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmkCheckin) {
        return MergeFrom((SCEmkCheckin) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmkCheckin other) {
      if (other == global::SCEmkCheckin.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmkCheckinFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmkCheckinFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
  }
  static SCEmkCheckin() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkCheckout : pb::GeneratedMessage<CSEmkCheckout, CSEmkCheckout.Builder> {
  private CSEmkCheckout() { }
  private static readonly CSEmkCheckout defaultInstance = new CSEmkCheckout().MakeReadOnly();
  private static readonly string[] _cSEmkCheckoutFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSEmkCheckoutFieldTags = new uint[] { 10 };
  public static CSEmkCheckout DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkCheckout DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkCheckout ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_CSEmkCheckout__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkCheckout, CSEmkCheckout.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_CSEmkCheckout__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkCheckoutFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkCheckout ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCheckout ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkCheckout ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkCheckout MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkCheckout prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkCheckout, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkCheckout cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkCheckout result;
    
    private CSEmkCheckout PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkCheckout original = result;
        result = new CSEmkCheckout();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkCheckout MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkCheckout.Descriptor; }
    }
    
    public override CSEmkCheckout DefaultInstanceForType {
      get { return global::CSEmkCheckout.DefaultInstance; }
    }
    
    public override CSEmkCheckout BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkCheckout) {
        return MergeFrom((CSEmkCheckout) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkCheckout other) {
      if (other == global::CSEmkCheckout.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkCheckoutFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkCheckoutFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSEmkCheckout() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmkCheckout : pb::GeneratedMessage<SCEmkCheckout, SCEmkCheckout.Builder> {
  private SCEmkCheckout() { }
  private static readonly SCEmkCheckout defaultInstance = new SCEmkCheckout().MakeReadOnly();
  private static readonly string[] _sCEmkCheckoutFieldNames = new string[] { "balance", "cardnumber", "name", "right", "usedmoney", "usedtime" };
  private static readonly uint[] _sCEmkCheckoutFieldTags = new uint[] { 32, 18, 10, 26, 40, 48 };
  public static SCEmkCheckout DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmkCheckout DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmkCheckout ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_SCEmkCheckout__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmkCheckout, SCEmkCheckout.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_SCEmkCheckout__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int BalanceFieldNumber = 4;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int UsedmoneyFieldNumber = 5;
  private bool hasUsedmoney;
  private int usedmoney_;
  public bool HasUsedmoney {
    get { return hasUsedmoney; }
  }
  public int Usedmoney {
    get { return usedmoney_; }
  }
  
  public const int UsedtimeFieldNumber = 6;
  private bool hasUsedtime;
  private int usedtime_;
  public bool HasUsedtime {
    get { return hasUsedtime; }
  }
  public int Usedtime {
    get { return usedtime_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasBalance) return false;
      if (!hasUsedmoney) return false;
      if (!hasUsedtime) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmkCheckoutFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[2], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[3], Right);
    }
    if (hasBalance) {
      output.WriteInt32(4, field_names[0], Balance);
    }
    if (hasUsedmoney) {
      output.WriteInt32(5, field_names[4], Usedmoney);
    }
    if (hasUsedtime) {
      output.WriteInt32(6, field_names[5], Usedtime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Balance);
    }
    if (hasUsedmoney) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Usedmoney);
    }
    if (hasUsedtime) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Usedtime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmkCheckout ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCheckout ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmkCheckout ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmkCheckout MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmkCheckout prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmkCheckout, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmkCheckout cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmkCheckout result;
    
    private SCEmkCheckout PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmkCheckout original = result;
        result = new SCEmkCheckout();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmkCheckout MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmkCheckout.Descriptor; }
    }
    
    public override SCEmkCheckout DefaultInstanceForType {
      get { return global::SCEmkCheckout.DefaultInstance; }
    }
    
    public override SCEmkCheckout BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmkCheckout) {
        return MergeFrom((SCEmkCheckout) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmkCheckout other) {
      if (other == global::SCEmkCheckout.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasUsedmoney) {
        Usedmoney = other.Usedmoney;
      }
      if (other.HasUsedtime) {
        Usedtime = other.Usedtime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmkCheckoutFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmkCheckoutFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 40: {
            result.hasUsedmoney = input.ReadInt32(ref result.usedmoney_);
            break;
          }
          case 48: {
            result.hasUsedtime = input.ReadInt32(ref result.usedtime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasUsedmoney {
      get { return result.hasUsedmoney; }
    }
    public int Usedmoney {
      get { return result.Usedmoney; }
      set { SetUsedmoney(value); }
    }
    public Builder SetUsedmoney(int value) {
      PrepareBuilder();
      result.hasUsedmoney = true;
      result.usedmoney_ = value;
      return this;
    }
    public Builder ClearUsedmoney() {
      PrepareBuilder();
      result.hasUsedmoney = false;
      result.usedmoney_ = 0;
      return this;
    }
    
    public bool HasUsedtime {
      get { return result.hasUsedtime; }
    }
    public int Usedtime {
      get { return result.Usedtime; }
      set { SetUsedtime(value); }
    }
    public Builder SetUsedtime(int value) {
      PrepareBuilder();
      result.hasUsedtime = true;
      result.usedtime_ = value;
      return this;
    }
    public Builder ClearUsedtime() {
      PrepareBuilder();
      result.hasUsedtime = false;
      result.usedtime_ = 0;
      return this;
    }
  }
  static SCEmkCheckout() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkFingerInput : pb::GeneratedMessage<CSEmkFingerInput, CSEmkFingerInput.Builder> {
  private CSEmkFingerInput() { }
  private static readonly CSEmkFingerInput defaultInstance = new CSEmkFingerInput().MakeReadOnly();
  private static readonly string[] _cSEmkFingerInputFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSEmkFingerInputFieldTags = new uint[] { 10 };
  public static CSEmkFingerInput DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkFingerInput DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkFingerInput ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_CSEmkFingerInput__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkFingerInput, CSEmkFingerInput.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_CSEmkFingerInput__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkFingerInputFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkFingerInput ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkFingerInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkFingerInput ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkFingerInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkFingerInput ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkFingerInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkFingerInput ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkFingerInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkFingerInput ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkFingerInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkFingerInput MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkFingerInput prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkFingerInput, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkFingerInput cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkFingerInput result;
    
    private CSEmkFingerInput PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkFingerInput original = result;
        result = new CSEmkFingerInput();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkFingerInput MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkFingerInput.Descriptor; }
    }
    
    public override CSEmkFingerInput DefaultInstanceForType {
      get { return global::CSEmkFingerInput.DefaultInstance; }
    }
    
    public override CSEmkFingerInput BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkFingerInput) {
        return MergeFrom((CSEmkFingerInput) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkFingerInput other) {
      if (other == global::CSEmkFingerInput.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkFingerInputFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkFingerInputFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSEmkFingerInput() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmkFingerBind : pb::GeneratedMessage<SCEmkFingerBind, SCEmkFingerBind.Builder> {
  private SCEmkFingerBind() { }
  private static readonly SCEmkFingerBind defaultInstance = new SCEmkFingerBind().MakeReadOnly();
  private static readonly string[] _sCEmkFingerBindFieldNames = new string[] {  };
  private static readonly uint[] _sCEmkFingerBindFieldTags = new uint[] {  };
  public static SCEmkFingerBind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmkFingerBind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmkFingerBind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_SCEmkFingerBind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmkFingerBind, SCEmkFingerBind.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_SCEmkFingerBind__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmkFingerBindFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmkFingerBind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkFingerBind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkFingerBind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkFingerBind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkFingerBind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkFingerBind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmkFingerBind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmkFingerBind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmkFingerBind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkFingerBind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmkFingerBind MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmkFingerBind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmkFingerBind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmkFingerBind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmkFingerBind result;
    
    private SCEmkFingerBind PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmkFingerBind original = result;
        result = new SCEmkFingerBind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmkFingerBind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmkFingerBind.Descriptor; }
    }
    
    public override SCEmkFingerBind DefaultInstanceForType {
      get { return global::SCEmkFingerBind.DefaultInstance; }
    }
    
    public override SCEmkFingerBind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmkFingerBind) {
        return MergeFrom((SCEmkFingerBind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmkFingerBind other) {
      if (other == global::SCEmkFingerBind.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmkFingerBindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmkFingerBindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static SCEmkFingerBind() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkCancel : pb::GeneratedMessage<CSEmkCancel, CSEmkCancel.Builder> {
  private CSEmkCancel() { }
  private static readonly CSEmkCancel defaultInstance = new CSEmkCancel().MakeReadOnly();
  private static readonly string[] _cSEmkCancelFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSEmkCancelFieldTags = new uint[] { 10 };
  public static CSEmkCancel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkCancel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkCancel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_CSEmkCancel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkCancel, CSEmkCancel.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_CSEmkCancel__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkCancelFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkCancel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkCancel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCancel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkCancel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCancel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkCancel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCancel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkCancel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkCancel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkCancel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkCancel MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkCancel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkCancel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkCancel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkCancel result;
    
    private CSEmkCancel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkCancel original = result;
        result = new CSEmkCancel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkCancel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkCancel.Descriptor; }
    }
    
    public override CSEmkCancel DefaultInstanceForType {
      get { return global::CSEmkCancel.DefaultInstance; }
    }
    
    public override CSEmkCancel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkCancel) {
        return MergeFrom((CSEmkCancel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkCancel other) {
      if (other == global::CSEmkCancel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkCancelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkCancelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSEmkCancel() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmkVerifyList : pb::GeneratedMessage<SCEmkVerifyList, SCEmkVerifyList.Builder> {
  private SCEmkVerifyList() { }
  private static readonly SCEmkVerifyList defaultInstance = new SCEmkVerifyList().MakeReadOnly();
  private static readonly string[] _sCEmkVerifyListFieldNames = new string[] { "verifyinfos" };
  private static readonly uint[] _sCEmkVerifyListFieldTags = new uint[] { 10 };
  public static SCEmkVerifyList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmkVerifyList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmkVerifyList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_SCEmkVerifyList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmkVerifyList, SCEmkVerifyList.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_SCEmkVerifyList__FieldAccessorTable; }
  }
  
  public const int VerifyinfosFieldNumber = 1;
  private pbc::PopsicleList<global::StructVerifyInfo> verifyinfos_ = new pbc::PopsicleList<global::StructVerifyInfo>();
  public scg::IList<global::StructVerifyInfo> VerifyinfosList {
    get { return verifyinfos_; }
  }
  public int VerifyinfosCount {
    get { return verifyinfos_.Count; }
  }
  public global::StructVerifyInfo GetVerifyinfos(int index) {
    return verifyinfos_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructVerifyInfo element in VerifyinfosList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmkVerifyListFieldNames;
    if (verifyinfos_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], verifyinfos_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructVerifyInfo element in VerifyinfosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmkVerifyList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkVerifyList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkVerifyList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkVerifyList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkVerifyList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkVerifyList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmkVerifyList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmkVerifyList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmkVerifyList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkVerifyList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmkVerifyList MakeReadOnly() {
    verifyinfos_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmkVerifyList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmkVerifyList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmkVerifyList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmkVerifyList result;
    
    private SCEmkVerifyList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmkVerifyList original = result;
        result = new SCEmkVerifyList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmkVerifyList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmkVerifyList.Descriptor; }
    }
    
    public override SCEmkVerifyList DefaultInstanceForType {
      get { return global::SCEmkVerifyList.DefaultInstance; }
    }
    
    public override SCEmkVerifyList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmkVerifyList) {
        return MergeFrom((SCEmkVerifyList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmkVerifyList other) {
      if (other == global::SCEmkVerifyList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.verifyinfos_.Count != 0) {
        result.verifyinfos_.Add(other.verifyinfos_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmkVerifyListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmkVerifyListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.verifyinfos_, global::StructVerifyInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructVerifyInfo> VerifyinfosList {
      get { return PrepareBuilder().verifyinfos_; }
    }
    public int VerifyinfosCount {
      get { return result.VerifyinfosCount; }
    }
    public global::StructVerifyInfo GetVerifyinfos(int index) {
      return result.GetVerifyinfos(index);
    }
    public Builder SetVerifyinfos(int index, global::StructVerifyInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.verifyinfos_[index] = value;
      return this;
    }
    public Builder SetVerifyinfos(int index, global::StructVerifyInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.verifyinfos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddVerifyinfos(global::StructVerifyInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.verifyinfos_.Add(value);
      return this;
    }
    public Builder AddVerifyinfos(global::StructVerifyInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.verifyinfos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeVerifyinfos(scg::IEnumerable<global::StructVerifyInfo> values) {
      PrepareBuilder();
      result.verifyinfos_.Add(values);
      return this;
    }
    public Builder ClearVerifyinfos() {
      PrepareBuilder();
      result.verifyinfos_.Clear();
      return this;
    }
  }
  static SCEmkVerifyList() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkVerifyProc : pb::GeneratedMessage<CSEmkVerifyProc, CSEmkVerifyProc.Builder> {
  private CSEmkVerifyProc() { }
  private static readonly CSEmkVerifyProc defaultInstance = new CSEmkVerifyProc().MakeReadOnly();
  private static readonly string[] _cSEmkVerifyProcFieldNames = new string[] { "cardnumber", "fingercode" };
  private static readonly uint[] _cSEmkVerifyProcFieldTags = new uint[] { 10, 18 };
  public static CSEmkVerifyProc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkVerifyProc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkVerifyProc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_CSEmkVerifyProc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkVerifyProc, CSEmkVerifyProc.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_CSEmkVerifyProc__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int FingercodeFieldNumber = 2;
  private bool hasFingercode;
  private string fingercode_ = "";
  public bool HasFingercode {
    get { return hasFingercode; }
  }
  public string Fingercode {
    get { return fingercode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      if (!hasFingercode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkVerifyProcFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    if (hasFingercode) {
      output.WriteString(2, field_names[1], Fingercode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    if (hasFingercode) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Fingercode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkVerifyProc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkVerifyProc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkVerifyProc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkVerifyProc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkVerifyProc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkVerifyProc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkVerifyProc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkVerifyProc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkVerifyProc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkVerifyProc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkVerifyProc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkVerifyProc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkVerifyProc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkVerifyProc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkVerifyProc result;
    
    private CSEmkVerifyProc PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkVerifyProc original = result;
        result = new CSEmkVerifyProc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkVerifyProc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkVerifyProc.Descriptor; }
    }
    
    public override CSEmkVerifyProc DefaultInstanceForType {
      get { return global::CSEmkVerifyProc.DefaultInstance; }
    }
    
    public override CSEmkVerifyProc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkVerifyProc) {
        return MergeFrom((CSEmkVerifyProc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkVerifyProc other) {
      if (other == global::CSEmkVerifyProc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasFingercode) {
        Fingercode = other.Fingercode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkVerifyProcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkVerifyProcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 18: {
            result.hasFingercode = input.ReadString(ref result.fingercode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasFingercode {
      get { return result.hasFingercode; }
    }
    public string Fingercode {
      get { return result.Fingercode; }
      set { SetFingercode(value); }
    }
    public Builder SetFingercode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFingercode = true;
      result.fingercode_ = value;
      return this;
    }
    public Builder ClearFingercode() {
      PrepareBuilder();
      result.hasFingercode = false;
      result.fingercode_ = "";
      return this;
    }
  }
  static CSEmkVerifyProc() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmkOrderList : pb::GeneratedMessage<SCEmkOrderList, SCEmkOrderList.Builder> {
  private SCEmkOrderList() { }
  private static readonly SCEmkOrderList defaultInstance = new SCEmkOrderList().MakeReadOnly();
  private static readonly string[] _sCEmkOrderListFieldNames = new string[] { "orderInfos" };
  private static readonly uint[] _sCEmkOrderListFieldTags = new uint[] { 10 };
  public static SCEmkOrderList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmkOrderList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmkOrderList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_SCEmkOrderList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmkOrderList, SCEmkOrderList.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_SCEmkOrderList__FieldAccessorTable; }
  }
  
  public const int OrderInfosFieldNumber = 1;
  private pbc::PopsicleList<global::StructOrderInfo> orderInfos_ = new pbc::PopsicleList<global::StructOrderInfo>();
  public scg::IList<global::StructOrderInfo> OrderInfosList {
    get { return orderInfos_; }
  }
  public int OrderInfosCount {
    get { return orderInfos_.Count; }
  }
  public global::StructOrderInfo GetOrderInfos(int index) {
    return orderInfos_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructOrderInfo element in OrderInfosList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmkOrderListFieldNames;
    if (orderInfos_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], orderInfos_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructOrderInfo element in OrderInfosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmkOrderList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkOrderList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkOrderList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkOrderList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkOrderList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkOrderList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmkOrderList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmkOrderList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmkOrderList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkOrderList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmkOrderList MakeReadOnly() {
    orderInfos_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmkOrderList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmkOrderList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmkOrderList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmkOrderList result;
    
    private SCEmkOrderList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmkOrderList original = result;
        result = new SCEmkOrderList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmkOrderList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmkOrderList.Descriptor; }
    }
    
    public override SCEmkOrderList DefaultInstanceForType {
      get { return global::SCEmkOrderList.DefaultInstance; }
    }
    
    public override SCEmkOrderList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmkOrderList) {
        return MergeFrom((SCEmkOrderList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmkOrderList other) {
      if (other == global::SCEmkOrderList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.orderInfos_.Count != 0) {
        result.orderInfos_.Add(other.orderInfos_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmkOrderListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmkOrderListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.orderInfos_, global::StructOrderInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructOrderInfo> OrderInfosList {
      get { return PrepareBuilder().orderInfos_; }
    }
    public int OrderInfosCount {
      get { return result.OrderInfosCount; }
    }
    public global::StructOrderInfo GetOrderInfos(int index) {
      return result.GetOrderInfos(index);
    }
    public Builder SetOrderInfos(int index, global::StructOrderInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.orderInfos_[index] = value;
      return this;
    }
    public Builder SetOrderInfos(int index, global::StructOrderInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.orderInfos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddOrderInfos(global::StructOrderInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.orderInfos_.Add(value);
      return this;
    }
    public Builder AddOrderInfos(global::StructOrderInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.orderInfos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeOrderInfos(scg::IEnumerable<global::StructOrderInfo> values) {
      PrepareBuilder();
      result.orderInfos_.Add(values);
      return this;
    }
    public Builder ClearOrderInfos() {
      PrepareBuilder();
      result.orderInfos_.Clear();
      return this;
    }
  }
  static SCEmkOrderList() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkOrderProc : pb::GeneratedMessage<CSEmkOrderProc, CSEmkOrderProc.Builder> {
  private CSEmkOrderProc() { }
  private static readonly CSEmkOrderProc defaultInstance = new CSEmkOrderProc().MakeReadOnly();
  private static readonly string[] _cSEmkOrderProcFieldNames = new string[] { "fingercode", "orderid" };
  private static readonly uint[] _cSEmkOrderProcFieldTags = new uint[] { 18, 8 };
  public static CSEmkOrderProc DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkOrderProc DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkOrderProc ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Embark.internal__static_CSEmkOrderProc__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkOrderProc, CSEmkOrderProc.Builder> InternalFieldAccessors {
    get { return global::Embark.internal__static_CSEmkOrderProc__FieldAccessorTable; }
  }
  
  public const int OrderidFieldNumber = 1;
  private bool hasOrderid;
  private int orderid_;
  public bool HasOrderid {
    get { return hasOrderid; }
  }
  public int Orderid {
    get { return orderid_; }
  }
  
  public const int FingercodeFieldNumber = 2;
  private bool hasFingercode;
  private string fingercode_ = "";
  public bool HasFingercode {
    get { return hasFingercode; }
  }
  public string Fingercode {
    get { return fingercode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOrderid) return false;
      if (!hasFingercode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkOrderProcFieldNames;
    if (hasOrderid) {
      output.WriteInt32(1, field_names[1], Orderid);
    }
    if (hasFingercode) {
      output.WriteString(2, field_names[0], Fingercode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOrderid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Orderid);
    }
    if (hasFingercode) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Fingercode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkOrderProc ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkOrderProc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkOrderProc ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkOrderProc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkOrderProc ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkOrderProc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkOrderProc ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkOrderProc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkOrderProc ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkOrderProc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkOrderProc MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkOrderProc prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkOrderProc, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkOrderProc cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkOrderProc result;
    
    private CSEmkOrderProc PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkOrderProc original = result;
        result = new CSEmkOrderProc();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkOrderProc MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkOrderProc.Descriptor; }
    }
    
    public override CSEmkOrderProc DefaultInstanceForType {
      get { return global::CSEmkOrderProc.DefaultInstance; }
    }
    
    public override CSEmkOrderProc BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkOrderProc) {
        return MergeFrom((CSEmkOrderProc) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkOrderProc other) {
      if (other == global::CSEmkOrderProc.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOrderid) {
        Orderid = other.Orderid;
      }
      if (other.HasFingercode) {
        Fingercode = other.Fingercode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkOrderProcFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkOrderProcFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasOrderid = input.ReadInt32(ref result.orderid_);
            break;
          }
          case 18: {
            result.hasFingercode = input.ReadString(ref result.fingercode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOrderid {
      get { return result.hasOrderid; }
    }
    public int Orderid {
      get { return result.Orderid; }
      set { SetOrderid(value); }
    }
    public Builder SetOrderid(int value) {
      PrepareBuilder();
      result.hasOrderid = true;
      result.orderid_ = value;
      return this;
    }
    public Builder ClearOrderid() {
      PrepareBuilder();
      result.hasOrderid = false;
      result.orderid_ = 0;
      return this;
    }
    
    public bool HasFingercode {
      get { return result.hasFingercode; }
    }
    public string Fingercode {
      get { return result.Fingercode; }
      set { SetFingercode(value); }
    }
    public Builder SetFingercode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFingercode = true;
      result.fingercode_ = value;
      return this;
    }
    public Builder ClearFingercode() {
      PrepareBuilder();
      result.hasFingercode = false;
      result.fingercode_ = "";
      return this;
    }
  }
  static CSEmkOrderProc() {
    object.ReferenceEquals(global::Embark.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
