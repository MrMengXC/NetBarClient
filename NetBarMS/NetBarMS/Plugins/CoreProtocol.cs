// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class CoreProtocol {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_MessagePack__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MessagePack, global::MessagePack.Builder> internal__static_MessagePack__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MessageContent__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MessageContent, global::MessageContent.Builder> internal__static_MessageContent__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static CoreProtocol() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChJDb3JlUHJvdG9jb2wucHJvdG8aEEJhc2VTdHJ1Y3QucHJvdG8aDENvbW1v", 
          "bi5wcm90bxoQQmFja2dyb3VuZC5wcm90bxoMQ2xpZW50LnByb3RvGgxFbWJh", 
          "cmsucHJvdG8idQoLTWVzc2FnZVBhY2sSEQoDY21kGAEgAigOMgQuQ21kEg0K", 
          "BXJlcUlkGAIgAigFEg8KB3ZlcnNpb24YAyABKAUSEQoJc2Vzc2lvbklkGAQg", 
          "ASgFEiAKB2NvbnRlbnQYBSABKAsyDy5NZXNzYWdlQ29udGVudCKuJAoOTWVz", 
          "c2FnZUNvbnRlbnQSEwoLbWVzc2FnZVR5cGUYASACKAUSIQoIZXJyb3JUaXAY", 
          "AiABKAsyDy5TdHJ1Y3RFcnJvclRpcBIiCghjc1VwbG9hZBgDIAEoCzIQLkNT", 
          "VXBsb2FkUGljdHVyZRIiCghzY1VwbG9hZBgEIAEoCzIQLlNDVXBsb2FkUGlj", 
          "dHVyZRIZCgdjc0hlYXJ0GAUgASgLMgguQ1NIZWFydBIZCgdzY0hlYXJ0GAYg", 
          "ASgLMgguU0NIZWFydBIXCgZjc0tpY2sYByABKAsyBy5DU0tpY2sSFwoGc2NL", 
          "aWNrGAggASgLMgcuU0NLaWNrEiEKC2NzUmVjb25uZWN0GAkgASgLMgwuQ1NS", 
          "ZWNvbm5lY3QSIQoLc2NSZWNvbm5lY3QYCiABKAsyDC5TQ1JlY29ubmVjdBIh", 
          "Cgtjc1ByZUNoYXJnZRgLIAEoCzIMLkNTUHJlQ2hhcmdlEiEKC3NjUHJlQ2hh", 
          "cmdlGAwgASgLMgwuU0NQcmVDaGFyZ2USHwoKY3NUb0NoYXJnZRgNIAEoCzIL", 
          "LlNDVG9DaGFyZ2USGwoIY3NQcmVCdXkYDiABKAsyCS5DU1ByZUJ1eRIbCghz", 
          "Y1ByZUJ1eRgPIAEoCzIJLlNDUHJlQnV5EhkKB3NjVG9CdXkYECABKAsyCC5T", 
          "Q1RvQnV5Eh0KCXNjTWVzc2FnZRgRIAEoCzIKLlNDTWVzc2FnZRIdCgljc0Nv", 
          "bW1hbmQYEiABKAsyCi5DU0NvbW1hbmQSIQoLY3NHb29kc0ZpbmQYEyABKAsy", 
          "DC5DU0dvb2RzRmluZBIhCgtzY0dvb2RzRmluZBgUIAEoCzIMLlNDR29vZHNG", 
          "aW5kEhsKCGNzQXV0aGVuGBcgASgLMgkuQ1NBdXRoZW4SGwoIc2NBdXRoZW4Y", 
          "GCABKAsyCS5TQ0F1dGhlbhIZCgdjc0xvZ2luGBkgASgLMgguQ1NMb2dpbhIZ", 
          "CgdzY0xvZ2luGBogASgLMgguU0NMb2dpbhIfCgpzY0NhbGxMaXN0GBsgASgL", 
          "MgsuU0NDYWxsTGlzdBIlCg1jc0NhbGxQcm9jZXNzGBwgASgLMg4uQ1NDYWxs", 
          "UHJvY2VzcxIlCg1jc0FjY291bnRJbmZvGB0gASgLMg4uQ1NBY2NvdW50SW5m", 
          "bxIlCg1zY0FjY291bnRJbmZvGB4gASgLMg4uU0NBY2NvdW50SW5mbxInCg5z", 
          "Y1JlYWx0aW1lSW5mbxgfIAEoCzIPLlNDUmVhbHRpbWVJbmZvEhUKBWNzTG9n", 
          "GCAgASgLMgYuQ1NMb2cSFQoFc2NMb2cYISABKAsyBi5TQ0xvZxIfCgpzY1Jv", 
          "bGVMaXN0GCIgASgLMgsuU0NSb2xlTGlzdBIdCgljc1JvbGVBZGQYIyABKAsy", 
          "Ci5DU1JvbGVBZGQSHQoJc2NSb2xlQWRkGCQgASgLMgouU0NSb2xlQWRkEh0K", 
          "CWNzUm9sZURlbBglIAEoCzIKLkNTUm9sZURlbBIjCgxjc1JvbGVVcGRhdGUY", 
          "JiABKAsyDS5DU1JvbGVVcGRhdGUSIwoMY3NSb2xlUmlnaHRzGCcgASgLMg0u", 
          "Q1NSb2xlUmlnaHRzEiUKDXNjQWNjb3VudExpc3QYKCABKAsyDi5TQ0FjY291", 
          "bnRMaXN0EiMKDGNzQWNjb3VudEFkZBgpIAEoCzINLkNTQWNjb3VudEFkZBIj", 
          "Cgxjc0FjY291bnREZWwYKiABKAsyDS5DU0FjY291bnREZWwSKQoPY3NBY2Nv", 
          "dW50VXBkYXRlGCsgASgLMhAuQ1NBY2NvdW50VXBkYXRlEikKD2NzQWNjb3Vu", 
          "dFNuc1NldBgsIAEoCzIQLkNTQWNjb3VudFNuc1NldBInCg5jc1N0YWZmQ29t", 
          "bWVudBgtIAEoCzIPLkNTU3RhZmZDb21tZW50EicKDnNjU3RhZmZDb21tZW50", 
          "GC4gASgLMg8uU0NTdGFmZkNvbW1lbnQSJwoOY3NTdGFmZlBlcmZvcm0YLyAB", 
          "KAsyDy5DU1N0YWZmUGVyZm9ybRInCg5zY1N0YWZmUGVyZm9ybRgwIAEoCzIP", 
          "LlNDU3RhZmZQZXJmb3JtEh0KCWNzRWFybmluZxgxIAEoCzIKLkNTRWFybmlu", 
          "ZxIdCglzY0Vhcm5pbmcYMiABKAsyCi5TQ0Vhcm5pbmcSJwoOc2NDb21wdXRl", 
          "ckxpc3QYMyABKAsyDy5TQ0NvbXB1dGVyTGlzdBIlCg1jc0NvbXB1dGVyQWRk", 
          "GDQgASgLMg4uQ1NDb21wdXRlckFkZBIlCg1jc0NvbXB1dGVyRGVsGDUgASgL", 
          "Mg4uQ1NDb21wdXRlckRlbBIrChBjc0NvbXB1dGVyVXBkYXRlGDYgASgLMhEu", 
          "Q1NDb21wdXRlclVwZGF0ZRInCg5jc0NvbXB1dGVyRmluZBg3IAEoCzIPLkNT", 
          "Q29tcHV0ZXJGaW5kEicKDnNjQ29tcHV0ZXJGaW5kGDggASgLMg8uU0NDb21w", 
          "dXRlckZpbmQSIwoMY3NNZW1iZXJMaXN0GDkgASgLMg0uQ1NNZW1iZXJMaXN0", 
          "EiMKDHNjTWVtYmVyTGlzdBg6IAEoCzINLlNDTWVtYmVyTGlzdBIhCgtjc01l", 
          "bWJlckRlbBg9IAEoCzIMLkNTTWVtYmVyRGVsEi0KDmNzTWVtYmVyVXBkYXRl", 
          "GD4gASgLMhUuQ1NNZW1iZXJVcGRhdGVTdGF0dXMSIwoMY3NNZW1iZXJGaW5k", 
          "GD8gASgLMg0uQ1NNZW1iZXJGaW5kEiMKDHNjTWVtYmVyRmluZBhAIAEoCzIN", 
          "LlNDTWVtYmVyRmluZBIrChBjc01lbWJlckNhcmRJbmZvGEEgASgLMhEuQ1NN", 
          "ZW1iZXJDYXJkSW5mbxIrChBzY01lbWJlckNhcmRJbmZvGEIgASgLMhEuU0NN", 
          "ZW1iZXJDYXJkSW5mbxIlCg1zY1N5c0JpbGxMaXN0GEMgASgLMg4uU0NTeXNC", 
          "aWxsTGlzdBIpCg9jc1N5c0JpbGxVcGRhdGUYRCABKAsyEC5DU1N5c0JpbGxV", 
          "cGRhdGUSKQoPc2NTeXNCaWxsVXBkYXRlGEUgASgLMhAuU0NTeXNCaWxsVXBk", 
          "YXRlEh0KCWNzU3lzSW5mbxhGIAEoCzIKLkNTU3lzSW50bxIdCglzY1N5c0lu", 
          "Zm8YRyABKAsyCi5TQ1N5c0luZm8SIwoMY3NBZGRTeXNJbmZvGEggASgLMg0u", 
          "Q1NBZGRTeXNJbmZvEiMKDGNzRGVsU3lzSW5mbxhJIAEoCzINLkNTRGVsU3lz", 
          "SW5mbxIpCg9jc1VwZGF0ZVN5c0luZm8YSiABKAsyEC5DU1VwZGF0ZVN5c0lu", 
          "Zm8SHwoKY3NHb29kc0FkZBhLIAEoCzILLkNTR29vZHNBZGQSHwoKY3NHb29k", 
          "c0RlbBhMIAEoCzILLkNTR29vZHNEZWwSJQoNY3NHb29kc1VwZGF0ZRhNIAEo", 
          "CzIOLkNTR29vZHNVcGRhdGUSIwoMY3NHb29kc1N0b2NrGE4gASgLMg0uQ1NH", 
          "b29kc1N0b2NrEiMKDHNjR29vZHNTdG9jaxhPIAEoCzINLlNDR29vZHNTdG9j", 
          "axIlCg1jc1NhbGVzUmVjb3JkGFAgASgLMg4uQ1NTYWxlc1JlY29yZBIlCg1z", 
          "Y1NhbGVzUmVjb3JkGFEgASgLMg4uU0NTYWxlc1JlY29yZBIfCgpjc1NhbGVz", 
          "VG9wGFIgASgLMgsuQ1NTYWxlc1RvcBIfCgpzY1NhbGVzVG9wGFMgASgLMgsu", 
          "U0NTYWxlc1RvcBIhCgtjc09yZGVyUHJvYxhUIAEoCzIMLkNTT3JkZXJQcm9j", 
          "EiEKC2NzT3JkZXJMaXN0GFUgASgLMgwuQ1NPcmRlckxpc3QSIQoLc2NPcmRl", 
          "ckxpc3QYViABKAsyDC5TQ09yZGVyTGlzdBIlCg1jc09yZGVyRGV0YWlsGFcg", 
          "ASgLMg4uQ1NPcmRlckRldGFpbBIlCg1zY09yZGVyRGV0YWlsGFggASgLMg4u", 
          "U0NPcmRlckRldGFpbBIvChJzY1NoaWZ0RGVsaXZlcmVkQnkYWSABKAsyEy5T", 
          "Q1NoaWZ0RGVsaXZlcmVkQnkSHwoKY3NTaGlmdEFkZBhaIAEoCzILLkNTU2hp", 
          "ZnRBZGQSIQoLY3NTaGlmdEZpbmQYWyABKAsyDC5DU1NoaWZ0RmluZBIhCgtz", 
          "Y1NoaWZ0RmluZBhcIAEoCzIMLlNDU2hpZnRGaW5kEiUKDWNzUXVlcnlDaGFy", 
          "Z2UYXSABKAsyDi5DU1F1ZXJ5Q2hhcmdlEiUKDXNjUXVlcnlDaGFyZ2UYXiAB", 
          "KAsyDi5TQ1F1ZXJ5Q2hhcmdlEh8KCmNzUXVlcnlFbWsYXyABKAsyCy5DU1F1", 
          "ZXJ5RW1rEh8KCnNjUXVlcnlFbWsYYCABKAsyCy5TQ1F1ZXJ5RW1rEiMKDGNz", 
          "UXVlcnlUcmFkZRhhIAEoCzINLkNTUXVlcnlUcmFkZRIjCgxzY1F1ZXJ5VHJh", 
          "ZGUYYiABKAsyDS5TQ1F1ZXJ5VHJhZGUSIwoMY3NRdWVyeUFwcGx5GGMgASgL", 
          "Mg0uQ1NRdWVyeUFwcGx5EiMKDHNjUXVlcnlBcHBseRhkIAEoCzINLlNDUXVl", 
          "cnlBcHBseRIjCgxjc1F1ZXJ5T2NjdXAYZSABKAsyDS5DU1F1ZXJ5T2NjdXAS", 
          "IwoMc2NRdWVyeU9jY3VwGGYgASgLMg0uU0NRdWVyeU9jY3VwEiQKDGNzQ2xp", 
          "ZW50T3BlbhjIASABKAsyDS5DU0NsaWVudE9wZW4SJgoNY3NDbGllbnRDbG9z", 
          "ZRjJASABKAsyDi5DU0NsaWVudENsb3NlEhoKB2NzTG9nb24YygEgASgLMggu", 
          "Q1NMb2dvbhIaCgdzY0xvZ29uGMsBIAEoCzIILlNDTG9nb24SHAoIY3NMb2dv", 
          "ZmYYzAEgASgLMgkuQ1NMb2dvZmYSHAoIc2NMb2dvZmYYzQEgASgLMgkuU0NM", 
          "b2dvZmYSHAoIY3NIdW5ndXAYzgEgASgLMgkuQ1NIdW5ndXASIAoKY3NFdmFs", 
          "dWF0ZRjaASABKAsyCy5DU0V2YWx1YXRlEiAKCnNjRXZhbHVhdGUY2wEgASgL", 
          "MgsuU0NFdmFsdWF0ZRIkCgxjc1ZlcmlmeUNvZGUY3AEgASgLMg0uQ1NWZXJp", 
          "ZnlDb2RlEiQKDHNjVmVyaWZ5Q29kZRjdASABKAsyDS5TQ1ZlcmlmeUNvZGUS", 
          "JAoMY3NCaW5kTW9iaWxlGN4BIAEoCzINLkNTQmluZE1vYmlsZRIkCgxzY0Jp", 
          "bmRNb2JpbGUY3wEgASgLMg0uU0NCaW5kTW9iaWxlEiYKDWNzRW1rVXNlcklu", 
          "Zm8YrAIgASgLMg4uQ1NFbWtVc2VySW5mbxImCg1zY0Vta1VzZXJJbmZvGK0C", 
          "IAEoCzIOLlNDRW1rVXNlckluZm8SLAoQY3NFbWtBZGRDYXJkSW5mbxiuAiAB", 
          "KAsyES5DU0Vta0FkZENhcmRJbmZvEjAKEmNzRW1rQWRkRmluZ2VySW5mbxiv", 
          "AiABKAsyEy5DU0Vta0FkZEZpbmdlckluZm8SLAoQY3NFbWtBcHBseU1lbWJl", 
          "chiwAiABKAsyES5DU0Vta0FwcGx5TWVtYmVyEiwKEHNjRW1rQXBwbHlNZW1i", 
          "ZXIYsQIgASgLMhEuU0NFbWtBcHBseU1lbWJlchIiCgtjc0Vta0NoYXJnZRiy", 
          "AiABKAsyDC5DU0Vta0NoYXJnZRIiCgtzY0Vta0NoYXJnZRizAiABKAsyDC5T", 
          "Q0Vta0NoYXJnZRIkCgxjc0Vta0NoZWNraW4YtAIgASgLMg0uQ1NFbWtDaGVj", 
          "a2luEiQKDHNjRW1rQ2hlY2tpbhi1AiABKAsyDS5TQ0Vta0NoZWNraW4SJgoN", 
          "Y3NFbWtDaGVja291dBi2AiABKAsyDi5DU0Vta0NoZWNrb3V0EiYKDXNjRW1r", 
          "Q2hlY2tvdXQYtwIgASgLMg4uU0NFbWtDaGVja291dBIiCgtjc0Vta0NhbmNl", 
          "bBi4AiABKAsyDC5DU0Vta0NhbmNlbBIqCg9zY0Vta1ZlcmlmeUxpc3QYuQIg", 
          "ASgLMhAuU0NFbWtWZXJpZnlMaXN0EioKD2NzRW1rVmVyaWZ5UHJvYxi7AiAB", 
          "KAsyEC5DU0Vta1ZlcmlmeVByb2MSKAoOc2NFbWtPcmRlckxpc3QYvAIgASgL", 
          "Mg8uU0NFbWtPcmRlckxpc3QSKAoOY3NFbWtPcmRlclByb2MYvQIgASgLMg8u", 
          "Q1NFbWtPcmRlclByb2MqsRAKA0NtZBIWChJDTURfVVBMT0FEX1BJQ1RVUkUQ", 
          "ARIYChRDTURfRE9XTkxPQURfUElDVFVSRRACEg0KCUNNRF9IRUFSVBADEhMK", 
          "D0NNRF9QTEFZRVJfS0lDSxAEEhEKDUNNRF9SRUNPTk5FQ1QQBRIRCg1DTURf", 
          "UFJFQ0hBUkdFEAYSEAoMQ01EX1RPQ0hBUkdFEAcSDgoKQ01EX1BSRUJVWRAI", 
          "Eg0KCUNNRF9UT0JVWRAJEg8KC0NNRF9NRVNTQUdFEAoSDwoLQ01EX0NPTU1B", 
          "TkQQCxISCg5DTURfR09PRFNfTElTVBAMEg8KCkNNRF9BVVRIRU4Q6AcSDgoJ", 
          "Q01EX0xPR0lOEOkHEhUKEENNRF9BQ0NPVU5UX0lORk8Q6gcSFgoRQ01EX1JF", 
          "QUxUSU1FX0lORk8Q6wcSDAoHQ01EX0xPRxDsBxISCg1DTURfQ0FMTF9MSVNU", 
          "EO0HEhUKEENNRF9DQUxMX1BST0NFU1MQ7gcSEgoNQ01EX1JPTEVfTElTVBDy", 
          "BxIRCgxDTURfUk9MRV9BREQQ8wcSEQoMQ01EX1JPTEVfREVMEPQHEhQKD0NN", 
          "RF9ST0xFX1VQREFURRD1BxIUCg9DTURfUk9MRV9SSUdIVFMQ9gcSEwoOQ01E", 
          "X1NUQUZGX0xJU1QQ/AcSEgoNQ01EX1NUQUZGX0FERBD9BxISCg1DTURfU1RB", 
          "RkZfREVMEP4HEhUKEENNRF9TVEFGRl9VUERBVEUQ/wcSEwoOQ01EX1NUQUZG", 
          "X0ZJTkQQgAgSEgoNQ01EX1NUQUZGX1NOUxCBCBIWChFDTURfU1RBRkZfQ09N", 
          "TUVOVBCCCBIWChFDTURfU1RBRkZfUEVSRk9STRCDCBIUCg9DTURfRUFSTklO", 
          "R19EQVkQhggSFgoRQ01EX0VBUk5JTkdfTU9OVEgQhwgSFQoQQ01EX0VBUk5J", 
          "TkdfWUVBUhCICBIWChFDTURfQ09NUFVURVJfTElTVBCQCBIVChBDTURfQ09N", 
          "UFVURVJfQUREEJEIEhUKEENNRF9DT01QVVRFUl9ERUwQkggSGAoTQ01EX0NP", 
          "TVBVVEVSX1VQREFURRCTCBIWChFDTURfQ09NUFVURVJfRklORBCUCBIWChFD", 
          "TURfQ09NUFVURVJfT1BFThCVCBIXChJDTURfQ09NUFVURVJfQ0xPU0UQlggS", 
          "FAoPQ01EX01FTUJFUl9MSVNUEJoIEhMKDkNNRF9NRU1CRVJfREVMEJsIEhYK", 
          "EUNNRF9NRU1CRVJfVVBEQVRFEJwIEhQKD0NNRF9NRU1CRVJfRklORBCdCBIZ", 
          "ChRDTURfTUVNQkVSX0NBUkRfSU5GTxCeCBIZChRDTURfU1lTX0JJTExJTkdf", 
          "TElTVBCkCBIbChZDTURfU1lTX0JJTExJTkdfVVBEQVRFEKUIEhEKDENNRF9T", 
          "WVNfSU5GTxCmCBIQCgtDTURfU1lTX0FERBCnCBIQCgtDTURfU1lTX0RFTBCo", 
          "CBITCg5DTURfU1lTX1VQREFURRCpCBISCg1DTURfR09PRFNfQUREEK4IEhIK", 
          "DUNNRF9HT09EU19ERUwQrwgSFQoQQ01EX0dPT0RTX1VQREFURRCwCBITCg5D", 
          "TURfR09PRFNfRklORBCxCBIUCg9DTURfR09PRFNfU0FMRVMQsggSGAoTQ01E", 
          "X0dPT0RTX1NBTEVTX1RPUBCzCBIUCg9DTURfR09PRFNfU1RPQ0sQtAgSFAoP", 
          "Q01EX0dPT0RTX09SREVSELUIEhsKFkNNRF9HT09EU19PUkRFUl9ERVRBSUwQ", 
          "tggSHAoXQ01EX0dPT0RTX09SREVSX1BST0NFU1MQtwgSGgoVQ01EX1NISUZU", 
          "X0RFTElWRVJFREJZELgIEhIKDUNNRF9TSElGVF9BREQQuQgSEwoOQ01EX1NI", 
          "SUZUX0ZJTkQQuggSFQoQQ01EX1FVRVJZX0NIQVJHRRDCCBIaChVDTURfUVVF", 
          "UllfRU1CQVJLQVRJT04QwwgSFQoQQ01EX1FVRVJZX0NPTlNVTRDECBIUCg9D", 
          "TURfUVVFUllfQVBQTFkQxQgSGAoTQ01EX1FVRVJZX09DQ1VQQU5DWRDGCBIU", 
          "Cg9DTURfQ0xJRU5UX09QRU4Q0A8SFQoQQ01EX0NMSUVOVF9DTE9TRRDRDxIV", 
          "ChBDTURfQ0xJRU5UX0xPR09OENIPEhYKEUNNRF9DTElFTlRfTE9HT0ZGENMP", 
          "EhYKEUNNRF9DTElFTlRfSFVOR1VQENQPEhgKE0NNRF9DTElFTlRfRVZBTFVB", 
          "VEUQ3g8SGgoVQ01EX0NMSUVOVF9WRVJJRllDT0RFEN8PEhoKFUNNRF9DTElF", 
          "TlRfQklORE1PQklMRRDgDxIRCgxDTURfQVBQX09QRU4QuBcSFQoQQ01EX0VN", 
          "S19VU0VSSU5GTxC5FxIZChRDTURfRU1LX0FERF9DQVJESU5GTxC6FxIbChZD", 
          "TURfRU1LX0FERF9GSU5HRVJJTkZPELsXEhkKFENNRF9FTUtfQVBQTFlfTUVN", 
          "QkVSELwXEhUKEENNRF9FTUtfUkVDSEFSR0UQvRcSFAoPQ01EX0VNS19DSEVD", 
          "S0lOEL4XEhUKEENNRF9FTUtfQ0hFQ0tPVVQQvxcSGQoUQ01EX0VNS19GSU5H", 
          "RVJfSU5QVVQQwBcSEwoOQ01EX0VNS19DQU5DRUwQwRcSGAoTQ01EX0VNS19W", 
          "RVJJRllfTElTVBDCFxIYChNDTURfRU1LX1ZFUklGWV9QUk9DEMMXEhcKEkNN", 
          "RF9FTUtfT1JERVJfTElTVBDEFxIXChJDTURfRU1LX09SREVSX1BST0MQxRdC", 
          "LQodY29tLnNreXNvZnQuY29yZS5hdXRvLm1lc3NhZ2VCDENvcmVQcm90b2Nv", 
        "bA=="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_MessagePack__Descriptor = Descriptor.MessageTypes[0];
      internal__static_MessagePack__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MessagePack, global::MessagePack.Builder>(internal__static_MessagePack__Descriptor,
              new string[] { "Cmd", "ReqId", "Version", "SessionId", "Content", });
      internal__static_MessageContent__Descriptor = Descriptor.MessageTypes[1];
      internal__static_MessageContent__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MessageContent, global::MessageContent.Builder>(internal__static_MessageContent__Descriptor,
              new string[] { "MessageType", "ErrorTip", "CsUpload", "ScUpload", "CsHeart", "ScHeart", "CsKick", "ScKick", "CsReconnect", "ScReconnect", "CsPreCharge", "ScPreCharge", "CsToCharge", "CsPreBuy", "ScPreBuy", "ScToBuy", "ScMessage", "CsCommand", "CsGoodsFind", "ScGoodsFind", "CsAuthen", "ScAuthen", "CsLogin", "ScLogin", "ScCallList", "CsCallProcess", "CsAccountInfo", "ScAccountInfo", "ScRealtimeInfo", "CsLog", "ScLog", "ScRoleList", "CsRoleAdd", "ScRoleAdd", "CsRoleDel", "CsRoleUpdate", "CsRoleRights", "ScAccountList", "CsAccountAdd", "CsAccountDel", "CsAccountUpdate", "CsAccountSnsSet", "CsStaffComment", "ScStaffComment", "CsStaffPerform", "ScStaffPerform", "CsEarning", "ScEarning", "ScComputerList", "CsComputerAdd", "CsComputerDel", "CsComputerUpdate", "CsComputerFind", "ScComputerFind", "CsMemberList", "ScMemberList", "CsMemberDel", "CsMemberUpdate", "CsMemberFind", "ScMemberFind", "CsMemberCardInfo", "ScMemberCardInfo", "ScSysBillList", "CsSysBillUpdate", "ScSysBillUpdate", "CsSysInfo", "ScSysInfo", "CsAddSysInfo", "CsDelSysInfo", "CsUpdateSysInfo", "CsGoodsAdd", "CsGoodsDel", "CsGoodsUpdate", "CsGoodsStock", "ScGoodsStock", "CsSalesRecord", "ScSalesRecord", "CsSalesTop", "ScSalesTop", "CsOrderProc", "CsOrderList", "ScOrderList", "CsOrderDetail", "ScOrderDetail", "ScShiftDeliveredBy", "CsShiftAdd", "CsShiftFind", "ScShiftFind", "CsQueryCharge", "ScQueryCharge", "CsQueryEmk", "ScQueryEmk", "CsQueryTrade", "ScQueryTrade", "CsQueryApply", "ScQueryApply", "CsQueryOccup", "ScQueryOccup", "CsClientOpen", "CsClientClose", "CsLogon", "ScLogon", "CsLogoff", "ScLogoff", "CsHungup", "CsEvaluate", "ScEvaluate", "CsVerifyCode", "ScVerifyCode", "CsBindMobile", "ScBindMobile", "CsEmkUserInfo", "ScEmkUserInfo", "CsEmkAddCardInfo", "CsEmkAddFingerInfo", "CsEmkApplyMember", "ScEmkApplyMember", "CsEmkCharge", "ScEmkCharge", "CsEmkCheckin", "ScEmkCheckin", "CsEmkCheckout", "ScEmkCheckout", "CsEmkCancel", "ScEmkVerifyList", "CsEmkVerifyProc", "ScEmkOrderList", "CsEmkOrderProc", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        global::BaseStruct.Descriptor, 
        global::Common.Descriptor, 
        global::Background.Descriptor, 
        global::Client.Descriptor, 
        global::Embark.Descriptor, 
        }, assigner);
  }
  #endregion
  
}
#region Enums
public enum Cmd {
  CMD_UPLOAD_PICTURE = 1,
  CMD_DOWNLOAD_PICTURE = 2,
  CMD_HEART = 3,
  CMD_PLAYER_KICK = 4,
  CMD_RECONNECT = 5,
  CMD_PRECHARGE = 6,
  CMD_TOCHARGE = 7,
  CMD_PREBUY = 8,
  CMD_TOBUY = 9,
  CMD_MESSAGE = 10,
  CMD_COMMAND = 11,
  CMD_GOODS_LIST = 12,
  CMD_AUTHEN = 1000,
  CMD_LOGIN = 1001,
  CMD_ACCOUNT_INFO = 1002,
  CMD_REALTIME_INFO = 1003,
  CMD_LOG = 1004,
  CMD_CALL_LIST = 1005,
  CMD_CALL_PROCESS = 1006,
  CMD_ROLE_LIST = 1010,
  CMD_ROLE_ADD = 1011,
  CMD_ROLE_DEL = 1012,
  CMD_ROLE_UPDATE = 1013,
  CMD_ROLE_RIGHTS = 1014,
  CMD_STAFF_LIST = 1020,
  CMD_STAFF_ADD = 1021,
  CMD_STAFF_DEL = 1022,
  CMD_STAFF_UPDATE = 1023,
  CMD_STAFF_FIND = 1024,
  CMD_STAFF_SNS = 1025,
  CMD_STAFF_COMMENT = 1026,
  CMD_STAFF_PERFORM = 1027,
  CMD_EARNING_DAY = 1030,
  CMD_EARNING_MONTH = 1031,
  CMD_EARNING_YEAR = 1032,
  CMD_COMPUTER_LIST = 1040,
  CMD_COMPUTER_ADD = 1041,
  CMD_COMPUTER_DEL = 1042,
  CMD_COMPUTER_UPDATE = 1043,
  CMD_COMPUTER_FIND = 1044,
  CMD_COMPUTER_OPEN = 1045,
  CMD_COMPUTER_CLOSE = 1046,
  CMD_MEMBER_LIST = 1050,
  CMD_MEMBER_DEL = 1051,
  CMD_MEMBER_UPDATE = 1052,
  CMD_MEMBER_FIND = 1053,
  CMD_MEMBER_CARD_INFO = 1054,
  CMD_SYS_BILLING_LIST = 1060,
  CMD_SYS_BILLING_UPDATE = 1061,
  CMD_SYS_INFO = 1062,
  CMD_SYS_ADD = 1063,
  CMD_SYS_DEL = 1064,
  CMD_SYS_UPDATE = 1065,
  CMD_GOODS_ADD = 1070,
  CMD_GOODS_DEL = 1071,
  CMD_GOODS_UPDATE = 1072,
  CMD_GOODS_FIND = 1073,
  CMD_GOODS_SALES = 1074,
  CMD_GOODS_SALES_TOP = 1075,
  CMD_GOODS_STOCK = 1076,
  CMD_GOODS_ORDER = 1077,
  CMD_GOODS_ORDER_DETAIL = 1078,
  CMD_GOODS_ORDER_PROCESS = 1079,
  CMD_SHIFT_DELIVEREDBY = 1080,
  CMD_SHIFT_ADD = 1081,
  CMD_SHIFT_FIND = 1082,
  CMD_QUERY_CHARGE = 1090,
  CMD_QUERY_EMBARKATION = 1091,
  CMD_QUERY_CONSUM = 1092,
  CMD_QUERY_APPLY = 1093,
  CMD_QUERY_OCCUPANCY = 1094,
  CMD_CLIENT_OPEN = 2000,
  CMD_CLIENT_CLOSE = 2001,
  CMD_CLIENT_LOGON = 2002,
  CMD_CLIENT_LOGOFF = 2003,
  CMD_CLIENT_HUNGUP = 2004,
  CMD_CLIENT_EVALUATE = 2014,
  CMD_CLIENT_VERIFYCODE = 2015,
  CMD_CLIENT_BINDMOBILE = 2016,
  CMD_APP_OPEN = 3000,
  CMD_EMK_USERINFO = 3001,
  CMD_EMK_ADD_CARDINFO = 3002,
  CMD_EMK_ADD_FINGERINFO = 3003,
  CMD_EMK_APPLY_MEMBER = 3004,
  CMD_EMK_RECHARGE = 3005,
  CMD_EMK_CHECKIN = 3006,
  CMD_EMK_CHECKOUT = 3007,
  CMD_EMK_FINGER_INPUT = 3008,
  CMD_EMK_CANCEL = 3009,
  CMD_EMK_VERIFY_LIST = 3010,
  CMD_EMK_VERIFY_PROC = 3011,
  CMD_EMK_ORDER_LIST = 3012,
  CMD_EMK_ORDER_PROC = 3013,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MessagePack : pb::GeneratedMessage<MessagePack, MessagePack.Builder> {
  private MessagePack() { }
  private static readonly MessagePack defaultInstance = new MessagePack().MakeReadOnly();
  private static readonly string[] _messagePackFieldNames = new string[] { "cmd", "content", "reqId", "sessionId", "version" };
  private static readonly uint[] _messagePackFieldTags = new uint[] { 8, 42, 16, 32, 24 };
  public static MessagePack DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MessagePack DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MessagePack ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_MessagePack__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MessagePack, MessagePack.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_MessagePack__FieldAccessorTable; }
  }
  
  public const int CmdFieldNumber = 1;
  private bool hasCmd;
  private global::Cmd cmd_ = global::Cmd.CMD_UPLOAD_PICTURE;
  public bool HasCmd {
    get { return hasCmd; }
  }
  public global::Cmd Cmd {
    get { return cmd_; }
  }
  
  public const int ReqIdFieldNumber = 2;
  private bool hasReqId;
  private int reqId_;
  public bool HasReqId {
    get { return hasReqId; }
  }
  public int ReqId {
    get { return reqId_; }
  }
  
  public const int VersionFieldNumber = 3;
  private bool hasVersion;
  private int version_;
  public bool HasVersion {
    get { return hasVersion; }
  }
  public int Version {
    get { return version_; }
  }
  
  public const int SessionIdFieldNumber = 4;
  private bool hasSessionId;
  private int sessionId_;
  public bool HasSessionId {
    get { return hasSessionId; }
  }
  public int SessionId {
    get { return sessionId_; }
  }
  
  public const int ContentFieldNumber = 5;
  private bool hasContent;
  private global::MessageContent content_;
  public bool HasContent {
    get { return hasContent; }
  }
  public global::MessageContent Content {
    get { return content_ ?? global::MessageContent.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCmd) return false;
      if (!hasReqId) return false;
      if (HasContent) {
        if (!Content.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _messagePackFieldNames;
    if (hasCmd) {
      output.WriteEnum(1, field_names[0], (int) Cmd, Cmd);
    }
    if (hasReqId) {
      output.WriteInt32(2, field_names[2], ReqId);
    }
    if (hasVersion) {
      output.WriteInt32(3, field_names[4], Version);
    }
    if (hasSessionId) {
      output.WriteInt32(4, field_names[3], SessionId);
    }
    if (hasContent) {
      output.WriteMessage(5, field_names[1], Content);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCmd) {
      size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Cmd);
    }
    if (hasReqId) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, ReqId);
    }
    if (hasVersion) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Version);
    }
    if (hasSessionId) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, SessionId);
    }
    if (hasContent) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, Content);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MessagePack ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MessagePack ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MessagePack ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MessagePack ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MessagePack ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MessagePack ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MessagePack ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MessagePack ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MessagePack ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MessagePack ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MessagePack MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MessagePack prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MessagePack, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MessagePack cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MessagePack result;
    
    private MessagePack PrepareBuilder() {
      if (resultIsReadOnly) {
        MessagePack original = result;
        result = new MessagePack();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MessagePack MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MessagePack.Descriptor; }
    }
    
    public override MessagePack DefaultInstanceForType {
      get { return global::MessagePack.DefaultInstance; }
    }
    
    public override MessagePack BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MessagePack) {
        return MergeFrom((MessagePack) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MessagePack other) {
      if (other == global::MessagePack.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCmd) {
        Cmd = other.Cmd;
      }
      if (other.HasReqId) {
        ReqId = other.ReqId;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      if (other.HasSessionId) {
        SessionId = other.SessionId;
      }
      if (other.HasContent) {
        MergeContent(other.Content);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_messagePackFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _messagePackFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.cmd_, out unknown)) {
              result.hasCmd = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
          case 16: {
            result.hasReqId = input.ReadInt32(ref result.reqId_);
            break;
          }
          case 24: {
            result.hasVersion = input.ReadInt32(ref result.version_);
            break;
          }
          case 32: {
            result.hasSessionId = input.ReadInt32(ref result.sessionId_);
            break;
          }
          case 42: {
            global::MessageContent.Builder subBuilder = global::MessageContent.CreateBuilder();
            if (result.hasContent) {
              subBuilder.MergeFrom(Content);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Content = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCmd {
     get { return result.hasCmd; }
    }
    public global::Cmd Cmd {
      get { return result.Cmd; }
      set { SetCmd(value); }
    }
    public Builder SetCmd(global::Cmd value) {
      PrepareBuilder();
      result.hasCmd = true;
      result.cmd_ = value;
      return this;
    }
    public Builder ClearCmd() {
      PrepareBuilder();
      result.hasCmd = false;
      result.cmd_ = global::Cmd.CMD_UPLOAD_PICTURE;
      return this;
    }
    
    public bool HasReqId {
      get { return result.hasReqId; }
    }
    public int ReqId {
      get { return result.ReqId; }
      set { SetReqId(value); }
    }
    public Builder SetReqId(int value) {
      PrepareBuilder();
      result.hasReqId = true;
      result.reqId_ = value;
      return this;
    }
    public Builder ClearReqId() {
      PrepareBuilder();
      result.hasReqId = false;
      result.reqId_ = 0;
      return this;
    }
    
    public bool HasVersion {
      get { return result.hasVersion; }
    }
    public int Version {
      get { return result.Version; }
      set { SetVersion(value); }
    }
    public Builder SetVersion(int value) {
      PrepareBuilder();
      result.hasVersion = true;
      result.version_ = value;
      return this;
    }
    public Builder ClearVersion() {
      PrepareBuilder();
      result.hasVersion = false;
      result.version_ = 0;
      return this;
    }
    
    public bool HasSessionId {
      get { return result.hasSessionId; }
    }
    public int SessionId {
      get { return result.SessionId; }
      set { SetSessionId(value); }
    }
    public Builder SetSessionId(int value) {
      PrepareBuilder();
      result.hasSessionId = true;
      result.sessionId_ = value;
      return this;
    }
    public Builder ClearSessionId() {
      PrepareBuilder();
      result.hasSessionId = false;
      result.sessionId_ = 0;
      return this;
    }
    
    public bool HasContent {
     get { return result.hasContent; }
    }
    public global::MessageContent Content {
      get { return result.Content; }
      set { SetContent(value); }
    }
    public Builder SetContent(global::MessageContent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasContent = true;
      result.content_ = value;
      return this;
    }
    public Builder SetContent(global::MessageContent.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasContent = true;
      result.content_ = builderForValue.Build();
      return this;
    }
    public Builder MergeContent(global::MessageContent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasContent &&
          result.content_ != global::MessageContent.DefaultInstance) {
          result.content_ = global::MessageContent.CreateBuilder(result.content_).MergeFrom(value).BuildPartial();
      } else {
        result.content_ = value;
      }
      result.hasContent = true;
      return this;
    }
    public Builder ClearContent() {
      PrepareBuilder();
      result.hasContent = false;
      result.content_ = null;
      return this;
    }
  }
  static MessagePack() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MessageContent : pb::GeneratedMessage<MessageContent, MessageContent.Builder> {
  private MessageContent() { }
  private static readonly MessageContent defaultInstance = new MessageContent().MakeReadOnly();
  private static readonly string[] _messageContentFieldNames = new string[] { "csAccountAdd", "csAccountDel", "csAccountInfo", "csAccountSnsSet", "csAccountUpdate", "csAddSysInfo", "csAuthen", "csBindMobile", "csCallProcess", "csClientClose", "csClientOpen", "csCommand", "csComputerAdd", "csComputerDel", "csComputerFind", "csComputerUpdate", "csDelSysInfo", "csEarning", "csEmkAddCardInfo", "csEmkAddFingerInfo", "csEmkApplyMember", "csEmkCancel", "csEmkCharge", "csEmkCheckin", "csEmkCheckout", "csEmkOrderProc", "csEmkUserInfo", "csEmkVerifyProc", "csEvaluate", "csGoodsAdd", "csGoodsDel", "csGoodsFind", "csGoodsStock", "csGoodsUpdate", "csHeart", "csHungup", "csKick", "csLog", "csLogin", "csLogoff", "csLogon", "csMemberCardInfo", "csMemberDel", "csMemberFind", "csMemberList", "csMemberUpdate", "csOrderDetail", "csOrderList", "csOrderProc", "csPreBuy", "csPreCharge", "csQueryApply", "csQueryCharge", "csQueryEmk", "csQueryOccup", "csQueryTrade", "csReconnect", "csRoleAdd", "csRoleDel", "csRoleRights", "csRoleUpdate", "csSalesRecord", "csSalesTop", "csShiftAdd", "csShiftFind", "csStaffComment", "csStaffPerform", "csSysBillUpdate", "csSysInfo", "csToCharge", "csUpdateSysInfo", "csUpload", "csVerifyCode", "errorTip", "messageType", "scAccountInfo", "scAccountList", "scAuthen", "scBindMobile", "scCallList", "scComputerFind", "scComputerList", "scEarning", "scEmkApplyMember", "scEmkCharge", "scEmkCheckin", "scEmkCheckout", "scEmkOrderList", "scEmkUserInfo", "scEmkVerifyList", "scEvaluate", "scGoodsFind", "scGoodsStock", "scHeart", "scKick", "scLog", "scLogin", "scLogoff", "scLogon", "scMemberCardInfo", "scMemberFind", "scMemberList", "scMessage", "scOrderDetail", "scOrderList", "scPreBuy", "scPreCharge", "scQueryApply", "scQueryCharge", "scQueryEmk", "scQueryOccup", "scQueryTrade", "scRealtimeInfo", "scReconnect", "scRoleAdd", "scRoleList", "scSalesRecord", "scSalesTop", "scShiftDeliveredBy", "scShiftFind", "scStaffComment", "scStaffPerform", "scSysBillList", "scSysBillUpdate", "scSysInfo", "scToBuy", "scUpload", "scVerifyCode" };
  private static readonly uint[] _messageContentFieldTags = new uint[] { 330, 338, 234, 354, 346, 578, 186, 1778, 226, 1610, 1602, 146, 418, 426, 442, 434, 586, 394, 2418, 2426, 2434, 2498, 2450, 2466, 2482, 2538, 2402, 2522, 1746, 602, 610, 154, 626, 618, 42, 1650, 58, 258, 202, 1634, 1618, 522, 490, 506, 458, 498, 698, 682, 674, 114, 90, 794, 746, 762, 810, 778, 74, 282, 298, 314, 306, 642, 658, 722, 730, 362, 378, 546, 562, 106, 594, 26, 1762, 18, 8, 242, 322, 194, 1786, 218, 450, 410, 402, 2442, 2458, 2474, 2490, 2530, 2410, 2506, 1754, 162, 634, 50, 66, 266, 210, 1642, 1626, 530, 514, 466, 138, 706, 690, 122, 98, 802, 754, 770, 818, 786, 250, 82, 290, 274, 650, 666, 714, 738, 370, 386, 538, 554, 570, 130, 34, 1770 };
  public static MessageContent DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MessageContent DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MessageContent ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_MessageContent__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MessageContent, MessageContent.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_MessageContent__FieldAccessorTable; }
  }
  
  public const int MessageTypeFieldNumber = 1;
  private bool hasMessageType;
  private int messageType_;
  public bool HasMessageType {
    get { return hasMessageType; }
  }
  public int MessageType {
    get { return messageType_; }
  }
  
  public const int ErrorTipFieldNumber = 2;
  private bool hasErrorTip;
  private global::StructErrorTip errorTip_;
  public bool HasErrorTip {
    get { return hasErrorTip; }
  }
  public global::StructErrorTip ErrorTip {
    get { return errorTip_ ?? global::StructErrorTip.DefaultInstance; }
  }
  
  public const int CsUploadFieldNumber = 3;
  private bool hasCsUpload;
  private global::CSUploadPicture csUpload_;
  public bool HasCsUpload {
    get { return hasCsUpload; }
  }
  public global::CSUploadPicture CsUpload {
    get { return csUpload_ ?? global::CSUploadPicture.DefaultInstance; }
  }
  
  public const int ScUploadFieldNumber = 4;
  private bool hasScUpload;
  private global::SCUploadPicture scUpload_;
  public bool HasScUpload {
    get { return hasScUpload; }
  }
  public global::SCUploadPicture ScUpload {
    get { return scUpload_ ?? global::SCUploadPicture.DefaultInstance; }
  }
  
  public const int CsHeartFieldNumber = 5;
  private bool hasCsHeart;
  private global::CSHeart csHeart_;
  public bool HasCsHeart {
    get { return hasCsHeart; }
  }
  public global::CSHeart CsHeart {
    get { return csHeart_ ?? global::CSHeart.DefaultInstance; }
  }
  
  public const int ScHeartFieldNumber = 6;
  private bool hasScHeart;
  private global::SCHeart scHeart_;
  public bool HasScHeart {
    get { return hasScHeart; }
  }
  public global::SCHeart ScHeart {
    get { return scHeart_ ?? global::SCHeart.DefaultInstance; }
  }
  
  public const int CsKickFieldNumber = 7;
  private bool hasCsKick;
  private global::CSKick csKick_;
  public bool HasCsKick {
    get { return hasCsKick; }
  }
  public global::CSKick CsKick {
    get { return csKick_ ?? global::CSKick.DefaultInstance; }
  }
  
  public const int ScKickFieldNumber = 8;
  private bool hasScKick;
  private global::SCKick scKick_;
  public bool HasScKick {
    get { return hasScKick; }
  }
  public global::SCKick ScKick {
    get { return scKick_ ?? global::SCKick.DefaultInstance; }
  }
  
  public const int CsReconnectFieldNumber = 9;
  private bool hasCsReconnect;
  private global::CSReconnect csReconnect_;
  public bool HasCsReconnect {
    get { return hasCsReconnect; }
  }
  public global::CSReconnect CsReconnect {
    get { return csReconnect_ ?? global::CSReconnect.DefaultInstance; }
  }
  
  public const int ScReconnectFieldNumber = 10;
  private bool hasScReconnect;
  private global::SCReconnect scReconnect_;
  public bool HasScReconnect {
    get { return hasScReconnect; }
  }
  public global::SCReconnect ScReconnect {
    get { return scReconnect_ ?? global::SCReconnect.DefaultInstance; }
  }
  
  public const int CsPreChargeFieldNumber = 11;
  private bool hasCsPreCharge;
  private global::CSPreCharge csPreCharge_;
  public bool HasCsPreCharge {
    get { return hasCsPreCharge; }
  }
  public global::CSPreCharge CsPreCharge {
    get { return csPreCharge_ ?? global::CSPreCharge.DefaultInstance; }
  }
  
  public const int ScPreChargeFieldNumber = 12;
  private bool hasScPreCharge;
  private global::SCPreCharge scPreCharge_;
  public bool HasScPreCharge {
    get { return hasScPreCharge; }
  }
  public global::SCPreCharge ScPreCharge {
    get { return scPreCharge_ ?? global::SCPreCharge.DefaultInstance; }
  }
  
  public const int CsToChargeFieldNumber = 13;
  private bool hasCsToCharge;
  private global::SCToCharge csToCharge_;
  public bool HasCsToCharge {
    get { return hasCsToCharge; }
  }
  public global::SCToCharge CsToCharge {
    get { return csToCharge_ ?? global::SCToCharge.DefaultInstance; }
  }
  
  public const int CsPreBuyFieldNumber = 14;
  private bool hasCsPreBuy;
  private global::CSPreBuy csPreBuy_;
  public bool HasCsPreBuy {
    get { return hasCsPreBuy; }
  }
  public global::CSPreBuy CsPreBuy {
    get { return csPreBuy_ ?? global::CSPreBuy.DefaultInstance; }
  }
  
  public const int ScPreBuyFieldNumber = 15;
  private bool hasScPreBuy;
  private global::SCPreBuy scPreBuy_;
  public bool HasScPreBuy {
    get { return hasScPreBuy; }
  }
  public global::SCPreBuy ScPreBuy {
    get { return scPreBuy_ ?? global::SCPreBuy.DefaultInstance; }
  }
  
  public const int ScToBuyFieldNumber = 16;
  private bool hasScToBuy;
  private global::SCToBuy scToBuy_;
  public bool HasScToBuy {
    get { return hasScToBuy; }
  }
  public global::SCToBuy ScToBuy {
    get { return scToBuy_ ?? global::SCToBuy.DefaultInstance; }
  }
  
  public const int ScMessageFieldNumber = 17;
  private bool hasScMessage;
  private global::SCMessage scMessage_;
  public bool HasScMessage {
    get { return hasScMessage; }
  }
  public global::SCMessage ScMessage {
    get { return scMessage_ ?? global::SCMessage.DefaultInstance; }
  }
  
  public const int CsCommandFieldNumber = 18;
  private bool hasCsCommand;
  private global::CSCommand csCommand_;
  public bool HasCsCommand {
    get { return hasCsCommand; }
  }
  public global::CSCommand CsCommand {
    get { return csCommand_ ?? global::CSCommand.DefaultInstance; }
  }
  
  public const int CsGoodsFindFieldNumber = 19;
  private bool hasCsGoodsFind;
  private global::CSGoodsFind csGoodsFind_;
  public bool HasCsGoodsFind {
    get { return hasCsGoodsFind; }
  }
  public global::CSGoodsFind CsGoodsFind {
    get { return csGoodsFind_ ?? global::CSGoodsFind.DefaultInstance; }
  }
  
  public const int ScGoodsFindFieldNumber = 20;
  private bool hasScGoodsFind;
  private global::SCGoodsFind scGoodsFind_;
  public bool HasScGoodsFind {
    get { return hasScGoodsFind; }
  }
  public global::SCGoodsFind ScGoodsFind {
    get { return scGoodsFind_ ?? global::SCGoodsFind.DefaultInstance; }
  }
  
  public const int CsAuthenFieldNumber = 23;
  private bool hasCsAuthen;
  private global::CSAuthen csAuthen_;
  public bool HasCsAuthen {
    get { return hasCsAuthen; }
  }
  public global::CSAuthen CsAuthen {
    get { return csAuthen_ ?? global::CSAuthen.DefaultInstance; }
  }
  
  public const int ScAuthenFieldNumber = 24;
  private bool hasScAuthen;
  private global::SCAuthen scAuthen_;
  public bool HasScAuthen {
    get { return hasScAuthen; }
  }
  public global::SCAuthen ScAuthen {
    get { return scAuthen_ ?? global::SCAuthen.DefaultInstance; }
  }
  
  public const int CsLoginFieldNumber = 25;
  private bool hasCsLogin;
  private global::CSLogin csLogin_;
  public bool HasCsLogin {
    get { return hasCsLogin; }
  }
  public global::CSLogin CsLogin {
    get { return csLogin_ ?? global::CSLogin.DefaultInstance; }
  }
  
  public const int ScLoginFieldNumber = 26;
  private bool hasScLogin;
  private global::SCLogin scLogin_;
  public bool HasScLogin {
    get { return hasScLogin; }
  }
  public global::SCLogin ScLogin {
    get { return scLogin_ ?? global::SCLogin.DefaultInstance; }
  }
  
  public const int ScCallListFieldNumber = 27;
  private bool hasScCallList;
  private global::SCCallList scCallList_;
  public bool HasScCallList {
    get { return hasScCallList; }
  }
  public global::SCCallList ScCallList {
    get { return scCallList_ ?? global::SCCallList.DefaultInstance; }
  }
  
  public const int CsCallProcessFieldNumber = 28;
  private bool hasCsCallProcess;
  private global::CSCallProcess csCallProcess_;
  public bool HasCsCallProcess {
    get { return hasCsCallProcess; }
  }
  public global::CSCallProcess CsCallProcess {
    get { return csCallProcess_ ?? global::CSCallProcess.DefaultInstance; }
  }
  
  public const int CsAccountInfoFieldNumber = 29;
  private bool hasCsAccountInfo;
  private global::CSAccountInfo csAccountInfo_;
  public bool HasCsAccountInfo {
    get { return hasCsAccountInfo; }
  }
  public global::CSAccountInfo CsAccountInfo {
    get { return csAccountInfo_ ?? global::CSAccountInfo.DefaultInstance; }
  }
  
  public const int ScAccountInfoFieldNumber = 30;
  private bool hasScAccountInfo;
  private global::SCAccountInfo scAccountInfo_;
  public bool HasScAccountInfo {
    get { return hasScAccountInfo; }
  }
  public global::SCAccountInfo ScAccountInfo {
    get { return scAccountInfo_ ?? global::SCAccountInfo.DefaultInstance; }
  }
  
  public const int ScRealtimeInfoFieldNumber = 31;
  private bool hasScRealtimeInfo;
  private global::SCRealtimeInfo scRealtimeInfo_;
  public bool HasScRealtimeInfo {
    get { return hasScRealtimeInfo; }
  }
  public global::SCRealtimeInfo ScRealtimeInfo {
    get { return scRealtimeInfo_ ?? global::SCRealtimeInfo.DefaultInstance; }
  }
  
  public const int CsLogFieldNumber = 32;
  private bool hasCsLog;
  private global::CSLog csLog_;
  public bool HasCsLog {
    get { return hasCsLog; }
  }
  public global::CSLog CsLog {
    get { return csLog_ ?? global::CSLog.DefaultInstance; }
  }
  
  public const int ScLogFieldNumber = 33;
  private bool hasScLog;
  private global::SCLog scLog_;
  public bool HasScLog {
    get { return hasScLog; }
  }
  public global::SCLog ScLog {
    get { return scLog_ ?? global::SCLog.DefaultInstance; }
  }
  
  public const int ScRoleListFieldNumber = 34;
  private bool hasScRoleList;
  private global::SCRoleList scRoleList_;
  public bool HasScRoleList {
    get { return hasScRoleList; }
  }
  public global::SCRoleList ScRoleList {
    get { return scRoleList_ ?? global::SCRoleList.DefaultInstance; }
  }
  
  public const int CsRoleAddFieldNumber = 35;
  private bool hasCsRoleAdd;
  private global::CSRoleAdd csRoleAdd_;
  public bool HasCsRoleAdd {
    get { return hasCsRoleAdd; }
  }
  public global::CSRoleAdd CsRoleAdd {
    get { return csRoleAdd_ ?? global::CSRoleAdd.DefaultInstance; }
  }
  
  public const int ScRoleAddFieldNumber = 36;
  private bool hasScRoleAdd;
  private global::SCRoleAdd scRoleAdd_;
  public bool HasScRoleAdd {
    get { return hasScRoleAdd; }
  }
  public global::SCRoleAdd ScRoleAdd {
    get { return scRoleAdd_ ?? global::SCRoleAdd.DefaultInstance; }
  }
  
  public const int CsRoleDelFieldNumber = 37;
  private bool hasCsRoleDel;
  private global::CSRoleDel csRoleDel_;
  public bool HasCsRoleDel {
    get { return hasCsRoleDel; }
  }
  public global::CSRoleDel CsRoleDel {
    get { return csRoleDel_ ?? global::CSRoleDel.DefaultInstance; }
  }
  
  public const int CsRoleUpdateFieldNumber = 38;
  private bool hasCsRoleUpdate;
  private global::CSRoleUpdate csRoleUpdate_;
  public bool HasCsRoleUpdate {
    get { return hasCsRoleUpdate; }
  }
  public global::CSRoleUpdate CsRoleUpdate {
    get { return csRoleUpdate_ ?? global::CSRoleUpdate.DefaultInstance; }
  }
  
  public const int CsRoleRightsFieldNumber = 39;
  private bool hasCsRoleRights;
  private global::CSRoleRights csRoleRights_;
  public bool HasCsRoleRights {
    get { return hasCsRoleRights; }
  }
  public global::CSRoleRights CsRoleRights {
    get { return csRoleRights_ ?? global::CSRoleRights.DefaultInstance; }
  }
  
  public const int ScAccountListFieldNumber = 40;
  private bool hasScAccountList;
  private global::SCAccountList scAccountList_;
  public bool HasScAccountList {
    get { return hasScAccountList; }
  }
  public global::SCAccountList ScAccountList {
    get { return scAccountList_ ?? global::SCAccountList.DefaultInstance; }
  }
  
  public const int CsAccountAddFieldNumber = 41;
  private bool hasCsAccountAdd;
  private global::CSAccountAdd csAccountAdd_;
  public bool HasCsAccountAdd {
    get { return hasCsAccountAdd; }
  }
  public global::CSAccountAdd CsAccountAdd {
    get { return csAccountAdd_ ?? global::CSAccountAdd.DefaultInstance; }
  }
  
  public const int CsAccountDelFieldNumber = 42;
  private bool hasCsAccountDel;
  private global::CSAccountDel csAccountDel_;
  public bool HasCsAccountDel {
    get { return hasCsAccountDel; }
  }
  public global::CSAccountDel CsAccountDel {
    get { return csAccountDel_ ?? global::CSAccountDel.DefaultInstance; }
  }
  
  public const int CsAccountUpdateFieldNumber = 43;
  private bool hasCsAccountUpdate;
  private global::CSAccountUpdate csAccountUpdate_;
  public bool HasCsAccountUpdate {
    get { return hasCsAccountUpdate; }
  }
  public global::CSAccountUpdate CsAccountUpdate {
    get { return csAccountUpdate_ ?? global::CSAccountUpdate.DefaultInstance; }
  }
  
  public const int CsAccountSnsSetFieldNumber = 44;
  private bool hasCsAccountSnsSet;
  private global::CSAccountSnsSet csAccountSnsSet_;
  public bool HasCsAccountSnsSet {
    get { return hasCsAccountSnsSet; }
  }
  public global::CSAccountSnsSet CsAccountSnsSet {
    get { return csAccountSnsSet_ ?? global::CSAccountSnsSet.DefaultInstance; }
  }
  
  public const int CsStaffCommentFieldNumber = 45;
  private bool hasCsStaffComment;
  private global::CSStaffComment csStaffComment_;
  public bool HasCsStaffComment {
    get { return hasCsStaffComment; }
  }
  public global::CSStaffComment CsStaffComment {
    get { return csStaffComment_ ?? global::CSStaffComment.DefaultInstance; }
  }
  
  public const int ScStaffCommentFieldNumber = 46;
  private bool hasScStaffComment;
  private global::SCStaffComment scStaffComment_;
  public bool HasScStaffComment {
    get { return hasScStaffComment; }
  }
  public global::SCStaffComment ScStaffComment {
    get { return scStaffComment_ ?? global::SCStaffComment.DefaultInstance; }
  }
  
  public const int CsStaffPerformFieldNumber = 47;
  private bool hasCsStaffPerform;
  private global::CSStaffPerform csStaffPerform_;
  public bool HasCsStaffPerform {
    get { return hasCsStaffPerform; }
  }
  public global::CSStaffPerform CsStaffPerform {
    get { return csStaffPerform_ ?? global::CSStaffPerform.DefaultInstance; }
  }
  
  public const int ScStaffPerformFieldNumber = 48;
  private bool hasScStaffPerform;
  private global::SCStaffPerform scStaffPerform_;
  public bool HasScStaffPerform {
    get { return hasScStaffPerform; }
  }
  public global::SCStaffPerform ScStaffPerform {
    get { return scStaffPerform_ ?? global::SCStaffPerform.DefaultInstance; }
  }
  
  public const int CsEarningFieldNumber = 49;
  private bool hasCsEarning;
  private global::CSEarning csEarning_;
  public bool HasCsEarning {
    get { return hasCsEarning; }
  }
  public global::CSEarning CsEarning {
    get { return csEarning_ ?? global::CSEarning.DefaultInstance; }
  }
  
  public const int ScEarningFieldNumber = 50;
  private bool hasScEarning;
  private global::SCEarning scEarning_;
  public bool HasScEarning {
    get { return hasScEarning; }
  }
  public global::SCEarning ScEarning {
    get { return scEarning_ ?? global::SCEarning.DefaultInstance; }
  }
  
  public const int ScComputerListFieldNumber = 51;
  private bool hasScComputerList;
  private global::SCComputerList scComputerList_;
  public bool HasScComputerList {
    get { return hasScComputerList; }
  }
  public global::SCComputerList ScComputerList {
    get { return scComputerList_ ?? global::SCComputerList.DefaultInstance; }
  }
  
  public const int CsComputerAddFieldNumber = 52;
  private bool hasCsComputerAdd;
  private global::CSComputerAdd csComputerAdd_;
  public bool HasCsComputerAdd {
    get { return hasCsComputerAdd; }
  }
  public global::CSComputerAdd CsComputerAdd {
    get { return csComputerAdd_ ?? global::CSComputerAdd.DefaultInstance; }
  }
  
  public const int CsComputerDelFieldNumber = 53;
  private bool hasCsComputerDel;
  private global::CSComputerDel csComputerDel_;
  public bool HasCsComputerDel {
    get { return hasCsComputerDel; }
  }
  public global::CSComputerDel CsComputerDel {
    get { return csComputerDel_ ?? global::CSComputerDel.DefaultInstance; }
  }
  
  public const int CsComputerUpdateFieldNumber = 54;
  private bool hasCsComputerUpdate;
  private global::CSComputerUpdate csComputerUpdate_;
  public bool HasCsComputerUpdate {
    get { return hasCsComputerUpdate; }
  }
  public global::CSComputerUpdate CsComputerUpdate {
    get { return csComputerUpdate_ ?? global::CSComputerUpdate.DefaultInstance; }
  }
  
  public const int CsComputerFindFieldNumber = 55;
  private bool hasCsComputerFind;
  private global::CSComputerFind csComputerFind_;
  public bool HasCsComputerFind {
    get { return hasCsComputerFind; }
  }
  public global::CSComputerFind CsComputerFind {
    get { return csComputerFind_ ?? global::CSComputerFind.DefaultInstance; }
  }
  
  public const int ScComputerFindFieldNumber = 56;
  private bool hasScComputerFind;
  private global::SCComputerFind scComputerFind_;
  public bool HasScComputerFind {
    get { return hasScComputerFind; }
  }
  public global::SCComputerFind ScComputerFind {
    get { return scComputerFind_ ?? global::SCComputerFind.DefaultInstance; }
  }
  
  public const int CsMemberListFieldNumber = 57;
  private bool hasCsMemberList;
  private global::CSMemberList csMemberList_;
  public bool HasCsMemberList {
    get { return hasCsMemberList; }
  }
  public global::CSMemberList CsMemberList {
    get { return csMemberList_ ?? global::CSMemberList.DefaultInstance; }
  }
  
  public const int ScMemberListFieldNumber = 58;
  private bool hasScMemberList;
  private global::SCMemberList scMemberList_;
  public bool HasScMemberList {
    get { return hasScMemberList; }
  }
  public global::SCMemberList ScMemberList {
    get { return scMemberList_ ?? global::SCMemberList.DefaultInstance; }
  }
  
  public const int CsMemberDelFieldNumber = 61;
  private bool hasCsMemberDel;
  private global::CSMemberDel csMemberDel_;
  public bool HasCsMemberDel {
    get { return hasCsMemberDel; }
  }
  public global::CSMemberDel CsMemberDel {
    get { return csMemberDel_ ?? global::CSMemberDel.DefaultInstance; }
  }
  
  public const int CsMemberUpdateFieldNumber = 62;
  private bool hasCsMemberUpdate;
  private global::CSMemberUpdateStatus csMemberUpdate_;
  public bool HasCsMemberUpdate {
    get { return hasCsMemberUpdate; }
  }
  public global::CSMemberUpdateStatus CsMemberUpdate {
    get { return csMemberUpdate_ ?? global::CSMemberUpdateStatus.DefaultInstance; }
  }
  
  public const int CsMemberFindFieldNumber = 63;
  private bool hasCsMemberFind;
  private global::CSMemberFind csMemberFind_;
  public bool HasCsMemberFind {
    get { return hasCsMemberFind; }
  }
  public global::CSMemberFind CsMemberFind {
    get { return csMemberFind_ ?? global::CSMemberFind.DefaultInstance; }
  }
  
  public const int ScMemberFindFieldNumber = 64;
  private bool hasScMemberFind;
  private global::SCMemberFind scMemberFind_;
  public bool HasScMemberFind {
    get { return hasScMemberFind; }
  }
  public global::SCMemberFind ScMemberFind {
    get { return scMemberFind_ ?? global::SCMemberFind.DefaultInstance; }
  }
  
  public const int CsMemberCardInfoFieldNumber = 65;
  private bool hasCsMemberCardInfo;
  private global::CSMemberCardInfo csMemberCardInfo_;
  public bool HasCsMemberCardInfo {
    get { return hasCsMemberCardInfo; }
  }
  public global::CSMemberCardInfo CsMemberCardInfo {
    get { return csMemberCardInfo_ ?? global::CSMemberCardInfo.DefaultInstance; }
  }
  
  public const int ScMemberCardInfoFieldNumber = 66;
  private bool hasScMemberCardInfo;
  private global::SCMemberCardInfo scMemberCardInfo_;
  public bool HasScMemberCardInfo {
    get { return hasScMemberCardInfo; }
  }
  public global::SCMemberCardInfo ScMemberCardInfo {
    get { return scMemberCardInfo_ ?? global::SCMemberCardInfo.DefaultInstance; }
  }
  
  public const int ScSysBillListFieldNumber = 67;
  private bool hasScSysBillList;
  private global::SCSysBillList scSysBillList_;
  public bool HasScSysBillList {
    get { return hasScSysBillList; }
  }
  public global::SCSysBillList ScSysBillList {
    get { return scSysBillList_ ?? global::SCSysBillList.DefaultInstance; }
  }
  
  public const int CsSysBillUpdateFieldNumber = 68;
  private bool hasCsSysBillUpdate;
  private global::CSSysBillUpdate csSysBillUpdate_;
  public bool HasCsSysBillUpdate {
    get { return hasCsSysBillUpdate; }
  }
  public global::CSSysBillUpdate CsSysBillUpdate {
    get { return csSysBillUpdate_ ?? global::CSSysBillUpdate.DefaultInstance; }
  }
  
  public const int ScSysBillUpdateFieldNumber = 69;
  private bool hasScSysBillUpdate;
  private global::SCSysBillUpdate scSysBillUpdate_;
  public bool HasScSysBillUpdate {
    get { return hasScSysBillUpdate; }
  }
  public global::SCSysBillUpdate ScSysBillUpdate {
    get { return scSysBillUpdate_ ?? global::SCSysBillUpdate.DefaultInstance; }
  }
  
  public const int CsSysInfoFieldNumber = 70;
  private bool hasCsSysInfo;
  private global::CSSysInto csSysInfo_;
  public bool HasCsSysInfo {
    get { return hasCsSysInfo; }
  }
  public global::CSSysInto CsSysInfo {
    get { return csSysInfo_ ?? global::CSSysInto.DefaultInstance; }
  }
  
  public const int ScSysInfoFieldNumber = 71;
  private bool hasScSysInfo;
  private global::SCSysInfo scSysInfo_;
  public bool HasScSysInfo {
    get { return hasScSysInfo; }
  }
  public global::SCSysInfo ScSysInfo {
    get { return scSysInfo_ ?? global::SCSysInfo.DefaultInstance; }
  }
  
  public const int CsAddSysInfoFieldNumber = 72;
  private bool hasCsAddSysInfo;
  private global::CSAddSysInfo csAddSysInfo_;
  public bool HasCsAddSysInfo {
    get { return hasCsAddSysInfo; }
  }
  public global::CSAddSysInfo CsAddSysInfo {
    get { return csAddSysInfo_ ?? global::CSAddSysInfo.DefaultInstance; }
  }
  
  public const int CsDelSysInfoFieldNumber = 73;
  private bool hasCsDelSysInfo;
  private global::CSDelSysInfo csDelSysInfo_;
  public bool HasCsDelSysInfo {
    get { return hasCsDelSysInfo; }
  }
  public global::CSDelSysInfo CsDelSysInfo {
    get { return csDelSysInfo_ ?? global::CSDelSysInfo.DefaultInstance; }
  }
  
  public const int CsUpdateSysInfoFieldNumber = 74;
  private bool hasCsUpdateSysInfo;
  private global::CSUpdateSysInfo csUpdateSysInfo_;
  public bool HasCsUpdateSysInfo {
    get { return hasCsUpdateSysInfo; }
  }
  public global::CSUpdateSysInfo CsUpdateSysInfo {
    get { return csUpdateSysInfo_ ?? global::CSUpdateSysInfo.DefaultInstance; }
  }
  
  public const int CsGoodsAddFieldNumber = 75;
  private bool hasCsGoodsAdd;
  private global::CSGoodsAdd csGoodsAdd_;
  public bool HasCsGoodsAdd {
    get { return hasCsGoodsAdd; }
  }
  public global::CSGoodsAdd CsGoodsAdd {
    get { return csGoodsAdd_ ?? global::CSGoodsAdd.DefaultInstance; }
  }
  
  public const int CsGoodsDelFieldNumber = 76;
  private bool hasCsGoodsDel;
  private global::CSGoodsDel csGoodsDel_;
  public bool HasCsGoodsDel {
    get { return hasCsGoodsDel; }
  }
  public global::CSGoodsDel CsGoodsDel {
    get { return csGoodsDel_ ?? global::CSGoodsDel.DefaultInstance; }
  }
  
  public const int CsGoodsUpdateFieldNumber = 77;
  private bool hasCsGoodsUpdate;
  private global::CSGoodsUpdate csGoodsUpdate_;
  public bool HasCsGoodsUpdate {
    get { return hasCsGoodsUpdate; }
  }
  public global::CSGoodsUpdate CsGoodsUpdate {
    get { return csGoodsUpdate_ ?? global::CSGoodsUpdate.DefaultInstance; }
  }
  
  public const int CsGoodsStockFieldNumber = 78;
  private bool hasCsGoodsStock;
  private global::CSGoodsStock csGoodsStock_;
  public bool HasCsGoodsStock {
    get { return hasCsGoodsStock; }
  }
  public global::CSGoodsStock CsGoodsStock {
    get { return csGoodsStock_ ?? global::CSGoodsStock.DefaultInstance; }
  }
  
  public const int ScGoodsStockFieldNumber = 79;
  private bool hasScGoodsStock;
  private global::SCGoodsStock scGoodsStock_;
  public bool HasScGoodsStock {
    get { return hasScGoodsStock; }
  }
  public global::SCGoodsStock ScGoodsStock {
    get { return scGoodsStock_ ?? global::SCGoodsStock.DefaultInstance; }
  }
  
  public const int CsSalesRecordFieldNumber = 80;
  private bool hasCsSalesRecord;
  private global::CSSalesRecord csSalesRecord_;
  public bool HasCsSalesRecord {
    get { return hasCsSalesRecord; }
  }
  public global::CSSalesRecord CsSalesRecord {
    get { return csSalesRecord_ ?? global::CSSalesRecord.DefaultInstance; }
  }
  
  public const int ScSalesRecordFieldNumber = 81;
  private bool hasScSalesRecord;
  private global::SCSalesRecord scSalesRecord_;
  public bool HasScSalesRecord {
    get { return hasScSalesRecord; }
  }
  public global::SCSalesRecord ScSalesRecord {
    get { return scSalesRecord_ ?? global::SCSalesRecord.DefaultInstance; }
  }
  
  public const int CsSalesTopFieldNumber = 82;
  private bool hasCsSalesTop;
  private global::CSSalesTop csSalesTop_;
  public bool HasCsSalesTop {
    get { return hasCsSalesTop; }
  }
  public global::CSSalesTop CsSalesTop {
    get { return csSalesTop_ ?? global::CSSalesTop.DefaultInstance; }
  }
  
  public const int ScSalesTopFieldNumber = 83;
  private bool hasScSalesTop;
  private global::SCSalesTop scSalesTop_;
  public bool HasScSalesTop {
    get { return hasScSalesTop; }
  }
  public global::SCSalesTop ScSalesTop {
    get { return scSalesTop_ ?? global::SCSalesTop.DefaultInstance; }
  }
  
  public const int CsOrderProcFieldNumber = 84;
  private bool hasCsOrderProc;
  private global::CSOrderProc csOrderProc_;
  public bool HasCsOrderProc {
    get { return hasCsOrderProc; }
  }
  public global::CSOrderProc CsOrderProc {
    get { return csOrderProc_ ?? global::CSOrderProc.DefaultInstance; }
  }
  
  public const int CsOrderListFieldNumber = 85;
  private bool hasCsOrderList;
  private global::CSOrderList csOrderList_;
  public bool HasCsOrderList {
    get { return hasCsOrderList; }
  }
  public global::CSOrderList CsOrderList {
    get { return csOrderList_ ?? global::CSOrderList.DefaultInstance; }
  }
  
  public const int ScOrderListFieldNumber = 86;
  private bool hasScOrderList;
  private global::SCOrderList scOrderList_;
  public bool HasScOrderList {
    get { return hasScOrderList; }
  }
  public global::SCOrderList ScOrderList {
    get { return scOrderList_ ?? global::SCOrderList.DefaultInstance; }
  }
  
  public const int CsOrderDetailFieldNumber = 87;
  private bool hasCsOrderDetail;
  private global::CSOrderDetail csOrderDetail_;
  public bool HasCsOrderDetail {
    get { return hasCsOrderDetail; }
  }
  public global::CSOrderDetail CsOrderDetail {
    get { return csOrderDetail_ ?? global::CSOrderDetail.DefaultInstance; }
  }
  
  public const int ScOrderDetailFieldNumber = 88;
  private bool hasScOrderDetail;
  private global::SCOrderDetail scOrderDetail_;
  public bool HasScOrderDetail {
    get { return hasScOrderDetail; }
  }
  public global::SCOrderDetail ScOrderDetail {
    get { return scOrderDetail_ ?? global::SCOrderDetail.DefaultInstance; }
  }
  
  public const int ScShiftDeliveredByFieldNumber = 89;
  private bool hasScShiftDeliveredBy;
  private global::SCShiftDeliveredBy scShiftDeliveredBy_;
  public bool HasScShiftDeliveredBy {
    get { return hasScShiftDeliveredBy; }
  }
  public global::SCShiftDeliveredBy ScShiftDeliveredBy {
    get { return scShiftDeliveredBy_ ?? global::SCShiftDeliveredBy.DefaultInstance; }
  }
  
  public const int CsShiftAddFieldNumber = 90;
  private bool hasCsShiftAdd;
  private global::CSShiftAdd csShiftAdd_;
  public bool HasCsShiftAdd {
    get { return hasCsShiftAdd; }
  }
  public global::CSShiftAdd CsShiftAdd {
    get { return csShiftAdd_ ?? global::CSShiftAdd.DefaultInstance; }
  }
  
  public const int CsShiftFindFieldNumber = 91;
  private bool hasCsShiftFind;
  private global::CSShiftFind csShiftFind_;
  public bool HasCsShiftFind {
    get { return hasCsShiftFind; }
  }
  public global::CSShiftFind CsShiftFind {
    get { return csShiftFind_ ?? global::CSShiftFind.DefaultInstance; }
  }
  
  public const int ScShiftFindFieldNumber = 92;
  private bool hasScShiftFind;
  private global::SCShiftFind scShiftFind_;
  public bool HasScShiftFind {
    get { return hasScShiftFind; }
  }
  public global::SCShiftFind ScShiftFind {
    get { return scShiftFind_ ?? global::SCShiftFind.DefaultInstance; }
  }
  
  public const int CsQueryChargeFieldNumber = 93;
  private bool hasCsQueryCharge;
  private global::CSQueryCharge csQueryCharge_;
  public bool HasCsQueryCharge {
    get { return hasCsQueryCharge; }
  }
  public global::CSQueryCharge CsQueryCharge {
    get { return csQueryCharge_ ?? global::CSQueryCharge.DefaultInstance; }
  }
  
  public const int ScQueryChargeFieldNumber = 94;
  private bool hasScQueryCharge;
  private global::SCQueryCharge scQueryCharge_;
  public bool HasScQueryCharge {
    get { return hasScQueryCharge; }
  }
  public global::SCQueryCharge ScQueryCharge {
    get { return scQueryCharge_ ?? global::SCQueryCharge.DefaultInstance; }
  }
  
  public const int CsQueryEmkFieldNumber = 95;
  private bool hasCsQueryEmk;
  private global::CSQueryEmk csQueryEmk_;
  public bool HasCsQueryEmk {
    get { return hasCsQueryEmk; }
  }
  public global::CSQueryEmk CsQueryEmk {
    get { return csQueryEmk_ ?? global::CSQueryEmk.DefaultInstance; }
  }
  
  public const int ScQueryEmkFieldNumber = 96;
  private bool hasScQueryEmk;
  private global::SCQueryEmk scQueryEmk_;
  public bool HasScQueryEmk {
    get { return hasScQueryEmk; }
  }
  public global::SCQueryEmk ScQueryEmk {
    get { return scQueryEmk_ ?? global::SCQueryEmk.DefaultInstance; }
  }
  
  public const int CsQueryTradeFieldNumber = 97;
  private bool hasCsQueryTrade;
  private global::CSQueryTrade csQueryTrade_;
  public bool HasCsQueryTrade {
    get { return hasCsQueryTrade; }
  }
  public global::CSQueryTrade CsQueryTrade {
    get { return csQueryTrade_ ?? global::CSQueryTrade.DefaultInstance; }
  }
  
  public const int ScQueryTradeFieldNumber = 98;
  private bool hasScQueryTrade;
  private global::SCQueryTrade scQueryTrade_;
  public bool HasScQueryTrade {
    get { return hasScQueryTrade; }
  }
  public global::SCQueryTrade ScQueryTrade {
    get { return scQueryTrade_ ?? global::SCQueryTrade.DefaultInstance; }
  }
  
  public const int CsQueryApplyFieldNumber = 99;
  private bool hasCsQueryApply;
  private global::CSQueryApply csQueryApply_;
  public bool HasCsQueryApply {
    get { return hasCsQueryApply; }
  }
  public global::CSQueryApply CsQueryApply {
    get { return csQueryApply_ ?? global::CSQueryApply.DefaultInstance; }
  }
  
  public const int ScQueryApplyFieldNumber = 100;
  private bool hasScQueryApply;
  private global::SCQueryApply scQueryApply_;
  public bool HasScQueryApply {
    get { return hasScQueryApply; }
  }
  public global::SCQueryApply ScQueryApply {
    get { return scQueryApply_ ?? global::SCQueryApply.DefaultInstance; }
  }
  
  public const int CsQueryOccupFieldNumber = 101;
  private bool hasCsQueryOccup;
  private global::CSQueryOccup csQueryOccup_;
  public bool HasCsQueryOccup {
    get { return hasCsQueryOccup; }
  }
  public global::CSQueryOccup CsQueryOccup {
    get { return csQueryOccup_ ?? global::CSQueryOccup.DefaultInstance; }
  }
  
  public const int ScQueryOccupFieldNumber = 102;
  private bool hasScQueryOccup;
  private global::SCQueryOccup scQueryOccup_;
  public bool HasScQueryOccup {
    get { return hasScQueryOccup; }
  }
  public global::SCQueryOccup ScQueryOccup {
    get { return scQueryOccup_ ?? global::SCQueryOccup.DefaultInstance; }
  }
  
  public const int CsClientOpenFieldNumber = 200;
  private bool hasCsClientOpen;
  private global::CSClientOpen csClientOpen_;
  public bool HasCsClientOpen {
    get { return hasCsClientOpen; }
  }
  public global::CSClientOpen CsClientOpen {
    get { return csClientOpen_ ?? global::CSClientOpen.DefaultInstance; }
  }
  
  public const int CsClientCloseFieldNumber = 201;
  private bool hasCsClientClose;
  private global::CSClientClose csClientClose_;
  public bool HasCsClientClose {
    get { return hasCsClientClose; }
  }
  public global::CSClientClose CsClientClose {
    get { return csClientClose_ ?? global::CSClientClose.DefaultInstance; }
  }
  
  public const int CsLogonFieldNumber = 202;
  private bool hasCsLogon;
  private global::CSLogon csLogon_;
  public bool HasCsLogon {
    get { return hasCsLogon; }
  }
  public global::CSLogon CsLogon {
    get { return csLogon_ ?? global::CSLogon.DefaultInstance; }
  }
  
  public const int ScLogonFieldNumber = 203;
  private bool hasScLogon;
  private global::SCLogon scLogon_;
  public bool HasScLogon {
    get { return hasScLogon; }
  }
  public global::SCLogon ScLogon {
    get { return scLogon_ ?? global::SCLogon.DefaultInstance; }
  }
  
  public const int CsLogoffFieldNumber = 204;
  private bool hasCsLogoff;
  private global::CSLogoff csLogoff_;
  public bool HasCsLogoff {
    get { return hasCsLogoff; }
  }
  public global::CSLogoff CsLogoff {
    get { return csLogoff_ ?? global::CSLogoff.DefaultInstance; }
  }
  
  public const int ScLogoffFieldNumber = 205;
  private bool hasScLogoff;
  private global::SCLogoff scLogoff_;
  public bool HasScLogoff {
    get { return hasScLogoff; }
  }
  public global::SCLogoff ScLogoff {
    get { return scLogoff_ ?? global::SCLogoff.DefaultInstance; }
  }
  
  public const int CsHungupFieldNumber = 206;
  private bool hasCsHungup;
  private global::CSHungup csHungup_;
  public bool HasCsHungup {
    get { return hasCsHungup; }
  }
  public global::CSHungup CsHungup {
    get { return csHungup_ ?? global::CSHungup.DefaultInstance; }
  }
  
  public const int CsEvaluateFieldNumber = 218;
  private bool hasCsEvaluate;
  private global::CSEvaluate csEvaluate_;
  public bool HasCsEvaluate {
    get { return hasCsEvaluate; }
  }
  public global::CSEvaluate CsEvaluate {
    get { return csEvaluate_ ?? global::CSEvaluate.DefaultInstance; }
  }
  
  public const int ScEvaluateFieldNumber = 219;
  private bool hasScEvaluate;
  private global::SCEvaluate scEvaluate_;
  public bool HasScEvaluate {
    get { return hasScEvaluate; }
  }
  public global::SCEvaluate ScEvaluate {
    get { return scEvaluate_ ?? global::SCEvaluate.DefaultInstance; }
  }
  
  public const int CsVerifyCodeFieldNumber = 220;
  private bool hasCsVerifyCode;
  private global::CSVerifyCode csVerifyCode_;
  public bool HasCsVerifyCode {
    get { return hasCsVerifyCode; }
  }
  public global::CSVerifyCode CsVerifyCode {
    get { return csVerifyCode_ ?? global::CSVerifyCode.DefaultInstance; }
  }
  
  public const int ScVerifyCodeFieldNumber = 221;
  private bool hasScVerifyCode;
  private global::SCVerifyCode scVerifyCode_;
  public bool HasScVerifyCode {
    get { return hasScVerifyCode; }
  }
  public global::SCVerifyCode ScVerifyCode {
    get { return scVerifyCode_ ?? global::SCVerifyCode.DefaultInstance; }
  }
  
  public const int CsBindMobileFieldNumber = 222;
  private bool hasCsBindMobile;
  private global::CSBindMobile csBindMobile_;
  public bool HasCsBindMobile {
    get { return hasCsBindMobile; }
  }
  public global::CSBindMobile CsBindMobile {
    get { return csBindMobile_ ?? global::CSBindMobile.DefaultInstance; }
  }
  
  public const int ScBindMobileFieldNumber = 223;
  private bool hasScBindMobile;
  private global::SCBindMobile scBindMobile_;
  public bool HasScBindMobile {
    get { return hasScBindMobile; }
  }
  public global::SCBindMobile ScBindMobile {
    get { return scBindMobile_ ?? global::SCBindMobile.DefaultInstance; }
  }
  
  public const int CsEmkUserInfoFieldNumber = 300;
  private bool hasCsEmkUserInfo;
  private global::CSEmkUserInfo csEmkUserInfo_;
  public bool HasCsEmkUserInfo {
    get { return hasCsEmkUserInfo; }
  }
  public global::CSEmkUserInfo CsEmkUserInfo {
    get { return csEmkUserInfo_ ?? global::CSEmkUserInfo.DefaultInstance; }
  }
  
  public const int ScEmkUserInfoFieldNumber = 301;
  private bool hasScEmkUserInfo;
  private global::SCEmkUserInfo scEmkUserInfo_;
  public bool HasScEmkUserInfo {
    get { return hasScEmkUserInfo; }
  }
  public global::SCEmkUserInfo ScEmkUserInfo {
    get { return scEmkUserInfo_ ?? global::SCEmkUserInfo.DefaultInstance; }
  }
  
  public const int CsEmkAddCardInfoFieldNumber = 302;
  private bool hasCsEmkAddCardInfo;
  private global::CSEmkAddCardInfo csEmkAddCardInfo_;
  public bool HasCsEmkAddCardInfo {
    get { return hasCsEmkAddCardInfo; }
  }
  public global::CSEmkAddCardInfo CsEmkAddCardInfo {
    get { return csEmkAddCardInfo_ ?? global::CSEmkAddCardInfo.DefaultInstance; }
  }
  
  public const int CsEmkAddFingerInfoFieldNumber = 303;
  private bool hasCsEmkAddFingerInfo;
  private global::CSEmkAddFingerInfo csEmkAddFingerInfo_;
  public bool HasCsEmkAddFingerInfo {
    get { return hasCsEmkAddFingerInfo; }
  }
  public global::CSEmkAddFingerInfo CsEmkAddFingerInfo {
    get { return csEmkAddFingerInfo_ ?? global::CSEmkAddFingerInfo.DefaultInstance; }
  }
  
  public const int CsEmkApplyMemberFieldNumber = 304;
  private bool hasCsEmkApplyMember;
  private global::CSEmkApplyMember csEmkApplyMember_;
  public bool HasCsEmkApplyMember {
    get { return hasCsEmkApplyMember; }
  }
  public global::CSEmkApplyMember CsEmkApplyMember {
    get { return csEmkApplyMember_ ?? global::CSEmkApplyMember.DefaultInstance; }
  }
  
  public const int ScEmkApplyMemberFieldNumber = 305;
  private bool hasScEmkApplyMember;
  private global::SCEmkApplyMember scEmkApplyMember_;
  public bool HasScEmkApplyMember {
    get { return hasScEmkApplyMember; }
  }
  public global::SCEmkApplyMember ScEmkApplyMember {
    get { return scEmkApplyMember_ ?? global::SCEmkApplyMember.DefaultInstance; }
  }
  
  public const int CsEmkChargeFieldNumber = 306;
  private bool hasCsEmkCharge;
  private global::CSEmkCharge csEmkCharge_;
  public bool HasCsEmkCharge {
    get { return hasCsEmkCharge; }
  }
  public global::CSEmkCharge CsEmkCharge {
    get { return csEmkCharge_ ?? global::CSEmkCharge.DefaultInstance; }
  }
  
  public const int ScEmkChargeFieldNumber = 307;
  private bool hasScEmkCharge;
  private global::SCEmkCharge scEmkCharge_;
  public bool HasScEmkCharge {
    get { return hasScEmkCharge; }
  }
  public global::SCEmkCharge ScEmkCharge {
    get { return scEmkCharge_ ?? global::SCEmkCharge.DefaultInstance; }
  }
  
  public const int CsEmkCheckinFieldNumber = 308;
  private bool hasCsEmkCheckin;
  private global::CSEmkCheckin csEmkCheckin_;
  public bool HasCsEmkCheckin {
    get { return hasCsEmkCheckin; }
  }
  public global::CSEmkCheckin CsEmkCheckin {
    get { return csEmkCheckin_ ?? global::CSEmkCheckin.DefaultInstance; }
  }
  
  public const int ScEmkCheckinFieldNumber = 309;
  private bool hasScEmkCheckin;
  private global::SCEmkCheckin scEmkCheckin_;
  public bool HasScEmkCheckin {
    get { return hasScEmkCheckin; }
  }
  public global::SCEmkCheckin ScEmkCheckin {
    get { return scEmkCheckin_ ?? global::SCEmkCheckin.DefaultInstance; }
  }
  
  public const int CsEmkCheckoutFieldNumber = 310;
  private bool hasCsEmkCheckout;
  private global::CSEmkCheckout csEmkCheckout_;
  public bool HasCsEmkCheckout {
    get { return hasCsEmkCheckout; }
  }
  public global::CSEmkCheckout CsEmkCheckout {
    get { return csEmkCheckout_ ?? global::CSEmkCheckout.DefaultInstance; }
  }
  
  public const int ScEmkCheckoutFieldNumber = 311;
  private bool hasScEmkCheckout;
  private global::SCEmkCheckout scEmkCheckout_;
  public bool HasScEmkCheckout {
    get { return hasScEmkCheckout; }
  }
  public global::SCEmkCheckout ScEmkCheckout {
    get { return scEmkCheckout_ ?? global::SCEmkCheckout.DefaultInstance; }
  }
  
  public const int CsEmkCancelFieldNumber = 312;
  private bool hasCsEmkCancel;
  private global::CSEmkCancel csEmkCancel_;
  public bool HasCsEmkCancel {
    get { return hasCsEmkCancel; }
  }
  public global::CSEmkCancel CsEmkCancel {
    get { return csEmkCancel_ ?? global::CSEmkCancel.DefaultInstance; }
  }
  
  public const int ScEmkVerifyListFieldNumber = 313;
  private bool hasScEmkVerifyList;
  private global::SCEmkVerifyList scEmkVerifyList_;
  public bool HasScEmkVerifyList {
    get { return hasScEmkVerifyList; }
  }
  public global::SCEmkVerifyList ScEmkVerifyList {
    get { return scEmkVerifyList_ ?? global::SCEmkVerifyList.DefaultInstance; }
  }
  
  public const int CsEmkVerifyProcFieldNumber = 315;
  private bool hasCsEmkVerifyProc;
  private global::CSEmkVerifyProc csEmkVerifyProc_;
  public bool HasCsEmkVerifyProc {
    get { return hasCsEmkVerifyProc; }
  }
  public global::CSEmkVerifyProc CsEmkVerifyProc {
    get { return csEmkVerifyProc_ ?? global::CSEmkVerifyProc.DefaultInstance; }
  }
  
  public const int ScEmkOrderListFieldNumber = 316;
  private bool hasScEmkOrderList;
  private global::SCEmkOrderList scEmkOrderList_;
  public bool HasScEmkOrderList {
    get { return hasScEmkOrderList; }
  }
  public global::SCEmkOrderList ScEmkOrderList {
    get { return scEmkOrderList_ ?? global::SCEmkOrderList.DefaultInstance; }
  }
  
  public const int CsEmkOrderProcFieldNumber = 317;
  private bool hasCsEmkOrderProc;
  private global::CSEmkOrderProc csEmkOrderProc_;
  public bool HasCsEmkOrderProc {
    get { return hasCsEmkOrderProc; }
  }
  public global::CSEmkOrderProc CsEmkOrderProc {
    get { return csEmkOrderProc_ ?? global::CSEmkOrderProc.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMessageType) return false;
      if (HasErrorTip) {
        if (!ErrorTip.IsInitialized) return false;
      }
      if (HasCsUpload) {
        if (!CsUpload.IsInitialized) return false;
      }
      if (HasScUpload) {
        if (!ScUpload.IsInitialized) return false;
      }
      if (HasCsReconnect) {
        if (!CsReconnect.IsInitialized) return false;
      }
      if (HasScReconnect) {
        if (!ScReconnect.IsInitialized) return false;
      }
      if (HasCsPreCharge) {
        if (!CsPreCharge.IsInitialized) return false;
      }
      if (HasScPreCharge) {
        if (!ScPreCharge.IsInitialized) return false;
      }
      if (HasCsToCharge) {
        if (!CsToCharge.IsInitialized) return false;
      }
      if (HasCsPreBuy) {
        if (!CsPreBuy.IsInitialized) return false;
      }
      if (HasScPreBuy) {
        if (!ScPreBuy.IsInitialized) return false;
      }
      if (HasScToBuy) {
        if (!ScToBuy.IsInitialized) return false;
      }
      if (HasScMessage) {
        if (!ScMessage.IsInitialized) return false;
      }
      if (HasCsCommand) {
        if (!CsCommand.IsInitialized) return false;
      }
      if (HasCsGoodsFind) {
        if (!CsGoodsFind.IsInitialized) return false;
      }
      if (HasScGoodsFind) {
        if (!ScGoodsFind.IsInitialized) return false;
      }
      if (HasCsAuthen) {
        if (!CsAuthen.IsInitialized) return false;
      }
      if (HasScAuthen) {
        if (!ScAuthen.IsInitialized) return false;
      }
      if (HasScLogin) {
        if (!ScLogin.IsInitialized) return false;
      }
      if (HasScCallList) {
        if (!ScCallList.IsInitialized) return false;
      }
      if (HasCsCallProcess) {
        if (!CsCallProcess.IsInitialized) return false;
      }
      if (HasCsAccountInfo) {
        if (!CsAccountInfo.IsInitialized) return false;
      }
      if (HasScAccountInfo) {
        if (!ScAccountInfo.IsInitialized) return false;
      }
      if (HasScRealtimeInfo) {
        if (!ScRealtimeInfo.IsInitialized) return false;
      }
      if (HasCsLog) {
        if (!CsLog.IsInitialized) return false;
      }
      if (HasScLog) {
        if (!ScLog.IsInitialized) return false;
      }
      if (HasScRoleList) {
        if (!ScRoleList.IsInitialized) return false;
      }
      if (HasCsRoleAdd) {
        if (!CsRoleAdd.IsInitialized) return false;
      }
      if (HasScRoleAdd) {
        if (!ScRoleAdd.IsInitialized) return false;
      }
      if (HasCsRoleDel) {
        if (!CsRoleDel.IsInitialized) return false;
      }
      if (HasCsRoleUpdate) {
        if (!CsRoleUpdate.IsInitialized) return false;
      }
      if (HasCsRoleRights) {
        if (!CsRoleRights.IsInitialized) return false;
      }
      if (HasScAccountList) {
        if (!ScAccountList.IsInitialized) return false;
      }
      if (HasCsAccountAdd) {
        if (!CsAccountAdd.IsInitialized) return false;
      }
      if (HasCsAccountDel) {
        if (!CsAccountDel.IsInitialized) return false;
      }
      if (HasCsAccountUpdate) {
        if (!CsAccountUpdate.IsInitialized) return false;
      }
      if (HasCsAccountSnsSet) {
        if (!CsAccountSnsSet.IsInitialized) return false;
      }
      if (HasCsStaffComment) {
        if (!CsStaffComment.IsInitialized) return false;
      }
      if (HasScStaffComment) {
        if (!ScStaffComment.IsInitialized) return false;
      }
      if (HasCsStaffPerform) {
        if (!CsStaffPerform.IsInitialized) return false;
      }
      if (HasScStaffPerform) {
        if (!ScStaffPerform.IsInitialized) return false;
      }
      if (HasCsEarning) {
        if (!CsEarning.IsInitialized) return false;
      }
      if (HasScEarning) {
        if (!ScEarning.IsInitialized) return false;
      }
      if (HasScComputerList) {
        if (!ScComputerList.IsInitialized) return false;
      }
      if (HasCsComputerAdd) {
        if (!CsComputerAdd.IsInitialized) return false;
      }
      if (HasCsComputerUpdate) {
        if (!CsComputerUpdate.IsInitialized) return false;
      }
      if (HasCsComputerFind) {
        if (!CsComputerFind.IsInitialized) return false;
      }
      if (HasScComputerFind) {
        if (!ScComputerFind.IsInitialized) return false;
      }
      if (HasCsMemberList) {
        if (!CsMemberList.IsInitialized) return false;
      }
      if (HasScMemberList) {
        if (!ScMemberList.IsInitialized) return false;
      }
      if (HasCsMemberUpdate) {
        if (!CsMemberUpdate.IsInitialized) return false;
      }
      if (HasCsMemberFind) {
        if (!CsMemberFind.IsInitialized) return false;
      }
      if (HasScMemberFind) {
        if (!ScMemberFind.IsInitialized) return false;
      }
      if (HasCsMemberCardInfo) {
        if (!CsMemberCardInfo.IsInitialized) return false;
      }
      if (HasScMemberCardInfo) {
        if (!ScMemberCardInfo.IsInitialized) return false;
      }
      if (HasScSysBillList) {
        if (!ScSysBillList.IsInitialized) return false;
      }
      if (HasCsSysBillUpdate) {
        if (!CsSysBillUpdate.IsInitialized) return false;
      }
      if (HasScSysBillUpdate) {
        if (!ScSysBillUpdate.IsInitialized) return false;
      }
      if (HasCsSysInfo) {
        if (!CsSysInfo.IsInitialized) return false;
      }
      if (HasScSysInfo) {
        if (!ScSysInfo.IsInitialized) return false;
      }
      if (HasCsAddSysInfo) {
        if (!CsAddSysInfo.IsInitialized) return false;
      }
      if (HasCsDelSysInfo) {
        if (!CsDelSysInfo.IsInitialized) return false;
      }
      if (HasCsUpdateSysInfo) {
        if (!CsUpdateSysInfo.IsInitialized) return false;
      }
      if (HasCsGoodsAdd) {
        if (!CsGoodsAdd.IsInitialized) return false;
      }
      if (HasCsGoodsUpdate) {
        if (!CsGoodsUpdate.IsInitialized) return false;
      }
      if (HasCsGoodsStock) {
        if (!CsGoodsStock.IsInitialized) return false;
      }
      if (HasScGoodsStock) {
        if (!ScGoodsStock.IsInitialized) return false;
      }
      if (HasCsSalesRecord) {
        if (!CsSalesRecord.IsInitialized) return false;
      }
      if (HasScSalesRecord) {
        if (!ScSalesRecord.IsInitialized) return false;
      }
      if (HasCsOrderProc) {
        if (!CsOrderProc.IsInitialized) return false;
      }
      if (HasCsOrderList) {
        if (!CsOrderList.IsInitialized) return false;
      }
      if (HasScOrderList) {
        if (!ScOrderList.IsInitialized) return false;
      }
      if (HasCsOrderDetail) {
        if (!CsOrderDetail.IsInitialized) return false;
      }
      if (HasScOrderDetail) {
        if (!ScOrderDetail.IsInitialized) return false;
      }
      if (HasScShiftDeliveredBy) {
        if (!ScShiftDeliveredBy.IsInitialized) return false;
      }
      if (HasCsShiftAdd) {
        if (!CsShiftAdd.IsInitialized) return false;
      }
      if (HasCsShiftFind) {
        if (!CsShiftFind.IsInitialized) return false;
      }
      if (HasScShiftFind) {
        if (!ScShiftFind.IsInitialized) return false;
      }
      if (HasCsQueryCharge) {
        if (!CsQueryCharge.IsInitialized) return false;
      }
      if (HasScQueryCharge) {
        if (!ScQueryCharge.IsInitialized) return false;
      }
      if (HasCsQueryEmk) {
        if (!CsQueryEmk.IsInitialized) return false;
      }
      if (HasScQueryEmk) {
        if (!ScQueryEmk.IsInitialized) return false;
      }
      if (HasCsQueryTrade) {
        if (!CsQueryTrade.IsInitialized) return false;
      }
      if (HasScQueryTrade) {
        if (!ScQueryTrade.IsInitialized) return false;
      }
      if (HasCsQueryApply) {
        if (!CsQueryApply.IsInitialized) return false;
      }
      if (HasScQueryApply) {
        if (!ScQueryApply.IsInitialized) return false;
      }
      if (HasCsClientOpen) {
        if (!CsClientOpen.IsInitialized) return false;
      }
      if (HasCsLogon) {
        if (!CsLogon.IsInitialized) return false;
      }
      if (HasScLogon) {
        if (!ScLogon.IsInitialized) return false;
      }
      if (HasCsLogoff) {
        if (!CsLogoff.IsInitialized) return false;
      }
      if (HasScLogoff) {
        if (!ScLogoff.IsInitialized) return false;
      }
      if (HasCsHungup) {
        if (!CsHungup.IsInitialized) return false;
      }
      if (HasCsEvaluate) {
        if (!CsEvaluate.IsInitialized) return false;
      }
      if (HasScEvaluate) {
        if (!ScEvaluate.IsInitialized) return false;
      }
      if (HasCsVerifyCode) {
        if (!CsVerifyCode.IsInitialized) return false;
      }
      if (HasScVerifyCode) {
        if (!ScVerifyCode.IsInitialized) return false;
      }
      if (HasCsBindMobile) {
        if (!CsBindMobile.IsInitialized) return false;
      }
      if (HasScBindMobile) {
        if (!ScBindMobile.IsInitialized) return false;
      }
      if (HasScEmkUserInfo) {
        if (!ScEmkUserInfo.IsInitialized) return false;
      }
      if (HasCsEmkAddCardInfo) {
        if (!CsEmkAddCardInfo.IsInitialized) return false;
      }
      if (HasCsEmkAddFingerInfo) {
        if (!CsEmkAddFingerInfo.IsInitialized) return false;
      }
      if (HasCsEmkApplyMember) {
        if (!CsEmkApplyMember.IsInitialized) return false;
      }
      if (HasScEmkApplyMember) {
        if (!ScEmkApplyMember.IsInitialized) return false;
      }
      if (HasCsEmkCharge) {
        if (!CsEmkCharge.IsInitialized) return false;
      }
      if (HasScEmkCharge) {
        if (!ScEmkCharge.IsInitialized) return false;
      }
      if (HasCsEmkCheckin) {
        if (!CsEmkCheckin.IsInitialized) return false;
      }
      if (HasScEmkCheckin) {
        if (!ScEmkCheckin.IsInitialized) return false;
      }
      if (HasCsEmkCheckout) {
        if (!CsEmkCheckout.IsInitialized) return false;
      }
      if (HasScEmkCheckout) {
        if (!ScEmkCheckout.IsInitialized) return false;
      }
      if (HasCsEmkCancel) {
        if (!CsEmkCancel.IsInitialized) return false;
      }
      if (HasScEmkVerifyList) {
        if (!ScEmkVerifyList.IsInitialized) return false;
      }
      if (HasCsEmkVerifyProc) {
        if (!CsEmkVerifyProc.IsInitialized) return false;
      }
      if (HasScEmkOrderList) {
        if (!ScEmkOrderList.IsInitialized) return false;
      }
      if (HasCsEmkOrderProc) {
        if (!CsEmkOrderProc.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _messageContentFieldNames;
    if (hasMessageType) {
      output.WriteInt32(1, field_names[74], MessageType);
    }
    if (hasErrorTip) {
      output.WriteMessage(2, field_names[73], ErrorTip);
    }
    if (hasCsUpload) {
      output.WriteMessage(3, field_names[71], CsUpload);
    }
    if (hasScUpload) {
      output.WriteMessage(4, field_names[126], ScUpload);
    }
    if (hasCsHeart) {
      output.WriteMessage(5, field_names[34], CsHeart);
    }
    if (hasScHeart) {
      output.WriteMessage(6, field_names[93], ScHeart);
    }
    if (hasCsKick) {
      output.WriteMessage(7, field_names[36], CsKick);
    }
    if (hasScKick) {
      output.WriteMessage(8, field_names[94], ScKick);
    }
    if (hasCsReconnect) {
      output.WriteMessage(9, field_names[56], CsReconnect);
    }
    if (hasScReconnect) {
      output.WriteMessage(10, field_names[113], ScReconnect);
    }
    if (hasCsPreCharge) {
      output.WriteMessage(11, field_names[50], CsPreCharge);
    }
    if (hasScPreCharge) {
      output.WriteMessage(12, field_names[106], ScPreCharge);
    }
    if (hasCsToCharge) {
      output.WriteMessage(13, field_names[69], CsToCharge);
    }
    if (hasCsPreBuy) {
      output.WriteMessage(14, field_names[49], CsPreBuy);
    }
    if (hasScPreBuy) {
      output.WriteMessage(15, field_names[105], ScPreBuy);
    }
    if (hasScToBuy) {
      output.WriteMessage(16, field_names[125], ScToBuy);
    }
    if (hasScMessage) {
      output.WriteMessage(17, field_names[102], ScMessage);
    }
    if (hasCsCommand) {
      output.WriteMessage(18, field_names[11], CsCommand);
    }
    if (hasCsGoodsFind) {
      output.WriteMessage(19, field_names[31], CsGoodsFind);
    }
    if (hasScGoodsFind) {
      output.WriteMessage(20, field_names[91], ScGoodsFind);
    }
    if (hasCsAuthen) {
      output.WriteMessage(23, field_names[6], CsAuthen);
    }
    if (hasScAuthen) {
      output.WriteMessage(24, field_names[77], ScAuthen);
    }
    if (hasCsLogin) {
      output.WriteMessage(25, field_names[38], CsLogin);
    }
    if (hasScLogin) {
      output.WriteMessage(26, field_names[96], ScLogin);
    }
    if (hasScCallList) {
      output.WriteMessage(27, field_names[79], ScCallList);
    }
    if (hasCsCallProcess) {
      output.WriteMessage(28, field_names[8], CsCallProcess);
    }
    if (hasCsAccountInfo) {
      output.WriteMessage(29, field_names[2], CsAccountInfo);
    }
    if (hasScAccountInfo) {
      output.WriteMessage(30, field_names[75], ScAccountInfo);
    }
    if (hasScRealtimeInfo) {
      output.WriteMessage(31, field_names[112], ScRealtimeInfo);
    }
    if (hasCsLog) {
      output.WriteMessage(32, field_names[37], CsLog);
    }
    if (hasScLog) {
      output.WriteMessage(33, field_names[95], ScLog);
    }
    if (hasScRoleList) {
      output.WriteMessage(34, field_names[115], ScRoleList);
    }
    if (hasCsRoleAdd) {
      output.WriteMessage(35, field_names[57], CsRoleAdd);
    }
    if (hasScRoleAdd) {
      output.WriteMessage(36, field_names[114], ScRoleAdd);
    }
    if (hasCsRoleDel) {
      output.WriteMessage(37, field_names[58], CsRoleDel);
    }
    if (hasCsRoleUpdate) {
      output.WriteMessage(38, field_names[60], CsRoleUpdate);
    }
    if (hasCsRoleRights) {
      output.WriteMessage(39, field_names[59], CsRoleRights);
    }
    if (hasScAccountList) {
      output.WriteMessage(40, field_names[76], ScAccountList);
    }
    if (hasCsAccountAdd) {
      output.WriteMessage(41, field_names[0], CsAccountAdd);
    }
    if (hasCsAccountDel) {
      output.WriteMessage(42, field_names[1], CsAccountDel);
    }
    if (hasCsAccountUpdate) {
      output.WriteMessage(43, field_names[4], CsAccountUpdate);
    }
    if (hasCsAccountSnsSet) {
      output.WriteMessage(44, field_names[3], CsAccountSnsSet);
    }
    if (hasCsStaffComment) {
      output.WriteMessage(45, field_names[65], CsStaffComment);
    }
    if (hasScStaffComment) {
      output.WriteMessage(46, field_names[120], ScStaffComment);
    }
    if (hasCsStaffPerform) {
      output.WriteMessage(47, field_names[66], CsStaffPerform);
    }
    if (hasScStaffPerform) {
      output.WriteMessage(48, field_names[121], ScStaffPerform);
    }
    if (hasCsEarning) {
      output.WriteMessage(49, field_names[17], CsEarning);
    }
    if (hasScEarning) {
      output.WriteMessage(50, field_names[82], ScEarning);
    }
    if (hasScComputerList) {
      output.WriteMessage(51, field_names[81], ScComputerList);
    }
    if (hasCsComputerAdd) {
      output.WriteMessage(52, field_names[12], CsComputerAdd);
    }
    if (hasCsComputerDel) {
      output.WriteMessage(53, field_names[13], CsComputerDel);
    }
    if (hasCsComputerUpdate) {
      output.WriteMessage(54, field_names[15], CsComputerUpdate);
    }
    if (hasCsComputerFind) {
      output.WriteMessage(55, field_names[14], CsComputerFind);
    }
    if (hasScComputerFind) {
      output.WriteMessage(56, field_names[80], ScComputerFind);
    }
    if (hasCsMemberList) {
      output.WriteMessage(57, field_names[44], CsMemberList);
    }
    if (hasScMemberList) {
      output.WriteMessage(58, field_names[101], ScMemberList);
    }
    if (hasCsMemberDel) {
      output.WriteMessage(61, field_names[42], CsMemberDel);
    }
    if (hasCsMemberUpdate) {
      output.WriteMessage(62, field_names[45], CsMemberUpdate);
    }
    if (hasCsMemberFind) {
      output.WriteMessage(63, field_names[43], CsMemberFind);
    }
    if (hasScMemberFind) {
      output.WriteMessage(64, field_names[100], ScMemberFind);
    }
    if (hasCsMemberCardInfo) {
      output.WriteMessage(65, field_names[41], CsMemberCardInfo);
    }
    if (hasScMemberCardInfo) {
      output.WriteMessage(66, field_names[99], ScMemberCardInfo);
    }
    if (hasScSysBillList) {
      output.WriteMessage(67, field_names[122], ScSysBillList);
    }
    if (hasCsSysBillUpdate) {
      output.WriteMessage(68, field_names[67], CsSysBillUpdate);
    }
    if (hasScSysBillUpdate) {
      output.WriteMessage(69, field_names[123], ScSysBillUpdate);
    }
    if (hasCsSysInfo) {
      output.WriteMessage(70, field_names[68], CsSysInfo);
    }
    if (hasScSysInfo) {
      output.WriteMessage(71, field_names[124], ScSysInfo);
    }
    if (hasCsAddSysInfo) {
      output.WriteMessage(72, field_names[5], CsAddSysInfo);
    }
    if (hasCsDelSysInfo) {
      output.WriteMessage(73, field_names[16], CsDelSysInfo);
    }
    if (hasCsUpdateSysInfo) {
      output.WriteMessage(74, field_names[70], CsUpdateSysInfo);
    }
    if (hasCsGoodsAdd) {
      output.WriteMessage(75, field_names[29], CsGoodsAdd);
    }
    if (hasCsGoodsDel) {
      output.WriteMessage(76, field_names[30], CsGoodsDel);
    }
    if (hasCsGoodsUpdate) {
      output.WriteMessage(77, field_names[33], CsGoodsUpdate);
    }
    if (hasCsGoodsStock) {
      output.WriteMessage(78, field_names[32], CsGoodsStock);
    }
    if (hasScGoodsStock) {
      output.WriteMessage(79, field_names[92], ScGoodsStock);
    }
    if (hasCsSalesRecord) {
      output.WriteMessage(80, field_names[61], CsSalesRecord);
    }
    if (hasScSalesRecord) {
      output.WriteMessage(81, field_names[116], ScSalesRecord);
    }
    if (hasCsSalesTop) {
      output.WriteMessage(82, field_names[62], CsSalesTop);
    }
    if (hasScSalesTop) {
      output.WriteMessage(83, field_names[117], ScSalesTop);
    }
    if (hasCsOrderProc) {
      output.WriteMessage(84, field_names[48], CsOrderProc);
    }
    if (hasCsOrderList) {
      output.WriteMessage(85, field_names[47], CsOrderList);
    }
    if (hasScOrderList) {
      output.WriteMessage(86, field_names[104], ScOrderList);
    }
    if (hasCsOrderDetail) {
      output.WriteMessage(87, field_names[46], CsOrderDetail);
    }
    if (hasScOrderDetail) {
      output.WriteMessage(88, field_names[103], ScOrderDetail);
    }
    if (hasScShiftDeliveredBy) {
      output.WriteMessage(89, field_names[118], ScShiftDeliveredBy);
    }
    if (hasCsShiftAdd) {
      output.WriteMessage(90, field_names[63], CsShiftAdd);
    }
    if (hasCsShiftFind) {
      output.WriteMessage(91, field_names[64], CsShiftFind);
    }
    if (hasScShiftFind) {
      output.WriteMessage(92, field_names[119], ScShiftFind);
    }
    if (hasCsQueryCharge) {
      output.WriteMessage(93, field_names[52], CsQueryCharge);
    }
    if (hasScQueryCharge) {
      output.WriteMessage(94, field_names[108], ScQueryCharge);
    }
    if (hasCsQueryEmk) {
      output.WriteMessage(95, field_names[53], CsQueryEmk);
    }
    if (hasScQueryEmk) {
      output.WriteMessage(96, field_names[109], ScQueryEmk);
    }
    if (hasCsQueryTrade) {
      output.WriteMessage(97, field_names[55], CsQueryTrade);
    }
    if (hasScQueryTrade) {
      output.WriteMessage(98, field_names[111], ScQueryTrade);
    }
    if (hasCsQueryApply) {
      output.WriteMessage(99, field_names[51], CsQueryApply);
    }
    if (hasScQueryApply) {
      output.WriteMessage(100, field_names[107], ScQueryApply);
    }
    if (hasCsQueryOccup) {
      output.WriteMessage(101, field_names[54], CsQueryOccup);
    }
    if (hasScQueryOccup) {
      output.WriteMessage(102, field_names[110], ScQueryOccup);
    }
    if (hasCsClientOpen) {
      output.WriteMessage(200, field_names[10], CsClientOpen);
    }
    if (hasCsClientClose) {
      output.WriteMessage(201, field_names[9], CsClientClose);
    }
    if (hasCsLogon) {
      output.WriteMessage(202, field_names[40], CsLogon);
    }
    if (hasScLogon) {
      output.WriteMessage(203, field_names[98], ScLogon);
    }
    if (hasCsLogoff) {
      output.WriteMessage(204, field_names[39], CsLogoff);
    }
    if (hasScLogoff) {
      output.WriteMessage(205, field_names[97], ScLogoff);
    }
    if (hasCsHungup) {
      output.WriteMessage(206, field_names[35], CsHungup);
    }
    if (hasCsEvaluate) {
      output.WriteMessage(218, field_names[28], CsEvaluate);
    }
    if (hasScEvaluate) {
      output.WriteMessage(219, field_names[90], ScEvaluate);
    }
    if (hasCsVerifyCode) {
      output.WriteMessage(220, field_names[72], CsVerifyCode);
    }
    if (hasScVerifyCode) {
      output.WriteMessage(221, field_names[127], ScVerifyCode);
    }
    if (hasCsBindMobile) {
      output.WriteMessage(222, field_names[7], CsBindMobile);
    }
    if (hasScBindMobile) {
      output.WriteMessage(223, field_names[78], ScBindMobile);
    }
    if (hasCsEmkUserInfo) {
      output.WriteMessage(300, field_names[26], CsEmkUserInfo);
    }
    if (hasScEmkUserInfo) {
      output.WriteMessage(301, field_names[88], ScEmkUserInfo);
    }
    if (hasCsEmkAddCardInfo) {
      output.WriteMessage(302, field_names[18], CsEmkAddCardInfo);
    }
    if (hasCsEmkAddFingerInfo) {
      output.WriteMessage(303, field_names[19], CsEmkAddFingerInfo);
    }
    if (hasCsEmkApplyMember) {
      output.WriteMessage(304, field_names[20], CsEmkApplyMember);
    }
    if (hasScEmkApplyMember) {
      output.WriteMessage(305, field_names[83], ScEmkApplyMember);
    }
    if (hasCsEmkCharge) {
      output.WriteMessage(306, field_names[22], CsEmkCharge);
    }
    if (hasScEmkCharge) {
      output.WriteMessage(307, field_names[84], ScEmkCharge);
    }
    if (hasCsEmkCheckin) {
      output.WriteMessage(308, field_names[23], CsEmkCheckin);
    }
    if (hasScEmkCheckin) {
      output.WriteMessage(309, field_names[85], ScEmkCheckin);
    }
    if (hasCsEmkCheckout) {
      output.WriteMessage(310, field_names[24], CsEmkCheckout);
    }
    if (hasScEmkCheckout) {
      output.WriteMessage(311, field_names[86], ScEmkCheckout);
    }
    if (hasCsEmkCancel) {
      output.WriteMessage(312, field_names[21], CsEmkCancel);
    }
    if (hasScEmkVerifyList) {
      output.WriteMessage(313, field_names[89], ScEmkVerifyList);
    }
    if (hasCsEmkVerifyProc) {
      output.WriteMessage(315, field_names[27], CsEmkVerifyProc);
    }
    if (hasScEmkOrderList) {
      output.WriteMessage(316, field_names[87], ScEmkOrderList);
    }
    if (hasCsEmkOrderProc) {
      output.WriteMessage(317, field_names[25], CsEmkOrderProc);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMessageType) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, MessageType);
    }
    if (hasErrorTip) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, ErrorTip);
    }
    if (hasCsUpload) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, CsUpload);
    }
    if (hasScUpload) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, ScUpload);
    }
    if (hasCsHeart) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, CsHeart);
    }
    if (hasScHeart) {
      size += pb::CodedOutputStream.ComputeMessageSize(6, ScHeart);
    }
    if (hasCsKick) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, CsKick);
    }
    if (hasScKick) {
      size += pb::CodedOutputStream.ComputeMessageSize(8, ScKick);
    }
    if (hasCsReconnect) {
      size += pb::CodedOutputStream.ComputeMessageSize(9, CsReconnect);
    }
    if (hasScReconnect) {
      size += pb::CodedOutputStream.ComputeMessageSize(10, ScReconnect);
    }
    if (hasCsPreCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(11, CsPreCharge);
    }
    if (hasScPreCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(12, ScPreCharge);
    }
    if (hasCsToCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(13, CsToCharge);
    }
    if (hasCsPreBuy) {
      size += pb::CodedOutputStream.ComputeMessageSize(14, CsPreBuy);
    }
    if (hasScPreBuy) {
      size += pb::CodedOutputStream.ComputeMessageSize(15, ScPreBuy);
    }
    if (hasScToBuy) {
      size += pb::CodedOutputStream.ComputeMessageSize(16, ScToBuy);
    }
    if (hasScMessage) {
      size += pb::CodedOutputStream.ComputeMessageSize(17, ScMessage);
    }
    if (hasCsCommand) {
      size += pb::CodedOutputStream.ComputeMessageSize(18, CsCommand);
    }
    if (hasCsGoodsFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(19, CsGoodsFind);
    }
    if (hasScGoodsFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(20, ScGoodsFind);
    }
    if (hasCsAuthen) {
      size += pb::CodedOutputStream.ComputeMessageSize(23, CsAuthen);
    }
    if (hasScAuthen) {
      size += pb::CodedOutputStream.ComputeMessageSize(24, ScAuthen);
    }
    if (hasCsLogin) {
      size += pb::CodedOutputStream.ComputeMessageSize(25, CsLogin);
    }
    if (hasScLogin) {
      size += pb::CodedOutputStream.ComputeMessageSize(26, ScLogin);
    }
    if (hasScCallList) {
      size += pb::CodedOutputStream.ComputeMessageSize(27, ScCallList);
    }
    if (hasCsCallProcess) {
      size += pb::CodedOutputStream.ComputeMessageSize(28, CsCallProcess);
    }
    if (hasCsAccountInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(29, CsAccountInfo);
    }
    if (hasScAccountInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(30, ScAccountInfo);
    }
    if (hasScRealtimeInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(31, ScRealtimeInfo);
    }
    if (hasCsLog) {
      size += pb::CodedOutputStream.ComputeMessageSize(32, CsLog);
    }
    if (hasScLog) {
      size += pb::CodedOutputStream.ComputeMessageSize(33, ScLog);
    }
    if (hasScRoleList) {
      size += pb::CodedOutputStream.ComputeMessageSize(34, ScRoleList);
    }
    if (hasCsRoleAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(35, CsRoleAdd);
    }
    if (hasScRoleAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(36, ScRoleAdd);
    }
    if (hasCsRoleDel) {
      size += pb::CodedOutputStream.ComputeMessageSize(37, CsRoleDel);
    }
    if (hasCsRoleUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(38, CsRoleUpdate);
    }
    if (hasCsRoleRights) {
      size += pb::CodedOutputStream.ComputeMessageSize(39, CsRoleRights);
    }
    if (hasScAccountList) {
      size += pb::CodedOutputStream.ComputeMessageSize(40, ScAccountList);
    }
    if (hasCsAccountAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(41, CsAccountAdd);
    }
    if (hasCsAccountDel) {
      size += pb::CodedOutputStream.ComputeMessageSize(42, CsAccountDel);
    }
    if (hasCsAccountUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(43, CsAccountUpdate);
    }
    if (hasCsAccountSnsSet) {
      size += pb::CodedOutputStream.ComputeMessageSize(44, CsAccountSnsSet);
    }
    if (hasCsStaffComment) {
      size += pb::CodedOutputStream.ComputeMessageSize(45, CsStaffComment);
    }
    if (hasScStaffComment) {
      size += pb::CodedOutputStream.ComputeMessageSize(46, ScStaffComment);
    }
    if (hasCsStaffPerform) {
      size += pb::CodedOutputStream.ComputeMessageSize(47, CsStaffPerform);
    }
    if (hasScStaffPerform) {
      size += pb::CodedOutputStream.ComputeMessageSize(48, ScStaffPerform);
    }
    if (hasCsEarning) {
      size += pb::CodedOutputStream.ComputeMessageSize(49, CsEarning);
    }
    if (hasScEarning) {
      size += pb::CodedOutputStream.ComputeMessageSize(50, ScEarning);
    }
    if (hasScComputerList) {
      size += pb::CodedOutputStream.ComputeMessageSize(51, ScComputerList);
    }
    if (hasCsComputerAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(52, CsComputerAdd);
    }
    if (hasCsComputerDel) {
      size += pb::CodedOutputStream.ComputeMessageSize(53, CsComputerDel);
    }
    if (hasCsComputerUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(54, CsComputerUpdate);
    }
    if (hasCsComputerFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(55, CsComputerFind);
    }
    if (hasScComputerFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(56, ScComputerFind);
    }
    if (hasCsMemberList) {
      size += pb::CodedOutputStream.ComputeMessageSize(57, CsMemberList);
    }
    if (hasScMemberList) {
      size += pb::CodedOutputStream.ComputeMessageSize(58, ScMemberList);
    }
    if (hasCsMemberDel) {
      size += pb::CodedOutputStream.ComputeMessageSize(61, CsMemberDel);
    }
    if (hasCsMemberUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(62, CsMemberUpdate);
    }
    if (hasCsMemberFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(63, CsMemberFind);
    }
    if (hasScMemberFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(64, ScMemberFind);
    }
    if (hasCsMemberCardInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(65, CsMemberCardInfo);
    }
    if (hasScMemberCardInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(66, ScMemberCardInfo);
    }
    if (hasScSysBillList) {
      size += pb::CodedOutputStream.ComputeMessageSize(67, ScSysBillList);
    }
    if (hasCsSysBillUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(68, CsSysBillUpdate);
    }
    if (hasScSysBillUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(69, ScSysBillUpdate);
    }
    if (hasCsSysInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(70, CsSysInfo);
    }
    if (hasScSysInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(71, ScSysInfo);
    }
    if (hasCsAddSysInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(72, CsAddSysInfo);
    }
    if (hasCsDelSysInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(73, CsDelSysInfo);
    }
    if (hasCsUpdateSysInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(74, CsUpdateSysInfo);
    }
    if (hasCsGoodsAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(75, CsGoodsAdd);
    }
    if (hasCsGoodsDel) {
      size += pb::CodedOutputStream.ComputeMessageSize(76, CsGoodsDel);
    }
    if (hasCsGoodsUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(77, CsGoodsUpdate);
    }
    if (hasCsGoodsStock) {
      size += pb::CodedOutputStream.ComputeMessageSize(78, CsGoodsStock);
    }
    if (hasScGoodsStock) {
      size += pb::CodedOutputStream.ComputeMessageSize(79, ScGoodsStock);
    }
    if (hasCsSalesRecord) {
      size += pb::CodedOutputStream.ComputeMessageSize(80, CsSalesRecord);
    }
    if (hasScSalesRecord) {
      size += pb::CodedOutputStream.ComputeMessageSize(81, ScSalesRecord);
    }
    if (hasCsSalesTop) {
      size += pb::CodedOutputStream.ComputeMessageSize(82, CsSalesTop);
    }
    if (hasScSalesTop) {
      size += pb::CodedOutputStream.ComputeMessageSize(83, ScSalesTop);
    }
    if (hasCsOrderProc) {
      size += pb::CodedOutputStream.ComputeMessageSize(84, CsOrderProc);
    }
    if (hasCsOrderList) {
      size += pb::CodedOutputStream.ComputeMessageSize(85, CsOrderList);
    }
    if (hasScOrderList) {
      size += pb::CodedOutputStream.ComputeMessageSize(86, ScOrderList);
    }
    if (hasCsOrderDetail) {
      size += pb::CodedOutputStream.ComputeMessageSize(87, CsOrderDetail);
    }
    if (hasScOrderDetail) {
      size += pb::CodedOutputStream.ComputeMessageSize(88, ScOrderDetail);
    }
    if (hasScShiftDeliveredBy) {
      size += pb::CodedOutputStream.ComputeMessageSize(89, ScShiftDeliveredBy);
    }
    if (hasCsShiftAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(90, CsShiftAdd);
    }
    if (hasCsShiftFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(91, CsShiftFind);
    }
    if (hasScShiftFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(92, ScShiftFind);
    }
    if (hasCsQueryCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(93, CsQueryCharge);
    }
    if (hasScQueryCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(94, ScQueryCharge);
    }
    if (hasCsQueryEmk) {
      size += pb::CodedOutputStream.ComputeMessageSize(95, CsQueryEmk);
    }
    if (hasScQueryEmk) {
      size += pb::CodedOutputStream.ComputeMessageSize(96, ScQueryEmk);
    }
    if (hasCsQueryTrade) {
      size += pb::CodedOutputStream.ComputeMessageSize(97, CsQueryTrade);
    }
    if (hasScQueryTrade) {
      size += pb::CodedOutputStream.ComputeMessageSize(98, ScQueryTrade);
    }
    if (hasCsQueryApply) {
      size += pb::CodedOutputStream.ComputeMessageSize(99, CsQueryApply);
    }
    if (hasScQueryApply) {
      size += pb::CodedOutputStream.ComputeMessageSize(100, ScQueryApply);
    }
    if (hasCsQueryOccup) {
      size += pb::CodedOutputStream.ComputeMessageSize(101, CsQueryOccup);
    }
    if (hasScQueryOccup) {
      size += pb::CodedOutputStream.ComputeMessageSize(102, ScQueryOccup);
    }
    if (hasCsClientOpen) {
      size += pb::CodedOutputStream.ComputeMessageSize(200, CsClientOpen);
    }
    if (hasCsClientClose) {
      size += pb::CodedOutputStream.ComputeMessageSize(201, CsClientClose);
    }
    if (hasCsLogon) {
      size += pb::CodedOutputStream.ComputeMessageSize(202, CsLogon);
    }
    if (hasScLogon) {
      size += pb::CodedOutputStream.ComputeMessageSize(203, ScLogon);
    }
    if (hasCsLogoff) {
      size += pb::CodedOutputStream.ComputeMessageSize(204, CsLogoff);
    }
    if (hasScLogoff) {
      size += pb::CodedOutputStream.ComputeMessageSize(205, ScLogoff);
    }
    if (hasCsHungup) {
      size += pb::CodedOutputStream.ComputeMessageSize(206, CsHungup);
    }
    if (hasCsEvaluate) {
      size += pb::CodedOutputStream.ComputeMessageSize(218, CsEvaluate);
    }
    if (hasScEvaluate) {
      size += pb::CodedOutputStream.ComputeMessageSize(219, ScEvaluate);
    }
    if (hasCsVerifyCode) {
      size += pb::CodedOutputStream.ComputeMessageSize(220, CsVerifyCode);
    }
    if (hasScVerifyCode) {
      size += pb::CodedOutputStream.ComputeMessageSize(221, ScVerifyCode);
    }
    if (hasCsBindMobile) {
      size += pb::CodedOutputStream.ComputeMessageSize(222, CsBindMobile);
    }
    if (hasScBindMobile) {
      size += pb::CodedOutputStream.ComputeMessageSize(223, ScBindMobile);
    }
    if (hasCsEmkUserInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(300, CsEmkUserInfo);
    }
    if (hasScEmkUserInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(301, ScEmkUserInfo);
    }
    if (hasCsEmkAddCardInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(302, CsEmkAddCardInfo);
    }
    if (hasCsEmkAddFingerInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(303, CsEmkAddFingerInfo);
    }
    if (hasCsEmkApplyMember) {
      size += pb::CodedOutputStream.ComputeMessageSize(304, CsEmkApplyMember);
    }
    if (hasScEmkApplyMember) {
      size += pb::CodedOutputStream.ComputeMessageSize(305, ScEmkApplyMember);
    }
    if (hasCsEmkCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(306, CsEmkCharge);
    }
    if (hasScEmkCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(307, ScEmkCharge);
    }
    if (hasCsEmkCheckin) {
      size += pb::CodedOutputStream.ComputeMessageSize(308, CsEmkCheckin);
    }
    if (hasScEmkCheckin) {
      size += pb::CodedOutputStream.ComputeMessageSize(309, ScEmkCheckin);
    }
    if (hasCsEmkCheckout) {
      size += pb::CodedOutputStream.ComputeMessageSize(310, CsEmkCheckout);
    }
    if (hasScEmkCheckout) {
      size += pb::CodedOutputStream.ComputeMessageSize(311, ScEmkCheckout);
    }
    if (hasCsEmkCancel) {
      size += pb::CodedOutputStream.ComputeMessageSize(312, CsEmkCancel);
    }
    if (hasScEmkVerifyList) {
      size += pb::CodedOutputStream.ComputeMessageSize(313, ScEmkVerifyList);
    }
    if (hasCsEmkVerifyProc) {
      size += pb::CodedOutputStream.ComputeMessageSize(315, CsEmkVerifyProc);
    }
    if (hasScEmkOrderList) {
      size += pb::CodedOutputStream.ComputeMessageSize(316, ScEmkOrderList);
    }
    if (hasCsEmkOrderProc) {
      size += pb::CodedOutputStream.ComputeMessageSize(317, CsEmkOrderProc);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MessageContent ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MessageContent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MessageContent ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MessageContent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MessageContent ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MessageContent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MessageContent ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MessageContent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MessageContent ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MessageContent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MessageContent MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MessageContent prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MessageContent, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MessageContent cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MessageContent result;
    
    private MessageContent PrepareBuilder() {
      if (resultIsReadOnly) {
        MessageContent original = result;
        result = new MessageContent();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MessageContent MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MessageContent.Descriptor; }
    }
    
    public override MessageContent DefaultInstanceForType {
      get { return global::MessageContent.DefaultInstance; }
    }
    
    public override MessageContent BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MessageContent) {
        return MergeFrom((MessageContent) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MessageContent other) {
      if (other == global::MessageContent.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMessageType) {
        MessageType = other.MessageType;
      }
      if (other.HasErrorTip) {
        MergeErrorTip(other.ErrorTip);
      }
      if (other.HasCsUpload) {
        MergeCsUpload(other.CsUpload);
      }
      if (other.HasScUpload) {
        MergeScUpload(other.ScUpload);
      }
      if (other.HasCsHeart) {
        MergeCsHeart(other.CsHeart);
      }
      if (other.HasScHeart) {
        MergeScHeart(other.ScHeart);
      }
      if (other.HasCsKick) {
        MergeCsKick(other.CsKick);
      }
      if (other.HasScKick) {
        MergeScKick(other.ScKick);
      }
      if (other.HasCsReconnect) {
        MergeCsReconnect(other.CsReconnect);
      }
      if (other.HasScReconnect) {
        MergeScReconnect(other.ScReconnect);
      }
      if (other.HasCsPreCharge) {
        MergeCsPreCharge(other.CsPreCharge);
      }
      if (other.HasScPreCharge) {
        MergeScPreCharge(other.ScPreCharge);
      }
      if (other.HasCsToCharge) {
        MergeCsToCharge(other.CsToCharge);
      }
      if (other.HasCsPreBuy) {
        MergeCsPreBuy(other.CsPreBuy);
      }
      if (other.HasScPreBuy) {
        MergeScPreBuy(other.ScPreBuy);
      }
      if (other.HasScToBuy) {
        MergeScToBuy(other.ScToBuy);
      }
      if (other.HasScMessage) {
        MergeScMessage(other.ScMessage);
      }
      if (other.HasCsCommand) {
        MergeCsCommand(other.CsCommand);
      }
      if (other.HasCsGoodsFind) {
        MergeCsGoodsFind(other.CsGoodsFind);
      }
      if (other.HasScGoodsFind) {
        MergeScGoodsFind(other.ScGoodsFind);
      }
      if (other.HasCsAuthen) {
        MergeCsAuthen(other.CsAuthen);
      }
      if (other.HasScAuthen) {
        MergeScAuthen(other.ScAuthen);
      }
      if (other.HasCsLogin) {
        MergeCsLogin(other.CsLogin);
      }
      if (other.HasScLogin) {
        MergeScLogin(other.ScLogin);
      }
      if (other.HasScCallList) {
        MergeScCallList(other.ScCallList);
      }
      if (other.HasCsCallProcess) {
        MergeCsCallProcess(other.CsCallProcess);
      }
      if (other.HasCsAccountInfo) {
        MergeCsAccountInfo(other.CsAccountInfo);
      }
      if (other.HasScAccountInfo) {
        MergeScAccountInfo(other.ScAccountInfo);
      }
      if (other.HasScRealtimeInfo) {
        MergeScRealtimeInfo(other.ScRealtimeInfo);
      }
      if (other.HasCsLog) {
        MergeCsLog(other.CsLog);
      }
      if (other.HasScLog) {
        MergeScLog(other.ScLog);
      }
      if (other.HasScRoleList) {
        MergeScRoleList(other.ScRoleList);
      }
      if (other.HasCsRoleAdd) {
        MergeCsRoleAdd(other.CsRoleAdd);
      }
      if (other.HasScRoleAdd) {
        MergeScRoleAdd(other.ScRoleAdd);
      }
      if (other.HasCsRoleDel) {
        MergeCsRoleDel(other.CsRoleDel);
      }
      if (other.HasCsRoleUpdate) {
        MergeCsRoleUpdate(other.CsRoleUpdate);
      }
      if (other.HasCsRoleRights) {
        MergeCsRoleRights(other.CsRoleRights);
      }
      if (other.HasScAccountList) {
        MergeScAccountList(other.ScAccountList);
      }
      if (other.HasCsAccountAdd) {
        MergeCsAccountAdd(other.CsAccountAdd);
      }
      if (other.HasCsAccountDel) {
        MergeCsAccountDel(other.CsAccountDel);
      }
      if (other.HasCsAccountUpdate) {
        MergeCsAccountUpdate(other.CsAccountUpdate);
      }
      if (other.HasCsAccountSnsSet) {
        MergeCsAccountSnsSet(other.CsAccountSnsSet);
      }
      if (other.HasCsStaffComment) {
        MergeCsStaffComment(other.CsStaffComment);
      }
      if (other.HasScStaffComment) {
        MergeScStaffComment(other.ScStaffComment);
      }
      if (other.HasCsStaffPerform) {
        MergeCsStaffPerform(other.CsStaffPerform);
      }
      if (other.HasScStaffPerform) {
        MergeScStaffPerform(other.ScStaffPerform);
      }
      if (other.HasCsEarning) {
        MergeCsEarning(other.CsEarning);
      }
      if (other.HasScEarning) {
        MergeScEarning(other.ScEarning);
      }
      if (other.HasScComputerList) {
        MergeScComputerList(other.ScComputerList);
      }
      if (other.HasCsComputerAdd) {
        MergeCsComputerAdd(other.CsComputerAdd);
      }
      if (other.HasCsComputerDel) {
        MergeCsComputerDel(other.CsComputerDel);
      }
      if (other.HasCsComputerUpdate) {
        MergeCsComputerUpdate(other.CsComputerUpdate);
      }
      if (other.HasCsComputerFind) {
        MergeCsComputerFind(other.CsComputerFind);
      }
      if (other.HasScComputerFind) {
        MergeScComputerFind(other.ScComputerFind);
      }
      if (other.HasCsMemberList) {
        MergeCsMemberList(other.CsMemberList);
      }
      if (other.HasScMemberList) {
        MergeScMemberList(other.ScMemberList);
      }
      if (other.HasCsMemberDel) {
        MergeCsMemberDel(other.CsMemberDel);
      }
      if (other.HasCsMemberUpdate) {
        MergeCsMemberUpdate(other.CsMemberUpdate);
      }
      if (other.HasCsMemberFind) {
        MergeCsMemberFind(other.CsMemberFind);
      }
      if (other.HasScMemberFind) {
        MergeScMemberFind(other.ScMemberFind);
      }
      if (other.HasCsMemberCardInfo) {
        MergeCsMemberCardInfo(other.CsMemberCardInfo);
      }
      if (other.HasScMemberCardInfo) {
        MergeScMemberCardInfo(other.ScMemberCardInfo);
      }
      if (other.HasScSysBillList) {
        MergeScSysBillList(other.ScSysBillList);
      }
      if (other.HasCsSysBillUpdate) {
        MergeCsSysBillUpdate(other.CsSysBillUpdate);
      }
      if (other.HasScSysBillUpdate) {
        MergeScSysBillUpdate(other.ScSysBillUpdate);
      }
      if (other.HasCsSysInfo) {
        MergeCsSysInfo(other.CsSysInfo);
      }
      if (other.HasScSysInfo) {
        MergeScSysInfo(other.ScSysInfo);
      }
      if (other.HasCsAddSysInfo) {
        MergeCsAddSysInfo(other.CsAddSysInfo);
      }
      if (other.HasCsDelSysInfo) {
        MergeCsDelSysInfo(other.CsDelSysInfo);
      }
      if (other.HasCsUpdateSysInfo) {
        MergeCsUpdateSysInfo(other.CsUpdateSysInfo);
      }
      if (other.HasCsGoodsAdd) {
        MergeCsGoodsAdd(other.CsGoodsAdd);
      }
      if (other.HasCsGoodsDel) {
        MergeCsGoodsDel(other.CsGoodsDel);
      }
      if (other.HasCsGoodsUpdate) {
        MergeCsGoodsUpdate(other.CsGoodsUpdate);
      }
      if (other.HasCsGoodsStock) {
        MergeCsGoodsStock(other.CsGoodsStock);
      }
      if (other.HasScGoodsStock) {
        MergeScGoodsStock(other.ScGoodsStock);
      }
      if (other.HasCsSalesRecord) {
        MergeCsSalesRecord(other.CsSalesRecord);
      }
      if (other.HasScSalesRecord) {
        MergeScSalesRecord(other.ScSalesRecord);
      }
      if (other.HasCsSalesTop) {
        MergeCsSalesTop(other.CsSalesTop);
      }
      if (other.HasScSalesTop) {
        MergeScSalesTop(other.ScSalesTop);
      }
      if (other.HasCsOrderProc) {
        MergeCsOrderProc(other.CsOrderProc);
      }
      if (other.HasCsOrderList) {
        MergeCsOrderList(other.CsOrderList);
      }
      if (other.HasScOrderList) {
        MergeScOrderList(other.ScOrderList);
      }
      if (other.HasCsOrderDetail) {
        MergeCsOrderDetail(other.CsOrderDetail);
      }
      if (other.HasScOrderDetail) {
        MergeScOrderDetail(other.ScOrderDetail);
      }
      if (other.HasScShiftDeliveredBy) {
        MergeScShiftDeliveredBy(other.ScShiftDeliveredBy);
      }
      if (other.HasCsShiftAdd) {
        MergeCsShiftAdd(other.CsShiftAdd);
      }
      if (other.HasCsShiftFind) {
        MergeCsShiftFind(other.CsShiftFind);
      }
      if (other.HasScShiftFind) {
        MergeScShiftFind(other.ScShiftFind);
      }
      if (other.HasCsQueryCharge) {
        MergeCsQueryCharge(other.CsQueryCharge);
      }
      if (other.HasScQueryCharge) {
        MergeScQueryCharge(other.ScQueryCharge);
      }
      if (other.HasCsQueryEmk) {
        MergeCsQueryEmk(other.CsQueryEmk);
      }
      if (other.HasScQueryEmk) {
        MergeScQueryEmk(other.ScQueryEmk);
      }
      if (other.HasCsQueryTrade) {
        MergeCsQueryTrade(other.CsQueryTrade);
      }
      if (other.HasScQueryTrade) {
        MergeScQueryTrade(other.ScQueryTrade);
      }
      if (other.HasCsQueryApply) {
        MergeCsQueryApply(other.CsQueryApply);
      }
      if (other.HasScQueryApply) {
        MergeScQueryApply(other.ScQueryApply);
      }
      if (other.HasCsQueryOccup) {
        MergeCsQueryOccup(other.CsQueryOccup);
      }
      if (other.HasScQueryOccup) {
        MergeScQueryOccup(other.ScQueryOccup);
      }
      if (other.HasCsClientOpen) {
        MergeCsClientOpen(other.CsClientOpen);
      }
      if (other.HasCsClientClose) {
        MergeCsClientClose(other.CsClientClose);
      }
      if (other.HasCsLogon) {
        MergeCsLogon(other.CsLogon);
      }
      if (other.HasScLogon) {
        MergeScLogon(other.ScLogon);
      }
      if (other.HasCsLogoff) {
        MergeCsLogoff(other.CsLogoff);
      }
      if (other.HasScLogoff) {
        MergeScLogoff(other.ScLogoff);
      }
      if (other.HasCsHungup) {
        MergeCsHungup(other.CsHungup);
      }
      if (other.HasCsEvaluate) {
        MergeCsEvaluate(other.CsEvaluate);
      }
      if (other.HasScEvaluate) {
        MergeScEvaluate(other.ScEvaluate);
      }
      if (other.HasCsVerifyCode) {
        MergeCsVerifyCode(other.CsVerifyCode);
      }
      if (other.HasScVerifyCode) {
        MergeScVerifyCode(other.ScVerifyCode);
      }
      if (other.HasCsBindMobile) {
        MergeCsBindMobile(other.CsBindMobile);
      }
      if (other.HasScBindMobile) {
        MergeScBindMobile(other.ScBindMobile);
      }
      if (other.HasCsEmkUserInfo) {
        MergeCsEmkUserInfo(other.CsEmkUserInfo);
      }
      if (other.HasScEmkUserInfo) {
        MergeScEmkUserInfo(other.ScEmkUserInfo);
      }
      if (other.HasCsEmkAddCardInfo) {
        MergeCsEmkAddCardInfo(other.CsEmkAddCardInfo);
      }
      if (other.HasCsEmkAddFingerInfo) {
        MergeCsEmkAddFingerInfo(other.CsEmkAddFingerInfo);
      }
      if (other.HasCsEmkApplyMember) {
        MergeCsEmkApplyMember(other.CsEmkApplyMember);
      }
      if (other.HasScEmkApplyMember) {
        MergeScEmkApplyMember(other.ScEmkApplyMember);
      }
      if (other.HasCsEmkCharge) {
        MergeCsEmkCharge(other.CsEmkCharge);
      }
      if (other.HasScEmkCharge) {
        MergeScEmkCharge(other.ScEmkCharge);
      }
      if (other.HasCsEmkCheckin) {
        MergeCsEmkCheckin(other.CsEmkCheckin);
      }
      if (other.HasScEmkCheckin) {
        MergeScEmkCheckin(other.ScEmkCheckin);
      }
      if (other.HasCsEmkCheckout) {
        MergeCsEmkCheckout(other.CsEmkCheckout);
      }
      if (other.HasScEmkCheckout) {
        MergeScEmkCheckout(other.ScEmkCheckout);
      }
      if (other.HasCsEmkCancel) {
        MergeCsEmkCancel(other.CsEmkCancel);
      }
      if (other.HasScEmkVerifyList) {
        MergeScEmkVerifyList(other.ScEmkVerifyList);
      }
      if (other.HasCsEmkVerifyProc) {
        MergeCsEmkVerifyProc(other.CsEmkVerifyProc);
      }
      if (other.HasScEmkOrderList) {
        MergeScEmkOrderList(other.ScEmkOrderList);
      }
      if (other.HasCsEmkOrderProc) {
        MergeCsEmkOrderProc(other.CsEmkOrderProc);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_messageContentFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _messageContentFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMessageType = input.ReadInt32(ref result.messageType_);
            break;
          }
          case 18: {
            global::StructErrorTip.Builder subBuilder = global::StructErrorTip.CreateBuilder();
            if (result.hasErrorTip) {
              subBuilder.MergeFrom(ErrorTip);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ErrorTip = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            global::CSUploadPicture.Builder subBuilder = global::CSUploadPicture.CreateBuilder();
            if (result.hasCsUpload) {
              subBuilder.MergeFrom(CsUpload);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsUpload = subBuilder.BuildPartial();
            break;
          }
          case 34: {
            global::SCUploadPicture.Builder subBuilder = global::SCUploadPicture.CreateBuilder();
            if (result.hasScUpload) {
              subBuilder.MergeFrom(ScUpload);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScUpload = subBuilder.BuildPartial();
            break;
          }
          case 42: {
            global::CSHeart.Builder subBuilder = global::CSHeart.CreateBuilder();
            if (result.hasCsHeart) {
              subBuilder.MergeFrom(CsHeart);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsHeart = subBuilder.BuildPartial();
            break;
          }
          case 50: {
            global::SCHeart.Builder subBuilder = global::SCHeart.CreateBuilder();
            if (result.hasScHeart) {
              subBuilder.MergeFrom(ScHeart);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScHeart = subBuilder.BuildPartial();
            break;
          }
          case 58: {
            global::CSKick.Builder subBuilder = global::CSKick.CreateBuilder();
            if (result.hasCsKick) {
              subBuilder.MergeFrom(CsKick);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsKick = subBuilder.BuildPartial();
            break;
          }
          case 66: {
            global::SCKick.Builder subBuilder = global::SCKick.CreateBuilder();
            if (result.hasScKick) {
              subBuilder.MergeFrom(ScKick);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScKick = subBuilder.BuildPartial();
            break;
          }
          case 74: {
            global::CSReconnect.Builder subBuilder = global::CSReconnect.CreateBuilder();
            if (result.hasCsReconnect) {
              subBuilder.MergeFrom(CsReconnect);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsReconnect = subBuilder.BuildPartial();
            break;
          }
          case 82: {
            global::SCReconnect.Builder subBuilder = global::SCReconnect.CreateBuilder();
            if (result.hasScReconnect) {
              subBuilder.MergeFrom(ScReconnect);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScReconnect = subBuilder.BuildPartial();
            break;
          }
          case 90: {
            global::CSPreCharge.Builder subBuilder = global::CSPreCharge.CreateBuilder();
            if (result.hasCsPreCharge) {
              subBuilder.MergeFrom(CsPreCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsPreCharge = subBuilder.BuildPartial();
            break;
          }
          case 98: {
            global::SCPreCharge.Builder subBuilder = global::SCPreCharge.CreateBuilder();
            if (result.hasScPreCharge) {
              subBuilder.MergeFrom(ScPreCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScPreCharge = subBuilder.BuildPartial();
            break;
          }
          case 106: {
            global::SCToCharge.Builder subBuilder = global::SCToCharge.CreateBuilder();
            if (result.hasCsToCharge) {
              subBuilder.MergeFrom(CsToCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsToCharge = subBuilder.BuildPartial();
            break;
          }
          case 114: {
            global::CSPreBuy.Builder subBuilder = global::CSPreBuy.CreateBuilder();
            if (result.hasCsPreBuy) {
              subBuilder.MergeFrom(CsPreBuy);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsPreBuy = subBuilder.BuildPartial();
            break;
          }
          case 122: {
            global::SCPreBuy.Builder subBuilder = global::SCPreBuy.CreateBuilder();
            if (result.hasScPreBuy) {
              subBuilder.MergeFrom(ScPreBuy);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScPreBuy = subBuilder.BuildPartial();
            break;
          }
          case 130: {
            global::SCToBuy.Builder subBuilder = global::SCToBuy.CreateBuilder();
            if (result.hasScToBuy) {
              subBuilder.MergeFrom(ScToBuy);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScToBuy = subBuilder.BuildPartial();
            break;
          }
          case 138: {
            global::SCMessage.Builder subBuilder = global::SCMessage.CreateBuilder();
            if (result.hasScMessage) {
              subBuilder.MergeFrom(ScMessage);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScMessage = subBuilder.BuildPartial();
            break;
          }
          case 146: {
            global::CSCommand.Builder subBuilder = global::CSCommand.CreateBuilder();
            if (result.hasCsCommand) {
              subBuilder.MergeFrom(CsCommand);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsCommand = subBuilder.BuildPartial();
            break;
          }
          case 154: {
            global::CSGoodsFind.Builder subBuilder = global::CSGoodsFind.CreateBuilder();
            if (result.hasCsGoodsFind) {
              subBuilder.MergeFrom(CsGoodsFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsGoodsFind = subBuilder.BuildPartial();
            break;
          }
          case 162: {
            global::SCGoodsFind.Builder subBuilder = global::SCGoodsFind.CreateBuilder();
            if (result.hasScGoodsFind) {
              subBuilder.MergeFrom(ScGoodsFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScGoodsFind = subBuilder.BuildPartial();
            break;
          }
          case 186: {
            global::CSAuthen.Builder subBuilder = global::CSAuthen.CreateBuilder();
            if (result.hasCsAuthen) {
              subBuilder.MergeFrom(CsAuthen);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAuthen = subBuilder.BuildPartial();
            break;
          }
          case 194: {
            global::SCAuthen.Builder subBuilder = global::SCAuthen.CreateBuilder();
            if (result.hasScAuthen) {
              subBuilder.MergeFrom(ScAuthen);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScAuthen = subBuilder.BuildPartial();
            break;
          }
          case 202: {
            global::CSLogin.Builder subBuilder = global::CSLogin.CreateBuilder();
            if (result.hasCsLogin) {
              subBuilder.MergeFrom(CsLogin);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsLogin = subBuilder.BuildPartial();
            break;
          }
          case 210: {
            global::SCLogin.Builder subBuilder = global::SCLogin.CreateBuilder();
            if (result.hasScLogin) {
              subBuilder.MergeFrom(ScLogin);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScLogin = subBuilder.BuildPartial();
            break;
          }
          case 218: {
            global::SCCallList.Builder subBuilder = global::SCCallList.CreateBuilder();
            if (result.hasScCallList) {
              subBuilder.MergeFrom(ScCallList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScCallList = subBuilder.BuildPartial();
            break;
          }
          case 226: {
            global::CSCallProcess.Builder subBuilder = global::CSCallProcess.CreateBuilder();
            if (result.hasCsCallProcess) {
              subBuilder.MergeFrom(CsCallProcess);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsCallProcess = subBuilder.BuildPartial();
            break;
          }
          case 234: {
            global::CSAccountInfo.Builder subBuilder = global::CSAccountInfo.CreateBuilder();
            if (result.hasCsAccountInfo) {
              subBuilder.MergeFrom(CsAccountInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAccountInfo = subBuilder.BuildPartial();
            break;
          }
          case 242: {
            global::SCAccountInfo.Builder subBuilder = global::SCAccountInfo.CreateBuilder();
            if (result.hasScAccountInfo) {
              subBuilder.MergeFrom(ScAccountInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScAccountInfo = subBuilder.BuildPartial();
            break;
          }
          case 250: {
            global::SCRealtimeInfo.Builder subBuilder = global::SCRealtimeInfo.CreateBuilder();
            if (result.hasScRealtimeInfo) {
              subBuilder.MergeFrom(ScRealtimeInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScRealtimeInfo = subBuilder.BuildPartial();
            break;
          }
          case 258: {
            global::CSLog.Builder subBuilder = global::CSLog.CreateBuilder();
            if (result.hasCsLog) {
              subBuilder.MergeFrom(CsLog);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsLog = subBuilder.BuildPartial();
            break;
          }
          case 266: {
            global::SCLog.Builder subBuilder = global::SCLog.CreateBuilder();
            if (result.hasScLog) {
              subBuilder.MergeFrom(ScLog);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScLog = subBuilder.BuildPartial();
            break;
          }
          case 274: {
            global::SCRoleList.Builder subBuilder = global::SCRoleList.CreateBuilder();
            if (result.hasScRoleList) {
              subBuilder.MergeFrom(ScRoleList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScRoleList = subBuilder.BuildPartial();
            break;
          }
          case 282: {
            global::CSRoleAdd.Builder subBuilder = global::CSRoleAdd.CreateBuilder();
            if (result.hasCsRoleAdd) {
              subBuilder.MergeFrom(CsRoleAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsRoleAdd = subBuilder.BuildPartial();
            break;
          }
          case 290: {
            global::SCRoleAdd.Builder subBuilder = global::SCRoleAdd.CreateBuilder();
            if (result.hasScRoleAdd) {
              subBuilder.MergeFrom(ScRoleAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScRoleAdd = subBuilder.BuildPartial();
            break;
          }
          case 298: {
            global::CSRoleDel.Builder subBuilder = global::CSRoleDel.CreateBuilder();
            if (result.hasCsRoleDel) {
              subBuilder.MergeFrom(CsRoleDel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsRoleDel = subBuilder.BuildPartial();
            break;
          }
          case 306: {
            global::CSRoleUpdate.Builder subBuilder = global::CSRoleUpdate.CreateBuilder();
            if (result.hasCsRoleUpdate) {
              subBuilder.MergeFrom(CsRoleUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsRoleUpdate = subBuilder.BuildPartial();
            break;
          }
          case 314: {
            global::CSRoleRights.Builder subBuilder = global::CSRoleRights.CreateBuilder();
            if (result.hasCsRoleRights) {
              subBuilder.MergeFrom(CsRoleRights);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsRoleRights = subBuilder.BuildPartial();
            break;
          }
          case 322: {
            global::SCAccountList.Builder subBuilder = global::SCAccountList.CreateBuilder();
            if (result.hasScAccountList) {
              subBuilder.MergeFrom(ScAccountList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScAccountList = subBuilder.BuildPartial();
            break;
          }
          case 330: {
            global::CSAccountAdd.Builder subBuilder = global::CSAccountAdd.CreateBuilder();
            if (result.hasCsAccountAdd) {
              subBuilder.MergeFrom(CsAccountAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAccountAdd = subBuilder.BuildPartial();
            break;
          }
          case 338: {
            global::CSAccountDel.Builder subBuilder = global::CSAccountDel.CreateBuilder();
            if (result.hasCsAccountDel) {
              subBuilder.MergeFrom(CsAccountDel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAccountDel = subBuilder.BuildPartial();
            break;
          }
          case 346: {
            global::CSAccountUpdate.Builder subBuilder = global::CSAccountUpdate.CreateBuilder();
            if (result.hasCsAccountUpdate) {
              subBuilder.MergeFrom(CsAccountUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAccountUpdate = subBuilder.BuildPartial();
            break;
          }
          case 354: {
            global::CSAccountSnsSet.Builder subBuilder = global::CSAccountSnsSet.CreateBuilder();
            if (result.hasCsAccountSnsSet) {
              subBuilder.MergeFrom(CsAccountSnsSet);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAccountSnsSet = subBuilder.BuildPartial();
            break;
          }
          case 362: {
            global::CSStaffComment.Builder subBuilder = global::CSStaffComment.CreateBuilder();
            if (result.hasCsStaffComment) {
              subBuilder.MergeFrom(CsStaffComment);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsStaffComment = subBuilder.BuildPartial();
            break;
          }
          case 370: {
            global::SCStaffComment.Builder subBuilder = global::SCStaffComment.CreateBuilder();
            if (result.hasScStaffComment) {
              subBuilder.MergeFrom(ScStaffComment);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScStaffComment = subBuilder.BuildPartial();
            break;
          }
          case 378: {
            global::CSStaffPerform.Builder subBuilder = global::CSStaffPerform.CreateBuilder();
            if (result.hasCsStaffPerform) {
              subBuilder.MergeFrom(CsStaffPerform);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsStaffPerform = subBuilder.BuildPartial();
            break;
          }
          case 386: {
            global::SCStaffPerform.Builder subBuilder = global::SCStaffPerform.CreateBuilder();
            if (result.hasScStaffPerform) {
              subBuilder.MergeFrom(ScStaffPerform);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScStaffPerform = subBuilder.BuildPartial();
            break;
          }
          case 394: {
            global::CSEarning.Builder subBuilder = global::CSEarning.CreateBuilder();
            if (result.hasCsEarning) {
              subBuilder.MergeFrom(CsEarning);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEarning = subBuilder.BuildPartial();
            break;
          }
          case 402: {
            global::SCEarning.Builder subBuilder = global::SCEarning.CreateBuilder();
            if (result.hasScEarning) {
              subBuilder.MergeFrom(ScEarning);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEarning = subBuilder.BuildPartial();
            break;
          }
          case 410: {
            global::SCComputerList.Builder subBuilder = global::SCComputerList.CreateBuilder();
            if (result.hasScComputerList) {
              subBuilder.MergeFrom(ScComputerList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScComputerList = subBuilder.BuildPartial();
            break;
          }
          case 418: {
            global::CSComputerAdd.Builder subBuilder = global::CSComputerAdd.CreateBuilder();
            if (result.hasCsComputerAdd) {
              subBuilder.MergeFrom(CsComputerAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsComputerAdd = subBuilder.BuildPartial();
            break;
          }
          case 426: {
            global::CSComputerDel.Builder subBuilder = global::CSComputerDel.CreateBuilder();
            if (result.hasCsComputerDel) {
              subBuilder.MergeFrom(CsComputerDel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsComputerDel = subBuilder.BuildPartial();
            break;
          }
          case 434: {
            global::CSComputerUpdate.Builder subBuilder = global::CSComputerUpdate.CreateBuilder();
            if (result.hasCsComputerUpdate) {
              subBuilder.MergeFrom(CsComputerUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsComputerUpdate = subBuilder.BuildPartial();
            break;
          }
          case 442: {
            global::CSComputerFind.Builder subBuilder = global::CSComputerFind.CreateBuilder();
            if (result.hasCsComputerFind) {
              subBuilder.MergeFrom(CsComputerFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsComputerFind = subBuilder.BuildPartial();
            break;
          }
          case 450: {
            global::SCComputerFind.Builder subBuilder = global::SCComputerFind.CreateBuilder();
            if (result.hasScComputerFind) {
              subBuilder.MergeFrom(ScComputerFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScComputerFind = subBuilder.BuildPartial();
            break;
          }
          case 458: {
            global::CSMemberList.Builder subBuilder = global::CSMemberList.CreateBuilder();
            if (result.hasCsMemberList) {
              subBuilder.MergeFrom(CsMemberList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberList = subBuilder.BuildPartial();
            break;
          }
          case 466: {
            global::SCMemberList.Builder subBuilder = global::SCMemberList.CreateBuilder();
            if (result.hasScMemberList) {
              subBuilder.MergeFrom(ScMemberList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScMemberList = subBuilder.BuildPartial();
            break;
          }
          case 490: {
            global::CSMemberDel.Builder subBuilder = global::CSMemberDel.CreateBuilder();
            if (result.hasCsMemberDel) {
              subBuilder.MergeFrom(CsMemberDel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberDel = subBuilder.BuildPartial();
            break;
          }
          case 498: {
            global::CSMemberUpdateStatus.Builder subBuilder = global::CSMemberUpdateStatus.CreateBuilder();
            if (result.hasCsMemberUpdate) {
              subBuilder.MergeFrom(CsMemberUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberUpdate = subBuilder.BuildPartial();
            break;
          }
          case 506: {
            global::CSMemberFind.Builder subBuilder = global::CSMemberFind.CreateBuilder();
            if (result.hasCsMemberFind) {
              subBuilder.MergeFrom(CsMemberFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberFind = subBuilder.BuildPartial();
            break;
          }
          case 514: {
            global::SCMemberFind.Builder subBuilder = global::SCMemberFind.CreateBuilder();
            if (result.hasScMemberFind) {
              subBuilder.MergeFrom(ScMemberFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScMemberFind = subBuilder.BuildPartial();
            break;
          }
          case 522: {
            global::CSMemberCardInfo.Builder subBuilder = global::CSMemberCardInfo.CreateBuilder();
            if (result.hasCsMemberCardInfo) {
              subBuilder.MergeFrom(CsMemberCardInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberCardInfo = subBuilder.BuildPartial();
            break;
          }
          case 530: {
            global::SCMemberCardInfo.Builder subBuilder = global::SCMemberCardInfo.CreateBuilder();
            if (result.hasScMemberCardInfo) {
              subBuilder.MergeFrom(ScMemberCardInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScMemberCardInfo = subBuilder.BuildPartial();
            break;
          }
          case 538: {
            global::SCSysBillList.Builder subBuilder = global::SCSysBillList.CreateBuilder();
            if (result.hasScSysBillList) {
              subBuilder.MergeFrom(ScSysBillList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScSysBillList = subBuilder.BuildPartial();
            break;
          }
          case 546: {
            global::CSSysBillUpdate.Builder subBuilder = global::CSSysBillUpdate.CreateBuilder();
            if (result.hasCsSysBillUpdate) {
              subBuilder.MergeFrom(CsSysBillUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsSysBillUpdate = subBuilder.BuildPartial();
            break;
          }
          case 554: {
            global::SCSysBillUpdate.Builder subBuilder = global::SCSysBillUpdate.CreateBuilder();
            if (result.hasScSysBillUpdate) {
              subBuilder.MergeFrom(ScSysBillUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScSysBillUpdate = subBuilder.BuildPartial();
            break;
          }
          case 562: {
            global::CSSysInto.Builder subBuilder = global::CSSysInto.CreateBuilder();
            if (result.hasCsSysInfo) {
              subBuilder.MergeFrom(CsSysInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsSysInfo = subBuilder.BuildPartial();
            break;
          }
          case 570: {
            global::SCSysInfo.Builder subBuilder = global::SCSysInfo.CreateBuilder();
            if (result.hasScSysInfo) {
              subBuilder.MergeFrom(ScSysInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScSysInfo = subBuilder.BuildPartial();
            break;
          }
          case 578: {
            global::CSAddSysInfo.Builder subBuilder = global::CSAddSysInfo.CreateBuilder();
            if (result.hasCsAddSysInfo) {
              subBuilder.MergeFrom(CsAddSysInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAddSysInfo = subBuilder.BuildPartial();
            break;
          }
          case 586: {
            global::CSDelSysInfo.Builder subBuilder = global::CSDelSysInfo.CreateBuilder();
            if (result.hasCsDelSysInfo) {
              subBuilder.MergeFrom(CsDelSysInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsDelSysInfo = subBuilder.BuildPartial();
            break;
          }
          case 594: {
            global::CSUpdateSysInfo.Builder subBuilder = global::CSUpdateSysInfo.CreateBuilder();
            if (result.hasCsUpdateSysInfo) {
              subBuilder.MergeFrom(CsUpdateSysInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsUpdateSysInfo = subBuilder.BuildPartial();
            break;
          }
          case 602: {
            global::CSGoodsAdd.Builder subBuilder = global::CSGoodsAdd.CreateBuilder();
            if (result.hasCsGoodsAdd) {
              subBuilder.MergeFrom(CsGoodsAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsGoodsAdd = subBuilder.BuildPartial();
            break;
          }
          case 610: {
            global::CSGoodsDel.Builder subBuilder = global::CSGoodsDel.CreateBuilder();
            if (result.hasCsGoodsDel) {
              subBuilder.MergeFrom(CsGoodsDel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsGoodsDel = subBuilder.BuildPartial();
            break;
          }
          case 618: {
            global::CSGoodsUpdate.Builder subBuilder = global::CSGoodsUpdate.CreateBuilder();
            if (result.hasCsGoodsUpdate) {
              subBuilder.MergeFrom(CsGoodsUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsGoodsUpdate = subBuilder.BuildPartial();
            break;
          }
          case 626: {
            global::CSGoodsStock.Builder subBuilder = global::CSGoodsStock.CreateBuilder();
            if (result.hasCsGoodsStock) {
              subBuilder.MergeFrom(CsGoodsStock);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsGoodsStock = subBuilder.BuildPartial();
            break;
          }
          case 634: {
            global::SCGoodsStock.Builder subBuilder = global::SCGoodsStock.CreateBuilder();
            if (result.hasScGoodsStock) {
              subBuilder.MergeFrom(ScGoodsStock);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScGoodsStock = subBuilder.BuildPartial();
            break;
          }
          case 642: {
            global::CSSalesRecord.Builder subBuilder = global::CSSalesRecord.CreateBuilder();
            if (result.hasCsSalesRecord) {
              subBuilder.MergeFrom(CsSalesRecord);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsSalesRecord = subBuilder.BuildPartial();
            break;
          }
          case 650: {
            global::SCSalesRecord.Builder subBuilder = global::SCSalesRecord.CreateBuilder();
            if (result.hasScSalesRecord) {
              subBuilder.MergeFrom(ScSalesRecord);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScSalesRecord = subBuilder.BuildPartial();
            break;
          }
          case 658: {
            global::CSSalesTop.Builder subBuilder = global::CSSalesTop.CreateBuilder();
            if (result.hasCsSalesTop) {
              subBuilder.MergeFrom(CsSalesTop);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsSalesTop = subBuilder.BuildPartial();
            break;
          }
          case 666: {
            global::SCSalesTop.Builder subBuilder = global::SCSalesTop.CreateBuilder();
            if (result.hasScSalesTop) {
              subBuilder.MergeFrom(ScSalesTop);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScSalesTop = subBuilder.BuildPartial();
            break;
          }
          case 674: {
            global::CSOrderProc.Builder subBuilder = global::CSOrderProc.CreateBuilder();
            if (result.hasCsOrderProc) {
              subBuilder.MergeFrom(CsOrderProc);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsOrderProc = subBuilder.BuildPartial();
            break;
          }
          case 682: {
            global::CSOrderList.Builder subBuilder = global::CSOrderList.CreateBuilder();
            if (result.hasCsOrderList) {
              subBuilder.MergeFrom(CsOrderList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsOrderList = subBuilder.BuildPartial();
            break;
          }
          case 690: {
            global::SCOrderList.Builder subBuilder = global::SCOrderList.CreateBuilder();
            if (result.hasScOrderList) {
              subBuilder.MergeFrom(ScOrderList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScOrderList = subBuilder.BuildPartial();
            break;
          }
          case 698: {
            global::CSOrderDetail.Builder subBuilder = global::CSOrderDetail.CreateBuilder();
            if (result.hasCsOrderDetail) {
              subBuilder.MergeFrom(CsOrderDetail);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsOrderDetail = subBuilder.BuildPartial();
            break;
          }
          case 706: {
            global::SCOrderDetail.Builder subBuilder = global::SCOrderDetail.CreateBuilder();
            if (result.hasScOrderDetail) {
              subBuilder.MergeFrom(ScOrderDetail);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScOrderDetail = subBuilder.BuildPartial();
            break;
          }
          case 714: {
            global::SCShiftDeliveredBy.Builder subBuilder = global::SCShiftDeliveredBy.CreateBuilder();
            if (result.hasScShiftDeliveredBy) {
              subBuilder.MergeFrom(ScShiftDeliveredBy);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScShiftDeliveredBy = subBuilder.BuildPartial();
            break;
          }
          case 722: {
            global::CSShiftAdd.Builder subBuilder = global::CSShiftAdd.CreateBuilder();
            if (result.hasCsShiftAdd) {
              subBuilder.MergeFrom(CsShiftAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsShiftAdd = subBuilder.BuildPartial();
            break;
          }
          case 730: {
            global::CSShiftFind.Builder subBuilder = global::CSShiftFind.CreateBuilder();
            if (result.hasCsShiftFind) {
              subBuilder.MergeFrom(CsShiftFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsShiftFind = subBuilder.BuildPartial();
            break;
          }
          case 738: {
            global::SCShiftFind.Builder subBuilder = global::SCShiftFind.CreateBuilder();
            if (result.hasScShiftFind) {
              subBuilder.MergeFrom(ScShiftFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScShiftFind = subBuilder.BuildPartial();
            break;
          }
          case 746: {
            global::CSQueryCharge.Builder subBuilder = global::CSQueryCharge.CreateBuilder();
            if (result.hasCsQueryCharge) {
              subBuilder.MergeFrom(CsQueryCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsQueryCharge = subBuilder.BuildPartial();
            break;
          }
          case 754: {
            global::SCQueryCharge.Builder subBuilder = global::SCQueryCharge.CreateBuilder();
            if (result.hasScQueryCharge) {
              subBuilder.MergeFrom(ScQueryCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScQueryCharge = subBuilder.BuildPartial();
            break;
          }
          case 762: {
            global::CSQueryEmk.Builder subBuilder = global::CSQueryEmk.CreateBuilder();
            if (result.hasCsQueryEmk) {
              subBuilder.MergeFrom(CsQueryEmk);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsQueryEmk = subBuilder.BuildPartial();
            break;
          }
          case 770: {
            global::SCQueryEmk.Builder subBuilder = global::SCQueryEmk.CreateBuilder();
            if (result.hasScQueryEmk) {
              subBuilder.MergeFrom(ScQueryEmk);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScQueryEmk = subBuilder.BuildPartial();
            break;
          }
          case 778: {
            global::CSQueryTrade.Builder subBuilder = global::CSQueryTrade.CreateBuilder();
            if (result.hasCsQueryTrade) {
              subBuilder.MergeFrom(CsQueryTrade);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsQueryTrade = subBuilder.BuildPartial();
            break;
          }
          case 786: {
            global::SCQueryTrade.Builder subBuilder = global::SCQueryTrade.CreateBuilder();
            if (result.hasScQueryTrade) {
              subBuilder.MergeFrom(ScQueryTrade);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScQueryTrade = subBuilder.BuildPartial();
            break;
          }
          case 794: {
            global::CSQueryApply.Builder subBuilder = global::CSQueryApply.CreateBuilder();
            if (result.hasCsQueryApply) {
              subBuilder.MergeFrom(CsQueryApply);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsQueryApply = subBuilder.BuildPartial();
            break;
          }
          case 802: {
            global::SCQueryApply.Builder subBuilder = global::SCQueryApply.CreateBuilder();
            if (result.hasScQueryApply) {
              subBuilder.MergeFrom(ScQueryApply);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScQueryApply = subBuilder.BuildPartial();
            break;
          }
          case 810: {
            global::CSQueryOccup.Builder subBuilder = global::CSQueryOccup.CreateBuilder();
            if (result.hasCsQueryOccup) {
              subBuilder.MergeFrom(CsQueryOccup);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsQueryOccup = subBuilder.BuildPartial();
            break;
          }
          case 818: {
            global::SCQueryOccup.Builder subBuilder = global::SCQueryOccup.CreateBuilder();
            if (result.hasScQueryOccup) {
              subBuilder.MergeFrom(ScQueryOccup);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScQueryOccup = subBuilder.BuildPartial();
            break;
          }
          case 1602: {
            global::CSClientOpen.Builder subBuilder = global::CSClientOpen.CreateBuilder();
            if (result.hasCsClientOpen) {
              subBuilder.MergeFrom(CsClientOpen);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsClientOpen = subBuilder.BuildPartial();
            break;
          }
          case 1610: {
            global::CSClientClose.Builder subBuilder = global::CSClientClose.CreateBuilder();
            if (result.hasCsClientClose) {
              subBuilder.MergeFrom(CsClientClose);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsClientClose = subBuilder.BuildPartial();
            break;
          }
          case 1618: {
            global::CSLogon.Builder subBuilder = global::CSLogon.CreateBuilder();
            if (result.hasCsLogon) {
              subBuilder.MergeFrom(CsLogon);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsLogon = subBuilder.BuildPartial();
            break;
          }
          case 1626: {
            global::SCLogon.Builder subBuilder = global::SCLogon.CreateBuilder();
            if (result.hasScLogon) {
              subBuilder.MergeFrom(ScLogon);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScLogon = subBuilder.BuildPartial();
            break;
          }
          case 1634: {
            global::CSLogoff.Builder subBuilder = global::CSLogoff.CreateBuilder();
            if (result.hasCsLogoff) {
              subBuilder.MergeFrom(CsLogoff);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsLogoff = subBuilder.BuildPartial();
            break;
          }
          case 1642: {
            global::SCLogoff.Builder subBuilder = global::SCLogoff.CreateBuilder();
            if (result.hasScLogoff) {
              subBuilder.MergeFrom(ScLogoff);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScLogoff = subBuilder.BuildPartial();
            break;
          }
          case 1650: {
            global::CSHungup.Builder subBuilder = global::CSHungup.CreateBuilder();
            if (result.hasCsHungup) {
              subBuilder.MergeFrom(CsHungup);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsHungup = subBuilder.BuildPartial();
            break;
          }
          case 1746: {
            global::CSEvaluate.Builder subBuilder = global::CSEvaluate.CreateBuilder();
            if (result.hasCsEvaluate) {
              subBuilder.MergeFrom(CsEvaluate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEvaluate = subBuilder.BuildPartial();
            break;
          }
          case 1754: {
            global::SCEvaluate.Builder subBuilder = global::SCEvaluate.CreateBuilder();
            if (result.hasScEvaluate) {
              subBuilder.MergeFrom(ScEvaluate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEvaluate = subBuilder.BuildPartial();
            break;
          }
          case 1762: {
            global::CSVerifyCode.Builder subBuilder = global::CSVerifyCode.CreateBuilder();
            if (result.hasCsVerifyCode) {
              subBuilder.MergeFrom(CsVerifyCode);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsVerifyCode = subBuilder.BuildPartial();
            break;
          }
          case 1770: {
            global::SCVerifyCode.Builder subBuilder = global::SCVerifyCode.CreateBuilder();
            if (result.hasScVerifyCode) {
              subBuilder.MergeFrom(ScVerifyCode);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScVerifyCode = subBuilder.BuildPartial();
            break;
          }
          case 1778: {
            global::CSBindMobile.Builder subBuilder = global::CSBindMobile.CreateBuilder();
            if (result.hasCsBindMobile) {
              subBuilder.MergeFrom(CsBindMobile);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsBindMobile = subBuilder.BuildPartial();
            break;
          }
          case 1786: {
            global::SCBindMobile.Builder subBuilder = global::SCBindMobile.CreateBuilder();
            if (result.hasScBindMobile) {
              subBuilder.MergeFrom(ScBindMobile);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScBindMobile = subBuilder.BuildPartial();
            break;
          }
          case 2402: {
            global::CSEmkUserInfo.Builder subBuilder = global::CSEmkUserInfo.CreateBuilder();
            if (result.hasCsEmkUserInfo) {
              subBuilder.MergeFrom(CsEmkUserInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkUserInfo = subBuilder.BuildPartial();
            break;
          }
          case 2410: {
            global::SCEmkUserInfo.Builder subBuilder = global::SCEmkUserInfo.CreateBuilder();
            if (result.hasScEmkUserInfo) {
              subBuilder.MergeFrom(ScEmkUserInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEmkUserInfo = subBuilder.BuildPartial();
            break;
          }
          case 2418: {
            global::CSEmkAddCardInfo.Builder subBuilder = global::CSEmkAddCardInfo.CreateBuilder();
            if (result.hasCsEmkAddCardInfo) {
              subBuilder.MergeFrom(CsEmkAddCardInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkAddCardInfo = subBuilder.BuildPartial();
            break;
          }
          case 2426: {
            global::CSEmkAddFingerInfo.Builder subBuilder = global::CSEmkAddFingerInfo.CreateBuilder();
            if (result.hasCsEmkAddFingerInfo) {
              subBuilder.MergeFrom(CsEmkAddFingerInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkAddFingerInfo = subBuilder.BuildPartial();
            break;
          }
          case 2434: {
            global::CSEmkApplyMember.Builder subBuilder = global::CSEmkApplyMember.CreateBuilder();
            if (result.hasCsEmkApplyMember) {
              subBuilder.MergeFrom(CsEmkApplyMember);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkApplyMember = subBuilder.BuildPartial();
            break;
          }
          case 2442: {
            global::SCEmkApplyMember.Builder subBuilder = global::SCEmkApplyMember.CreateBuilder();
            if (result.hasScEmkApplyMember) {
              subBuilder.MergeFrom(ScEmkApplyMember);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEmkApplyMember = subBuilder.BuildPartial();
            break;
          }
          case 2450: {
            global::CSEmkCharge.Builder subBuilder = global::CSEmkCharge.CreateBuilder();
            if (result.hasCsEmkCharge) {
              subBuilder.MergeFrom(CsEmkCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkCharge = subBuilder.BuildPartial();
            break;
          }
          case 2458: {
            global::SCEmkCharge.Builder subBuilder = global::SCEmkCharge.CreateBuilder();
            if (result.hasScEmkCharge) {
              subBuilder.MergeFrom(ScEmkCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEmkCharge = subBuilder.BuildPartial();
            break;
          }
          case 2466: {
            global::CSEmkCheckin.Builder subBuilder = global::CSEmkCheckin.CreateBuilder();
            if (result.hasCsEmkCheckin) {
              subBuilder.MergeFrom(CsEmkCheckin);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkCheckin = subBuilder.BuildPartial();
            break;
          }
          case 2474: {
            global::SCEmkCheckin.Builder subBuilder = global::SCEmkCheckin.CreateBuilder();
            if (result.hasScEmkCheckin) {
              subBuilder.MergeFrom(ScEmkCheckin);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEmkCheckin = subBuilder.BuildPartial();
            break;
          }
          case 2482: {
            global::CSEmkCheckout.Builder subBuilder = global::CSEmkCheckout.CreateBuilder();
            if (result.hasCsEmkCheckout) {
              subBuilder.MergeFrom(CsEmkCheckout);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkCheckout = subBuilder.BuildPartial();
            break;
          }
          case 2490: {
            global::SCEmkCheckout.Builder subBuilder = global::SCEmkCheckout.CreateBuilder();
            if (result.hasScEmkCheckout) {
              subBuilder.MergeFrom(ScEmkCheckout);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEmkCheckout = subBuilder.BuildPartial();
            break;
          }
          case 2498: {
            global::CSEmkCancel.Builder subBuilder = global::CSEmkCancel.CreateBuilder();
            if (result.hasCsEmkCancel) {
              subBuilder.MergeFrom(CsEmkCancel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkCancel = subBuilder.BuildPartial();
            break;
          }
          case 2506: {
            global::SCEmkVerifyList.Builder subBuilder = global::SCEmkVerifyList.CreateBuilder();
            if (result.hasScEmkVerifyList) {
              subBuilder.MergeFrom(ScEmkVerifyList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEmkVerifyList = subBuilder.BuildPartial();
            break;
          }
          case 2522: {
            global::CSEmkVerifyProc.Builder subBuilder = global::CSEmkVerifyProc.CreateBuilder();
            if (result.hasCsEmkVerifyProc) {
              subBuilder.MergeFrom(CsEmkVerifyProc);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkVerifyProc = subBuilder.BuildPartial();
            break;
          }
          case 2530: {
            global::SCEmkOrderList.Builder subBuilder = global::SCEmkOrderList.CreateBuilder();
            if (result.hasScEmkOrderList) {
              subBuilder.MergeFrom(ScEmkOrderList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEmkOrderList = subBuilder.BuildPartial();
            break;
          }
          case 2538: {
            global::CSEmkOrderProc.Builder subBuilder = global::CSEmkOrderProc.CreateBuilder();
            if (result.hasCsEmkOrderProc) {
              subBuilder.MergeFrom(CsEmkOrderProc);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkOrderProc = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMessageType {
      get { return result.hasMessageType; }
    }
    public int MessageType {
      get { return result.MessageType; }
      set { SetMessageType(value); }
    }
    public Builder SetMessageType(int value) {
      PrepareBuilder();
      result.hasMessageType = true;
      result.messageType_ = value;
      return this;
    }
    public Builder ClearMessageType() {
      PrepareBuilder();
      result.hasMessageType = false;
      result.messageType_ = 0;
      return this;
    }
    
    public bool HasErrorTip {
     get { return result.hasErrorTip; }
    }
    public global::StructErrorTip ErrorTip {
      get { return result.ErrorTip; }
      set { SetErrorTip(value); }
    }
    public Builder SetErrorTip(global::StructErrorTip value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasErrorTip = true;
      result.errorTip_ = value;
      return this;
    }
    public Builder SetErrorTip(global::StructErrorTip.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasErrorTip = true;
      result.errorTip_ = builderForValue.Build();
      return this;
    }
    public Builder MergeErrorTip(global::StructErrorTip value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasErrorTip &&
          result.errorTip_ != global::StructErrorTip.DefaultInstance) {
          result.errorTip_ = global::StructErrorTip.CreateBuilder(result.errorTip_).MergeFrom(value).BuildPartial();
      } else {
        result.errorTip_ = value;
      }
      result.hasErrorTip = true;
      return this;
    }
    public Builder ClearErrorTip() {
      PrepareBuilder();
      result.hasErrorTip = false;
      result.errorTip_ = null;
      return this;
    }
    
    public bool HasCsUpload {
     get { return result.hasCsUpload; }
    }
    public global::CSUploadPicture CsUpload {
      get { return result.CsUpload; }
      set { SetCsUpload(value); }
    }
    public Builder SetCsUpload(global::CSUploadPicture value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsUpload = true;
      result.csUpload_ = value;
      return this;
    }
    public Builder SetCsUpload(global::CSUploadPicture.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsUpload = true;
      result.csUpload_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsUpload(global::CSUploadPicture value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsUpload &&
          result.csUpload_ != global::CSUploadPicture.DefaultInstance) {
          result.csUpload_ = global::CSUploadPicture.CreateBuilder(result.csUpload_).MergeFrom(value).BuildPartial();
      } else {
        result.csUpload_ = value;
      }
      result.hasCsUpload = true;
      return this;
    }
    public Builder ClearCsUpload() {
      PrepareBuilder();
      result.hasCsUpload = false;
      result.csUpload_ = null;
      return this;
    }
    
    public bool HasScUpload {
     get { return result.hasScUpload; }
    }
    public global::SCUploadPicture ScUpload {
      get { return result.ScUpload; }
      set { SetScUpload(value); }
    }
    public Builder SetScUpload(global::SCUploadPicture value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScUpload = true;
      result.scUpload_ = value;
      return this;
    }
    public Builder SetScUpload(global::SCUploadPicture.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScUpload = true;
      result.scUpload_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScUpload(global::SCUploadPicture value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScUpload &&
          result.scUpload_ != global::SCUploadPicture.DefaultInstance) {
          result.scUpload_ = global::SCUploadPicture.CreateBuilder(result.scUpload_).MergeFrom(value).BuildPartial();
      } else {
        result.scUpload_ = value;
      }
      result.hasScUpload = true;
      return this;
    }
    public Builder ClearScUpload() {
      PrepareBuilder();
      result.hasScUpload = false;
      result.scUpload_ = null;
      return this;
    }
    
    public bool HasCsHeart {
     get { return result.hasCsHeart; }
    }
    public global::CSHeart CsHeart {
      get { return result.CsHeart; }
      set { SetCsHeart(value); }
    }
    public Builder SetCsHeart(global::CSHeart value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsHeart = true;
      result.csHeart_ = value;
      return this;
    }
    public Builder SetCsHeart(global::CSHeart.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsHeart = true;
      result.csHeart_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsHeart(global::CSHeart value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsHeart &&
          result.csHeart_ != global::CSHeart.DefaultInstance) {
          result.csHeart_ = global::CSHeart.CreateBuilder(result.csHeart_).MergeFrom(value).BuildPartial();
      } else {
        result.csHeart_ = value;
      }
      result.hasCsHeart = true;
      return this;
    }
    public Builder ClearCsHeart() {
      PrepareBuilder();
      result.hasCsHeart = false;
      result.csHeart_ = null;
      return this;
    }
    
    public bool HasScHeart {
     get { return result.hasScHeart; }
    }
    public global::SCHeart ScHeart {
      get { return result.ScHeart; }
      set { SetScHeart(value); }
    }
    public Builder SetScHeart(global::SCHeart value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScHeart = true;
      result.scHeart_ = value;
      return this;
    }
    public Builder SetScHeart(global::SCHeart.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScHeart = true;
      result.scHeart_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScHeart(global::SCHeart value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScHeart &&
          result.scHeart_ != global::SCHeart.DefaultInstance) {
          result.scHeart_ = global::SCHeart.CreateBuilder(result.scHeart_).MergeFrom(value).BuildPartial();
      } else {
        result.scHeart_ = value;
      }
      result.hasScHeart = true;
      return this;
    }
    public Builder ClearScHeart() {
      PrepareBuilder();
      result.hasScHeart = false;
      result.scHeart_ = null;
      return this;
    }
    
    public bool HasCsKick {
     get { return result.hasCsKick; }
    }
    public global::CSKick CsKick {
      get { return result.CsKick; }
      set { SetCsKick(value); }
    }
    public Builder SetCsKick(global::CSKick value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsKick = true;
      result.csKick_ = value;
      return this;
    }
    public Builder SetCsKick(global::CSKick.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsKick = true;
      result.csKick_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsKick(global::CSKick value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsKick &&
          result.csKick_ != global::CSKick.DefaultInstance) {
          result.csKick_ = global::CSKick.CreateBuilder(result.csKick_).MergeFrom(value).BuildPartial();
      } else {
        result.csKick_ = value;
      }
      result.hasCsKick = true;
      return this;
    }
    public Builder ClearCsKick() {
      PrepareBuilder();
      result.hasCsKick = false;
      result.csKick_ = null;
      return this;
    }
    
    public bool HasScKick {
     get { return result.hasScKick; }
    }
    public global::SCKick ScKick {
      get { return result.ScKick; }
      set { SetScKick(value); }
    }
    public Builder SetScKick(global::SCKick value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScKick = true;
      result.scKick_ = value;
      return this;
    }
    public Builder SetScKick(global::SCKick.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScKick = true;
      result.scKick_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScKick(global::SCKick value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScKick &&
          result.scKick_ != global::SCKick.DefaultInstance) {
          result.scKick_ = global::SCKick.CreateBuilder(result.scKick_).MergeFrom(value).BuildPartial();
      } else {
        result.scKick_ = value;
      }
      result.hasScKick = true;
      return this;
    }
    public Builder ClearScKick() {
      PrepareBuilder();
      result.hasScKick = false;
      result.scKick_ = null;
      return this;
    }
    
    public bool HasCsReconnect {
     get { return result.hasCsReconnect; }
    }
    public global::CSReconnect CsReconnect {
      get { return result.CsReconnect; }
      set { SetCsReconnect(value); }
    }
    public Builder SetCsReconnect(global::CSReconnect value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsReconnect = true;
      result.csReconnect_ = value;
      return this;
    }
    public Builder SetCsReconnect(global::CSReconnect.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsReconnect = true;
      result.csReconnect_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsReconnect(global::CSReconnect value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsReconnect &&
          result.csReconnect_ != global::CSReconnect.DefaultInstance) {
          result.csReconnect_ = global::CSReconnect.CreateBuilder(result.csReconnect_).MergeFrom(value).BuildPartial();
      } else {
        result.csReconnect_ = value;
      }
      result.hasCsReconnect = true;
      return this;
    }
    public Builder ClearCsReconnect() {
      PrepareBuilder();
      result.hasCsReconnect = false;
      result.csReconnect_ = null;
      return this;
    }
    
    public bool HasScReconnect {
     get { return result.hasScReconnect; }
    }
    public global::SCReconnect ScReconnect {
      get { return result.ScReconnect; }
      set { SetScReconnect(value); }
    }
    public Builder SetScReconnect(global::SCReconnect value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScReconnect = true;
      result.scReconnect_ = value;
      return this;
    }
    public Builder SetScReconnect(global::SCReconnect.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScReconnect = true;
      result.scReconnect_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScReconnect(global::SCReconnect value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScReconnect &&
          result.scReconnect_ != global::SCReconnect.DefaultInstance) {
          result.scReconnect_ = global::SCReconnect.CreateBuilder(result.scReconnect_).MergeFrom(value).BuildPartial();
      } else {
        result.scReconnect_ = value;
      }
      result.hasScReconnect = true;
      return this;
    }
    public Builder ClearScReconnect() {
      PrepareBuilder();
      result.hasScReconnect = false;
      result.scReconnect_ = null;
      return this;
    }
    
    public bool HasCsPreCharge {
     get { return result.hasCsPreCharge; }
    }
    public global::CSPreCharge CsPreCharge {
      get { return result.CsPreCharge; }
      set { SetCsPreCharge(value); }
    }
    public Builder SetCsPreCharge(global::CSPreCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsPreCharge = true;
      result.csPreCharge_ = value;
      return this;
    }
    public Builder SetCsPreCharge(global::CSPreCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsPreCharge = true;
      result.csPreCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsPreCharge(global::CSPreCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsPreCharge &&
          result.csPreCharge_ != global::CSPreCharge.DefaultInstance) {
          result.csPreCharge_ = global::CSPreCharge.CreateBuilder(result.csPreCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.csPreCharge_ = value;
      }
      result.hasCsPreCharge = true;
      return this;
    }
    public Builder ClearCsPreCharge() {
      PrepareBuilder();
      result.hasCsPreCharge = false;
      result.csPreCharge_ = null;
      return this;
    }
    
    public bool HasScPreCharge {
     get { return result.hasScPreCharge; }
    }
    public global::SCPreCharge ScPreCharge {
      get { return result.ScPreCharge; }
      set { SetScPreCharge(value); }
    }
    public Builder SetScPreCharge(global::SCPreCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScPreCharge = true;
      result.scPreCharge_ = value;
      return this;
    }
    public Builder SetScPreCharge(global::SCPreCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScPreCharge = true;
      result.scPreCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScPreCharge(global::SCPreCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScPreCharge &&
          result.scPreCharge_ != global::SCPreCharge.DefaultInstance) {
          result.scPreCharge_ = global::SCPreCharge.CreateBuilder(result.scPreCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.scPreCharge_ = value;
      }
      result.hasScPreCharge = true;
      return this;
    }
    public Builder ClearScPreCharge() {
      PrepareBuilder();
      result.hasScPreCharge = false;
      result.scPreCharge_ = null;
      return this;
    }
    
    public bool HasCsToCharge {
     get { return result.hasCsToCharge; }
    }
    public global::SCToCharge CsToCharge {
      get { return result.CsToCharge; }
      set { SetCsToCharge(value); }
    }
    public Builder SetCsToCharge(global::SCToCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsToCharge = true;
      result.csToCharge_ = value;
      return this;
    }
    public Builder SetCsToCharge(global::SCToCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsToCharge = true;
      result.csToCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsToCharge(global::SCToCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsToCharge &&
          result.csToCharge_ != global::SCToCharge.DefaultInstance) {
          result.csToCharge_ = global::SCToCharge.CreateBuilder(result.csToCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.csToCharge_ = value;
      }
      result.hasCsToCharge = true;
      return this;
    }
    public Builder ClearCsToCharge() {
      PrepareBuilder();
      result.hasCsToCharge = false;
      result.csToCharge_ = null;
      return this;
    }
    
    public bool HasCsPreBuy {
     get { return result.hasCsPreBuy; }
    }
    public global::CSPreBuy CsPreBuy {
      get { return result.CsPreBuy; }
      set { SetCsPreBuy(value); }
    }
    public Builder SetCsPreBuy(global::CSPreBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsPreBuy = true;
      result.csPreBuy_ = value;
      return this;
    }
    public Builder SetCsPreBuy(global::CSPreBuy.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsPreBuy = true;
      result.csPreBuy_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsPreBuy(global::CSPreBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsPreBuy &&
          result.csPreBuy_ != global::CSPreBuy.DefaultInstance) {
          result.csPreBuy_ = global::CSPreBuy.CreateBuilder(result.csPreBuy_).MergeFrom(value).BuildPartial();
      } else {
        result.csPreBuy_ = value;
      }
      result.hasCsPreBuy = true;
      return this;
    }
    public Builder ClearCsPreBuy() {
      PrepareBuilder();
      result.hasCsPreBuy = false;
      result.csPreBuy_ = null;
      return this;
    }
    
    public bool HasScPreBuy {
     get { return result.hasScPreBuy; }
    }
    public global::SCPreBuy ScPreBuy {
      get { return result.ScPreBuy; }
      set { SetScPreBuy(value); }
    }
    public Builder SetScPreBuy(global::SCPreBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScPreBuy = true;
      result.scPreBuy_ = value;
      return this;
    }
    public Builder SetScPreBuy(global::SCPreBuy.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScPreBuy = true;
      result.scPreBuy_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScPreBuy(global::SCPreBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScPreBuy &&
          result.scPreBuy_ != global::SCPreBuy.DefaultInstance) {
          result.scPreBuy_ = global::SCPreBuy.CreateBuilder(result.scPreBuy_).MergeFrom(value).BuildPartial();
      } else {
        result.scPreBuy_ = value;
      }
      result.hasScPreBuy = true;
      return this;
    }
    public Builder ClearScPreBuy() {
      PrepareBuilder();
      result.hasScPreBuy = false;
      result.scPreBuy_ = null;
      return this;
    }
    
    public bool HasScToBuy {
     get { return result.hasScToBuy; }
    }
    public global::SCToBuy ScToBuy {
      get { return result.ScToBuy; }
      set { SetScToBuy(value); }
    }
    public Builder SetScToBuy(global::SCToBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScToBuy = true;
      result.scToBuy_ = value;
      return this;
    }
    public Builder SetScToBuy(global::SCToBuy.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScToBuy = true;
      result.scToBuy_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScToBuy(global::SCToBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScToBuy &&
          result.scToBuy_ != global::SCToBuy.DefaultInstance) {
          result.scToBuy_ = global::SCToBuy.CreateBuilder(result.scToBuy_).MergeFrom(value).BuildPartial();
      } else {
        result.scToBuy_ = value;
      }
      result.hasScToBuy = true;
      return this;
    }
    public Builder ClearScToBuy() {
      PrepareBuilder();
      result.hasScToBuy = false;
      result.scToBuy_ = null;
      return this;
    }
    
    public bool HasScMessage {
     get { return result.hasScMessage; }
    }
    public global::SCMessage ScMessage {
      get { return result.ScMessage; }
      set { SetScMessage(value); }
    }
    public Builder SetScMessage(global::SCMessage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScMessage = true;
      result.scMessage_ = value;
      return this;
    }
    public Builder SetScMessage(global::SCMessage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScMessage = true;
      result.scMessage_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScMessage(global::SCMessage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScMessage &&
          result.scMessage_ != global::SCMessage.DefaultInstance) {
          result.scMessage_ = global::SCMessage.CreateBuilder(result.scMessage_).MergeFrom(value).BuildPartial();
      } else {
        result.scMessage_ = value;
      }
      result.hasScMessage = true;
      return this;
    }
    public Builder ClearScMessage() {
      PrepareBuilder();
      result.hasScMessage = false;
      result.scMessage_ = null;
      return this;
    }
    
    public bool HasCsCommand {
     get { return result.hasCsCommand; }
    }
    public global::CSCommand CsCommand {
      get { return result.CsCommand; }
      set { SetCsCommand(value); }
    }
    public Builder SetCsCommand(global::CSCommand value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsCommand = true;
      result.csCommand_ = value;
      return this;
    }
    public Builder SetCsCommand(global::CSCommand.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsCommand = true;
      result.csCommand_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsCommand(global::CSCommand value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsCommand &&
          result.csCommand_ != global::CSCommand.DefaultInstance) {
          result.csCommand_ = global::CSCommand.CreateBuilder(result.csCommand_).MergeFrom(value).BuildPartial();
      } else {
        result.csCommand_ = value;
      }
      result.hasCsCommand = true;
      return this;
    }
    public Builder ClearCsCommand() {
      PrepareBuilder();
      result.hasCsCommand = false;
      result.csCommand_ = null;
      return this;
    }
    
    public bool HasCsGoodsFind {
     get { return result.hasCsGoodsFind; }
    }
    public global::CSGoodsFind CsGoodsFind {
      get { return result.CsGoodsFind; }
      set { SetCsGoodsFind(value); }
    }
    public Builder SetCsGoodsFind(global::CSGoodsFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsGoodsFind = true;
      result.csGoodsFind_ = value;
      return this;
    }
    public Builder SetCsGoodsFind(global::CSGoodsFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsGoodsFind = true;
      result.csGoodsFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsGoodsFind(global::CSGoodsFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsGoodsFind &&
          result.csGoodsFind_ != global::CSGoodsFind.DefaultInstance) {
          result.csGoodsFind_ = global::CSGoodsFind.CreateBuilder(result.csGoodsFind_).MergeFrom(value).BuildPartial();
      } else {
        result.csGoodsFind_ = value;
      }
      result.hasCsGoodsFind = true;
      return this;
    }
    public Builder ClearCsGoodsFind() {
      PrepareBuilder();
      result.hasCsGoodsFind = false;
      result.csGoodsFind_ = null;
      return this;
    }
    
    public bool HasScGoodsFind {
     get { return result.hasScGoodsFind; }
    }
    public global::SCGoodsFind ScGoodsFind {
      get { return result.ScGoodsFind; }
      set { SetScGoodsFind(value); }
    }
    public Builder SetScGoodsFind(global::SCGoodsFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScGoodsFind = true;
      result.scGoodsFind_ = value;
      return this;
    }
    public Builder SetScGoodsFind(global::SCGoodsFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScGoodsFind = true;
      result.scGoodsFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScGoodsFind(global::SCGoodsFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScGoodsFind &&
          result.scGoodsFind_ != global::SCGoodsFind.DefaultInstance) {
          result.scGoodsFind_ = global::SCGoodsFind.CreateBuilder(result.scGoodsFind_).MergeFrom(value).BuildPartial();
      } else {
        result.scGoodsFind_ = value;
      }
      result.hasScGoodsFind = true;
      return this;
    }
    public Builder ClearScGoodsFind() {
      PrepareBuilder();
      result.hasScGoodsFind = false;
      result.scGoodsFind_ = null;
      return this;
    }
    
    public bool HasCsAuthen {
     get { return result.hasCsAuthen; }
    }
    public global::CSAuthen CsAuthen {
      get { return result.CsAuthen; }
      set { SetCsAuthen(value); }
    }
    public Builder SetCsAuthen(global::CSAuthen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAuthen = true;
      result.csAuthen_ = value;
      return this;
    }
    public Builder SetCsAuthen(global::CSAuthen.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAuthen = true;
      result.csAuthen_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAuthen(global::CSAuthen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAuthen &&
          result.csAuthen_ != global::CSAuthen.DefaultInstance) {
          result.csAuthen_ = global::CSAuthen.CreateBuilder(result.csAuthen_).MergeFrom(value).BuildPartial();
      } else {
        result.csAuthen_ = value;
      }
      result.hasCsAuthen = true;
      return this;
    }
    public Builder ClearCsAuthen() {
      PrepareBuilder();
      result.hasCsAuthen = false;
      result.csAuthen_ = null;
      return this;
    }
    
    public bool HasScAuthen {
     get { return result.hasScAuthen; }
    }
    public global::SCAuthen ScAuthen {
      get { return result.ScAuthen; }
      set { SetScAuthen(value); }
    }
    public Builder SetScAuthen(global::SCAuthen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScAuthen = true;
      result.scAuthen_ = value;
      return this;
    }
    public Builder SetScAuthen(global::SCAuthen.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScAuthen = true;
      result.scAuthen_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScAuthen(global::SCAuthen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScAuthen &&
          result.scAuthen_ != global::SCAuthen.DefaultInstance) {
          result.scAuthen_ = global::SCAuthen.CreateBuilder(result.scAuthen_).MergeFrom(value).BuildPartial();
      } else {
        result.scAuthen_ = value;
      }
      result.hasScAuthen = true;
      return this;
    }
    public Builder ClearScAuthen() {
      PrepareBuilder();
      result.hasScAuthen = false;
      result.scAuthen_ = null;
      return this;
    }
    
    public bool HasCsLogin {
     get { return result.hasCsLogin; }
    }
    public global::CSLogin CsLogin {
      get { return result.CsLogin; }
      set { SetCsLogin(value); }
    }
    public Builder SetCsLogin(global::CSLogin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsLogin = true;
      result.csLogin_ = value;
      return this;
    }
    public Builder SetCsLogin(global::CSLogin.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsLogin = true;
      result.csLogin_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsLogin(global::CSLogin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsLogin &&
          result.csLogin_ != global::CSLogin.DefaultInstance) {
          result.csLogin_ = global::CSLogin.CreateBuilder(result.csLogin_).MergeFrom(value).BuildPartial();
      } else {
        result.csLogin_ = value;
      }
      result.hasCsLogin = true;
      return this;
    }
    public Builder ClearCsLogin() {
      PrepareBuilder();
      result.hasCsLogin = false;
      result.csLogin_ = null;
      return this;
    }
    
    public bool HasScLogin {
     get { return result.hasScLogin; }
    }
    public global::SCLogin ScLogin {
      get { return result.ScLogin; }
      set { SetScLogin(value); }
    }
    public Builder SetScLogin(global::SCLogin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScLogin = true;
      result.scLogin_ = value;
      return this;
    }
    public Builder SetScLogin(global::SCLogin.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScLogin = true;
      result.scLogin_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScLogin(global::SCLogin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScLogin &&
          result.scLogin_ != global::SCLogin.DefaultInstance) {
          result.scLogin_ = global::SCLogin.CreateBuilder(result.scLogin_).MergeFrom(value).BuildPartial();
      } else {
        result.scLogin_ = value;
      }
      result.hasScLogin = true;
      return this;
    }
    public Builder ClearScLogin() {
      PrepareBuilder();
      result.hasScLogin = false;
      result.scLogin_ = null;
      return this;
    }
    
    public bool HasScCallList {
     get { return result.hasScCallList; }
    }
    public global::SCCallList ScCallList {
      get { return result.ScCallList; }
      set { SetScCallList(value); }
    }
    public Builder SetScCallList(global::SCCallList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScCallList = true;
      result.scCallList_ = value;
      return this;
    }
    public Builder SetScCallList(global::SCCallList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScCallList = true;
      result.scCallList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScCallList(global::SCCallList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScCallList &&
          result.scCallList_ != global::SCCallList.DefaultInstance) {
          result.scCallList_ = global::SCCallList.CreateBuilder(result.scCallList_).MergeFrom(value).BuildPartial();
      } else {
        result.scCallList_ = value;
      }
      result.hasScCallList = true;
      return this;
    }
    public Builder ClearScCallList() {
      PrepareBuilder();
      result.hasScCallList = false;
      result.scCallList_ = null;
      return this;
    }
    
    public bool HasCsCallProcess {
     get { return result.hasCsCallProcess; }
    }
    public global::CSCallProcess CsCallProcess {
      get { return result.CsCallProcess; }
      set { SetCsCallProcess(value); }
    }
    public Builder SetCsCallProcess(global::CSCallProcess value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsCallProcess = true;
      result.csCallProcess_ = value;
      return this;
    }
    public Builder SetCsCallProcess(global::CSCallProcess.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsCallProcess = true;
      result.csCallProcess_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsCallProcess(global::CSCallProcess value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsCallProcess &&
          result.csCallProcess_ != global::CSCallProcess.DefaultInstance) {
          result.csCallProcess_ = global::CSCallProcess.CreateBuilder(result.csCallProcess_).MergeFrom(value).BuildPartial();
      } else {
        result.csCallProcess_ = value;
      }
      result.hasCsCallProcess = true;
      return this;
    }
    public Builder ClearCsCallProcess() {
      PrepareBuilder();
      result.hasCsCallProcess = false;
      result.csCallProcess_ = null;
      return this;
    }
    
    public bool HasCsAccountInfo {
     get { return result.hasCsAccountInfo; }
    }
    public global::CSAccountInfo CsAccountInfo {
      get { return result.CsAccountInfo; }
      set { SetCsAccountInfo(value); }
    }
    public Builder SetCsAccountInfo(global::CSAccountInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAccountInfo = true;
      result.csAccountInfo_ = value;
      return this;
    }
    public Builder SetCsAccountInfo(global::CSAccountInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAccountInfo = true;
      result.csAccountInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAccountInfo(global::CSAccountInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAccountInfo &&
          result.csAccountInfo_ != global::CSAccountInfo.DefaultInstance) {
          result.csAccountInfo_ = global::CSAccountInfo.CreateBuilder(result.csAccountInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csAccountInfo_ = value;
      }
      result.hasCsAccountInfo = true;
      return this;
    }
    public Builder ClearCsAccountInfo() {
      PrepareBuilder();
      result.hasCsAccountInfo = false;
      result.csAccountInfo_ = null;
      return this;
    }
    
    public bool HasScAccountInfo {
     get { return result.hasScAccountInfo; }
    }
    public global::SCAccountInfo ScAccountInfo {
      get { return result.ScAccountInfo; }
      set { SetScAccountInfo(value); }
    }
    public Builder SetScAccountInfo(global::SCAccountInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScAccountInfo = true;
      result.scAccountInfo_ = value;
      return this;
    }
    public Builder SetScAccountInfo(global::SCAccountInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScAccountInfo = true;
      result.scAccountInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScAccountInfo(global::SCAccountInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScAccountInfo &&
          result.scAccountInfo_ != global::SCAccountInfo.DefaultInstance) {
          result.scAccountInfo_ = global::SCAccountInfo.CreateBuilder(result.scAccountInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.scAccountInfo_ = value;
      }
      result.hasScAccountInfo = true;
      return this;
    }
    public Builder ClearScAccountInfo() {
      PrepareBuilder();
      result.hasScAccountInfo = false;
      result.scAccountInfo_ = null;
      return this;
    }
    
    public bool HasScRealtimeInfo {
     get { return result.hasScRealtimeInfo; }
    }
    public global::SCRealtimeInfo ScRealtimeInfo {
      get { return result.ScRealtimeInfo; }
      set { SetScRealtimeInfo(value); }
    }
    public Builder SetScRealtimeInfo(global::SCRealtimeInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScRealtimeInfo = true;
      result.scRealtimeInfo_ = value;
      return this;
    }
    public Builder SetScRealtimeInfo(global::SCRealtimeInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScRealtimeInfo = true;
      result.scRealtimeInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScRealtimeInfo(global::SCRealtimeInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScRealtimeInfo &&
          result.scRealtimeInfo_ != global::SCRealtimeInfo.DefaultInstance) {
          result.scRealtimeInfo_ = global::SCRealtimeInfo.CreateBuilder(result.scRealtimeInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.scRealtimeInfo_ = value;
      }
      result.hasScRealtimeInfo = true;
      return this;
    }
    public Builder ClearScRealtimeInfo() {
      PrepareBuilder();
      result.hasScRealtimeInfo = false;
      result.scRealtimeInfo_ = null;
      return this;
    }
    
    public bool HasCsLog {
     get { return result.hasCsLog; }
    }
    public global::CSLog CsLog {
      get { return result.CsLog; }
      set { SetCsLog(value); }
    }
    public Builder SetCsLog(global::CSLog value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsLog = true;
      result.csLog_ = value;
      return this;
    }
    public Builder SetCsLog(global::CSLog.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsLog = true;
      result.csLog_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsLog(global::CSLog value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsLog &&
          result.csLog_ != global::CSLog.DefaultInstance) {
          result.csLog_ = global::CSLog.CreateBuilder(result.csLog_).MergeFrom(value).BuildPartial();
      } else {
        result.csLog_ = value;
      }
      result.hasCsLog = true;
      return this;
    }
    public Builder ClearCsLog() {
      PrepareBuilder();
      result.hasCsLog = false;
      result.csLog_ = null;
      return this;
    }
    
    public bool HasScLog {
     get { return result.hasScLog; }
    }
    public global::SCLog ScLog {
      get { return result.ScLog; }
      set { SetScLog(value); }
    }
    public Builder SetScLog(global::SCLog value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScLog = true;
      result.scLog_ = value;
      return this;
    }
    public Builder SetScLog(global::SCLog.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScLog = true;
      result.scLog_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScLog(global::SCLog value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScLog &&
          result.scLog_ != global::SCLog.DefaultInstance) {
          result.scLog_ = global::SCLog.CreateBuilder(result.scLog_).MergeFrom(value).BuildPartial();
      } else {
        result.scLog_ = value;
      }
      result.hasScLog = true;
      return this;
    }
    public Builder ClearScLog() {
      PrepareBuilder();
      result.hasScLog = false;
      result.scLog_ = null;
      return this;
    }
    
    public bool HasScRoleList {
     get { return result.hasScRoleList; }
    }
    public global::SCRoleList ScRoleList {
      get { return result.ScRoleList; }
      set { SetScRoleList(value); }
    }
    public Builder SetScRoleList(global::SCRoleList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScRoleList = true;
      result.scRoleList_ = value;
      return this;
    }
    public Builder SetScRoleList(global::SCRoleList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScRoleList = true;
      result.scRoleList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScRoleList(global::SCRoleList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScRoleList &&
          result.scRoleList_ != global::SCRoleList.DefaultInstance) {
          result.scRoleList_ = global::SCRoleList.CreateBuilder(result.scRoleList_).MergeFrom(value).BuildPartial();
      } else {
        result.scRoleList_ = value;
      }
      result.hasScRoleList = true;
      return this;
    }
    public Builder ClearScRoleList() {
      PrepareBuilder();
      result.hasScRoleList = false;
      result.scRoleList_ = null;
      return this;
    }
    
    public bool HasCsRoleAdd {
     get { return result.hasCsRoleAdd; }
    }
    public global::CSRoleAdd CsRoleAdd {
      get { return result.CsRoleAdd; }
      set { SetCsRoleAdd(value); }
    }
    public Builder SetCsRoleAdd(global::CSRoleAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsRoleAdd = true;
      result.csRoleAdd_ = value;
      return this;
    }
    public Builder SetCsRoleAdd(global::CSRoleAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsRoleAdd = true;
      result.csRoleAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsRoleAdd(global::CSRoleAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsRoleAdd &&
          result.csRoleAdd_ != global::CSRoleAdd.DefaultInstance) {
          result.csRoleAdd_ = global::CSRoleAdd.CreateBuilder(result.csRoleAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csRoleAdd_ = value;
      }
      result.hasCsRoleAdd = true;
      return this;
    }
    public Builder ClearCsRoleAdd() {
      PrepareBuilder();
      result.hasCsRoleAdd = false;
      result.csRoleAdd_ = null;
      return this;
    }
    
    public bool HasScRoleAdd {
     get { return result.hasScRoleAdd; }
    }
    public global::SCRoleAdd ScRoleAdd {
      get { return result.ScRoleAdd; }
      set { SetScRoleAdd(value); }
    }
    public Builder SetScRoleAdd(global::SCRoleAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScRoleAdd = true;
      result.scRoleAdd_ = value;
      return this;
    }
    public Builder SetScRoleAdd(global::SCRoleAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScRoleAdd = true;
      result.scRoleAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScRoleAdd(global::SCRoleAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScRoleAdd &&
          result.scRoleAdd_ != global::SCRoleAdd.DefaultInstance) {
          result.scRoleAdd_ = global::SCRoleAdd.CreateBuilder(result.scRoleAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.scRoleAdd_ = value;
      }
      result.hasScRoleAdd = true;
      return this;
    }
    public Builder ClearScRoleAdd() {
      PrepareBuilder();
      result.hasScRoleAdd = false;
      result.scRoleAdd_ = null;
      return this;
    }
    
    public bool HasCsRoleDel {
     get { return result.hasCsRoleDel; }
    }
    public global::CSRoleDel CsRoleDel {
      get { return result.CsRoleDel; }
      set { SetCsRoleDel(value); }
    }
    public Builder SetCsRoleDel(global::CSRoleDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsRoleDel = true;
      result.csRoleDel_ = value;
      return this;
    }
    public Builder SetCsRoleDel(global::CSRoleDel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsRoleDel = true;
      result.csRoleDel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsRoleDel(global::CSRoleDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsRoleDel &&
          result.csRoleDel_ != global::CSRoleDel.DefaultInstance) {
          result.csRoleDel_ = global::CSRoleDel.CreateBuilder(result.csRoleDel_).MergeFrom(value).BuildPartial();
      } else {
        result.csRoleDel_ = value;
      }
      result.hasCsRoleDel = true;
      return this;
    }
    public Builder ClearCsRoleDel() {
      PrepareBuilder();
      result.hasCsRoleDel = false;
      result.csRoleDel_ = null;
      return this;
    }
    
    public bool HasCsRoleUpdate {
     get { return result.hasCsRoleUpdate; }
    }
    public global::CSRoleUpdate CsRoleUpdate {
      get { return result.CsRoleUpdate; }
      set { SetCsRoleUpdate(value); }
    }
    public Builder SetCsRoleUpdate(global::CSRoleUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsRoleUpdate = true;
      result.csRoleUpdate_ = value;
      return this;
    }
    public Builder SetCsRoleUpdate(global::CSRoleUpdate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsRoleUpdate = true;
      result.csRoleUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsRoleUpdate(global::CSRoleUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsRoleUpdate &&
          result.csRoleUpdate_ != global::CSRoleUpdate.DefaultInstance) {
          result.csRoleUpdate_ = global::CSRoleUpdate.CreateBuilder(result.csRoleUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.csRoleUpdate_ = value;
      }
      result.hasCsRoleUpdate = true;
      return this;
    }
    public Builder ClearCsRoleUpdate() {
      PrepareBuilder();
      result.hasCsRoleUpdate = false;
      result.csRoleUpdate_ = null;
      return this;
    }
    
    public bool HasCsRoleRights {
     get { return result.hasCsRoleRights; }
    }
    public global::CSRoleRights CsRoleRights {
      get { return result.CsRoleRights; }
      set { SetCsRoleRights(value); }
    }
    public Builder SetCsRoleRights(global::CSRoleRights value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsRoleRights = true;
      result.csRoleRights_ = value;
      return this;
    }
    public Builder SetCsRoleRights(global::CSRoleRights.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsRoleRights = true;
      result.csRoleRights_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsRoleRights(global::CSRoleRights value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsRoleRights &&
          result.csRoleRights_ != global::CSRoleRights.DefaultInstance) {
          result.csRoleRights_ = global::CSRoleRights.CreateBuilder(result.csRoleRights_).MergeFrom(value).BuildPartial();
      } else {
        result.csRoleRights_ = value;
      }
      result.hasCsRoleRights = true;
      return this;
    }
    public Builder ClearCsRoleRights() {
      PrepareBuilder();
      result.hasCsRoleRights = false;
      result.csRoleRights_ = null;
      return this;
    }
    
    public bool HasScAccountList {
     get { return result.hasScAccountList; }
    }
    public global::SCAccountList ScAccountList {
      get { return result.ScAccountList; }
      set { SetScAccountList(value); }
    }
    public Builder SetScAccountList(global::SCAccountList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScAccountList = true;
      result.scAccountList_ = value;
      return this;
    }
    public Builder SetScAccountList(global::SCAccountList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScAccountList = true;
      result.scAccountList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScAccountList(global::SCAccountList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScAccountList &&
          result.scAccountList_ != global::SCAccountList.DefaultInstance) {
          result.scAccountList_ = global::SCAccountList.CreateBuilder(result.scAccountList_).MergeFrom(value).BuildPartial();
      } else {
        result.scAccountList_ = value;
      }
      result.hasScAccountList = true;
      return this;
    }
    public Builder ClearScAccountList() {
      PrepareBuilder();
      result.hasScAccountList = false;
      result.scAccountList_ = null;
      return this;
    }
    
    public bool HasCsAccountAdd {
     get { return result.hasCsAccountAdd; }
    }
    public global::CSAccountAdd CsAccountAdd {
      get { return result.CsAccountAdd; }
      set { SetCsAccountAdd(value); }
    }
    public Builder SetCsAccountAdd(global::CSAccountAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAccountAdd = true;
      result.csAccountAdd_ = value;
      return this;
    }
    public Builder SetCsAccountAdd(global::CSAccountAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAccountAdd = true;
      result.csAccountAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAccountAdd(global::CSAccountAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAccountAdd &&
          result.csAccountAdd_ != global::CSAccountAdd.DefaultInstance) {
          result.csAccountAdd_ = global::CSAccountAdd.CreateBuilder(result.csAccountAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csAccountAdd_ = value;
      }
      result.hasCsAccountAdd = true;
      return this;
    }
    public Builder ClearCsAccountAdd() {
      PrepareBuilder();
      result.hasCsAccountAdd = false;
      result.csAccountAdd_ = null;
      return this;
    }
    
    public bool HasCsAccountDel {
     get { return result.hasCsAccountDel; }
    }
    public global::CSAccountDel CsAccountDel {
      get { return result.CsAccountDel; }
      set { SetCsAccountDel(value); }
    }
    public Builder SetCsAccountDel(global::CSAccountDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAccountDel = true;
      result.csAccountDel_ = value;
      return this;
    }
    public Builder SetCsAccountDel(global::CSAccountDel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAccountDel = true;
      result.csAccountDel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAccountDel(global::CSAccountDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAccountDel &&
          result.csAccountDel_ != global::CSAccountDel.DefaultInstance) {
          result.csAccountDel_ = global::CSAccountDel.CreateBuilder(result.csAccountDel_).MergeFrom(value).BuildPartial();
      } else {
        result.csAccountDel_ = value;
      }
      result.hasCsAccountDel = true;
      return this;
    }
    public Builder ClearCsAccountDel() {
      PrepareBuilder();
      result.hasCsAccountDel = false;
      result.csAccountDel_ = null;
      return this;
    }
    
    public bool HasCsAccountUpdate {
     get { return result.hasCsAccountUpdate; }
    }
    public global::CSAccountUpdate CsAccountUpdate {
      get { return result.CsAccountUpdate; }
      set { SetCsAccountUpdate(value); }
    }
    public Builder SetCsAccountUpdate(global::CSAccountUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAccountUpdate = true;
      result.csAccountUpdate_ = value;
      return this;
    }
    public Builder SetCsAccountUpdate(global::CSAccountUpdate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAccountUpdate = true;
      result.csAccountUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAccountUpdate(global::CSAccountUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAccountUpdate &&
          result.csAccountUpdate_ != global::CSAccountUpdate.DefaultInstance) {
          result.csAccountUpdate_ = global::CSAccountUpdate.CreateBuilder(result.csAccountUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.csAccountUpdate_ = value;
      }
      result.hasCsAccountUpdate = true;
      return this;
    }
    public Builder ClearCsAccountUpdate() {
      PrepareBuilder();
      result.hasCsAccountUpdate = false;
      result.csAccountUpdate_ = null;
      return this;
    }
    
    public bool HasCsAccountSnsSet {
     get { return result.hasCsAccountSnsSet; }
    }
    public global::CSAccountSnsSet CsAccountSnsSet {
      get { return result.CsAccountSnsSet; }
      set { SetCsAccountSnsSet(value); }
    }
    public Builder SetCsAccountSnsSet(global::CSAccountSnsSet value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAccountSnsSet = true;
      result.csAccountSnsSet_ = value;
      return this;
    }
    public Builder SetCsAccountSnsSet(global::CSAccountSnsSet.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAccountSnsSet = true;
      result.csAccountSnsSet_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAccountSnsSet(global::CSAccountSnsSet value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAccountSnsSet &&
          result.csAccountSnsSet_ != global::CSAccountSnsSet.DefaultInstance) {
          result.csAccountSnsSet_ = global::CSAccountSnsSet.CreateBuilder(result.csAccountSnsSet_).MergeFrom(value).BuildPartial();
      } else {
        result.csAccountSnsSet_ = value;
      }
      result.hasCsAccountSnsSet = true;
      return this;
    }
    public Builder ClearCsAccountSnsSet() {
      PrepareBuilder();
      result.hasCsAccountSnsSet = false;
      result.csAccountSnsSet_ = null;
      return this;
    }
    
    public bool HasCsStaffComment {
     get { return result.hasCsStaffComment; }
    }
    public global::CSStaffComment CsStaffComment {
      get { return result.CsStaffComment; }
      set { SetCsStaffComment(value); }
    }
    public Builder SetCsStaffComment(global::CSStaffComment value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsStaffComment = true;
      result.csStaffComment_ = value;
      return this;
    }
    public Builder SetCsStaffComment(global::CSStaffComment.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsStaffComment = true;
      result.csStaffComment_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsStaffComment(global::CSStaffComment value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsStaffComment &&
          result.csStaffComment_ != global::CSStaffComment.DefaultInstance) {
          result.csStaffComment_ = global::CSStaffComment.CreateBuilder(result.csStaffComment_).MergeFrom(value).BuildPartial();
      } else {
        result.csStaffComment_ = value;
      }
      result.hasCsStaffComment = true;
      return this;
    }
    public Builder ClearCsStaffComment() {
      PrepareBuilder();
      result.hasCsStaffComment = false;
      result.csStaffComment_ = null;
      return this;
    }
    
    public bool HasScStaffComment {
     get { return result.hasScStaffComment; }
    }
    public global::SCStaffComment ScStaffComment {
      get { return result.ScStaffComment; }
      set { SetScStaffComment(value); }
    }
    public Builder SetScStaffComment(global::SCStaffComment value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScStaffComment = true;
      result.scStaffComment_ = value;
      return this;
    }
    public Builder SetScStaffComment(global::SCStaffComment.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScStaffComment = true;
      result.scStaffComment_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScStaffComment(global::SCStaffComment value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScStaffComment &&
          result.scStaffComment_ != global::SCStaffComment.DefaultInstance) {
          result.scStaffComment_ = global::SCStaffComment.CreateBuilder(result.scStaffComment_).MergeFrom(value).BuildPartial();
      } else {
        result.scStaffComment_ = value;
      }
      result.hasScStaffComment = true;
      return this;
    }
    public Builder ClearScStaffComment() {
      PrepareBuilder();
      result.hasScStaffComment = false;
      result.scStaffComment_ = null;
      return this;
    }
    
    public bool HasCsStaffPerform {
     get { return result.hasCsStaffPerform; }
    }
    public global::CSStaffPerform CsStaffPerform {
      get { return result.CsStaffPerform; }
      set { SetCsStaffPerform(value); }
    }
    public Builder SetCsStaffPerform(global::CSStaffPerform value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsStaffPerform = true;
      result.csStaffPerform_ = value;
      return this;
    }
    public Builder SetCsStaffPerform(global::CSStaffPerform.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsStaffPerform = true;
      result.csStaffPerform_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsStaffPerform(global::CSStaffPerform value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsStaffPerform &&
          result.csStaffPerform_ != global::CSStaffPerform.DefaultInstance) {
          result.csStaffPerform_ = global::CSStaffPerform.CreateBuilder(result.csStaffPerform_).MergeFrom(value).BuildPartial();
      } else {
        result.csStaffPerform_ = value;
      }
      result.hasCsStaffPerform = true;
      return this;
    }
    public Builder ClearCsStaffPerform() {
      PrepareBuilder();
      result.hasCsStaffPerform = false;
      result.csStaffPerform_ = null;
      return this;
    }
    
    public bool HasScStaffPerform {
     get { return result.hasScStaffPerform; }
    }
    public global::SCStaffPerform ScStaffPerform {
      get { return result.ScStaffPerform; }
      set { SetScStaffPerform(value); }
    }
    public Builder SetScStaffPerform(global::SCStaffPerform value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScStaffPerform = true;
      result.scStaffPerform_ = value;
      return this;
    }
    public Builder SetScStaffPerform(global::SCStaffPerform.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScStaffPerform = true;
      result.scStaffPerform_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScStaffPerform(global::SCStaffPerform value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScStaffPerform &&
          result.scStaffPerform_ != global::SCStaffPerform.DefaultInstance) {
          result.scStaffPerform_ = global::SCStaffPerform.CreateBuilder(result.scStaffPerform_).MergeFrom(value).BuildPartial();
      } else {
        result.scStaffPerform_ = value;
      }
      result.hasScStaffPerform = true;
      return this;
    }
    public Builder ClearScStaffPerform() {
      PrepareBuilder();
      result.hasScStaffPerform = false;
      result.scStaffPerform_ = null;
      return this;
    }
    
    public bool HasCsEarning {
     get { return result.hasCsEarning; }
    }
    public global::CSEarning CsEarning {
      get { return result.CsEarning; }
      set { SetCsEarning(value); }
    }
    public Builder SetCsEarning(global::CSEarning value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEarning = true;
      result.csEarning_ = value;
      return this;
    }
    public Builder SetCsEarning(global::CSEarning.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEarning = true;
      result.csEarning_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEarning(global::CSEarning value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEarning &&
          result.csEarning_ != global::CSEarning.DefaultInstance) {
          result.csEarning_ = global::CSEarning.CreateBuilder(result.csEarning_).MergeFrom(value).BuildPartial();
      } else {
        result.csEarning_ = value;
      }
      result.hasCsEarning = true;
      return this;
    }
    public Builder ClearCsEarning() {
      PrepareBuilder();
      result.hasCsEarning = false;
      result.csEarning_ = null;
      return this;
    }
    
    public bool HasScEarning {
     get { return result.hasScEarning; }
    }
    public global::SCEarning ScEarning {
      get { return result.ScEarning; }
      set { SetScEarning(value); }
    }
    public Builder SetScEarning(global::SCEarning value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEarning = true;
      result.scEarning_ = value;
      return this;
    }
    public Builder SetScEarning(global::SCEarning.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEarning = true;
      result.scEarning_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEarning(global::SCEarning value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEarning &&
          result.scEarning_ != global::SCEarning.DefaultInstance) {
          result.scEarning_ = global::SCEarning.CreateBuilder(result.scEarning_).MergeFrom(value).BuildPartial();
      } else {
        result.scEarning_ = value;
      }
      result.hasScEarning = true;
      return this;
    }
    public Builder ClearScEarning() {
      PrepareBuilder();
      result.hasScEarning = false;
      result.scEarning_ = null;
      return this;
    }
    
    public bool HasScComputerList {
     get { return result.hasScComputerList; }
    }
    public global::SCComputerList ScComputerList {
      get { return result.ScComputerList; }
      set { SetScComputerList(value); }
    }
    public Builder SetScComputerList(global::SCComputerList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScComputerList = true;
      result.scComputerList_ = value;
      return this;
    }
    public Builder SetScComputerList(global::SCComputerList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScComputerList = true;
      result.scComputerList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScComputerList(global::SCComputerList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScComputerList &&
          result.scComputerList_ != global::SCComputerList.DefaultInstance) {
          result.scComputerList_ = global::SCComputerList.CreateBuilder(result.scComputerList_).MergeFrom(value).BuildPartial();
      } else {
        result.scComputerList_ = value;
      }
      result.hasScComputerList = true;
      return this;
    }
    public Builder ClearScComputerList() {
      PrepareBuilder();
      result.hasScComputerList = false;
      result.scComputerList_ = null;
      return this;
    }
    
    public bool HasCsComputerAdd {
     get { return result.hasCsComputerAdd; }
    }
    public global::CSComputerAdd CsComputerAdd {
      get { return result.CsComputerAdd; }
      set { SetCsComputerAdd(value); }
    }
    public Builder SetCsComputerAdd(global::CSComputerAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsComputerAdd = true;
      result.csComputerAdd_ = value;
      return this;
    }
    public Builder SetCsComputerAdd(global::CSComputerAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsComputerAdd = true;
      result.csComputerAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsComputerAdd(global::CSComputerAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsComputerAdd &&
          result.csComputerAdd_ != global::CSComputerAdd.DefaultInstance) {
          result.csComputerAdd_ = global::CSComputerAdd.CreateBuilder(result.csComputerAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csComputerAdd_ = value;
      }
      result.hasCsComputerAdd = true;
      return this;
    }
    public Builder ClearCsComputerAdd() {
      PrepareBuilder();
      result.hasCsComputerAdd = false;
      result.csComputerAdd_ = null;
      return this;
    }
    
    public bool HasCsComputerDel {
     get { return result.hasCsComputerDel; }
    }
    public global::CSComputerDel CsComputerDel {
      get { return result.CsComputerDel; }
      set { SetCsComputerDel(value); }
    }
    public Builder SetCsComputerDel(global::CSComputerDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsComputerDel = true;
      result.csComputerDel_ = value;
      return this;
    }
    public Builder SetCsComputerDel(global::CSComputerDel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsComputerDel = true;
      result.csComputerDel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsComputerDel(global::CSComputerDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsComputerDel &&
          result.csComputerDel_ != global::CSComputerDel.DefaultInstance) {
          result.csComputerDel_ = global::CSComputerDel.CreateBuilder(result.csComputerDel_).MergeFrom(value).BuildPartial();
      } else {
        result.csComputerDel_ = value;
      }
      result.hasCsComputerDel = true;
      return this;
    }
    public Builder ClearCsComputerDel() {
      PrepareBuilder();
      result.hasCsComputerDel = false;
      result.csComputerDel_ = null;
      return this;
    }
    
    public bool HasCsComputerUpdate {
     get { return result.hasCsComputerUpdate; }
    }
    public global::CSComputerUpdate CsComputerUpdate {
      get { return result.CsComputerUpdate; }
      set { SetCsComputerUpdate(value); }
    }
    public Builder SetCsComputerUpdate(global::CSComputerUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsComputerUpdate = true;
      result.csComputerUpdate_ = value;
      return this;
    }
    public Builder SetCsComputerUpdate(global::CSComputerUpdate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsComputerUpdate = true;
      result.csComputerUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsComputerUpdate(global::CSComputerUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsComputerUpdate &&
          result.csComputerUpdate_ != global::CSComputerUpdate.DefaultInstance) {
          result.csComputerUpdate_ = global::CSComputerUpdate.CreateBuilder(result.csComputerUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.csComputerUpdate_ = value;
      }
      result.hasCsComputerUpdate = true;
      return this;
    }
    public Builder ClearCsComputerUpdate() {
      PrepareBuilder();
      result.hasCsComputerUpdate = false;
      result.csComputerUpdate_ = null;
      return this;
    }
    
    public bool HasCsComputerFind {
     get { return result.hasCsComputerFind; }
    }
    public global::CSComputerFind CsComputerFind {
      get { return result.CsComputerFind; }
      set { SetCsComputerFind(value); }
    }
    public Builder SetCsComputerFind(global::CSComputerFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsComputerFind = true;
      result.csComputerFind_ = value;
      return this;
    }
    public Builder SetCsComputerFind(global::CSComputerFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsComputerFind = true;
      result.csComputerFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsComputerFind(global::CSComputerFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsComputerFind &&
          result.csComputerFind_ != global::CSComputerFind.DefaultInstance) {
          result.csComputerFind_ = global::CSComputerFind.CreateBuilder(result.csComputerFind_).MergeFrom(value).BuildPartial();
      } else {
        result.csComputerFind_ = value;
      }
      result.hasCsComputerFind = true;
      return this;
    }
    public Builder ClearCsComputerFind() {
      PrepareBuilder();
      result.hasCsComputerFind = false;
      result.csComputerFind_ = null;
      return this;
    }
    
    public bool HasScComputerFind {
     get { return result.hasScComputerFind; }
    }
    public global::SCComputerFind ScComputerFind {
      get { return result.ScComputerFind; }
      set { SetScComputerFind(value); }
    }
    public Builder SetScComputerFind(global::SCComputerFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScComputerFind = true;
      result.scComputerFind_ = value;
      return this;
    }
    public Builder SetScComputerFind(global::SCComputerFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScComputerFind = true;
      result.scComputerFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScComputerFind(global::SCComputerFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScComputerFind &&
          result.scComputerFind_ != global::SCComputerFind.DefaultInstance) {
          result.scComputerFind_ = global::SCComputerFind.CreateBuilder(result.scComputerFind_).MergeFrom(value).BuildPartial();
      } else {
        result.scComputerFind_ = value;
      }
      result.hasScComputerFind = true;
      return this;
    }
    public Builder ClearScComputerFind() {
      PrepareBuilder();
      result.hasScComputerFind = false;
      result.scComputerFind_ = null;
      return this;
    }
    
    public bool HasCsMemberList {
     get { return result.hasCsMemberList; }
    }
    public global::CSMemberList CsMemberList {
      get { return result.CsMemberList; }
      set { SetCsMemberList(value); }
    }
    public Builder SetCsMemberList(global::CSMemberList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberList = true;
      result.csMemberList_ = value;
      return this;
    }
    public Builder SetCsMemberList(global::CSMemberList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberList = true;
      result.csMemberList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberList(global::CSMemberList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberList &&
          result.csMemberList_ != global::CSMemberList.DefaultInstance) {
          result.csMemberList_ = global::CSMemberList.CreateBuilder(result.csMemberList_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberList_ = value;
      }
      result.hasCsMemberList = true;
      return this;
    }
    public Builder ClearCsMemberList() {
      PrepareBuilder();
      result.hasCsMemberList = false;
      result.csMemberList_ = null;
      return this;
    }
    
    public bool HasScMemberList {
     get { return result.hasScMemberList; }
    }
    public global::SCMemberList ScMemberList {
      get { return result.ScMemberList; }
      set { SetScMemberList(value); }
    }
    public Builder SetScMemberList(global::SCMemberList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScMemberList = true;
      result.scMemberList_ = value;
      return this;
    }
    public Builder SetScMemberList(global::SCMemberList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScMemberList = true;
      result.scMemberList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScMemberList(global::SCMemberList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScMemberList &&
          result.scMemberList_ != global::SCMemberList.DefaultInstance) {
          result.scMemberList_ = global::SCMemberList.CreateBuilder(result.scMemberList_).MergeFrom(value).BuildPartial();
      } else {
        result.scMemberList_ = value;
      }
      result.hasScMemberList = true;
      return this;
    }
    public Builder ClearScMemberList() {
      PrepareBuilder();
      result.hasScMemberList = false;
      result.scMemberList_ = null;
      return this;
    }
    
    public bool HasCsMemberDel {
     get { return result.hasCsMemberDel; }
    }
    public global::CSMemberDel CsMemberDel {
      get { return result.CsMemberDel; }
      set { SetCsMemberDel(value); }
    }
    public Builder SetCsMemberDel(global::CSMemberDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberDel = true;
      result.csMemberDel_ = value;
      return this;
    }
    public Builder SetCsMemberDel(global::CSMemberDel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberDel = true;
      result.csMemberDel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberDel(global::CSMemberDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberDel &&
          result.csMemberDel_ != global::CSMemberDel.DefaultInstance) {
          result.csMemberDel_ = global::CSMemberDel.CreateBuilder(result.csMemberDel_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberDel_ = value;
      }
      result.hasCsMemberDel = true;
      return this;
    }
    public Builder ClearCsMemberDel() {
      PrepareBuilder();
      result.hasCsMemberDel = false;
      result.csMemberDel_ = null;
      return this;
    }
    
    public bool HasCsMemberUpdate {
     get { return result.hasCsMemberUpdate; }
    }
    public global::CSMemberUpdateStatus CsMemberUpdate {
      get { return result.CsMemberUpdate; }
      set { SetCsMemberUpdate(value); }
    }
    public Builder SetCsMemberUpdate(global::CSMemberUpdateStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberUpdate = true;
      result.csMemberUpdate_ = value;
      return this;
    }
    public Builder SetCsMemberUpdate(global::CSMemberUpdateStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberUpdate = true;
      result.csMemberUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberUpdate(global::CSMemberUpdateStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberUpdate &&
          result.csMemberUpdate_ != global::CSMemberUpdateStatus.DefaultInstance) {
          result.csMemberUpdate_ = global::CSMemberUpdateStatus.CreateBuilder(result.csMemberUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberUpdate_ = value;
      }
      result.hasCsMemberUpdate = true;
      return this;
    }
    public Builder ClearCsMemberUpdate() {
      PrepareBuilder();
      result.hasCsMemberUpdate = false;
      result.csMemberUpdate_ = null;
      return this;
    }
    
    public bool HasCsMemberFind {
     get { return result.hasCsMemberFind; }
    }
    public global::CSMemberFind CsMemberFind {
      get { return result.CsMemberFind; }
      set { SetCsMemberFind(value); }
    }
    public Builder SetCsMemberFind(global::CSMemberFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberFind = true;
      result.csMemberFind_ = value;
      return this;
    }
    public Builder SetCsMemberFind(global::CSMemberFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberFind = true;
      result.csMemberFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberFind(global::CSMemberFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberFind &&
          result.csMemberFind_ != global::CSMemberFind.DefaultInstance) {
          result.csMemberFind_ = global::CSMemberFind.CreateBuilder(result.csMemberFind_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberFind_ = value;
      }
      result.hasCsMemberFind = true;
      return this;
    }
    public Builder ClearCsMemberFind() {
      PrepareBuilder();
      result.hasCsMemberFind = false;
      result.csMemberFind_ = null;
      return this;
    }
    
    public bool HasScMemberFind {
     get { return result.hasScMemberFind; }
    }
    public global::SCMemberFind ScMemberFind {
      get { return result.ScMemberFind; }
      set { SetScMemberFind(value); }
    }
    public Builder SetScMemberFind(global::SCMemberFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScMemberFind = true;
      result.scMemberFind_ = value;
      return this;
    }
    public Builder SetScMemberFind(global::SCMemberFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScMemberFind = true;
      result.scMemberFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScMemberFind(global::SCMemberFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScMemberFind &&
          result.scMemberFind_ != global::SCMemberFind.DefaultInstance) {
          result.scMemberFind_ = global::SCMemberFind.CreateBuilder(result.scMemberFind_).MergeFrom(value).BuildPartial();
      } else {
        result.scMemberFind_ = value;
      }
      result.hasScMemberFind = true;
      return this;
    }
    public Builder ClearScMemberFind() {
      PrepareBuilder();
      result.hasScMemberFind = false;
      result.scMemberFind_ = null;
      return this;
    }
    
    public bool HasCsMemberCardInfo {
     get { return result.hasCsMemberCardInfo; }
    }
    public global::CSMemberCardInfo CsMemberCardInfo {
      get { return result.CsMemberCardInfo; }
      set { SetCsMemberCardInfo(value); }
    }
    public Builder SetCsMemberCardInfo(global::CSMemberCardInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberCardInfo = true;
      result.csMemberCardInfo_ = value;
      return this;
    }
    public Builder SetCsMemberCardInfo(global::CSMemberCardInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberCardInfo = true;
      result.csMemberCardInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberCardInfo(global::CSMemberCardInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberCardInfo &&
          result.csMemberCardInfo_ != global::CSMemberCardInfo.DefaultInstance) {
          result.csMemberCardInfo_ = global::CSMemberCardInfo.CreateBuilder(result.csMemberCardInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberCardInfo_ = value;
      }
      result.hasCsMemberCardInfo = true;
      return this;
    }
    public Builder ClearCsMemberCardInfo() {
      PrepareBuilder();
      result.hasCsMemberCardInfo = false;
      result.csMemberCardInfo_ = null;
      return this;
    }
    
    public bool HasScMemberCardInfo {
     get { return result.hasScMemberCardInfo; }
    }
    public global::SCMemberCardInfo ScMemberCardInfo {
      get { return result.ScMemberCardInfo; }
      set { SetScMemberCardInfo(value); }
    }
    public Builder SetScMemberCardInfo(global::SCMemberCardInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScMemberCardInfo = true;
      result.scMemberCardInfo_ = value;
      return this;
    }
    public Builder SetScMemberCardInfo(global::SCMemberCardInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScMemberCardInfo = true;
      result.scMemberCardInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScMemberCardInfo(global::SCMemberCardInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScMemberCardInfo &&
          result.scMemberCardInfo_ != global::SCMemberCardInfo.DefaultInstance) {
          result.scMemberCardInfo_ = global::SCMemberCardInfo.CreateBuilder(result.scMemberCardInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.scMemberCardInfo_ = value;
      }
      result.hasScMemberCardInfo = true;
      return this;
    }
    public Builder ClearScMemberCardInfo() {
      PrepareBuilder();
      result.hasScMemberCardInfo = false;
      result.scMemberCardInfo_ = null;
      return this;
    }
    
    public bool HasScSysBillList {
     get { return result.hasScSysBillList; }
    }
    public global::SCSysBillList ScSysBillList {
      get { return result.ScSysBillList; }
      set { SetScSysBillList(value); }
    }
    public Builder SetScSysBillList(global::SCSysBillList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScSysBillList = true;
      result.scSysBillList_ = value;
      return this;
    }
    public Builder SetScSysBillList(global::SCSysBillList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScSysBillList = true;
      result.scSysBillList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScSysBillList(global::SCSysBillList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScSysBillList &&
          result.scSysBillList_ != global::SCSysBillList.DefaultInstance) {
          result.scSysBillList_ = global::SCSysBillList.CreateBuilder(result.scSysBillList_).MergeFrom(value).BuildPartial();
      } else {
        result.scSysBillList_ = value;
      }
      result.hasScSysBillList = true;
      return this;
    }
    public Builder ClearScSysBillList() {
      PrepareBuilder();
      result.hasScSysBillList = false;
      result.scSysBillList_ = null;
      return this;
    }
    
    public bool HasCsSysBillUpdate {
     get { return result.hasCsSysBillUpdate; }
    }
    public global::CSSysBillUpdate CsSysBillUpdate {
      get { return result.CsSysBillUpdate; }
      set { SetCsSysBillUpdate(value); }
    }
    public Builder SetCsSysBillUpdate(global::CSSysBillUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsSysBillUpdate = true;
      result.csSysBillUpdate_ = value;
      return this;
    }
    public Builder SetCsSysBillUpdate(global::CSSysBillUpdate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsSysBillUpdate = true;
      result.csSysBillUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsSysBillUpdate(global::CSSysBillUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsSysBillUpdate &&
          result.csSysBillUpdate_ != global::CSSysBillUpdate.DefaultInstance) {
          result.csSysBillUpdate_ = global::CSSysBillUpdate.CreateBuilder(result.csSysBillUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.csSysBillUpdate_ = value;
      }
      result.hasCsSysBillUpdate = true;
      return this;
    }
    public Builder ClearCsSysBillUpdate() {
      PrepareBuilder();
      result.hasCsSysBillUpdate = false;
      result.csSysBillUpdate_ = null;
      return this;
    }
    
    public bool HasScSysBillUpdate {
     get { return result.hasScSysBillUpdate; }
    }
    public global::SCSysBillUpdate ScSysBillUpdate {
      get { return result.ScSysBillUpdate; }
      set { SetScSysBillUpdate(value); }
    }
    public Builder SetScSysBillUpdate(global::SCSysBillUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScSysBillUpdate = true;
      result.scSysBillUpdate_ = value;
      return this;
    }
    public Builder SetScSysBillUpdate(global::SCSysBillUpdate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScSysBillUpdate = true;
      result.scSysBillUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScSysBillUpdate(global::SCSysBillUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScSysBillUpdate &&
          result.scSysBillUpdate_ != global::SCSysBillUpdate.DefaultInstance) {
          result.scSysBillUpdate_ = global::SCSysBillUpdate.CreateBuilder(result.scSysBillUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.scSysBillUpdate_ = value;
      }
      result.hasScSysBillUpdate = true;
      return this;
    }
    public Builder ClearScSysBillUpdate() {
      PrepareBuilder();
      result.hasScSysBillUpdate = false;
      result.scSysBillUpdate_ = null;
      return this;
    }
    
    public bool HasCsSysInfo {
     get { return result.hasCsSysInfo; }
    }
    public global::CSSysInto CsSysInfo {
      get { return result.CsSysInfo; }
      set { SetCsSysInfo(value); }
    }
    public Builder SetCsSysInfo(global::CSSysInto value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsSysInfo = true;
      result.csSysInfo_ = value;
      return this;
    }
    public Builder SetCsSysInfo(global::CSSysInto.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsSysInfo = true;
      result.csSysInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsSysInfo(global::CSSysInto value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsSysInfo &&
          result.csSysInfo_ != global::CSSysInto.DefaultInstance) {
          result.csSysInfo_ = global::CSSysInto.CreateBuilder(result.csSysInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csSysInfo_ = value;
      }
      result.hasCsSysInfo = true;
      return this;
    }
    public Builder ClearCsSysInfo() {
      PrepareBuilder();
      result.hasCsSysInfo = false;
      result.csSysInfo_ = null;
      return this;
    }
    
    public bool HasScSysInfo {
     get { return result.hasScSysInfo; }
    }
    public global::SCSysInfo ScSysInfo {
      get { return result.ScSysInfo; }
      set { SetScSysInfo(value); }
    }
    public Builder SetScSysInfo(global::SCSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScSysInfo = true;
      result.scSysInfo_ = value;
      return this;
    }
    public Builder SetScSysInfo(global::SCSysInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScSysInfo = true;
      result.scSysInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScSysInfo(global::SCSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScSysInfo &&
          result.scSysInfo_ != global::SCSysInfo.DefaultInstance) {
          result.scSysInfo_ = global::SCSysInfo.CreateBuilder(result.scSysInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.scSysInfo_ = value;
      }
      result.hasScSysInfo = true;
      return this;
    }
    public Builder ClearScSysInfo() {
      PrepareBuilder();
      result.hasScSysInfo = false;
      result.scSysInfo_ = null;
      return this;
    }
    
    public bool HasCsAddSysInfo {
     get { return result.hasCsAddSysInfo; }
    }
    public global::CSAddSysInfo CsAddSysInfo {
      get { return result.CsAddSysInfo; }
      set { SetCsAddSysInfo(value); }
    }
    public Builder SetCsAddSysInfo(global::CSAddSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAddSysInfo = true;
      result.csAddSysInfo_ = value;
      return this;
    }
    public Builder SetCsAddSysInfo(global::CSAddSysInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAddSysInfo = true;
      result.csAddSysInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAddSysInfo(global::CSAddSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAddSysInfo &&
          result.csAddSysInfo_ != global::CSAddSysInfo.DefaultInstance) {
          result.csAddSysInfo_ = global::CSAddSysInfo.CreateBuilder(result.csAddSysInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csAddSysInfo_ = value;
      }
      result.hasCsAddSysInfo = true;
      return this;
    }
    public Builder ClearCsAddSysInfo() {
      PrepareBuilder();
      result.hasCsAddSysInfo = false;
      result.csAddSysInfo_ = null;
      return this;
    }
    
    public bool HasCsDelSysInfo {
     get { return result.hasCsDelSysInfo; }
    }
    public global::CSDelSysInfo CsDelSysInfo {
      get { return result.CsDelSysInfo; }
      set { SetCsDelSysInfo(value); }
    }
    public Builder SetCsDelSysInfo(global::CSDelSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsDelSysInfo = true;
      result.csDelSysInfo_ = value;
      return this;
    }
    public Builder SetCsDelSysInfo(global::CSDelSysInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsDelSysInfo = true;
      result.csDelSysInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsDelSysInfo(global::CSDelSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsDelSysInfo &&
          result.csDelSysInfo_ != global::CSDelSysInfo.DefaultInstance) {
          result.csDelSysInfo_ = global::CSDelSysInfo.CreateBuilder(result.csDelSysInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csDelSysInfo_ = value;
      }
      result.hasCsDelSysInfo = true;
      return this;
    }
    public Builder ClearCsDelSysInfo() {
      PrepareBuilder();
      result.hasCsDelSysInfo = false;
      result.csDelSysInfo_ = null;
      return this;
    }
    
    public bool HasCsUpdateSysInfo {
     get { return result.hasCsUpdateSysInfo; }
    }
    public global::CSUpdateSysInfo CsUpdateSysInfo {
      get { return result.CsUpdateSysInfo; }
      set { SetCsUpdateSysInfo(value); }
    }
    public Builder SetCsUpdateSysInfo(global::CSUpdateSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsUpdateSysInfo = true;
      result.csUpdateSysInfo_ = value;
      return this;
    }
    public Builder SetCsUpdateSysInfo(global::CSUpdateSysInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsUpdateSysInfo = true;
      result.csUpdateSysInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsUpdateSysInfo(global::CSUpdateSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsUpdateSysInfo &&
          result.csUpdateSysInfo_ != global::CSUpdateSysInfo.DefaultInstance) {
          result.csUpdateSysInfo_ = global::CSUpdateSysInfo.CreateBuilder(result.csUpdateSysInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csUpdateSysInfo_ = value;
      }
      result.hasCsUpdateSysInfo = true;
      return this;
    }
    public Builder ClearCsUpdateSysInfo() {
      PrepareBuilder();
      result.hasCsUpdateSysInfo = false;
      result.csUpdateSysInfo_ = null;
      return this;
    }
    
    public bool HasCsGoodsAdd {
     get { return result.hasCsGoodsAdd; }
    }
    public global::CSGoodsAdd CsGoodsAdd {
      get { return result.CsGoodsAdd; }
      set { SetCsGoodsAdd(value); }
    }
    public Builder SetCsGoodsAdd(global::CSGoodsAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsGoodsAdd = true;
      result.csGoodsAdd_ = value;
      return this;
    }
    public Builder SetCsGoodsAdd(global::CSGoodsAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsGoodsAdd = true;
      result.csGoodsAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsGoodsAdd(global::CSGoodsAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsGoodsAdd &&
          result.csGoodsAdd_ != global::CSGoodsAdd.DefaultInstance) {
          result.csGoodsAdd_ = global::CSGoodsAdd.CreateBuilder(result.csGoodsAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csGoodsAdd_ = value;
      }
      result.hasCsGoodsAdd = true;
      return this;
    }
    public Builder ClearCsGoodsAdd() {
      PrepareBuilder();
      result.hasCsGoodsAdd = false;
      result.csGoodsAdd_ = null;
      return this;
    }
    
    public bool HasCsGoodsDel {
     get { return result.hasCsGoodsDel; }
    }
    public global::CSGoodsDel CsGoodsDel {
      get { return result.CsGoodsDel; }
      set { SetCsGoodsDel(value); }
    }
    public Builder SetCsGoodsDel(global::CSGoodsDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsGoodsDel = true;
      result.csGoodsDel_ = value;
      return this;
    }
    public Builder SetCsGoodsDel(global::CSGoodsDel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsGoodsDel = true;
      result.csGoodsDel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsGoodsDel(global::CSGoodsDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsGoodsDel &&
          result.csGoodsDel_ != global::CSGoodsDel.DefaultInstance) {
          result.csGoodsDel_ = global::CSGoodsDel.CreateBuilder(result.csGoodsDel_).MergeFrom(value).BuildPartial();
      } else {
        result.csGoodsDel_ = value;
      }
      result.hasCsGoodsDel = true;
      return this;
    }
    public Builder ClearCsGoodsDel() {
      PrepareBuilder();
      result.hasCsGoodsDel = false;
      result.csGoodsDel_ = null;
      return this;
    }
    
    public bool HasCsGoodsUpdate {
     get { return result.hasCsGoodsUpdate; }
    }
    public global::CSGoodsUpdate CsGoodsUpdate {
      get { return result.CsGoodsUpdate; }
      set { SetCsGoodsUpdate(value); }
    }
    public Builder SetCsGoodsUpdate(global::CSGoodsUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsGoodsUpdate = true;
      result.csGoodsUpdate_ = value;
      return this;
    }
    public Builder SetCsGoodsUpdate(global::CSGoodsUpdate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsGoodsUpdate = true;
      result.csGoodsUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsGoodsUpdate(global::CSGoodsUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsGoodsUpdate &&
          result.csGoodsUpdate_ != global::CSGoodsUpdate.DefaultInstance) {
          result.csGoodsUpdate_ = global::CSGoodsUpdate.CreateBuilder(result.csGoodsUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.csGoodsUpdate_ = value;
      }
      result.hasCsGoodsUpdate = true;
      return this;
    }
    public Builder ClearCsGoodsUpdate() {
      PrepareBuilder();
      result.hasCsGoodsUpdate = false;
      result.csGoodsUpdate_ = null;
      return this;
    }
    
    public bool HasCsGoodsStock {
     get { return result.hasCsGoodsStock; }
    }
    public global::CSGoodsStock CsGoodsStock {
      get { return result.CsGoodsStock; }
      set { SetCsGoodsStock(value); }
    }
    public Builder SetCsGoodsStock(global::CSGoodsStock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsGoodsStock = true;
      result.csGoodsStock_ = value;
      return this;
    }
    public Builder SetCsGoodsStock(global::CSGoodsStock.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsGoodsStock = true;
      result.csGoodsStock_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsGoodsStock(global::CSGoodsStock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsGoodsStock &&
          result.csGoodsStock_ != global::CSGoodsStock.DefaultInstance) {
          result.csGoodsStock_ = global::CSGoodsStock.CreateBuilder(result.csGoodsStock_).MergeFrom(value).BuildPartial();
      } else {
        result.csGoodsStock_ = value;
      }
      result.hasCsGoodsStock = true;
      return this;
    }
    public Builder ClearCsGoodsStock() {
      PrepareBuilder();
      result.hasCsGoodsStock = false;
      result.csGoodsStock_ = null;
      return this;
    }
    
    public bool HasScGoodsStock {
     get { return result.hasScGoodsStock; }
    }
    public global::SCGoodsStock ScGoodsStock {
      get { return result.ScGoodsStock; }
      set { SetScGoodsStock(value); }
    }
    public Builder SetScGoodsStock(global::SCGoodsStock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScGoodsStock = true;
      result.scGoodsStock_ = value;
      return this;
    }
    public Builder SetScGoodsStock(global::SCGoodsStock.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScGoodsStock = true;
      result.scGoodsStock_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScGoodsStock(global::SCGoodsStock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScGoodsStock &&
          result.scGoodsStock_ != global::SCGoodsStock.DefaultInstance) {
          result.scGoodsStock_ = global::SCGoodsStock.CreateBuilder(result.scGoodsStock_).MergeFrom(value).BuildPartial();
      } else {
        result.scGoodsStock_ = value;
      }
      result.hasScGoodsStock = true;
      return this;
    }
    public Builder ClearScGoodsStock() {
      PrepareBuilder();
      result.hasScGoodsStock = false;
      result.scGoodsStock_ = null;
      return this;
    }
    
    public bool HasCsSalesRecord {
     get { return result.hasCsSalesRecord; }
    }
    public global::CSSalesRecord CsSalesRecord {
      get { return result.CsSalesRecord; }
      set { SetCsSalesRecord(value); }
    }
    public Builder SetCsSalesRecord(global::CSSalesRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsSalesRecord = true;
      result.csSalesRecord_ = value;
      return this;
    }
    public Builder SetCsSalesRecord(global::CSSalesRecord.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsSalesRecord = true;
      result.csSalesRecord_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsSalesRecord(global::CSSalesRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsSalesRecord &&
          result.csSalesRecord_ != global::CSSalesRecord.DefaultInstance) {
          result.csSalesRecord_ = global::CSSalesRecord.CreateBuilder(result.csSalesRecord_).MergeFrom(value).BuildPartial();
      } else {
        result.csSalesRecord_ = value;
      }
      result.hasCsSalesRecord = true;
      return this;
    }
    public Builder ClearCsSalesRecord() {
      PrepareBuilder();
      result.hasCsSalesRecord = false;
      result.csSalesRecord_ = null;
      return this;
    }
    
    public bool HasScSalesRecord {
     get { return result.hasScSalesRecord; }
    }
    public global::SCSalesRecord ScSalesRecord {
      get { return result.ScSalesRecord; }
      set { SetScSalesRecord(value); }
    }
    public Builder SetScSalesRecord(global::SCSalesRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScSalesRecord = true;
      result.scSalesRecord_ = value;
      return this;
    }
    public Builder SetScSalesRecord(global::SCSalesRecord.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScSalesRecord = true;
      result.scSalesRecord_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScSalesRecord(global::SCSalesRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScSalesRecord &&
          result.scSalesRecord_ != global::SCSalesRecord.DefaultInstance) {
          result.scSalesRecord_ = global::SCSalesRecord.CreateBuilder(result.scSalesRecord_).MergeFrom(value).BuildPartial();
      } else {
        result.scSalesRecord_ = value;
      }
      result.hasScSalesRecord = true;
      return this;
    }
    public Builder ClearScSalesRecord() {
      PrepareBuilder();
      result.hasScSalesRecord = false;
      result.scSalesRecord_ = null;
      return this;
    }
    
    public bool HasCsSalesTop {
     get { return result.hasCsSalesTop; }
    }
    public global::CSSalesTop CsSalesTop {
      get { return result.CsSalesTop; }
      set { SetCsSalesTop(value); }
    }
    public Builder SetCsSalesTop(global::CSSalesTop value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsSalesTop = true;
      result.csSalesTop_ = value;
      return this;
    }
    public Builder SetCsSalesTop(global::CSSalesTop.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsSalesTop = true;
      result.csSalesTop_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsSalesTop(global::CSSalesTop value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsSalesTop &&
          result.csSalesTop_ != global::CSSalesTop.DefaultInstance) {
          result.csSalesTop_ = global::CSSalesTop.CreateBuilder(result.csSalesTop_).MergeFrom(value).BuildPartial();
      } else {
        result.csSalesTop_ = value;
      }
      result.hasCsSalesTop = true;
      return this;
    }
    public Builder ClearCsSalesTop() {
      PrepareBuilder();
      result.hasCsSalesTop = false;
      result.csSalesTop_ = null;
      return this;
    }
    
    public bool HasScSalesTop {
     get { return result.hasScSalesTop; }
    }
    public global::SCSalesTop ScSalesTop {
      get { return result.ScSalesTop; }
      set { SetScSalesTop(value); }
    }
    public Builder SetScSalesTop(global::SCSalesTop value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScSalesTop = true;
      result.scSalesTop_ = value;
      return this;
    }
    public Builder SetScSalesTop(global::SCSalesTop.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScSalesTop = true;
      result.scSalesTop_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScSalesTop(global::SCSalesTop value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScSalesTop &&
          result.scSalesTop_ != global::SCSalesTop.DefaultInstance) {
          result.scSalesTop_ = global::SCSalesTop.CreateBuilder(result.scSalesTop_).MergeFrom(value).BuildPartial();
      } else {
        result.scSalesTop_ = value;
      }
      result.hasScSalesTop = true;
      return this;
    }
    public Builder ClearScSalesTop() {
      PrepareBuilder();
      result.hasScSalesTop = false;
      result.scSalesTop_ = null;
      return this;
    }
    
    public bool HasCsOrderProc {
     get { return result.hasCsOrderProc; }
    }
    public global::CSOrderProc CsOrderProc {
      get { return result.CsOrderProc; }
      set { SetCsOrderProc(value); }
    }
    public Builder SetCsOrderProc(global::CSOrderProc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsOrderProc = true;
      result.csOrderProc_ = value;
      return this;
    }
    public Builder SetCsOrderProc(global::CSOrderProc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsOrderProc = true;
      result.csOrderProc_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsOrderProc(global::CSOrderProc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsOrderProc &&
          result.csOrderProc_ != global::CSOrderProc.DefaultInstance) {
          result.csOrderProc_ = global::CSOrderProc.CreateBuilder(result.csOrderProc_).MergeFrom(value).BuildPartial();
      } else {
        result.csOrderProc_ = value;
      }
      result.hasCsOrderProc = true;
      return this;
    }
    public Builder ClearCsOrderProc() {
      PrepareBuilder();
      result.hasCsOrderProc = false;
      result.csOrderProc_ = null;
      return this;
    }
    
    public bool HasCsOrderList {
     get { return result.hasCsOrderList; }
    }
    public global::CSOrderList CsOrderList {
      get { return result.CsOrderList; }
      set { SetCsOrderList(value); }
    }
    public Builder SetCsOrderList(global::CSOrderList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsOrderList = true;
      result.csOrderList_ = value;
      return this;
    }
    public Builder SetCsOrderList(global::CSOrderList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsOrderList = true;
      result.csOrderList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsOrderList(global::CSOrderList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsOrderList &&
          result.csOrderList_ != global::CSOrderList.DefaultInstance) {
          result.csOrderList_ = global::CSOrderList.CreateBuilder(result.csOrderList_).MergeFrom(value).BuildPartial();
      } else {
        result.csOrderList_ = value;
      }
      result.hasCsOrderList = true;
      return this;
    }
    public Builder ClearCsOrderList() {
      PrepareBuilder();
      result.hasCsOrderList = false;
      result.csOrderList_ = null;
      return this;
    }
    
    public bool HasScOrderList {
     get { return result.hasScOrderList; }
    }
    public global::SCOrderList ScOrderList {
      get { return result.ScOrderList; }
      set { SetScOrderList(value); }
    }
    public Builder SetScOrderList(global::SCOrderList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScOrderList = true;
      result.scOrderList_ = value;
      return this;
    }
    public Builder SetScOrderList(global::SCOrderList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScOrderList = true;
      result.scOrderList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScOrderList(global::SCOrderList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScOrderList &&
          result.scOrderList_ != global::SCOrderList.DefaultInstance) {
          result.scOrderList_ = global::SCOrderList.CreateBuilder(result.scOrderList_).MergeFrom(value).BuildPartial();
      } else {
        result.scOrderList_ = value;
      }
      result.hasScOrderList = true;
      return this;
    }
    public Builder ClearScOrderList() {
      PrepareBuilder();
      result.hasScOrderList = false;
      result.scOrderList_ = null;
      return this;
    }
    
    public bool HasCsOrderDetail {
     get { return result.hasCsOrderDetail; }
    }
    public global::CSOrderDetail CsOrderDetail {
      get { return result.CsOrderDetail; }
      set { SetCsOrderDetail(value); }
    }
    public Builder SetCsOrderDetail(global::CSOrderDetail value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsOrderDetail = true;
      result.csOrderDetail_ = value;
      return this;
    }
    public Builder SetCsOrderDetail(global::CSOrderDetail.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsOrderDetail = true;
      result.csOrderDetail_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsOrderDetail(global::CSOrderDetail value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsOrderDetail &&
          result.csOrderDetail_ != global::CSOrderDetail.DefaultInstance) {
          result.csOrderDetail_ = global::CSOrderDetail.CreateBuilder(result.csOrderDetail_).MergeFrom(value).BuildPartial();
      } else {
        result.csOrderDetail_ = value;
      }
      result.hasCsOrderDetail = true;
      return this;
    }
    public Builder ClearCsOrderDetail() {
      PrepareBuilder();
      result.hasCsOrderDetail = false;
      result.csOrderDetail_ = null;
      return this;
    }
    
    public bool HasScOrderDetail {
     get { return result.hasScOrderDetail; }
    }
    public global::SCOrderDetail ScOrderDetail {
      get { return result.ScOrderDetail; }
      set { SetScOrderDetail(value); }
    }
    public Builder SetScOrderDetail(global::SCOrderDetail value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScOrderDetail = true;
      result.scOrderDetail_ = value;
      return this;
    }
    public Builder SetScOrderDetail(global::SCOrderDetail.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScOrderDetail = true;
      result.scOrderDetail_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScOrderDetail(global::SCOrderDetail value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScOrderDetail &&
          result.scOrderDetail_ != global::SCOrderDetail.DefaultInstance) {
          result.scOrderDetail_ = global::SCOrderDetail.CreateBuilder(result.scOrderDetail_).MergeFrom(value).BuildPartial();
      } else {
        result.scOrderDetail_ = value;
      }
      result.hasScOrderDetail = true;
      return this;
    }
    public Builder ClearScOrderDetail() {
      PrepareBuilder();
      result.hasScOrderDetail = false;
      result.scOrderDetail_ = null;
      return this;
    }
    
    public bool HasScShiftDeliveredBy {
     get { return result.hasScShiftDeliveredBy; }
    }
    public global::SCShiftDeliveredBy ScShiftDeliveredBy {
      get { return result.ScShiftDeliveredBy; }
      set { SetScShiftDeliveredBy(value); }
    }
    public Builder SetScShiftDeliveredBy(global::SCShiftDeliveredBy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScShiftDeliveredBy = true;
      result.scShiftDeliveredBy_ = value;
      return this;
    }
    public Builder SetScShiftDeliveredBy(global::SCShiftDeliveredBy.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScShiftDeliveredBy = true;
      result.scShiftDeliveredBy_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScShiftDeliveredBy(global::SCShiftDeliveredBy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScShiftDeliveredBy &&
          result.scShiftDeliveredBy_ != global::SCShiftDeliveredBy.DefaultInstance) {
          result.scShiftDeliveredBy_ = global::SCShiftDeliveredBy.CreateBuilder(result.scShiftDeliveredBy_).MergeFrom(value).BuildPartial();
      } else {
        result.scShiftDeliveredBy_ = value;
      }
      result.hasScShiftDeliveredBy = true;
      return this;
    }
    public Builder ClearScShiftDeliveredBy() {
      PrepareBuilder();
      result.hasScShiftDeliveredBy = false;
      result.scShiftDeliveredBy_ = null;
      return this;
    }
    
    public bool HasCsShiftAdd {
     get { return result.hasCsShiftAdd; }
    }
    public global::CSShiftAdd CsShiftAdd {
      get { return result.CsShiftAdd; }
      set { SetCsShiftAdd(value); }
    }
    public Builder SetCsShiftAdd(global::CSShiftAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsShiftAdd = true;
      result.csShiftAdd_ = value;
      return this;
    }
    public Builder SetCsShiftAdd(global::CSShiftAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsShiftAdd = true;
      result.csShiftAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsShiftAdd(global::CSShiftAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsShiftAdd &&
          result.csShiftAdd_ != global::CSShiftAdd.DefaultInstance) {
          result.csShiftAdd_ = global::CSShiftAdd.CreateBuilder(result.csShiftAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csShiftAdd_ = value;
      }
      result.hasCsShiftAdd = true;
      return this;
    }
    public Builder ClearCsShiftAdd() {
      PrepareBuilder();
      result.hasCsShiftAdd = false;
      result.csShiftAdd_ = null;
      return this;
    }
    
    public bool HasCsShiftFind {
     get { return result.hasCsShiftFind; }
    }
    public global::CSShiftFind CsShiftFind {
      get { return result.CsShiftFind; }
      set { SetCsShiftFind(value); }
    }
    public Builder SetCsShiftFind(global::CSShiftFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsShiftFind = true;
      result.csShiftFind_ = value;
      return this;
    }
    public Builder SetCsShiftFind(global::CSShiftFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsShiftFind = true;
      result.csShiftFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsShiftFind(global::CSShiftFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsShiftFind &&
          result.csShiftFind_ != global::CSShiftFind.DefaultInstance) {
          result.csShiftFind_ = global::CSShiftFind.CreateBuilder(result.csShiftFind_).MergeFrom(value).BuildPartial();
      } else {
        result.csShiftFind_ = value;
      }
      result.hasCsShiftFind = true;
      return this;
    }
    public Builder ClearCsShiftFind() {
      PrepareBuilder();
      result.hasCsShiftFind = false;
      result.csShiftFind_ = null;
      return this;
    }
    
    public bool HasScShiftFind {
     get { return result.hasScShiftFind; }
    }
    public global::SCShiftFind ScShiftFind {
      get { return result.ScShiftFind; }
      set { SetScShiftFind(value); }
    }
    public Builder SetScShiftFind(global::SCShiftFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScShiftFind = true;
      result.scShiftFind_ = value;
      return this;
    }
    public Builder SetScShiftFind(global::SCShiftFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScShiftFind = true;
      result.scShiftFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScShiftFind(global::SCShiftFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScShiftFind &&
          result.scShiftFind_ != global::SCShiftFind.DefaultInstance) {
          result.scShiftFind_ = global::SCShiftFind.CreateBuilder(result.scShiftFind_).MergeFrom(value).BuildPartial();
      } else {
        result.scShiftFind_ = value;
      }
      result.hasScShiftFind = true;
      return this;
    }
    public Builder ClearScShiftFind() {
      PrepareBuilder();
      result.hasScShiftFind = false;
      result.scShiftFind_ = null;
      return this;
    }
    
    public bool HasCsQueryCharge {
     get { return result.hasCsQueryCharge; }
    }
    public global::CSQueryCharge CsQueryCharge {
      get { return result.CsQueryCharge; }
      set { SetCsQueryCharge(value); }
    }
    public Builder SetCsQueryCharge(global::CSQueryCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsQueryCharge = true;
      result.csQueryCharge_ = value;
      return this;
    }
    public Builder SetCsQueryCharge(global::CSQueryCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsQueryCharge = true;
      result.csQueryCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsQueryCharge(global::CSQueryCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsQueryCharge &&
          result.csQueryCharge_ != global::CSQueryCharge.DefaultInstance) {
          result.csQueryCharge_ = global::CSQueryCharge.CreateBuilder(result.csQueryCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.csQueryCharge_ = value;
      }
      result.hasCsQueryCharge = true;
      return this;
    }
    public Builder ClearCsQueryCharge() {
      PrepareBuilder();
      result.hasCsQueryCharge = false;
      result.csQueryCharge_ = null;
      return this;
    }
    
    public bool HasScQueryCharge {
     get { return result.hasScQueryCharge; }
    }
    public global::SCQueryCharge ScQueryCharge {
      get { return result.ScQueryCharge; }
      set { SetScQueryCharge(value); }
    }
    public Builder SetScQueryCharge(global::SCQueryCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScQueryCharge = true;
      result.scQueryCharge_ = value;
      return this;
    }
    public Builder SetScQueryCharge(global::SCQueryCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScQueryCharge = true;
      result.scQueryCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScQueryCharge(global::SCQueryCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScQueryCharge &&
          result.scQueryCharge_ != global::SCQueryCharge.DefaultInstance) {
          result.scQueryCharge_ = global::SCQueryCharge.CreateBuilder(result.scQueryCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.scQueryCharge_ = value;
      }
      result.hasScQueryCharge = true;
      return this;
    }
    public Builder ClearScQueryCharge() {
      PrepareBuilder();
      result.hasScQueryCharge = false;
      result.scQueryCharge_ = null;
      return this;
    }
    
    public bool HasCsQueryEmk {
     get { return result.hasCsQueryEmk; }
    }
    public global::CSQueryEmk CsQueryEmk {
      get { return result.CsQueryEmk; }
      set { SetCsQueryEmk(value); }
    }
    public Builder SetCsQueryEmk(global::CSQueryEmk value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsQueryEmk = true;
      result.csQueryEmk_ = value;
      return this;
    }
    public Builder SetCsQueryEmk(global::CSQueryEmk.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsQueryEmk = true;
      result.csQueryEmk_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsQueryEmk(global::CSQueryEmk value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsQueryEmk &&
          result.csQueryEmk_ != global::CSQueryEmk.DefaultInstance) {
          result.csQueryEmk_ = global::CSQueryEmk.CreateBuilder(result.csQueryEmk_).MergeFrom(value).BuildPartial();
      } else {
        result.csQueryEmk_ = value;
      }
      result.hasCsQueryEmk = true;
      return this;
    }
    public Builder ClearCsQueryEmk() {
      PrepareBuilder();
      result.hasCsQueryEmk = false;
      result.csQueryEmk_ = null;
      return this;
    }
    
    public bool HasScQueryEmk {
     get { return result.hasScQueryEmk; }
    }
    public global::SCQueryEmk ScQueryEmk {
      get { return result.ScQueryEmk; }
      set { SetScQueryEmk(value); }
    }
    public Builder SetScQueryEmk(global::SCQueryEmk value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScQueryEmk = true;
      result.scQueryEmk_ = value;
      return this;
    }
    public Builder SetScQueryEmk(global::SCQueryEmk.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScQueryEmk = true;
      result.scQueryEmk_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScQueryEmk(global::SCQueryEmk value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScQueryEmk &&
          result.scQueryEmk_ != global::SCQueryEmk.DefaultInstance) {
          result.scQueryEmk_ = global::SCQueryEmk.CreateBuilder(result.scQueryEmk_).MergeFrom(value).BuildPartial();
      } else {
        result.scQueryEmk_ = value;
      }
      result.hasScQueryEmk = true;
      return this;
    }
    public Builder ClearScQueryEmk() {
      PrepareBuilder();
      result.hasScQueryEmk = false;
      result.scQueryEmk_ = null;
      return this;
    }
    
    public bool HasCsQueryTrade {
     get { return result.hasCsQueryTrade; }
    }
    public global::CSQueryTrade CsQueryTrade {
      get { return result.CsQueryTrade; }
      set { SetCsQueryTrade(value); }
    }
    public Builder SetCsQueryTrade(global::CSQueryTrade value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsQueryTrade = true;
      result.csQueryTrade_ = value;
      return this;
    }
    public Builder SetCsQueryTrade(global::CSQueryTrade.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsQueryTrade = true;
      result.csQueryTrade_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsQueryTrade(global::CSQueryTrade value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsQueryTrade &&
          result.csQueryTrade_ != global::CSQueryTrade.DefaultInstance) {
          result.csQueryTrade_ = global::CSQueryTrade.CreateBuilder(result.csQueryTrade_).MergeFrom(value).BuildPartial();
      } else {
        result.csQueryTrade_ = value;
      }
      result.hasCsQueryTrade = true;
      return this;
    }
    public Builder ClearCsQueryTrade() {
      PrepareBuilder();
      result.hasCsQueryTrade = false;
      result.csQueryTrade_ = null;
      return this;
    }
    
    public bool HasScQueryTrade {
     get { return result.hasScQueryTrade; }
    }
    public global::SCQueryTrade ScQueryTrade {
      get { return result.ScQueryTrade; }
      set { SetScQueryTrade(value); }
    }
    public Builder SetScQueryTrade(global::SCQueryTrade value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScQueryTrade = true;
      result.scQueryTrade_ = value;
      return this;
    }
    public Builder SetScQueryTrade(global::SCQueryTrade.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScQueryTrade = true;
      result.scQueryTrade_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScQueryTrade(global::SCQueryTrade value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScQueryTrade &&
          result.scQueryTrade_ != global::SCQueryTrade.DefaultInstance) {
          result.scQueryTrade_ = global::SCQueryTrade.CreateBuilder(result.scQueryTrade_).MergeFrom(value).BuildPartial();
      } else {
        result.scQueryTrade_ = value;
      }
      result.hasScQueryTrade = true;
      return this;
    }
    public Builder ClearScQueryTrade() {
      PrepareBuilder();
      result.hasScQueryTrade = false;
      result.scQueryTrade_ = null;
      return this;
    }
    
    public bool HasCsQueryApply {
     get { return result.hasCsQueryApply; }
    }
    public global::CSQueryApply CsQueryApply {
      get { return result.CsQueryApply; }
      set { SetCsQueryApply(value); }
    }
    public Builder SetCsQueryApply(global::CSQueryApply value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsQueryApply = true;
      result.csQueryApply_ = value;
      return this;
    }
    public Builder SetCsQueryApply(global::CSQueryApply.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsQueryApply = true;
      result.csQueryApply_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsQueryApply(global::CSQueryApply value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsQueryApply &&
          result.csQueryApply_ != global::CSQueryApply.DefaultInstance) {
          result.csQueryApply_ = global::CSQueryApply.CreateBuilder(result.csQueryApply_).MergeFrom(value).BuildPartial();
      } else {
        result.csQueryApply_ = value;
      }
      result.hasCsQueryApply = true;
      return this;
    }
    public Builder ClearCsQueryApply() {
      PrepareBuilder();
      result.hasCsQueryApply = false;
      result.csQueryApply_ = null;
      return this;
    }
    
    public bool HasScQueryApply {
     get { return result.hasScQueryApply; }
    }
    public global::SCQueryApply ScQueryApply {
      get { return result.ScQueryApply; }
      set { SetScQueryApply(value); }
    }
    public Builder SetScQueryApply(global::SCQueryApply value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScQueryApply = true;
      result.scQueryApply_ = value;
      return this;
    }
    public Builder SetScQueryApply(global::SCQueryApply.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScQueryApply = true;
      result.scQueryApply_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScQueryApply(global::SCQueryApply value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScQueryApply &&
          result.scQueryApply_ != global::SCQueryApply.DefaultInstance) {
          result.scQueryApply_ = global::SCQueryApply.CreateBuilder(result.scQueryApply_).MergeFrom(value).BuildPartial();
      } else {
        result.scQueryApply_ = value;
      }
      result.hasScQueryApply = true;
      return this;
    }
    public Builder ClearScQueryApply() {
      PrepareBuilder();
      result.hasScQueryApply = false;
      result.scQueryApply_ = null;
      return this;
    }
    
    public bool HasCsQueryOccup {
     get { return result.hasCsQueryOccup; }
    }
    public global::CSQueryOccup CsQueryOccup {
      get { return result.CsQueryOccup; }
      set { SetCsQueryOccup(value); }
    }
    public Builder SetCsQueryOccup(global::CSQueryOccup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsQueryOccup = true;
      result.csQueryOccup_ = value;
      return this;
    }
    public Builder SetCsQueryOccup(global::CSQueryOccup.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsQueryOccup = true;
      result.csQueryOccup_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsQueryOccup(global::CSQueryOccup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsQueryOccup &&
          result.csQueryOccup_ != global::CSQueryOccup.DefaultInstance) {
          result.csQueryOccup_ = global::CSQueryOccup.CreateBuilder(result.csQueryOccup_).MergeFrom(value).BuildPartial();
      } else {
        result.csQueryOccup_ = value;
      }
      result.hasCsQueryOccup = true;
      return this;
    }
    public Builder ClearCsQueryOccup() {
      PrepareBuilder();
      result.hasCsQueryOccup = false;
      result.csQueryOccup_ = null;
      return this;
    }
    
    public bool HasScQueryOccup {
     get { return result.hasScQueryOccup; }
    }
    public global::SCQueryOccup ScQueryOccup {
      get { return result.ScQueryOccup; }
      set { SetScQueryOccup(value); }
    }
    public Builder SetScQueryOccup(global::SCQueryOccup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScQueryOccup = true;
      result.scQueryOccup_ = value;
      return this;
    }
    public Builder SetScQueryOccup(global::SCQueryOccup.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScQueryOccup = true;
      result.scQueryOccup_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScQueryOccup(global::SCQueryOccup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScQueryOccup &&
          result.scQueryOccup_ != global::SCQueryOccup.DefaultInstance) {
          result.scQueryOccup_ = global::SCQueryOccup.CreateBuilder(result.scQueryOccup_).MergeFrom(value).BuildPartial();
      } else {
        result.scQueryOccup_ = value;
      }
      result.hasScQueryOccup = true;
      return this;
    }
    public Builder ClearScQueryOccup() {
      PrepareBuilder();
      result.hasScQueryOccup = false;
      result.scQueryOccup_ = null;
      return this;
    }
    
    public bool HasCsClientOpen {
     get { return result.hasCsClientOpen; }
    }
    public global::CSClientOpen CsClientOpen {
      get { return result.CsClientOpen; }
      set { SetCsClientOpen(value); }
    }
    public Builder SetCsClientOpen(global::CSClientOpen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsClientOpen = true;
      result.csClientOpen_ = value;
      return this;
    }
    public Builder SetCsClientOpen(global::CSClientOpen.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsClientOpen = true;
      result.csClientOpen_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsClientOpen(global::CSClientOpen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsClientOpen &&
          result.csClientOpen_ != global::CSClientOpen.DefaultInstance) {
          result.csClientOpen_ = global::CSClientOpen.CreateBuilder(result.csClientOpen_).MergeFrom(value).BuildPartial();
      } else {
        result.csClientOpen_ = value;
      }
      result.hasCsClientOpen = true;
      return this;
    }
    public Builder ClearCsClientOpen() {
      PrepareBuilder();
      result.hasCsClientOpen = false;
      result.csClientOpen_ = null;
      return this;
    }
    
    public bool HasCsClientClose {
     get { return result.hasCsClientClose; }
    }
    public global::CSClientClose CsClientClose {
      get { return result.CsClientClose; }
      set { SetCsClientClose(value); }
    }
    public Builder SetCsClientClose(global::CSClientClose value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsClientClose = true;
      result.csClientClose_ = value;
      return this;
    }
    public Builder SetCsClientClose(global::CSClientClose.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsClientClose = true;
      result.csClientClose_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsClientClose(global::CSClientClose value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsClientClose &&
          result.csClientClose_ != global::CSClientClose.DefaultInstance) {
          result.csClientClose_ = global::CSClientClose.CreateBuilder(result.csClientClose_).MergeFrom(value).BuildPartial();
      } else {
        result.csClientClose_ = value;
      }
      result.hasCsClientClose = true;
      return this;
    }
    public Builder ClearCsClientClose() {
      PrepareBuilder();
      result.hasCsClientClose = false;
      result.csClientClose_ = null;
      return this;
    }
    
    public bool HasCsLogon {
     get { return result.hasCsLogon; }
    }
    public global::CSLogon CsLogon {
      get { return result.CsLogon; }
      set { SetCsLogon(value); }
    }
    public Builder SetCsLogon(global::CSLogon value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsLogon = true;
      result.csLogon_ = value;
      return this;
    }
    public Builder SetCsLogon(global::CSLogon.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsLogon = true;
      result.csLogon_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsLogon(global::CSLogon value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsLogon &&
          result.csLogon_ != global::CSLogon.DefaultInstance) {
          result.csLogon_ = global::CSLogon.CreateBuilder(result.csLogon_).MergeFrom(value).BuildPartial();
      } else {
        result.csLogon_ = value;
      }
      result.hasCsLogon = true;
      return this;
    }
    public Builder ClearCsLogon() {
      PrepareBuilder();
      result.hasCsLogon = false;
      result.csLogon_ = null;
      return this;
    }
    
    public bool HasScLogon {
     get { return result.hasScLogon; }
    }
    public global::SCLogon ScLogon {
      get { return result.ScLogon; }
      set { SetScLogon(value); }
    }
    public Builder SetScLogon(global::SCLogon value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScLogon = true;
      result.scLogon_ = value;
      return this;
    }
    public Builder SetScLogon(global::SCLogon.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScLogon = true;
      result.scLogon_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScLogon(global::SCLogon value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScLogon &&
          result.scLogon_ != global::SCLogon.DefaultInstance) {
          result.scLogon_ = global::SCLogon.CreateBuilder(result.scLogon_).MergeFrom(value).BuildPartial();
      } else {
        result.scLogon_ = value;
      }
      result.hasScLogon = true;
      return this;
    }
    public Builder ClearScLogon() {
      PrepareBuilder();
      result.hasScLogon = false;
      result.scLogon_ = null;
      return this;
    }
    
    public bool HasCsLogoff {
     get { return result.hasCsLogoff; }
    }
    public global::CSLogoff CsLogoff {
      get { return result.CsLogoff; }
      set { SetCsLogoff(value); }
    }
    public Builder SetCsLogoff(global::CSLogoff value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsLogoff = true;
      result.csLogoff_ = value;
      return this;
    }
    public Builder SetCsLogoff(global::CSLogoff.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsLogoff = true;
      result.csLogoff_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsLogoff(global::CSLogoff value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsLogoff &&
          result.csLogoff_ != global::CSLogoff.DefaultInstance) {
          result.csLogoff_ = global::CSLogoff.CreateBuilder(result.csLogoff_).MergeFrom(value).BuildPartial();
      } else {
        result.csLogoff_ = value;
      }
      result.hasCsLogoff = true;
      return this;
    }
    public Builder ClearCsLogoff() {
      PrepareBuilder();
      result.hasCsLogoff = false;
      result.csLogoff_ = null;
      return this;
    }
    
    public bool HasScLogoff {
     get { return result.hasScLogoff; }
    }
    public global::SCLogoff ScLogoff {
      get { return result.ScLogoff; }
      set { SetScLogoff(value); }
    }
    public Builder SetScLogoff(global::SCLogoff value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScLogoff = true;
      result.scLogoff_ = value;
      return this;
    }
    public Builder SetScLogoff(global::SCLogoff.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScLogoff = true;
      result.scLogoff_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScLogoff(global::SCLogoff value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScLogoff &&
          result.scLogoff_ != global::SCLogoff.DefaultInstance) {
          result.scLogoff_ = global::SCLogoff.CreateBuilder(result.scLogoff_).MergeFrom(value).BuildPartial();
      } else {
        result.scLogoff_ = value;
      }
      result.hasScLogoff = true;
      return this;
    }
    public Builder ClearScLogoff() {
      PrepareBuilder();
      result.hasScLogoff = false;
      result.scLogoff_ = null;
      return this;
    }
    
    public bool HasCsHungup {
     get { return result.hasCsHungup; }
    }
    public global::CSHungup CsHungup {
      get { return result.CsHungup; }
      set { SetCsHungup(value); }
    }
    public Builder SetCsHungup(global::CSHungup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsHungup = true;
      result.csHungup_ = value;
      return this;
    }
    public Builder SetCsHungup(global::CSHungup.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsHungup = true;
      result.csHungup_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsHungup(global::CSHungup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsHungup &&
          result.csHungup_ != global::CSHungup.DefaultInstance) {
          result.csHungup_ = global::CSHungup.CreateBuilder(result.csHungup_).MergeFrom(value).BuildPartial();
      } else {
        result.csHungup_ = value;
      }
      result.hasCsHungup = true;
      return this;
    }
    public Builder ClearCsHungup() {
      PrepareBuilder();
      result.hasCsHungup = false;
      result.csHungup_ = null;
      return this;
    }
    
    public bool HasCsEvaluate {
     get { return result.hasCsEvaluate; }
    }
    public global::CSEvaluate CsEvaluate {
      get { return result.CsEvaluate; }
      set { SetCsEvaluate(value); }
    }
    public Builder SetCsEvaluate(global::CSEvaluate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEvaluate = true;
      result.csEvaluate_ = value;
      return this;
    }
    public Builder SetCsEvaluate(global::CSEvaluate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEvaluate = true;
      result.csEvaluate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEvaluate(global::CSEvaluate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEvaluate &&
          result.csEvaluate_ != global::CSEvaluate.DefaultInstance) {
          result.csEvaluate_ = global::CSEvaluate.CreateBuilder(result.csEvaluate_).MergeFrom(value).BuildPartial();
      } else {
        result.csEvaluate_ = value;
      }
      result.hasCsEvaluate = true;
      return this;
    }
    public Builder ClearCsEvaluate() {
      PrepareBuilder();
      result.hasCsEvaluate = false;
      result.csEvaluate_ = null;
      return this;
    }
    
    public bool HasScEvaluate {
     get { return result.hasScEvaluate; }
    }
    public global::SCEvaluate ScEvaluate {
      get { return result.ScEvaluate; }
      set { SetScEvaluate(value); }
    }
    public Builder SetScEvaluate(global::SCEvaluate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEvaluate = true;
      result.scEvaluate_ = value;
      return this;
    }
    public Builder SetScEvaluate(global::SCEvaluate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEvaluate = true;
      result.scEvaluate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEvaluate(global::SCEvaluate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEvaluate &&
          result.scEvaluate_ != global::SCEvaluate.DefaultInstance) {
          result.scEvaluate_ = global::SCEvaluate.CreateBuilder(result.scEvaluate_).MergeFrom(value).BuildPartial();
      } else {
        result.scEvaluate_ = value;
      }
      result.hasScEvaluate = true;
      return this;
    }
    public Builder ClearScEvaluate() {
      PrepareBuilder();
      result.hasScEvaluate = false;
      result.scEvaluate_ = null;
      return this;
    }
    
    public bool HasCsVerifyCode {
     get { return result.hasCsVerifyCode; }
    }
    public global::CSVerifyCode CsVerifyCode {
      get { return result.CsVerifyCode; }
      set { SetCsVerifyCode(value); }
    }
    public Builder SetCsVerifyCode(global::CSVerifyCode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsVerifyCode = true;
      result.csVerifyCode_ = value;
      return this;
    }
    public Builder SetCsVerifyCode(global::CSVerifyCode.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsVerifyCode = true;
      result.csVerifyCode_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsVerifyCode(global::CSVerifyCode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsVerifyCode &&
          result.csVerifyCode_ != global::CSVerifyCode.DefaultInstance) {
          result.csVerifyCode_ = global::CSVerifyCode.CreateBuilder(result.csVerifyCode_).MergeFrom(value).BuildPartial();
      } else {
        result.csVerifyCode_ = value;
      }
      result.hasCsVerifyCode = true;
      return this;
    }
    public Builder ClearCsVerifyCode() {
      PrepareBuilder();
      result.hasCsVerifyCode = false;
      result.csVerifyCode_ = null;
      return this;
    }
    
    public bool HasScVerifyCode {
     get { return result.hasScVerifyCode; }
    }
    public global::SCVerifyCode ScVerifyCode {
      get { return result.ScVerifyCode; }
      set { SetScVerifyCode(value); }
    }
    public Builder SetScVerifyCode(global::SCVerifyCode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScVerifyCode = true;
      result.scVerifyCode_ = value;
      return this;
    }
    public Builder SetScVerifyCode(global::SCVerifyCode.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScVerifyCode = true;
      result.scVerifyCode_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScVerifyCode(global::SCVerifyCode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScVerifyCode &&
          result.scVerifyCode_ != global::SCVerifyCode.DefaultInstance) {
          result.scVerifyCode_ = global::SCVerifyCode.CreateBuilder(result.scVerifyCode_).MergeFrom(value).BuildPartial();
      } else {
        result.scVerifyCode_ = value;
      }
      result.hasScVerifyCode = true;
      return this;
    }
    public Builder ClearScVerifyCode() {
      PrepareBuilder();
      result.hasScVerifyCode = false;
      result.scVerifyCode_ = null;
      return this;
    }
    
    public bool HasCsBindMobile {
     get { return result.hasCsBindMobile; }
    }
    public global::CSBindMobile CsBindMobile {
      get { return result.CsBindMobile; }
      set { SetCsBindMobile(value); }
    }
    public Builder SetCsBindMobile(global::CSBindMobile value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsBindMobile = true;
      result.csBindMobile_ = value;
      return this;
    }
    public Builder SetCsBindMobile(global::CSBindMobile.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsBindMobile = true;
      result.csBindMobile_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsBindMobile(global::CSBindMobile value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsBindMobile &&
          result.csBindMobile_ != global::CSBindMobile.DefaultInstance) {
          result.csBindMobile_ = global::CSBindMobile.CreateBuilder(result.csBindMobile_).MergeFrom(value).BuildPartial();
      } else {
        result.csBindMobile_ = value;
      }
      result.hasCsBindMobile = true;
      return this;
    }
    public Builder ClearCsBindMobile() {
      PrepareBuilder();
      result.hasCsBindMobile = false;
      result.csBindMobile_ = null;
      return this;
    }
    
    public bool HasScBindMobile {
     get { return result.hasScBindMobile; }
    }
    public global::SCBindMobile ScBindMobile {
      get { return result.ScBindMobile; }
      set { SetScBindMobile(value); }
    }
    public Builder SetScBindMobile(global::SCBindMobile value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScBindMobile = true;
      result.scBindMobile_ = value;
      return this;
    }
    public Builder SetScBindMobile(global::SCBindMobile.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScBindMobile = true;
      result.scBindMobile_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScBindMobile(global::SCBindMobile value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScBindMobile &&
          result.scBindMobile_ != global::SCBindMobile.DefaultInstance) {
          result.scBindMobile_ = global::SCBindMobile.CreateBuilder(result.scBindMobile_).MergeFrom(value).BuildPartial();
      } else {
        result.scBindMobile_ = value;
      }
      result.hasScBindMobile = true;
      return this;
    }
    public Builder ClearScBindMobile() {
      PrepareBuilder();
      result.hasScBindMobile = false;
      result.scBindMobile_ = null;
      return this;
    }
    
    public bool HasCsEmkUserInfo {
     get { return result.hasCsEmkUserInfo; }
    }
    public global::CSEmkUserInfo CsEmkUserInfo {
      get { return result.CsEmkUserInfo; }
      set { SetCsEmkUserInfo(value); }
    }
    public Builder SetCsEmkUserInfo(global::CSEmkUserInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkUserInfo = true;
      result.csEmkUserInfo_ = value;
      return this;
    }
    public Builder SetCsEmkUserInfo(global::CSEmkUserInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkUserInfo = true;
      result.csEmkUserInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkUserInfo(global::CSEmkUserInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkUserInfo &&
          result.csEmkUserInfo_ != global::CSEmkUserInfo.DefaultInstance) {
          result.csEmkUserInfo_ = global::CSEmkUserInfo.CreateBuilder(result.csEmkUserInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkUserInfo_ = value;
      }
      result.hasCsEmkUserInfo = true;
      return this;
    }
    public Builder ClearCsEmkUserInfo() {
      PrepareBuilder();
      result.hasCsEmkUserInfo = false;
      result.csEmkUserInfo_ = null;
      return this;
    }
    
    public bool HasScEmkUserInfo {
     get { return result.hasScEmkUserInfo; }
    }
    public global::SCEmkUserInfo ScEmkUserInfo {
      get { return result.ScEmkUserInfo; }
      set { SetScEmkUserInfo(value); }
    }
    public Builder SetScEmkUserInfo(global::SCEmkUserInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEmkUserInfo = true;
      result.scEmkUserInfo_ = value;
      return this;
    }
    public Builder SetScEmkUserInfo(global::SCEmkUserInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEmkUserInfo = true;
      result.scEmkUserInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEmkUserInfo(global::SCEmkUserInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEmkUserInfo &&
          result.scEmkUserInfo_ != global::SCEmkUserInfo.DefaultInstance) {
          result.scEmkUserInfo_ = global::SCEmkUserInfo.CreateBuilder(result.scEmkUserInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.scEmkUserInfo_ = value;
      }
      result.hasScEmkUserInfo = true;
      return this;
    }
    public Builder ClearScEmkUserInfo() {
      PrepareBuilder();
      result.hasScEmkUserInfo = false;
      result.scEmkUserInfo_ = null;
      return this;
    }
    
    public bool HasCsEmkAddCardInfo {
     get { return result.hasCsEmkAddCardInfo; }
    }
    public global::CSEmkAddCardInfo CsEmkAddCardInfo {
      get { return result.CsEmkAddCardInfo; }
      set { SetCsEmkAddCardInfo(value); }
    }
    public Builder SetCsEmkAddCardInfo(global::CSEmkAddCardInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkAddCardInfo = true;
      result.csEmkAddCardInfo_ = value;
      return this;
    }
    public Builder SetCsEmkAddCardInfo(global::CSEmkAddCardInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkAddCardInfo = true;
      result.csEmkAddCardInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkAddCardInfo(global::CSEmkAddCardInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkAddCardInfo &&
          result.csEmkAddCardInfo_ != global::CSEmkAddCardInfo.DefaultInstance) {
          result.csEmkAddCardInfo_ = global::CSEmkAddCardInfo.CreateBuilder(result.csEmkAddCardInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkAddCardInfo_ = value;
      }
      result.hasCsEmkAddCardInfo = true;
      return this;
    }
    public Builder ClearCsEmkAddCardInfo() {
      PrepareBuilder();
      result.hasCsEmkAddCardInfo = false;
      result.csEmkAddCardInfo_ = null;
      return this;
    }
    
    public bool HasCsEmkAddFingerInfo {
     get { return result.hasCsEmkAddFingerInfo; }
    }
    public global::CSEmkAddFingerInfo CsEmkAddFingerInfo {
      get { return result.CsEmkAddFingerInfo; }
      set { SetCsEmkAddFingerInfo(value); }
    }
    public Builder SetCsEmkAddFingerInfo(global::CSEmkAddFingerInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkAddFingerInfo = true;
      result.csEmkAddFingerInfo_ = value;
      return this;
    }
    public Builder SetCsEmkAddFingerInfo(global::CSEmkAddFingerInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkAddFingerInfo = true;
      result.csEmkAddFingerInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkAddFingerInfo(global::CSEmkAddFingerInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkAddFingerInfo &&
          result.csEmkAddFingerInfo_ != global::CSEmkAddFingerInfo.DefaultInstance) {
          result.csEmkAddFingerInfo_ = global::CSEmkAddFingerInfo.CreateBuilder(result.csEmkAddFingerInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkAddFingerInfo_ = value;
      }
      result.hasCsEmkAddFingerInfo = true;
      return this;
    }
    public Builder ClearCsEmkAddFingerInfo() {
      PrepareBuilder();
      result.hasCsEmkAddFingerInfo = false;
      result.csEmkAddFingerInfo_ = null;
      return this;
    }
    
    public bool HasCsEmkApplyMember {
     get { return result.hasCsEmkApplyMember; }
    }
    public global::CSEmkApplyMember CsEmkApplyMember {
      get { return result.CsEmkApplyMember; }
      set { SetCsEmkApplyMember(value); }
    }
    public Builder SetCsEmkApplyMember(global::CSEmkApplyMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkApplyMember = true;
      result.csEmkApplyMember_ = value;
      return this;
    }
    public Builder SetCsEmkApplyMember(global::CSEmkApplyMember.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkApplyMember = true;
      result.csEmkApplyMember_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkApplyMember(global::CSEmkApplyMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkApplyMember &&
          result.csEmkApplyMember_ != global::CSEmkApplyMember.DefaultInstance) {
          result.csEmkApplyMember_ = global::CSEmkApplyMember.CreateBuilder(result.csEmkApplyMember_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkApplyMember_ = value;
      }
      result.hasCsEmkApplyMember = true;
      return this;
    }
    public Builder ClearCsEmkApplyMember() {
      PrepareBuilder();
      result.hasCsEmkApplyMember = false;
      result.csEmkApplyMember_ = null;
      return this;
    }
    
    public bool HasScEmkApplyMember {
     get { return result.hasScEmkApplyMember; }
    }
    public global::SCEmkApplyMember ScEmkApplyMember {
      get { return result.ScEmkApplyMember; }
      set { SetScEmkApplyMember(value); }
    }
    public Builder SetScEmkApplyMember(global::SCEmkApplyMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEmkApplyMember = true;
      result.scEmkApplyMember_ = value;
      return this;
    }
    public Builder SetScEmkApplyMember(global::SCEmkApplyMember.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEmkApplyMember = true;
      result.scEmkApplyMember_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEmkApplyMember(global::SCEmkApplyMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEmkApplyMember &&
          result.scEmkApplyMember_ != global::SCEmkApplyMember.DefaultInstance) {
          result.scEmkApplyMember_ = global::SCEmkApplyMember.CreateBuilder(result.scEmkApplyMember_).MergeFrom(value).BuildPartial();
      } else {
        result.scEmkApplyMember_ = value;
      }
      result.hasScEmkApplyMember = true;
      return this;
    }
    public Builder ClearScEmkApplyMember() {
      PrepareBuilder();
      result.hasScEmkApplyMember = false;
      result.scEmkApplyMember_ = null;
      return this;
    }
    
    public bool HasCsEmkCharge {
     get { return result.hasCsEmkCharge; }
    }
    public global::CSEmkCharge CsEmkCharge {
      get { return result.CsEmkCharge; }
      set { SetCsEmkCharge(value); }
    }
    public Builder SetCsEmkCharge(global::CSEmkCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkCharge = true;
      result.csEmkCharge_ = value;
      return this;
    }
    public Builder SetCsEmkCharge(global::CSEmkCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkCharge = true;
      result.csEmkCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkCharge(global::CSEmkCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkCharge &&
          result.csEmkCharge_ != global::CSEmkCharge.DefaultInstance) {
          result.csEmkCharge_ = global::CSEmkCharge.CreateBuilder(result.csEmkCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkCharge_ = value;
      }
      result.hasCsEmkCharge = true;
      return this;
    }
    public Builder ClearCsEmkCharge() {
      PrepareBuilder();
      result.hasCsEmkCharge = false;
      result.csEmkCharge_ = null;
      return this;
    }
    
    public bool HasScEmkCharge {
     get { return result.hasScEmkCharge; }
    }
    public global::SCEmkCharge ScEmkCharge {
      get { return result.ScEmkCharge; }
      set { SetScEmkCharge(value); }
    }
    public Builder SetScEmkCharge(global::SCEmkCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEmkCharge = true;
      result.scEmkCharge_ = value;
      return this;
    }
    public Builder SetScEmkCharge(global::SCEmkCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEmkCharge = true;
      result.scEmkCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEmkCharge(global::SCEmkCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEmkCharge &&
          result.scEmkCharge_ != global::SCEmkCharge.DefaultInstance) {
          result.scEmkCharge_ = global::SCEmkCharge.CreateBuilder(result.scEmkCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.scEmkCharge_ = value;
      }
      result.hasScEmkCharge = true;
      return this;
    }
    public Builder ClearScEmkCharge() {
      PrepareBuilder();
      result.hasScEmkCharge = false;
      result.scEmkCharge_ = null;
      return this;
    }
    
    public bool HasCsEmkCheckin {
     get { return result.hasCsEmkCheckin; }
    }
    public global::CSEmkCheckin CsEmkCheckin {
      get { return result.CsEmkCheckin; }
      set { SetCsEmkCheckin(value); }
    }
    public Builder SetCsEmkCheckin(global::CSEmkCheckin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkCheckin = true;
      result.csEmkCheckin_ = value;
      return this;
    }
    public Builder SetCsEmkCheckin(global::CSEmkCheckin.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkCheckin = true;
      result.csEmkCheckin_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkCheckin(global::CSEmkCheckin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkCheckin &&
          result.csEmkCheckin_ != global::CSEmkCheckin.DefaultInstance) {
          result.csEmkCheckin_ = global::CSEmkCheckin.CreateBuilder(result.csEmkCheckin_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkCheckin_ = value;
      }
      result.hasCsEmkCheckin = true;
      return this;
    }
    public Builder ClearCsEmkCheckin() {
      PrepareBuilder();
      result.hasCsEmkCheckin = false;
      result.csEmkCheckin_ = null;
      return this;
    }
    
    public bool HasScEmkCheckin {
     get { return result.hasScEmkCheckin; }
    }
    public global::SCEmkCheckin ScEmkCheckin {
      get { return result.ScEmkCheckin; }
      set { SetScEmkCheckin(value); }
    }
    public Builder SetScEmkCheckin(global::SCEmkCheckin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEmkCheckin = true;
      result.scEmkCheckin_ = value;
      return this;
    }
    public Builder SetScEmkCheckin(global::SCEmkCheckin.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEmkCheckin = true;
      result.scEmkCheckin_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEmkCheckin(global::SCEmkCheckin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEmkCheckin &&
          result.scEmkCheckin_ != global::SCEmkCheckin.DefaultInstance) {
          result.scEmkCheckin_ = global::SCEmkCheckin.CreateBuilder(result.scEmkCheckin_).MergeFrom(value).BuildPartial();
      } else {
        result.scEmkCheckin_ = value;
      }
      result.hasScEmkCheckin = true;
      return this;
    }
    public Builder ClearScEmkCheckin() {
      PrepareBuilder();
      result.hasScEmkCheckin = false;
      result.scEmkCheckin_ = null;
      return this;
    }
    
    public bool HasCsEmkCheckout {
     get { return result.hasCsEmkCheckout; }
    }
    public global::CSEmkCheckout CsEmkCheckout {
      get { return result.CsEmkCheckout; }
      set { SetCsEmkCheckout(value); }
    }
    public Builder SetCsEmkCheckout(global::CSEmkCheckout value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkCheckout = true;
      result.csEmkCheckout_ = value;
      return this;
    }
    public Builder SetCsEmkCheckout(global::CSEmkCheckout.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkCheckout = true;
      result.csEmkCheckout_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkCheckout(global::CSEmkCheckout value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkCheckout &&
          result.csEmkCheckout_ != global::CSEmkCheckout.DefaultInstance) {
          result.csEmkCheckout_ = global::CSEmkCheckout.CreateBuilder(result.csEmkCheckout_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkCheckout_ = value;
      }
      result.hasCsEmkCheckout = true;
      return this;
    }
    public Builder ClearCsEmkCheckout() {
      PrepareBuilder();
      result.hasCsEmkCheckout = false;
      result.csEmkCheckout_ = null;
      return this;
    }
    
    public bool HasScEmkCheckout {
     get { return result.hasScEmkCheckout; }
    }
    public global::SCEmkCheckout ScEmkCheckout {
      get { return result.ScEmkCheckout; }
      set { SetScEmkCheckout(value); }
    }
    public Builder SetScEmkCheckout(global::SCEmkCheckout value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEmkCheckout = true;
      result.scEmkCheckout_ = value;
      return this;
    }
    public Builder SetScEmkCheckout(global::SCEmkCheckout.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEmkCheckout = true;
      result.scEmkCheckout_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEmkCheckout(global::SCEmkCheckout value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEmkCheckout &&
          result.scEmkCheckout_ != global::SCEmkCheckout.DefaultInstance) {
          result.scEmkCheckout_ = global::SCEmkCheckout.CreateBuilder(result.scEmkCheckout_).MergeFrom(value).BuildPartial();
      } else {
        result.scEmkCheckout_ = value;
      }
      result.hasScEmkCheckout = true;
      return this;
    }
    public Builder ClearScEmkCheckout() {
      PrepareBuilder();
      result.hasScEmkCheckout = false;
      result.scEmkCheckout_ = null;
      return this;
    }
    
    public bool HasCsEmkCancel {
     get { return result.hasCsEmkCancel; }
    }
    public global::CSEmkCancel CsEmkCancel {
      get { return result.CsEmkCancel; }
      set { SetCsEmkCancel(value); }
    }
    public Builder SetCsEmkCancel(global::CSEmkCancel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkCancel = true;
      result.csEmkCancel_ = value;
      return this;
    }
    public Builder SetCsEmkCancel(global::CSEmkCancel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkCancel = true;
      result.csEmkCancel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkCancel(global::CSEmkCancel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkCancel &&
          result.csEmkCancel_ != global::CSEmkCancel.DefaultInstance) {
          result.csEmkCancel_ = global::CSEmkCancel.CreateBuilder(result.csEmkCancel_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkCancel_ = value;
      }
      result.hasCsEmkCancel = true;
      return this;
    }
    public Builder ClearCsEmkCancel() {
      PrepareBuilder();
      result.hasCsEmkCancel = false;
      result.csEmkCancel_ = null;
      return this;
    }
    
    public bool HasScEmkVerifyList {
     get { return result.hasScEmkVerifyList; }
    }
    public global::SCEmkVerifyList ScEmkVerifyList {
      get { return result.ScEmkVerifyList; }
      set { SetScEmkVerifyList(value); }
    }
    public Builder SetScEmkVerifyList(global::SCEmkVerifyList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEmkVerifyList = true;
      result.scEmkVerifyList_ = value;
      return this;
    }
    public Builder SetScEmkVerifyList(global::SCEmkVerifyList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEmkVerifyList = true;
      result.scEmkVerifyList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEmkVerifyList(global::SCEmkVerifyList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEmkVerifyList &&
          result.scEmkVerifyList_ != global::SCEmkVerifyList.DefaultInstance) {
          result.scEmkVerifyList_ = global::SCEmkVerifyList.CreateBuilder(result.scEmkVerifyList_).MergeFrom(value).BuildPartial();
      } else {
        result.scEmkVerifyList_ = value;
      }
      result.hasScEmkVerifyList = true;
      return this;
    }
    public Builder ClearScEmkVerifyList() {
      PrepareBuilder();
      result.hasScEmkVerifyList = false;
      result.scEmkVerifyList_ = null;
      return this;
    }
    
    public bool HasCsEmkVerifyProc {
     get { return result.hasCsEmkVerifyProc; }
    }
    public global::CSEmkVerifyProc CsEmkVerifyProc {
      get { return result.CsEmkVerifyProc; }
      set { SetCsEmkVerifyProc(value); }
    }
    public Builder SetCsEmkVerifyProc(global::CSEmkVerifyProc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkVerifyProc = true;
      result.csEmkVerifyProc_ = value;
      return this;
    }
    public Builder SetCsEmkVerifyProc(global::CSEmkVerifyProc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkVerifyProc = true;
      result.csEmkVerifyProc_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkVerifyProc(global::CSEmkVerifyProc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkVerifyProc &&
          result.csEmkVerifyProc_ != global::CSEmkVerifyProc.DefaultInstance) {
          result.csEmkVerifyProc_ = global::CSEmkVerifyProc.CreateBuilder(result.csEmkVerifyProc_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkVerifyProc_ = value;
      }
      result.hasCsEmkVerifyProc = true;
      return this;
    }
    public Builder ClearCsEmkVerifyProc() {
      PrepareBuilder();
      result.hasCsEmkVerifyProc = false;
      result.csEmkVerifyProc_ = null;
      return this;
    }
    
    public bool HasScEmkOrderList {
     get { return result.hasScEmkOrderList; }
    }
    public global::SCEmkOrderList ScEmkOrderList {
      get { return result.ScEmkOrderList; }
      set { SetScEmkOrderList(value); }
    }
    public Builder SetScEmkOrderList(global::SCEmkOrderList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEmkOrderList = true;
      result.scEmkOrderList_ = value;
      return this;
    }
    public Builder SetScEmkOrderList(global::SCEmkOrderList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEmkOrderList = true;
      result.scEmkOrderList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEmkOrderList(global::SCEmkOrderList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEmkOrderList &&
          result.scEmkOrderList_ != global::SCEmkOrderList.DefaultInstance) {
          result.scEmkOrderList_ = global::SCEmkOrderList.CreateBuilder(result.scEmkOrderList_).MergeFrom(value).BuildPartial();
      } else {
        result.scEmkOrderList_ = value;
      }
      result.hasScEmkOrderList = true;
      return this;
    }
    public Builder ClearScEmkOrderList() {
      PrepareBuilder();
      result.hasScEmkOrderList = false;
      result.scEmkOrderList_ = null;
      return this;
    }
    
    public bool HasCsEmkOrderProc {
     get { return result.hasCsEmkOrderProc; }
    }
    public global::CSEmkOrderProc CsEmkOrderProc {
      get { return result.CsEmkOrderProc; }
      set { SetCsEmkOrderProc(value); }
    }
    public Builder SetCsEmkOrderProc(global::CSEmkOrderProc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkOrderProc = true;
      result.csEmkOrderProc_ = value;
      return this;
    }
    public Builder SetCsEmkOrderProc(global::CSEmkOrderProc.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkOrderProc = true;
      result.csEmkOrderProc_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkOrderProc(global::CSEmkOrderProc value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkOrderProc &&
          result.csEmkOrderProc_ != global::CSEmkOrderProc.DefaultInstance) {
          result.csEmkOrderProc_ = global::CSEmkOrderProc.CreateBuilder(result.csEmkOrderProc_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkOrderProc_ = value;
      }
      result.hasCsEmkOrderProc = true;
      return this;
    }
    public Builder ClearCsEmkOrderProc() {
      PrepareBuilder();
      result.hasCsEmkOrderProc = false;
      result.csEmkOrderProc_ = null;
      return this;
    }
  }
  static MessageContent() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
