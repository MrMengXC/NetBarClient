// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class CoreProtocol {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_MessagePack__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MessagePack, global::MessagePack.Builder> internal__static_MessagePack__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MessageContent__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MessageContent, global::MessageContent.Builder> internal__static_MessageContent__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CLAskServer__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CLAskServer, global::CLAskServer.Builder> internal__static_CLAskServer__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_LCRetServer__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::LCRetServer, global::LCRetServer.Builder> internal__static_LCRetServer__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAuthen__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAuthen, global::CSAuthen.Builder> internal__static_CSAuthen__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCAuthen__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCAuthen, global::SCAuthen.Builder> internal__static_SCAuthen__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSLogin__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSLogin, global::CSLogin.Builder> internal__static_CSLogin__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCLogin__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCLogin, global::SCLogin.Builder> internal__static_SCLogin__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCAccountInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCAccountInfo, global::SCAccountInfo.Builder> internal__static_SCAccountInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCRealtimeInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCRealtimeInfo, global::SCRealtimeInfo.Builder> internal__static_SCRealtimeInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCommand__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCommand, global::CSCommand.Builder> internal__static_CSCommand__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSLog__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSLog, global::CSLog.Builder> internal__static_CSLog__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCLog__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCLog, global::SCLog.Builder> internal__static_SCLog__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCCallList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCCallList, global::SCCallList.Builder> internal__static_SCCallList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCallProcess__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCallProcess, global::CSCallProcess.Builder> internal__static_CSCallProcess__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCRoleList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCRoleList, global::SCRoleList.Builder> internal__static_SCRoleList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSRoleAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSRoleAdd, global::CSRoleAdd.Builder> internal__static_CSRoleAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCRoleAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCRoleAdd, global::SCRoleAdd.Builder> internal__static_SCRoleAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSRoleDel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSRoleDel, global::CSRoleDel.Builder> internal__static_CSRoleDel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSRoleUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSRoleUpdate, global::CSRoleUpdate.Builder> internal__static_CSRoleUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSRoleRights__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSRoleRights, global::CSRoleRights.Builder> internal__static_CSRoleRights__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCAccountList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCAccountList, global::SCAccountList.Builder> internal__static_SCAccountList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAccountAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAccountAdd, global::CSAccountAdd.Builder> internal__static_CSAccountAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAccountDel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAccountDel, global::CSAccountDel.Builder> internal__static_CSAccountDel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAccountUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAccountUpdate, global::CSAccountUpdate.Builder> internal__static_CSAccountUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAccountSnsSet__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAccountSnsSet, global::CSAccountSnsSet.Builder> internal__static_CSAccountSnsSet__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSStaffComment__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSStaffComment, global::CSStaffComment.Builder> internal__static_CSStaffComment__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCStaffComment__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCStaffComment, global::SCStaffComment.Builder> internal__static_SCStaffComment__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSStaffPerform__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSStaffPerform, global::CSStaffPerform.Builder> internal__static_CSStaffPerform__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCStaffPerform__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCStaffPerform, global::SCStaffPerform.Builder> internal__static_SCStaffPerform__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEarning__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEarning, global::CSEarning.Builder> internal__static_CSEarning__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEarning__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEarning, global::SCEarning.Builder> internal__static_SCEarning__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCComputerList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCComputerList, global::SCComputerList.Builder> internal__static_SCComputerList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSComputerAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSComputerAdd, global::CSComputerAdd.Builder> internal__static_CSComputerAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSComputerDel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSComputerDel, global::CSComputerDel.Builder> internal__static_CSComputerDel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSComputerUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSComputerUpdate, global::CSComputerUpdate.Builder> internal__static_CSComputerUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSComputerFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSComputerFind, global::CSComputerFind.Builder> internal__static_CSComputerFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCComputerFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCComputerFind, global::SCComputerFind.Builder> internal__static_SCComputerFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberList, global::CSMemberList.Builder> internal__static_CSMemberList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCMemberList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCMemberList, global::SCMemberList.Builder> internal__static_SCMemberList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberAdd, global::CSMemberAdd.Builder> internal__static_CSMemberAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCMemberAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCMemberAdd, global::SCMemberAdd.Builder> internal__static_SCMemberAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberDel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberDel, global::CSMemberDel.Builder> internal__static_CSMemberDel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberUpdateStatus__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberUpdateStatus, global::CSMemberUpdateStatus.Builder> internal__static_CSMemberUpdateStatus__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberFind, global::CSMemberFind.Builder> internal__static_CSMemberFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCMemberFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCMemberFind, global::SCMemberFind.Builder> internal__static_SCMemberFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberCardInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberCardInfo, global::CSMemberCardInfo.Builder> internal__static_CSMemberCardInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCMemberCardInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCMemberCardInfo, global::SCMemberCardInfo.Builder> internal__static_SCMemberCardInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberConsumRecord__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberConsumRecord, global::CSMemberConsumRecord.Builder> internal__static_CSMemberConsumRecord__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCMemberConsumRecord__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCMemberConsumRecord, global::SCMemberConsumRecord.Builder> internal__static_SCMemberConsumRecord__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberConsumFilter__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberConsumFilter, global::CSMemberConsumFilter.Builder> internal__static_CSMemberConsumFilter__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCMemberConsumFilter__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCMemberConsumFilter, global::SCMemberConsumFilter.Builder> internal__static_SCMemberConsumFilter__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSysBillList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSysBillList, global::SCSysBillList.Builder> internal__static_SCSysBillList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSysBillUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSysBillUpdate, global::CSSysBillUpdate.Builder> internal__static_CSSysBillUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSysBillUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSysBillUpdate, global::SCSysBillUpdate.Builder> internal__static_SCSysBillUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSysInto__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSysInto, global::CSSysInto.Builder> internal__static_CSSysInto__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSysInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSysInfo, global::SCSysInfo.Builder> internal__static_SCSysInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAddSysInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAddSysInfo, global::CSAddSysInfo.Builder> internal__static_CSAddSysInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSDelSysInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSDelSysInfo, global::CSDelSysInfo.Builder> internal__static_CSDelSysInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSUpdateSysInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSUpdateSysInfo, global::CSUpdateSysInfo.Builder> internal__static_CSUpdateSysInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkCheckin__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkCheckin, global::CSEmkCheckin.Builder> internal__static_CSEmkCheckin__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmkCheckin__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmkCheckin, global::SCEmkCheckin.Builder> internal__static_SCEmkCheckin__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkCheckout__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkCheckout, global::CSEmkCheckout.Builder> internal__static_CSEmkCheckout__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmkCheckout__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmkCheckout, global::SCEmkCheckout.Builder> internal__static_SCEmkCheckout__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkRecord__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkRecord, global::CSEmkRecord.Builder> internal__static_CSEmkRecord__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmkRecord__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmkRecord, global::SCEmkRecord.Builder> internal__static_SCEmkRecord__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmkRecordFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmkRecordFind, global::CSEmkRecordFind.Builder> internal__static_CSEmkRecordFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmkRecordFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmkRecordFind, global::SCEmkRecordFind.Builder> internal__static_SCEmkRecordFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGoodsAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGoodsAdd, global::CSGoodsAdd.Builder> internal__static_CSGoodsAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGoodsDel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGoodsDel, global::CSGoodsDel.Builder> internal__static_CSGoodsDel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGoodsUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGoodsUpdate, global::CSGoodsUpdate.Builder> internal__static_CSGoodsUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGoodsFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGoodsFind, global::CSGoodsFind.Builder> internal__static_CSGoodsFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCGoodsFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCGoodsFind, global::SCGoodsFind.Builder> internal__static_SCGoodsFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGoodsStock__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGoodsStock, global::CSGoodsStock.Builder> internal__static_CSGoodsStock__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCGoodsStock__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCGoodsStock, global::SCGoodsStock.Builder> internal__static_SCGoodsStock__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSalesRecord__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSalesRecord, global::CSSalesRecord.Builder> internal__static_CSSalesRecord__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSalesRecord__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSalesRecord, global::SCSalesRecord.Builder> internal__static_SCSalesRecord__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSalesTop__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSalesTop, global::CSSalesTop.Builder> internal__static_CSSalesTop__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSalesTop__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSalesTop, global::SCSalesTop.Builder> internal__static_SCSalesTop__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSOrderList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSOrderList, global::CSOrderList.Builder> internal__static_CSOrderList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCOrderList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCOrderList, global::SCOrderList.Builder> internal__static_SCOrderList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSOrderDetail__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSOrderDetail, global::CSOrderDetail.Builder> internal__static_CSOrderDetail__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCOrderDetail__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCOrderDetail, global::SCOrderDetail.Builder> internal__static_SCOrderDetail__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSOrderProcess__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSOrderProcess, global::CSOrderProcess.Builder> internal__static_CSOrderProcess__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCShiftDeliveredBy__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCShiftDeliveredBy, global::SCShiftDeliveredBy.Builder> internal__static_SCShiftDeliveredBy__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSShiftAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSShiftAdd, global::CSShiftAdd.Builder> internal__static_CSShiftAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSShiftFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSShiftFind, global::CSShiftFind.Builder> internal__static_CSShiftFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCShiftFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCShiftFind, global::SCShiftFind.Builder> internal__static_SCShiftFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSReconnect__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSReconnect, global::CSReconnect.Builder> internal__static_CSReconnect__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCReconnect__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCReconnect, global::SCReconnect.Builder> internal__static_SCReconnect__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSClientOpen__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSClientOpen, global::CSClientOpen.Builder> internal__static_CSClientOpen__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSClientClose__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSClientClose, global::CSClientClose.Builder> internal__static_CSClientClose__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSLogon__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSLogon, global::CSLogon.Builder> internal__static_CSLogon__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCLogon__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCLogon, global::SCLogon.Builder> internal__static_SCLogon__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSLogoff__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSLogoff, global::CSLogoff.Builder> internal__static_CSLogoff__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCLogoff__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCLogoff, global::SCLogoff.Builder> internal__static_SCLogoff__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSHungup__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSHungup, global::CSHungup.Builder> internal__static_CSHungup__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPreCharge__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPreCharge, global::CSPreCharge.Builder> internal__static_CSPreCharge__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPreCharge__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPreCharge, global::SCPreCharge.Builder> internal__static_SCPreCharge__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCToCharge__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCToCharge, global::SCToCharge.Builder> internal__static_SCToCharge__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCartAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCartAdd, global::CSCartAdd.Builder> internal__static_CSCartAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCartDel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCartDel, global::CSCartDel.Builder> internal__static_CSCartDel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPreBuy__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPreBuy, global::CSPreBuy.Builder> internal__static_CSPreBuy__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPreBuy__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPreBuy, global::SCPreBuy.Builder> internal__static_SCPreBuy__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCToBuy__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCToBuy, global::SCToBuy.Builder> internal__static_SCToBuy__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSysMessage__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSysMessage, global::SCSysMessage.Builder> internal__static_SCSysMessage__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEvaluate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEvaluate, global::CSEvaluate.Builder> internal__static_CSEvaluate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEvaluate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEvaluate, global::SCEvaluate.Builder> internal__static_SCEvaluate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSVerifyCode__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSVerifyCode, global::CSVerifyCode.Builder> internal__static_CSVerifyCode__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCVerifyCode__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCVerifyCode, global::SCVerifyCode.Builder> internal__static_SCVerifyCode__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSBindMobile__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSBindMobile, global::CSBindMobile.Builder> internal__static_CSBindMobile__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCBindMobile__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCBindMobile, global::SCBindMobile.Builder> internal__static_SCBindMobile__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static CoreProtocol() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChJDb3JlUHJvdG9jb2wucHJvdG8aEEJhc2VTdHJ1Y3QucHJvdG8iZgoLTWVz", 
          "c2FnZVBhY2sSEQoDY21kGAEgAigOMgQuQ21kEg8KB3ZlcnNpb24YAiABKAUS", 
          "EQoJc2Vzc2lvbklkGAMgASgFEiAKB2NvbnRlbnQYBCABKAsyDy5NZXNzYWdl", 
          "Q29udGVudCKQIAoOTWVzc2FnZUNvbnRlbnQSEwoLbWVzc2FnZVR5cGUYASAC", 
          "KAUSIQoIZXJyb3JUaXAYAiABKAsyDy5TdHJ1Y3RFcnJvclRpcBIhCgtjbEFz", 
          "a1NlcnZlchgDIAEoCzIMLkNMQXNrU2VydmVyEiEKC2xjUmV0U2VydmVyGAQg", 
          "ASgLMgwuTENSZXRTZXJ2ZXISGwoIY3NBdXRoZW4YBSABKAsyCS5DU0F1dGhl", 
          "bhIbCghzY0F1dGhlbhgGIAEoCzIJLlNDQXV0aGVuEhkKB2NzTG9naW4YByAB", 
          "KAsyCC5DU0xvZ2luEhkKB3NjTG9naW4YCCABKAsyCC5TQ0xvZ2luEh8KCnNj", 
          "Q2FsbExpc3QYCSABKAsyCy5TQ0NhbGxMaXN0EiUKDWNzQ2FsbFByb2Nlc3MY", 
          "CiABKAsyDi5DU0NhbGxQcm9jZXNzEiUKDXNjQWNjb3VudEluZm8YCyABKAsy", 
          "Di5TQ0FjY291bnRJbmZvEicKDnNjUmVhbHRpbWVJbmZvGAwgASgLMg8uU0NS", 
          "ZWFsdGltZUluZm8SHQoJY3NDb21tYW5kGA0gASgLMgouQ1NDb21tYW5kEhUK", 
          "BWNzTG9nGA4gASgLMgYuQ1NMb2cSFQoFc2NMb2cYDyABKAsyBi5TQ0xvZxIf", 
          "CgpzY1JvbGVMaXN0GBAgASgLMgsuU0NSb2xlTGlzdBIdCgljc1JvbGVBZGQY", 
          "ESABKAsyCi5DU1JvbGVBZGQSHQoJc2NSb2xlQWRkGBIgASgLMgouU0NSb2xl", 
          "QWRkEh0KCWNzUm9sZURlbBgTIAEoCzIKLkNTUm9sZURlbBIjCgxjc1JvbGVV", 
          "cGRhdGUYFCABKAsyDS5DU1JvbGVVcGRhdGUSIwoMY3NSb2xlUmlnaHRzGBUg", 
          "ASgLMg0uQ1NSb2xlUmlnaHRzEiUKDXNjQWNjb3VudExpc3QYFiABKAsyDi5T", 
          "Q0FjY291bnRMaXN0EiMKDGNzQWNjb3VudEFkZBgXIAEoCzINLkNTQWNjb3Vu", 
          "dEFkZBIjCgxjc0FjY291bnREZWwYGCABKAsyDS5DU0FjY291bnREZWwSKQoP", 
          "Y3NBY2NvdW50VXBkYXRlGBkgASgLMhAuQ1NBY2NvdW50VXBkYXRlEikKD2Nz", 
          "QWNjb3VudFNuc1NldBgaIAEoCzIQLkNTQWNjb3VudFNuc1NldBInCg5jc1N0", 
          "YWZmQ29tbWVudBgbIAEoCzIPLkNTU3RhZmZDb21tZW50EicKDnNjU3RhZmZD", 
          "b21tZW50GBwgASgLMg8uU0NTdGFmZkNvbW1lbnQSJwoOY3NTdGFmZlBlcmZv", 
          "cm0YHSABKAsyDy5DU1N0YWZmUGVyZm9ybRInCg5zY1N0YWZmUGVyZm9ybRge", 
          "IAEoCzIPLlNDU3RhZmZQZXJmb3JtEh0KCWNzRWFybmluZxghIAEoCzIKLkNT", 
          "RWFybmluZxIdCglzY0Vhcm5pbmcYIiABKAsyCi5TQ0Vhcm5pbmcSJwoOc2ND", 
          "b21wdXRlckxpc3QYIyABKAsyDy5TQ0NvbXB1dGVyTGlzdBIlCg1jc0NvbXB1", 
          "dGVyQWRkGCQgASgLMg4uQ1NDb21wdXRlckFkZBIlCg1jc0NvbXB1dGVyRGVs", 
          "GCUgASgLMg4uQ1NDb21wdXRlckRlbBIrChBjc0NvbXB1dGVyVXBkYXRlGCYg", 
          "ASgLMhEuQ1NDb21wdXRlclVwZGF0ZRInCg5jc0NvbXB1dGVyRmluZBgnIAEo", 
          "CzIPLkNTQ29tcHV0ZXJGaW5kEicKDnNjQ29tcHV0ZXJGaW5kGCggASgLMg8u", 
          "U0NDb21wdXRlckZpbmQSIwoMY3NNZW1iZXJMaXN0GCkgASgLMg0uQ1NNZW1i", 
          "ZXJMaXN0EiMKDHNjTWVtYmVyTGlzdBgqIAEoCzINLlNDTWVtYmVyTGlzdBIh", 
          "Cgtjc01lbWJlckFkZBgrIAEoCzIMLkNTTWVtYmVyQWRkEiEKC3NjTWVtYmVy", 
          "QWRkGCwgASgLMgwuU0NNZW1iZXJBZGQSIQoLY3NNZW1iZXJEZWwYLSABKAsy", 
          "DC5DU01lbWJlckRlbBItCg5jc01lbWJlclVwZGF0ZRguIAEoCzIVLkNTTWVt", 
          "YmVyVXBkYXRlU3RhdHVzEiMKDGNzTWVtYmVyRmluZBgvIAEoCzINLkNTTWVt", 
          "YmVyRmluZBIjCgxzY01lbWJlckZpbmQYMCABKAsyDS5TQ01lbWJlckZpbmQS", 
          "KwoQY3NNZW1iZXJDYXJkSW5mbxgxIAEoCzIRLkNTTWVtYmVyQ2FyZEluZm8S", 
          "KwoQc2NNZW1iZXJDYXJkSW5mbxgyIAEoCzIRLlNDTWVtYmVyQ2FyZEluZm8S", 
          "MwoUY3NNZW1iZXJDb25zdW1SZWNvcmQYMyABKAsyFS5DU01lbWJlckNvbnN1", 
          "bVJlY29yZBIzChRzY01lbWJlckNvbnN1bVJlY29yZBg0IAEoCzIVLlNDTWVt", 
          "YmVyQ29uc3VtUmVjb3JkEjMKFGNzTWVtYmVyQ29uc3VtRmlsdGVyGDUgASgL", 
          "MhUuQ1NNZW1iZXJDb25zdW1GaWx0ZXISMwoUc2NNZW1iZXJDb25zdW1GaWx0", 
          "ZXIYNiABKAsyFS5TQ01lbWJlckNvbnN1bUZpbHRlchIlCg1zY1N5c0JpbGxM", 
          "aXN0GDcgASgLMg4uU0NTeXNCaWxsTGlzdBIpCg9jc1N5c0JpbGxVcGRhdGUY", 
          "OCABKAsyEC5DU1N5c0JpbGxVcGRhdGUSKQoPc2NTeXNCaWxsVXBkYXRlGDkg", 
          "ASgLMhAuU0NTeXNCaWxsVXBkYXRlEh0KCWNzU3lzSW5mbxg6IAEoCzIKLkNT", 
          "U3lzSW50bxIdCglzY1N5c0luZm8YOyABKAsyCi5TQ1N5c0luZm8SIwoMY3NB", 
          "ZGRTeXNJbmZvGDwgASgLMg0uQ1NBZGRTeXNJbmZvEiMKDGNzRGVsU3lzSW5m", 
          "bxg9IAEoCzINLkNTRGVsU3lzSW5mbxIpCg9jc1VwZGF0ZVN5c0luZm8YPiAB", 
          "KAsyEC5DU1VwZGF0ZVN5c0luZm8SIwoMY3NFbWtDaGVja2luGD8gASgLMg0u", 
          "Q1NFbWtDaGVja2luEiMKDHNjRW1rQ2hlY2tpbhhAIAEoCzINLlNDRW1rQ2hl", 
          "Y2tpbhIlCg1jc0Vta0NoZWNrb3V0GEEgASgLMg4uQ1NFbWtDaGVja291dBIl", 
          "Cg1zY0Vta0NoZWNrb3V0GEIgASgLMg4uU0NFbWtDaGVja291dBIhCgtjc0Vt", 
          "a1JlY29yZBhDIAEoCzIMLkNTRW1rUmVjb3JkEiEKC3NjRW1rUmVjb3JkGEQg", 
          "ASgLMgwuU0NFbWtSZWNvcmQSKQoPY3NFbWtSZWNvcmRGaW5kGEUgASgLMhAu", 
          "Q1NFbWtSZWNvcmRGaW5kEikKD3NjRW1rUmVjb3JkRmluZBhGIAEoCzIQLlND", 
          "RW1rUmVjb3JkRmluZBIhCgtjc0dvb2RzRmluZBhHIAEoCzIMLkNTR29vZHNG", 
          "aW5kEiEKC3NjR29vZHNGaW5kGEggASgLMgwuU0NHb29kc0ZpbmQSHwoKY3NH", 
          "b29kc0FkZBhJIAEoCzILLkNTR29vZHNBZGQSHwoKY3NHb29kc0RlbBhKIAEo", 
          "CzILLkNTR29vZHNEZWwSJQoNY3NHb29kc1VwZGF0ZRhLIAEoCzIOLkNTR29v", 
          "ZHNVcGRhdGUSIwoMY3NHb29kc1N0b2NrGEwgASgLMg0uQ1NHb29kc1N0b2Nr", 
          "EiMKDHNjR29vZHNTdG9jaxhNIAEoCzINLlNDR29vZHNTdG9jaxIlCg1jc1Nh", 
          "bGVzUmVjb3JkGE4gASgLMg4uQ1NTYWxlc1JlY29yZBIlCg1zY1NhbGVzUmVj", 
          "b3JkGE8gASgLMg4uU0NTYWxlc1JlY29yZBIfCgpjc1NhbGVzVG9wGFAgASgL", 
          "MgsuQ1NTYWxlc1RvcBIfCgpzY1NhbGVzVG9wGFEgASgLMgsuU0NTYWxlc1Rv", 
          "cBIhCgtjc09yZGVyTGlzdBhSIAEoCzIMLkNTT3JkZXJMaXN0EiEKC3NjT3Jk", 
          "ZXJMaXN0GFMgASgLMgwuU0NPcmRlckxpc3QSJQoNY3NPcmRlckRldGFpbBhU", 
          "IAEoCzIOLkNTT3JkZXJEZXRhaWwSJQoNc2NPcmRlckRldGFpbBhVIAEoCzIO", 
          "LlNDT3JkZXJEZXRhaWwSJwoOY3NPcmRlclByb2Nlc3MYViABKAsyDy5DU09y", 
          "ZGVyUHJvY2VzcxIvChJzY1NoaWZ0RGVsaXZlcmVkQnkYVyABKAsyEy5TQ1No", 
          "aWZ0RGVsaXZlcmVkQnkSHwoKY3NTaGlmdEFkZBhYIAEoCzILLkNTU2hpZnRB", 
          "ZGQSIQoLY3NTaGlmdEZpbmQYWSABKAsyDC5DU1NoaWZ0RmluZBIhCgtzY1No", 
          "aWZ0RmluZBhaIAEoCzIMLlNDU2hpZnRGaW5kEiEKC2NzUmVjb25uZWN0GFsg", 
          "ASgLMgwuQ1NSZWNvbm5lY3QSIQoLc2NSZWNvbm5lY3QYXCABKAsyDC5TQ1Jl", 
          "Y29ubmVjdBIkCgxjc0NsaWVudE9wZW4YyAEgASgLMg0uQ1NDbGllbnRPcGVu", 
          "EiYKDWNzQ2xpZW50Q2xvc2UYyQEgASgLMg4uQ1NDbGllbnRDbG9zZRIaCgdj", 
          "c0xvZ29uGMoBIAEoCzIILkNTTG9nb24SGgoHc2NMb2dvbhjLASABKAsyCC5T", 
          "Q0xvZ29uEhwKCGNzTG9nb2ZmGMwBIAEoCzIJLkNTTG9nb2ZmEhwKCHNjTG9n", 
          "b2ZmGM0BIAEoCzIJLlNDTG9nb2ZmEhwKCGNzSHVuZ3VwGM4BIAEoCzIJLkNT", 
          "SHVuZ3VwEiIKC2NzUHJlQ2hhcmdlGM8BIAEoCzIMLkNTUHJlQ2hhcmdlEiIK", 
          "C3NjUHJlQ2hhcmdlGNABIAEoCzIMLlNDUHJlQ2hhcmdlEiAKCnNjVG9DaGFy", 
          "Z2UY0QEgASgLMgsuU0NUb0NoYXJnZRIeCgljc0NhcnRBZGQY0wEgASgLMgou", 
          "Q1NDYXJ0QWRkEh4KCWNzQ2FydERlbBjUASABKAsyCi5DU0NhcnREZWwSHAoI", 
          "Y3NQcmVCdXkY1QEgASgLMgkuQ1NQcmVCdXkSHAoIc2NQcmVCdXkY1gEgASgL", 
          "MgkuU0NQcmVCdXkSGgoHc2NUb0J1eRjXASABKAsyCC5TQ1RvQnV5EiQKDHNj", 
          "U3lzTWVzc2FnZRjYASABKAsyDS5TQ1N5c01lc3NhZ2USIAoKY3NFdmFsdWF0", 
          "ZRjaASABKAsyCy5DU0V2YWx1YXRlEiAKCnNjRXZhbHVhdGUY2wEgASgLMgsu", 
          "U0NFdmFsdWF0ZRIkCgxjc1ZlcmlmeUNvZGUY3AEgASgLMg0uQ1NWZXJpZnlD", 
          "b2RlEiQKDHNjVmVyaWZ5Q29kZRjdASABKAsyDS5TQ1ZlcmlmeUNvZGUSJAoM", 
          "Y3NCaW5kTW9iaWxlGN4BIAEoCzINLkNTQmluZE1vYmlsZRIkCgxzY0JpbmRN", 
          "b2JpbGUY3wEgASgLMg0uU0NCaW5kTW9iaWxlIhsKC0NMQXNrU2VydmVyEgwK", 
          "BHV1aWQYASACKAkiLQoLTENSZXRTZXJ2ZXISEAoIc2VydmVyaXAYASABKAkS", 
          "DAoEcG9ydBgCIAEoBSIYCghDU0F1dGhlbhIMCgR0ZXh0GAEgAigJIisKCFND", 
          "QXV0aGVuEhEKCXNlc3Npb25JZBgBIAIoBRIMCgRndWlkGAIgASgFIisKB0NT", 
          "TG9naW4SDgoGdXNlcklkGAEgASgJEhAKCHBhc3N3b3JkGAIgASgJIioKB1ND", 
          "TG9naW4SEQoJc2Vzc2lvbklkGAEgAigFEgwKBGd1aWQYAiABKAUiSwoNU0NB", 
          "Y2NvdW50SW5mbxIfCgdhY2NvdW50GAEgAigLMg4uU3RydWN0QWNjb3VudBIZ", 
          "CgRyb2xlGAIgAigLMgsuU3RydWN0Um9sZSI0Cg5TQ1JlYWx0aW1lSW5mbxIi", 
          "CglyZWFsdGltZXMYASADKAsyDy5TdHJ1Y3RSZWFsVGltZSIoCglDU0NvbW1h", 
          "bmQSCwoDY21kGAEgAigFEg4KBnBhcmFtcxgCIAMoCSJpCgVDU0xvZxIZCgRw", 
          "YWdlGAEgAigLMgsuU3RydWN0UGFnZRIQCghvcGVyYXRvchgCIAEoCRIRCglz", 
          "dGFydHRpbWUYAyABKAkSDwoHZW5kdGltZRgEIAEoCRIPCgdrZXl3b3JkGAUg", 
          "ASgJIiEKBVNDTG9nEhgKBGxvZ3MYASADKAsyCi5TdHJ1Y3RMb2ciKAoKU0ND", 
          "YWxsTGlzdBIaCgVjYWxscxgBIAMoCzILLlN0cnVjdENhbGwiHwoNQ1NDYWxs", 
          "UHJvY2VzcxIOCgZjYWxsaWQYASACKAUiKAoKU0NSb2xlTGlzdBIaCgVyb2xl", 
          "cxgBIAMoCzILLlN0cnVjdFJvbGUiGQoJQ1NSb2xlQWRkEgwKBG5hbWUYASAC", 
          "KAkiJgoJU0NSb2xlQWRkEhkKBHJvbGUYASACKAsyCy5TdHJ1Y3RSb2xlIhsK", 
          "CUNTUm9sZURlbBIOCgZyb2xlaWQYASACKAUiLAoMQ1NSb2xlVXBkYXRlEg4K", 
          "BnJvbGVpZBgBIAIoBRIMCgRuYW1lGAIgAigJIkEKDENTUm9sZVJpZ2h0cxIO", 
          "CgZyb2xlaWQYASACKAUSEQoJcmlnaHR0eXBlGAIgAigFEg4KBnJpZ2h0cxgD", 
          "IAIoCSIwCg1TQ0FjY291bnRMaXN0Eh8KB2FjY291bnQYASADKAsyDi5TdHJ1", 
          "Y3RBY2NvdW50Ii8KDENTQWNjb3VudEFkZBIfCgdhY2NvdW50GAEgAigLMg4u", 
          "U3RydWN0QWNjb3VudCIfCgxDU0FjY291bnREZWwSDwoHYWRtaW5pZBgBIAIo", 
          "CSIyCg9DU0FjY291bnRVcGRhdGUSHwoHYWNjb3VudBgBIAIoCzIOLlN0cnVj", 
          "dEFjY291bnQiMgoPQ1NBY2NvdW50U25zU2V0Eh8KB2FjY291bnQYASADKAsy", 
          "Di5TdHJ1Y3RBY2NvdW50In4KDkNTU3RhZmZDb21tZW50EhkKBHBhZ2UYASAC", 
          "KAsyCy5TdHJ1Y3RQYWdlEgwKBHR5cGUYAiACKAUSEQoJc3RhcnR0aW1lGAMg", 
          "ASgJEg8KB2VuZHRpbWUYBCABKAkSDQoFc3RhZmYYBSABKAkSEAoIY3VzdG9t", 
          "ZXIYBiABKAkiMgoOU0NTdGFmZkNvbW1lbnQSIAoIY29tbWVudHMYASADKAsy", 
          "Di5TdHJ1Y3RDb21tZW50Ii0KDkNTU3RhZmZQZXJmb3JtEgwKBHllYXIYASAC", 
          "KAUSDQoFbW9udGgYAiACKAUiMgoOU0NTdGFmZlBlcmZvcm0SIAoIcGVyZm9y", 
          "bXMYASADKAsyDi5TdHJ1Y3RQZXJmb3JtIi8KCUNTRWFybmluZxIRCglzdGFy", 
          "dHRpbWUYASACKAkSDwoHZW5kdGltZRgCIAIoCSInCglTQ0Vhcm5pbmcSGgoF", 
          "ZWFybnMYASADKAsyCy5TdHJ1Y3RFYXJuIjQKDlNDQ29tcHV0ZXJMaXN0EiIK", 
          "CWNvbXB1dGVycxgBIAMoCzIPLlN0cnVjdENvbXB1dGVyIjIKDUNTQ29tcHV0", 
          "ZXJBZGQSIQoIY29tcHV0ZXIYASACKAsyDy5TdHJ1Y3RDb21wdXRlciIjCg1D", 
          "U0NvbXB1dGVyRGVsEhIKCmNvbXB1dGVyaWQYASADKAUiNQoQQ1NDb21wdXRl", 
          "clVwZGF0ZRIhCghjb21wdXRlchgBIAMoCzIPLlN0cnVjdENvbXB1dGVyIh4K", 
          "DkNTQ29tcHV0ZXJGaW5kEgwKBG5hbWUYASACKAkiNAoOU0NDb21wdXRlckZp", 
          "bmQSIgoJY29tcHV0ZXJzGAEgAygLMg8uU3RydWN0Q29tcHV0ZXIiKQoMQ1NN", 
          "ZW1iZXJMaXN0EhkKBHBhZ2UYASACKAsyCy5TdHJ1Y3RQYWdlIi4KDFNDTWVt", 
          "YmVyTGlzdBIeCgdtZW1iZXJzGAEgAygLMg0uU3RydWN0TWVtYmVyIo0BCgtD", 
          "U01lbWJlckFkZBIdCghjYXJkaW5mbxgBIAIoCzILLlN0cnVjdENhcmQSEgoK", 
          "bWVtYmVydHlwZRgCIAIoBRIQCghyZWNoYXJnZRgDIAIoBRINCgVwaG9uZRgE", 
          "IAEoCRIUCgxmaW5nZXJwcmludDEYBSABKAkSFAoMZmluZ2VycHJpbnQyGAYg", 
          "ASgJInIKC1NDTWVtYmVyQWRkEgwKBG5hbWUYASACKAkSEgoKY2FyZG51bWJl", 
          "chgCIAIoCRINCgVyaWdodBgDIAIoCRIQCghyZWNoYXJnZRgEIAIoBRIPCgdi", 
          "YWxhbmNlGAUgAigFEg8KB2ludGVnYWwYBiACKAUiHwoLQ1NNZW1iZXJEZWwS", 
          "EAoIbWVtYmVyaWQYASADKAUiNwoUQ1NNZW1iZXJVcGRhdGVTdGF0dXMSDAoE", 
          "bWFzaxgBIAIoBRIRCgltZW1iZXJpZHMYAiACKAUiWgoMQ1NNZW1iZXJGaW5k", 
          "EhkKBHBhZ2UYASACKAsyCy5TdHJ1Y3RQYWdlEg4KBnN0YXR1cxgCIAEoBRIN", 
          "CgVyaWdodBgDIAEoBRIQCghrZXl3b3JkcxgEIAEoCSIuCgxTQ01lbWJlckZp", 
          "bmQSHgoHbWVtYmVycxgBIAMoCzINLlN0cnVjdE1lbWJlciIkChBDU01lbWJl", 
          "ckNhcmRJbmZvEhAKCG1lbWJlcmlkGAEgAigFIjEKEFNDTWVtYmVyQ2FyZElu", 
          "Zm8SHQoIY2FyZGluZm8YASACKAsyCy5TdHJ1Y3RDYXJkIkMKFENTTWVtYmVy", 
          "Q29uc3VtUmVjb3JkEhkKBHBhZ2UYASACKAsyCy5TdHJ1Y3RQYWdlEhAKCG1l", 
          "bWJlcmlkGAIgAigFIjkKFFNDTWVtYmVyQ29uc3VtUmVjb3JkEiEKCmNvbnN1", 
          "bWluZm8YASADKAsyDS5TdHJ1Y3RDb25zdW0ijAEKFENTTWVtYmVyQ29uc3Vt", 
          "RmlsdGVyEhkKBHBhZ2UYASACKAsyCy5TdHJ1Y3RQYWdlEhAKCG1lbWJlcmlk", 
          "GAIgAigFEhEKCWJlZ2ludGltZRgDIAEoCRIPCgdlbmR0aW1lGAQgASgJEhIK", 
          "CmNvbnN1bXR5cGUYBSABKAUSDwoHcGF5bW9kZRgGIAEoBSI5ChRTQ01lbWJl", 
          "ckNvbnN1bUZpbHRlchIhCgpjb25zdW1pbmZvGAEgAygLMg0uU3RydWN0Q29u", 
          "c3VtIlcKDVNDU3lzQmlsbExpc3QSIQoIdXNlckFyZWEYASADKAsyDy5TdHJ1", 
          "Y3RVc2VyQXJlYRIjCgdzZXR0aW5nGAIgAygLMhIuU3RydWN0QmlsbFNldHRp", 
          "bmciWQoPQ1NTeXNCaWxsVXBkYXRlEiEKCHVzZXJBcmVhGAEgAygLMg8uU3Ry", 
          "dWN0VXNlckFyZWESIwoHc2V0dGluZxgCIAMoCzISLlN0cnVjdEJpbGxTZXR0", 
          "aW5nIlkKD1NDU3lzQmlsbFVwZGF0ZRIhCgh1c2VyQXJlYRgBIAMoCzIPLlN0", 
          "cnVjdFVzZXJBcmVhEiMKB3NldHRpbmcYAiADKAsyEi5TdHJ1Y3RCaWxsU2V0", 
          "dGluZyIbCglDU1N5c0ludG8SDgoGcGFyZW50GAEgAigJIjsKCVNDU3lzSW5m", 
          "bxIOCgZwYXJlbnQYASACKAkSHgoFY2hpbGQYAiADKAsyDy5TdHJ1Y3REaWN0", 
          "SXRlbSI+CgxDU0FkZFN5c0luZm8SDgoGcGFyZW50GAEgAigJEh4KBWNoaWxk", 
          "GAIgAigLMg8uU3RydWN0RGljdEl0ZW0iLQoMQ1NEZWxTeXNJbmZvEg4KBnBh", 
          "cmVudBgBIAIoCRINCgVjaGlsZBgCIAMoCSJBCg9DU1VwZGF0ZVN5c0luZm8S", 
          "DgoGcGFyZW50GAEgAigJEh4KBWNoaWxkGAIgAygLMg8uU3RydWN0RGljdEl0", 
          "ZW0iIgoMQ1NFbWtDaGVja2luEhIKCmNhcmRudW1iZXIYASACKAkiUAoMU0NF", 
          "bWtDaGVja2luEgwKBG5hbWUYASACKAkSEgoKY2FyZG51bWJlchgCIAIoCRIN", 
          "CgVyaWdodBgDIAIoCRIPCgdiYWxhbmNlGAQgAigFIiMKDUNTRW1rQ2hlY2tv", 
          "dXQSEgoKY2FyZG51bWJlchgBIAIoCSJ2Cg1TQ0Vta0NoZWNrb3V0EgwKBG5h", 
          "bWUYASACKAkSEgoKY2FyZG51bWJlchgCIAIoCRINCgVyaWdodBgDIAIoCRIP", 
          "CgdiYWxhbmNlGAQgAigFEhEKCXVzZWRtb25leRgFIAIoBRIQCgh1c2VkdGlt", 
          "ZRgGIAIoBSI6CgtDU0Vta1JlY29yZBIZCgRwYWdlGAEgAigLMgsuU3RydWN0", 
          "UGFnZRIQCghtZW1iZXJpZBgCIAIoBSIyCgtTQ0Vta1JlY29yZBIjCgdlbWtp", 
          "bmZvGAEgAygLMhIuU3RydWN0RW1iYXJrYXRpb24iYQoPQ1NFbWtSZWNvcmRG", 
          "aW5kEhkKBHBhZ2UYASACKAsyCy5TdHJ1Y3RQYWdlEhEKCWJlZ2ludGltZRgC", 
          "IAEoCRIPCgdlbmR0aW1lGAMgASgJEg8KB2tleXdvcmQYBCABKAkiNgoPU0NF", 
          "bWtSZWNvcmRGaW5kEiMKB2Vta2luZm8YASADKAsyEi5TdHJ1Y3RFbWJhcmth", 
          "dGlvbiIpCgpDU0dvb2RzQWRkEhsKBWdvb2RzGAEgAigLMgwuU3RydWN0R29v", 
          "ZHMiGQoKQ1NHb29kc0RlbBILCgNpZHMYASADKAUiLAoNQ1NHb29kc1VwZGF0", 
          "ZRIbCgVnb29kcxgBIAIoCzIMLlN0cnVjdEdvb2RzIkwKC0NTR29vZHNGaW5k", 
          "EhkKBHBhZ2UYASACKAsyCy5TdHJ1Y3RQYWdlEhAKCGNhdGVnb3J5GAIgASgF", 
          "EhAKCGtleXdvcmRzGAQgASgJIioKC1NDR29vZHNGaW5kEhsKBWdvb2RzGAEg", 
          "AygLMgwuU3RydWN0R29vZHMiKQoMQ1NHb29kc1N0b2NrEhkKBHBhZ2UYASAC", 
          "KAsyCy5TdHJ1Y3RQYWdlIisKDFNDR29vZHNTdG9jaxIbCgVnb29kcxgBIAMo", 
          "CzIMLlN0cnVjdFN0b2NrIl8KDUNTU2FsZXNSZWNvcmQSGQoEcGFnZRgBIAIo", 
          "CzILLlN0cnVjdFBhZ2USDwoHZ29vZHNpZBgCIAIoBRIRCgliZWdpbnRpbWUY", 
          "AyABKAkSDwoHZW5kdGltZRgEIAEoCSIrCg1TQ1NhbGVzUmVjb3JkEhoKBXNh", 
          "bGVzGAEgAygLMgsuU3RydWN0U2FsZSIMCgpDU1NhbGVzVG9wIgwKClNDU2Fs", 
          "ZXNUb3AipAEKC0NTT3JkZXJMaXN0EhkKBHBhZ2UYASACKAsyCy5TdHJ1Y3RQ", 
          "YWdlEg4KBnN0YXR1cxgCIAEoBRIVCg1hZGR0aW1lX3N0YXJ0GAMgASgJEhMK", 
          "C2FkZHRpbWVfZW5kGAQgASgJEhYKDnByb2N0aW1lX3N0YXJ0GAUgASgJEhQK", 
          "DHByb2N0aW1lX2VuZBgGIAEoCRIQCgh1c2VybmFtZRgHIAEoCSIrCgtTQ09y", 
          "ZGVyTGlzdBIcCgZvcmRlcnMYASADKAsyDC5TdHJ1Y3RPcmRlciIgCg1DU09y", 
          "ZGVyRGV0YWlsEg8KB29yZGVyaWQYASACKAUiNAoNU0NPcmRlckRldGFpbBIj", 
          "CgdkZXRhaWxzGAEgAygLMhIuU3RydWN0T3JkZXJEZXRhaWwiIQoOQ1NPcmRl", 
          "clByb2Nlc3MSDwoHb3JkZXJpZBgBIAIoBSJWChJTQ1NoaWZ0RGVsaXZlcmVk", 
          "QnkSFAoMZGVsaXZlcmVkX2J5GAEgAigJEhUKDWNoYXJnZV9hbW91bnQYAiAC", 
          "KAUSEwoLc2FsZV9hbW91bnQYAyACKAUibwoKQ1NTaGlmdEFkZBIVCg1kZWxp", 
          "dmVyZWRfcHdkGAEgAigJEhMKC3JlY2VpdmVkX2J5GAIgAigJEhQKDHJlY2Vp", 
          "dmVkX3B3ZBgDIAIoCRIPCgdpc2NoZWNrGAQgAigFEg4KBnJlbWFyaxgFIAIo", 
          "CSJNCgtDU1NoaWZ0RmluZBIZCgRwYWdlGAEgAigLMgsuU3RydWN0UGFnZRIR", 
          "CglzdGFydHRpbWUYAiABKAkSEAoIc3RvcHRpbWUYAyABKAkiKwoLU0NTaGlm", 
          "dEZpbmQSHAoGc2hpZnRzGAEgAygLMgwuU3RydWN0U2hpZnQiRAoLQ1NSZWNv", 
          "bm5lY3QSDgoGdXNlcklkGAEgAigJEhAKCHBhc3N3b3JkGAIgAigJEhMKC2Rl", 
          "dmljZVRva2VuGAMgASgJIi4KC1NDUmVjb25uZWN0EhEKCXNlc3Npb25JZBgB", 
          "IAIoBRIMCgRndWlkGAIgASgFIhwKDENTQ2xpZW50T3BlbhIMCgR0ZXh0GAEg", 
          "AigJIg8KDUNTQ2xpZW50Q2xvc2UiHQoHQ1NMb2dvbhISCgpjYXJkbnVtYmVy", 
          "GAEgAigJIm4KB1NDTG9nb24SEAoIbWVtYmVyaWQYASACKAUSEgoKY2FyZG51", 
          "bWJlchgCIAIoCRIMCgRuYW1lGAQgAigJEg0KBXJpZ2h0GAUgAigFEg8KB2Jh", 
          "bGFuY2UYCSACKAUSDwoHaW50ZWdhbBgMIAIoBSIeCghDU0xvZ29mZhISCgpj", 
          "YXJkbnVtYmVyGAEgAigJInEKCFNDTG9nb2ZmEgwKBG5hbWUYASACKAkSEgoK", 
          "Y2FyZG51bWJlchgCIAIoCRINCgVyaWdodBgDIAIoCRIPCgdiYWxhbmNlGAQg", 
          "AigFEhEKCXVzZWRtb25leRgFIAIoBRIQCgh1c2VkdGltZRgGIAIoBSIeCghD", 
          "U0h1bmd1cBISCgpjYXJkbnVtYmVyGAEgAigJIlMKC0NTUHJlQ2hhcmdlEhIK", 
          "CmNhcmRudW1iZXIYASACKAkSDgoGYW1vdW50GAIgAigFEg8KB3BheW1vZGUY", 
          "AyACKAUSDwoHb2ZmaWNhbBgEIAIoBSIdCgtTQ1ByZUNoYXJnZRIOCgZxcmNv", 
          "ZGUYASACKAkicQoKU0NUb0NoYXJnZRIMCgRuYW1lGAEgAigJEhIKCmNhcmRu", 
          "dW1iZXIYAiACKAkSDQoFcmlnaHQYAyACKAkSEAoIcmVjaGFyZ2UYBCACKAUS", 
          "DwoHYmFsYW5jZRgFIAIoBRIPCgdpbnRlZ2FsGAYgAigFIi4KCUNTQ2FydEFk", 
          "ZBIPCgdnb29kc2lkGAEgAigFEhAKCGdvb2RzbnVtGAIgAigFIi4KCUNTQ2Fy", 
          "dERlbBIPCgdnb29kc2lkGAEgAigFEhAKCGdvb2RzbnVtGAIgAigFIkEKCENT", 
          "UHJlQnV5EhIKCmNhcmRudW1iZXIYASACKAkSDwoHZ29vZHNpZBgCIAIoBRIQ", 
          "Cghnb29kc251bRgDIAIoBSIaCghTQ1ByZUJ1eRIOCgZxcmNvZGUYASACKAki", 
          "hAEKB1NDVG9CdXkSDAoEbmFtZRgBIAIoCRISCgpjYXJkbnVtYmVyGAIgAigJ", 
          "Eg0KBXJpZ2h0GAMgAigJEhEKCXVzZWRtb25leRgEIAIoBRITCgt1c2VkaW50", 
          "ZWdhbBgFIAIoBRIPCgdiYWxhbmNlGAYgAigFEg8KB2ludGVnYWwYByACKAUi", 
          "KwoMU0NTeXNNZXNzYWdlEgsKA2NtZBgBIAIoBRIOCgZwYXJhbXMYAiADKAki", 
          "TwoKQ1NFdmFsdWF0ZRIRCglzdGFmZlN0YXIYASACKAUSDwoHZW52U3RhchgC", 
          "IAIoBRIPCgdkZXZTdGFyGAMgAigFEgwKBGV2YWwYBCABKAkiHQoKU0NFdmFs", 
          "dWF0ZRIPCgdpbnRlZ2FsGAEgAigFIiMKDENTVmVyaWZ5Q29kZRITCgtwaG9u", 
          "ZW51bWJlchgBIAIoCSIiCgxTQ1ZlcmlmeUNvZGUSEgoKdmVyaWZ5Y29kZRgB", 
          "IAIoCSI3CgxDU0JpbmRNb2JpbGUSEwoLcGhvbmVudW1iZXIYASACKAkSEgoK", 
          "dmVyaWZ5Y29kZRgCIAIoCSIfCgxTQ0JpbmRNb2JpbGUSDwoHaW50ZWdhbBgB", 
          "IAIoBSr8DgoDQ21kEhIKDUNNRF9HRVRTRVJWRVIQ6AcSDwoKQ01EX0FVVEhF", 
          "ThDpBxIOCglDTURfTE9HSU4Q6gcSFQoQQ01EX0FDQ09VTlRfSU5GTxDrBxIW", 
          "ChFDTURfUkVBTFRJTUVfSU5GTxDsBxIQCgtDTURfQ09NTUFORBDtBxIMCgdD", 
          "TURfTE9HEO4HEhIKDUNNRF9DQUxMX0xJU1QQ7wcSFQoQQ01EX0NBTExfUFJP", 
          "Q0VTUxDwBxISCg1DTURfUk9MRV9MSVNUEPIHEhEKDENNRF9ST0xFX0FERBDz", 
          "BxIRCgxDTURfUk9MRV9ERUwQ9AcSFAoPQ01EX1JPTEVfVVBEQVRFEPUHEhQK", 
          "D0NNRF9ST0xFX1JJR0hUUxD2BxITCg5DTURfU1RBRkZfTElTVBD8BxISCg1D", 
          "TURfU1RBRkZfQUREEP0HEhIKDUNNRF9TVEFGRl9ERUwQ/gcSFQoQQ01EX1NU", 
          "QUZGX1VQREFURRD/BxITCg5DTURfU1RBRkZfRklORBCACBISCg1DTURfU1RB", 
          "RkZfU05TEIEIEhYKEUNNRF9TVEFGRl9DT01NRU5UEIIIEhYKEUNNRF9TVEFG", 
          "Rl9QRVJGT1JNEIMIEhQKD0NNRF9FQVJOSU5HX0RBWRCGCBIWChFDTURfRUFS", 
          "TklOR19NT05USBCHCBIVChBDTURfRUFSTklOR19ZRUFSEIgIEhYKEUNNRF9D", 
          "T01QVVRFUl9MSVNUEJAIEhUKEENNRF9DT01QVVRFUl9BREQQkQgSFQoQQ01E", 
          "X0NPTVBVVEVSX0RFTBCSCBIYChNDTURfQ09NUFVURVJfVVBEQVRFEJMIEhYK", 
          "EUNNRF9DT01QVVRFUl9GSU5EEJQIEhYKEUNNRF9DT01QVVRFUl9PUEVOEJUI", 
          "EhcKEkNNRF9DT01QVVRFUl9DTE9TRRCWCBIUCg9DTURfTUVNQkVSX0xJU1QQ", 
          "mggSEwoOQ01EX01FTUJFUl9BREQQmwgSEwoOQ01EX01FTUJFUl9ERUwQnAgS", 
          "FgoRQ01EX01FTUJFUl9VUERBVEUQnQgSFAoPQ01EX01FTUJFUl9GSU5EEJ4I", 
          "EhkKFENNRF9NRU1CRVJfQ0FSRF9JTkZPEJ8IEh0KGENNRF9NRU1CRVJfQ09O", 
          "U1VNX1JFQ09SRBCgCBIdChhDTURfTUVNQkVSX0NPTlNVTV9GSUxURVIQoQgS", 
          "GQoUQ01EX1NZU19CSUxMSU5HX0xJU1QQpAgSGwoWQ01EX1NZU19CSUxMSU5H", 
          "X1VQREFURRClCBIRCgxDTURfU1lTX0lORk8QpggSEAoLQ01EX1NZU19BREQQ", 
          "pwgSEAoLQ01EX1NZU19ERUwQqAgSEwoOQ01EX1NZU19VUERBVEUQqQgSFAoP", 
          "Q01EX0VNS19DSEVDS0lOEK4IEhUKEENNRF9FTUtfQ0hFQ0tPVVQQrwgSEwoO", 
          "Q01EX0VNS19DQU5DRUwQsggSEwoOQ01EX0VNS19SRUNPUkQQswgSGAoTQ01E", 
          "X0VNS19SRUNPUkRfRklORBC0CBISCg1DTURfR09PRFNfQUREELgIEhIKDUNN", 
          "RF9HT09EU19ERUwQuQgSFQoQQ01EX0dPT0RTX1VQREFURRC6CBITCg5DTURf", 
          "R09PRFNfRklORBC7CBIUCg9DTURfR09PRFNfU0FMRVMQvAgSGAoTQ01EX0dP", 
          "T0RTX1NBTEVTX1RPUBC9CBIUCg9DTURfR09PRFNfU1RPQ0sQvggSFAoPQ01E", 
          "X0dPT0RTX09SREVSEL8IEhsKFkNNRF9HT09EU19PUkRFUl9ERVRBSUwQwAgS", 
          "HAoXQ01EX0dPT0RTX09SREVSX1BST0NFU1MQwQgSGgoVQ01EX1NISUZUX0RF", 
          "TElWRVJFREJZEMIIEhIKDUNNRF9TSElGVF9BREQQwwgSEwoOQ01EX1NISUZU", 
          "X0ZJTkQQxAgSFAoPQ01EX1VQTE9BRF9IRUFEEMwIEg4KCUNNRF9IRUFSVBDN", 
          "CBIUCg9DTURfUExBWUVSX0tJQ0sQzggSEwoOQ01EX0NIRUNLX05BTUUQzwgS", 
          "FgoRQ01EX0NIRUNLX0FDQ09VTlQQ0AgSEgoNQ01EX1JFQ09OTkVDVBDRCBIU", 
          "Cg9DTURfQ0xJRU5UX09QRU4Q0A8SFQoQQ01EX0NMSUVOVF9DTE9TRRDRDxIV", 
          "ChBDTURfQ0xJRU5UX0xPR09OENIPEhYKEUNNRF9DTElFTlRfTE9HT0ZGENMP", 
          "EhYKEUNNRF9DTElFTlRfSFVOR1VQENQPEhIKDUNNRF9QUkVDSEFSR0UQ1Q8S", 
          "EQoMQ01EX1RPQ0hBUkdFENYPEhgKE0NNRF9DTElFTlRfQ0FSVF9BREQQ2A8S", 
          "GAoTQ01EX0NMSUVOVF9DQVJUX0RFTBDZDxIPCgpDTURfUFJFQlVZENoPEg4K", 
          "CUNNRF9UT0JVWRDbDxIaChVDTURfQ0xJRU5UX1NZU01FU1NBR0UQ3A8SGAoT", 
          "Q01EX0NMSUVOVF9FVkFMVUFURRDeDxIaChVDTURfQ0xJRU5UX1ZFUklGWUNP", 
          "REUQ3w8SGgoVQ01EX0NMSUVOVF9CSU5ETU9CSUxFEOAPQi0KHWNvbS5za3lz", 
        "b2Z0LmNvcmUuYXV0by5tZXNzYWdlQgxDb3JlUHJvdG9jb2w="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_MessagePack__Descriptor = Descriptor.MessageTypes[0];
      internal__static_MessagePack__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MessagePack, global::MessagePack.Builder>(internal__static_MessagePack__Descriptor,
              new string[] { "Cmd", "Version", "SessionId", "Content", });
      internal__static_MessageContent__Descriptor = Descriptor.MessageTypes[1];
      internal__static_MessageContent__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MessageContent, global::MessageContent.Builder>(internal__static_MessageContent__Descriptor,
              new string[] { "MessageType", "ErrorTip", "ClAskServer", "LcRetServer", "CsAuthen", "ScAuthen", "CsLogin", "ScLogin", "ScCallList", "CsCallProcess", "ScAccountInfo", "ScRealtimeInfo", "CsCommand", "CsLog", "ScLog", "ScRoleList", "CsRoleAdd", "ScRoleAdd", "CsRoleDel", "CsRoleUpdate", "CsRoleRights", "ScAccountList", "CsAccountAdd", "CsAccountDel", "CsAccountUpdate", "CsAccountSnsSet", "CsStaffComment", "ScStaffComment", "CsStaffPerform", "ScStaffPerform", "CsEarning", "ScEarning", "ScComputerList", "CsComputerAdd", "CsComputerDel", "CsComputerUpdate", "CsComputerFind", "ScComputerFind", "CsMemberList", "ScMemberList", "CsMemberAdd", "ScMemberAdd", "CsMemberDel", "CsMemberUpdate", "CsMemberFind", "ScMemberFind", "CsMemberCardInfo", "ScMemberCardInfo", "CsMemberConsumRecord", "ScMemberConsumRecord", "CsMemberConsumFilter", "ScMemberConsumFilter", "ScSysBillList", "CsSysBillUpdate", "ScSysBillUpdate", "CsSysInfo", "ScSysInfo", "CsAddSysInfo", "CsDelSysInfo", "CsUpdateSysInfo", "CsEmkCheckin", "ScEmkCheckin", "CsEmkCheckout", "ScEmkCheckout", "CsEmkRecord", "ScEmkRecord", "CsEmkRecordFind", "ScEmkRecordFind", "CsGoodsFind", "ScGoodsFind", "CsGoodsAdd", "CsGoodsDel", "CsGoodsUpdate", "CsGoodsStock", "ScGoodsStock", "CsSalesRecord", "ScSalesRecord", "CsSalesTop", "ScSalesTop", "CsOrderList", "ScOrderList", "CsOrderDetail", "ScOrderDetail", "CsOrderProcess", "ScShiftDeliveredBy", "CsShiftAdd", "CsShiftFind", "ScShiftFind", "CsReconnect", "ScReconnect", "CsClientOpen", "CsClientClose", "CsLogon", "ScLogon", "CsLogoff", "ScLogoff", "CsHungup", "CsPreCharge", "ScPreCharge", "ScToCharge", "CsCartAdd", "CsCartDel", "CsPreBuy", "ScPreBuy", "ScToBuy", "ScSysMessage", "CsEvaluate", "ScEvaluate", "CsVerifyCode", "ScVerifyCode", "CsBindMobile", "ScBindMobile", });
      internal__static_CLAskServer__Descriptor = Descriptor.MessageTypes[2];
      internal__static_CLAskServer__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CLAskServer, global::CLAskServer.Builder>(internal__static_CLAskServer__Descriptor,
              new string[] { "Uuid", });
      internal__static_LCRetServer__Descriptor = Descriptor.MessageTypes[3];
      internal__static_LCRetServer__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::LCRetServer, global::LCRetServer.Builder>(internal__static_LCRetServer__Descriptor,
              new string[] { "Serverip", "Port", });
      internal__static_CSAuthen__Descriptor = Descriptor.MessageTypes[4];
      internal__static_CSAuthen__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAuthen, global::CSAuthen.Builder>(internal__static_CSAuthen__Descriptor,
              new string[] { "Text", });
      internal__static_SCAuthen__Descriptor = Descriptor.MessageTypes[5];
      internal__static_SCAuthen__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCAuthen, global::SCAuthen.Builder>(internal__static_SCAuthen__Descriptor,
              new string[] { "SessionId", "Guid", });
      internal__static_CSLogin__Descriptor = Descriptor.MessageTypes[6];
      internal__static_CSLogin__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSLogin, global::CSLogin.Builder>(internal__static_CSLogin__Descriptor,
              new string[] { "UserId", "Password", });
      internal__static_SCLogin__Descriptor = Descriptor.MessageTypes[7];
      internal__static_SCLogin__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCLogin, global::SCLogin.Builder>(internal__static_SCLogin__Descriptor,
              new string[] { "SessionId", "Guid", });
      internal__static_SCAccountInfo__Descriptor = Descriptor.MessageTypes[8];
      internal__static_SCAccountInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCAccountInfo, global::SCAccountInfo.Builder>(internal__static_SCAccountInfo__Descriptor,
              new string[] { "Account", "Role", });
      internal__static_SCRealtimeInfo__Descriptor = Descriptor.MessageTypes[9];
      internal__static_SCRealtimeInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCRealtimeInfo, global::SCRealtimeInfo.Builder>(internal__static_SCRealtimeInfo__Descriptor,
              new string[] { "Realtimes", });
      internal__static_CSCommand__Descriptor = Descriptor.MessageTypes[10];
      internal__static_CSCommand__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCommand, global::CSCommand.Builder>(internal__static_CSCommand__Descriptor,
              new string[] { "Cmd", "Params", });
      internal__static_CSLog__Descriptor = Descriptor.MessageTypes[11];
      internal__static_CSLog__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSLog, global::CSLog.Builder>(internal__static_CSLog__Descriptor,
              new string[] { "Page", "Operator", "Starttime", "Endtime", "Keyword", });
      internal__static_SCLog__Descriptor = Descriptor.MessageTypes[12];
      internal__static_SCLog__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCLog, global::SCLog.Builder>(internal__static_SCLog__Descriptor,
              new string[] { "Logs", });
      internal__static_SCCallList__Descriptor = Descriptor.MessageTypes[13];
      internal__static_SCCallList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCCallList, global::SCCallList.Builder>(internal__static_SCCallList__Descriptor,
              new string[] { "Calls", });
      internal__static_CSCallProcess__Descriptor = Descriptor.MessageTypes[14];
      internal__static_CSCallProcess__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCallProcess, global::CSCallProcess.Builder>(internal__static_CSCallProcess__Descriptor,
              new string[] { "Callid", });
      internal__static_SCRoleList__Descriptor = Descriptor.MessageTypes[15];
      internal__static_SCRoleList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCRoleList, global::SCRoleList.Builder>(internal__static_SCRoleList__Descriptor,
              new string[] { "Roles", });
      internal__static_CSRoleAdd__Descriptor = Descriptor.MessageTypes[16];
      internal__static_CSRoleAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSRoleAdd, global::CSRoleAdd.Builder>(internal__static_CSRoleAdd__Descriptor,
              new string[] { "Name", });
      internal__static_SCRoleAdd__Descriptor = Descriptor.MessageTypes[17];
      internal__static_SCRoleAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCRoleAdd, global::SCRoleAdd.Builder>(internal__static_SCRoleAdd__Descriptor,
              new string[] { "Role", });
      internal__static_CSRoleDel__Descriptor = Descriptor.MessageTypes[18];
      internal__static_CSRoleDel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSRoleDel, global::CSRoleDel.Builder>(internal__static_CSRoleDel__Descriptor,
              new string[] { "Roleid", });
      internal__static_CSRoleUpdate__Descriptor = Descriptor.MessageTypes[19];
      internal__static_CSRoleUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSRoleUpdate, global::CSRoleUpdate.Builder>(internal__static_CSRoleUpdate__Descriptor,
              new string[] { "Roleid", "Name", });
      internal__static_CSRoleRights__Descriptor = Descriptor.MessageTypes[20];
      internal__static_CSRoleRights__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSRoleRights, global::CSRoleRights.Builder>(internal__static_CSRoleRights__Descriptor,
              new string[] { "Roleid", "Righttype", "Rights", });
      internal__static_SCAccountList__Descriptor = Descriptor.MessageTypes[21];
      internal__static_SCAccountList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCAccountList, global::SCAccountList.Builder>(internal__static_SCAccountList__Descriptor,
              new string[] { "Account", });
      internal__static_CSAccountAdd__Descriptor = Descriptor.MessageTypes[22];
      internal__static_CSAccountAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAccountAdd, global::CSAccountAdd.Builder>(internal__static_CSAccountAdd__Descriptor,
              new string[] { "Account", });
      internal__static_CSAccountDel__Descriptor = Descriptor.MessageTypes[23];
      internal__static_CSAccountDel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAccountDel, global::CSAccountDel.Builder>(internal__static_CSAccountDel__Descriptor,
              new string[] { "Adminid", });
      internal__static_CSAccountUpdate__Descriptor = Descriptor.MessageTypes[24];
      internal__static_CSAccountUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAccountUpdate, global::CSAccountUpdate.Builder>(internal__static_CSAccountUpdate__Descriptor,
              new string[] { "Account", });
      internal__static_CSAccountSnsSet__Descriptor = Descriptor.MessageTypes[25];
      internal__static_CSAccountSnsSet__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAccountSnsSet, global::CSAccountSnsSet.Builder>(internal__static_CSAccountSnsSet__Descriptor,
              new string[] { "Account", });
      internal__static_CSStaffComment__Descriptor = Descriptor.MessageTypes[26];
      internal__static_CSStaffComment__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSStaffComment, global::CSStaffComment.Builder>(internal__static_CSStaffComment__Descriptor,
              new string[] { "Page", "Type", "Starttime", "Endtime", "Staff", "Customer", });
      internal__static_SCStaffComment__Descriptor = Descriptor.MessageTypes[27];
      internal__static_SCStaffComment__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCStaffComment, global::SCStaffComment.Builder>(internal__static_SCStaffComment__Descriptor,
              new string[] { "Comments", });
      internal__static_CSStaffPerform__Descriptor = Descriptor.MessageTypes[28];
      internal__static_CSStaffPerform__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSStaffPerform, global::CSStaffPerform.Builder>(internal__static_CSStaffPerform__Descriptor,
              new string[] { "Year", "Month", });
      internal__static_SCStaffPerform__Descriptor = Descriptor.MessageTypes[29];
      internal__static_SCStaffPerform__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCStaffPerform, global::SCStaffPerform.Builder>(internal__static_SCStaffPerform__Descriptor,
              new string[] { "Performs", });
      internal__static_CSEarning__Descriptor = Descriptor.MessageTypes[30];
      internal__static_CSEarning__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEarning, global::CSEarning.Builder>(internal__static_CSEarning__Descriptor,
              new string[] { "Starttime", "Endtime", });
      internal__static_SCEarning__Descriptor = Descriptor.MessageTypes[31];
      internal__static_SCEarning__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEarning, global::SCEarning.Builder>(internal__static_SCEarning__Descriptor,
              new string[] { "Earns", });
      internal__static_SCComputerList__Descriptor = Descriptor.MessageTypes[32];
      internal__static_SCComputerList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCComputerList, global::SCComputerList.Builder>(internal__static_SCComputerList__Descriptor,
              new string[] { "Computers", });
      internal__static_CSComputerAdd__Descriptor = Descriptor.MessageTypes[33];
      internal__static_CSComputerAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSComputerAdd, global::CSComputerAdd.Builder>(internal__static_CSComputerAdd__Descriptor,
              new string[] { "Computer", });
      internal__static_CSComputerDel__Descriptor = Descriptor.MessageTypes[34];
      internal__static_CSComputerDel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSComputerDel, global::CSComputerDel.Builder>(internal__static_CSComputerDel__Descriptor,
              new string[] { "Computerid", });
      internal__static_CSComputerUpdate__Descriptor = Descriptor.MessageTypes[35];
      internal__static_CSComputerUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSComputerUpdate, global::CSComputerUpdate.Builder>(internal__static_CSComputerUpdate__Descriptor,
              new string[] { "Computer", });
      internal__static_CSComputerFind__Descriptor = Descriptor.MessageTypes[36];
      internal__static_CSComputerFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSComputerFind, global::CSComputerFind.Builder>(internal__static_CSComputerFind__Descriptor,
              new string[] { "Name", });
      internal__static_SCComputerFind__Descriptor = Descriptor.MessageTypes[37];
      internal__static_SCComputerFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCComputerFind, global::SCComputerFind.Builder>(internal__static_SCComputerFind__Descriptor,
              new string[] { "Computers", });
      internal__static_CSMemberList__Descriptor = Descriptor.MessageTypes[38];
      internal__static_CSMemberList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberList, global::CSMemberList.Builder>(internal__static_CSMemberList__Descriptor,
              new string[] { "Page", });
      internal__static_SCMemberList__Descriptor = Descriptor.MessageTypes[39];
      internal__static_SCMemberList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCMemberList, global::SCMemberList.Builder>(internal__static_SCMemberList__Descriptor,
              new string[] { "Members", });
      internal__static_CSMemberAdd__Descriptor = Descriptor.MessageTypes[40];
      internal__static_CSMemberAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberAdd, global::CSMemberAdd.Builder>(internal__static_CSMemberAdd__Descriptor,
              new string[] { "Cardinfo", "Membertype", "Recharge", "Phone", "Fingerprint1", "Fingerprint2", });
      internal__static_SCMemberAdd__Descriptor = Descriptor.MessageTypes[41];
      internal__static_SCMemberAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCMemberAdd, global::SCMemberAdd.Builder>(internal__static_SCMemberAdd__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Recharge", "Balance", "Integal", });
      internal__static_CSMemberDel__Descriptor = Descriptor.MessageTypes[42];
      internal__static_CSMemberDel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberDel, global::CSMemberDel.Builder>(internal__static_CSMemberDel__Descriptor,
              new string[] { "Memberid", });
      internal__static_CSMemberUpdateStatus__Descriptor = Descriptor.MessageTypes[43];
      internal__static_CSMemberUpdateStatus__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberUpdateStatus, global::CSMemberUpdateStatus.Builder>(internal__static_CSMemberUpdateStatus__Descriptor,
              new string[] { "Mask", "Memberids", });
      internal__static_CSMemberFind__Descriptor = Descriptor.MessageTypes[44];
      internal__static_CSMemberFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberFind, global::CSMemberFind.Builder>(internal__static_CSMemberFind__Descriptor,
              new string[] { "Page", "Status", "Right", "Keywords", });
      internal__static_SCMemberFind__Descriptor = Descriptor.MessageTypes[45];
      internal__static_SCMemberFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCMemberFind, global::SCMemberFind.Builder>(internal__static_SCMemberFind__Descriptor,
              new string[] { "Members", });
      internal__static_CSMemberCardInfo__Descriptor = Descriptor.MessageTypes[46];
      internal__static_CSMemberCardInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberCardInfo, global::CSMemberCardInfo.Builder>(internal__static_CSMemberCardInfo__Descriptor,
              new string[] { "Memberid", });
      internal__static_SCMemberCardInfo__Descriptor = Descriptor.MessageTypes[47];
      internal__static_SCMemberCardInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCMemberCardInfo, global::SCMemberCardInfo.Builder>(internal__static_SCMemberCardInfo__Descriptor,
              new string[] { "Cardinfo", });
      internal__static_CSMemberConsumRecord__Descriptor = Descriptor.MessageTypes[48];
      internal__static_CSMemberConsumRecord__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberConsumRecord, global::CSMemberConsumRecord.Builder>(internal__static_CSMemberConsumRecord__Descriptor,
              new string[] { "Page", "Memberid", });
      internal__static_SCMemberConsumRecord__Descriptor = Descriptor.MessageTypes[49];
      internal__static_SCMemberConsumRecord__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCMemberConsumRecord, global::SCMemberConsumRecord.Builder>(internal__static_SCMemberConsumRecord__Descriptor,
              new string[] { "Consuminfo", });
      internal__static_CSMemberConsumFilter__Descriptor = Descriptor.MessageTypes[50];
      internal__static_CSMemberConsumFilter__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberConsumFilter, global::CSMemberConsumFilter.Builder>(internal__static_CSMemberConsumFilter__Descriptor,
              new string[] { "Page", "Memberid", "Begintime", "Endtime", "Consumtype", "Paymode", });
      internal__static_SCMemberConsumFilter__Descriptor = Descriptor.MessageTypes[51];
      internal__static_SCMemberConsumFilter__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCMemberConsumFilter, global::SCMemberConsumFilter.Builder>(internal__static_SCMemberConsumFilter__Descriptor,
              new string[] { "Consuminfo", });
      internal__static_SCSysBillList__Descriptor = Descriptor.MessageTypes[52];
      internal__static_SCSysBillList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSysBillList, global::SCSysBillList.Builder>(internal__static_SCSysBillList__Descriptor,
              new string[] { "UserArea", "Setting", });
      internal__static_CSSysBillUpdate__Descriptor = Descriptor.MessageTypes[53];
      internal__static_CSSysBillUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSysBillUpdate, global::CSSysBillUpdate.Builder>(internal__static_CSSysBillUpdate__Descriptor,
              new string[] { "UserArea", "Setting", });
      internal__static_SCSysBillUpdate__Descriptor = Descriptor.MessageTypes[54];
      internal__static_SCSysBillUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSysBillUpdate, global::SCSysBillUpdate.Builder>(internal__static_SCSysBillUpdate__Descriptor,
              new string[] { "UserArea", "Setting", });
      internal__static_CSSysInto__Descriptor = Descriptor.MessageTypes[55];
      internal__static_CSSysInto__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSysInto, global::CSSysInto.Builder>(internal__static_CSSysInto__Descriptor,
              new string[] { "Parent", });
      internal__static_SCSysInfo__Descriptor = Descriptor.MessageTypes[56];
      internal__static_SCSysInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSysInfo, global::SCSysInfo.Builder>(internal__static_SCSysInfo__Descriptor,
              new string[] { "Parent", "Child", });
      internal__static_CSAddSysInfo__Descriptor = Descriptor.MessageTypes[57];
      internal__static_CSAddSysInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAddSysInfo, global::CSAddSysInfo.Builder>(internal__static_CSAddSysInfo__Descriptor,
              new string[] { "Parent", "Child", });
      internal__static_CSDelSysInfo__Descriptor = Descriptor.MessageTypes[58];
      internal__static_CSDelSysInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSDelSysInfo, global::CSDelSysInfo.Builder>(internal__static_CSDelSysInfo__Descriptor,
              new string[] { "Parent", "Child", });
      internal__static_CSUpdateSysInfo__Descriptor = Descriptor.MessageTypes[59];
      internal__static_CSUpdateSysInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSUpdateSysInfo, global::CSUpdateSysInfo.Builder>(internal__static_CSUpdateSysInfo__Descriptor,
              new string[] { "Parent", "Child", });
      internal__static_CSEmkCheckin__Descriptor = Descriptor.MessageTypes[60];
      internal__static_CSEmkCheckin__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkCheckin, global::CSEmkCheckin.Builder>(internal__static_CSEmkCheckin__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCEmkCheckin__Descriptor = Descriptor.MessageTypes[61];
      internal__static_SCEmkCheckin__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmkCheckin, global::SCEmkCheckin.Builder>(internal__static_SCEmkCheckin__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Balance", });
      internal__static_CSEmkCheckout__Descriptor = Descriptor.MessageTypes[62];
      internal__static_CSEmkCheckout__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkCheckout, global::CSEmkCheckout.Builder>(internal__static_CSEmkCheckout__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCEmkCheckout__Descriptor = Descriptor.MessageTypes[63];
      internal__static_SCEmkCheckout__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmkCheckout, global::SCEmkCheckout.Builder>(internal__static_SCEmkCheckout__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Balance", "Usedmoney", "Usedtime", });
      internal__static_CSEmkRecord__Descriptor = Descriptor.MessageTypes[64];
      internal__static_CSEmkRecord__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkRecord, global::CSEmkRecord.Builder>(internal__static_CSEmkRecord__Descriptor,
              new string[] { "Page", "Memberid", });
      internal__static_SCEmkRecord__Descriptor = Descriptor.MessageTypes[65];
      internal__static_SCEmkRecord__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmkRecord, global::SCEmkRecord.Builder>(internal__static_SCEmkRecord__Descriptor,
              new string[] { "Emkinfo", });
      internal__static_CSEmkRecordFind__Descriptor = Descriptor.MessageTypes[66];
      internal__static_CSEmkRecordFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmkRecordFind, global::CSEmkRecordFind.Builder>(internal__static_CSEmkRecordFind__Descriptor,
              new string[] { "Page", "Begintime", "Endtime", "Keyword", });
      internal__static_SCEmkRecordFind__Descriptor = Descriptor.MessageTypes[67];
      internal__static_SCEmkRecordFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmkRecordFind, global::SCEmkRecordFind.Builder>(internal__static_SCEmkRecordFind__Descriptor,
              new string[] { "Emkinfo", });
      internal__static_CSGoodsAdd__Descriptor = Descriptor.MessageTypes[68];
      internal__static_CSGoodsAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGoodsAdd, global::CSGoodsAdd.Builder>(internal__static_CSGoodsAdd__Descriptor,
              new string[] { "Goods", });
      internal__static_CSGoodsDel__Descriptor = Descriptor.MessageTypes[69];
      internal__static_CSGoodsDel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGoodsDel, global::CSGoodsDel.Builder>(internal__static_CSGoodsDel__Descriptor,
              new string[] { "Ids", });
      internal__static_CSGoodsUpdate__Descriptor = Descriptor.MessageTypes[70];
      internal__static_CSGoodsUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGoodsUpdate, global::CSGoodsUpdate.Builder>(internal__static_CSGoodsUpdate__Descriptor,
              new string[] { "Goods", });
      internal__static_CSGoodsFind__Descriptor = Descriptor.MessageTypes[71];
      internal__static_CSGoodsFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGoodsFind, global::CSGoodsFind.Builder>(internal__static_CSGoodsFind__Descriptor,
              new string[] { "Page", "Category", "Keywords", });
      internal__static_SCGoodsFind__Descriptor = Descriptor.MessageTypes[72];
      internal__static_SCGoodsFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCGoodsFind, global::SCGoodsFind.Builder>(internal__static_SCGoodsFind__Descriptor,
              new string[] { "Goods", });
      internal__static_CSGoodsStock__Descriptor = Descriptor.MessageTypes[73];
      internal__static_CSGoodsStock__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGoodsStock, global::CSGoodsStock.Builder>(internal__static_CSGoodsStock__Descriptor,
              new string[] { "Page", });
      internal__static_SCGoodsStock__Descriptor = Descriptor.MessageTypes[74];
      internal__static_SCGoodsStock__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCGoodsStock, global::SCGoodsStock.Builder>(internal__static_SCGoodsStock__Descriptor,
              new string[] { "Goods", });
      internal__static_CSSalesRecord__Descriptor = Descriptor.MessageTypes[75];
      internal__static_CSSalesRecord__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSalesRecord, global::CSSalesRecord.Builder>(internal__static_CSSalesRecord__Descriptor,
              new string[] { "Page", "Goodsid", "Begintime", "Endtime", });
      internal__static_SCSalesRecord__Descriptor = Descriptor.MessageTypes[76];
      internal__static_SCSalesRecord__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSalesRecord, global::SCSalesRecord.Builder>(internal__static_SCSalesRecord__Descriptor,
              new string[] { "Sales", });
      internal__static_CSSalesTop__Descriptor = Descriptor.MessageTypes[77];
      internal__static_CSSalesTop__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSalesTop, global::CSSalesTop.Builder>(internal__static_CSSalesTop__Descriptor,
              new string[] { });
      internal__static_SCSalesTop__Descriptor = Descriptor.MessageTypes[78];
      internal__static_SCSalesTop__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSalesTop, global::SCSalesTop.Builder>(internal__static_SCSalesTop__Descriptor,
              new string[] { });
      internal__static_CSOrderList__Descriptor = Descriptor.MessageTypes[79];
      internal__static_CSOrderList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSOrderList, global::CSOrderList.Builder>(internal__static_CSOrderList__Descriptor,
              new string[] { "Page", "Status", "AddtimeStart", "AddtimeEnd", "ProctimeStart", "ProctimeEnd", "Username", });
      internal__static_SCOrderList__Descriptor = Descriptor.MessageTypes[80];
      internal__static_SCOrderList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCOrderList, global::SCOrderList.Builder>(internal__static_SCOrderList__Descriptor,
              new string[] { "Orders", });
      internal__static_CSOrderDetail__Descriptor = Descriptor.MessageTypes[81];
      internal__static_CSOrderDetail__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSOrderDetail, global::CSOrderDetail.Builder>(internal__static_CSOrderDetail__Descriptor,
              new string[] { "Orderid", });
      internal__static_SCOrderDetail__Descriptor = Descriptor.MessageTypes[82];
      internal__static_SCOrderDetail__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCOrderDetail, global::SCOrderDetail.Builder>(internal__static_SCOrderDetail__Descriptor,
              new string[] { "Details", });
      internal__static_CSOrderProcess__Descriptor = Descriptor.MessageTypes[83];
      internal__static_CSOrderProcess__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSOrderProcess, global::CSOrderProcess.Builder>(internal__static_CSOrderProcess__Descriptor,
              new string[] { "Orderid", });
      internal__static_SCShiftDeliveredBy__Descriptor = Descriptor.MessageTypes[84];
      internal__static_SCShiftDeliveredBy__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCShiftDeliveredBy, global::SCShiftDeliveredBy.Builder>(internal__static_SCShiftDeliveredBy__Descriptor,
              new string[] { "DeliveredBy", "ChargeAmount", "SaleAmount", });
      internal__static_CSShiftAdd__Descriptor = Descriptor.MessageTypes[85];
      internal__static_CSShiftAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSShiftAdd, global::CSShiftAdd.Builder>(internal__static_CSShiftAdd__Descriptor,
              new string[] { "DeliveredPwd", "ReceivedBy", "ReceivedPwd", "Ischeck", "Remark", });
      internal__static_CSShiftFind__Descriptor = Descriptor.MessageTypes[86];
      internal__static_CSShiftFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSShiftFind, global::CSShiftFind.Builder>(internal__static_CSShiftFind__Descriptor,
              new string[] { "Page", "Starttime", "Stoptime", });
      internal__static_SCShiftFind__Descriptor = Descriptor.MessageTypes[87];
      internal__static_SCShiftFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCShiftFind, global::SCShiftFind.Builder>(internal__static_SCShiftFind__Descriptor,
              new string[] { "Shifts", });
      internal__static_CSReconnect__Descriptor = Descriptor.MessageTypes[88];
      internal__static_CSReconnect__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSReconnect, global::CSReconnect.Builder>(internal__static_CSReconnect__Descriptor,
              new string[] { "UserId", "Password", "DeviceToken", });
      internal__static_SCReconnect__Descriptor = Descriptor.MessageTypes[89];
      internal__static_SCReconnect__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCReconnect, global::SCReconnect.Builder>(internal__static_SCReconnect__Descriptor,
              new string[] { "SessionId", "Guid", });
      internal__static_CSClientOpen__Descriptor = Descriptor.MessageTypes[90];
      internal__static_CSClientOpen__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSClientOpen, global::CSClientOpen.Builder>(internal__static_CSClientOpen__Descriptor,
              new string[] { "Text", });
      internal__static_CSClientClose__Descriptor = Descriptor.MessageTypes[91];
      internal__static_CSClientClose__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSClientClose, global::CSClientClose.Builder>(internal__static_CSClientClose__Descriptor,
              new string[] { });
      internal__static_CSLogon__Descriptor = Descriptor.MessageTypes[92];
      internal__static_CSLogon__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSLogon, global::CSLogon.Builder>(internal__static_CSLogon__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCLogon__Descriptor = Descriptor.MessageTypes[93];
      internal__static_SCLogon__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCLogon, global::SCLogon.Builder>(internal__static_SCLogon__Descriptor,
              new string[] { "Memberid", "Cardnumber", "Name", "Right", "Balance", "Integal", });
      internal__static_CSLogoff__Descriptor = Descriptor.MessageTypes[94];
      internal__static_CSLogoff__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSLogoff, global::CSLogoff.Builder>(internal__static_CSLogoff__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_SCLogoff__Descriptor = Descriptor.MessageTypes[95];
      internal__static_SCLogoff__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCLogoff, global::SCLogoff.Builder>(internal__static_SCLogoff__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Balance", "Usedmoney", "Usedtime", });
      internal__static_CSHungup__Descriptor = Descriptor.MessageTypes[96];
      internal__static_CSHungup__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSHungup, global::CSHungup.Builder>(internal__static_CSHungup__Descriptor,
              new string[] { "Cardnumber", });
      internal__static_CSPreCharge__Descriptor = Descriptor.MessageTypes[97];
      internal__static_CSPreCharge__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPreCharge, global::CSPreCharge.Builder>(internal__static_CSPreCharge__Descriptor,
              new string[] { "Cardnumber", "Amount", "Paymode", "Offical", });
      internal__static_SCPreCharge__Descriptor = Descriptor.MessageTypes[98];
      internal__static_SCPreCharge__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPreCharge, global::SCPreCharge.Builder>(internal__static_SCPreCharge__Descriptor,
              new string[] { "Qrcode", });
      internal__static_SCToCharge__Descriptor = Descriptor.MessageTypes[99];
      internal__static_SCToCharge__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCToCharge, global::SCToCharge.Builder>(internal__static_SCToCharge__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Recharge", "Balance", "Integal", });
      internal__static_CSCartAdd__Descriptor = Descriptor.MessageTypes[100];
      internal__static_CSCartAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCartAdd, global::CSCartAdd.Builder>(internal__static_CSCartAdd__Descriptor,
              new string[] { "Goodsid", "Goodsnum", });
      internal__static_CSCartDel__Descriptor = Descriptor.MessageTypes[101];
      internal__static_CSCartDel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCartDel, global::CSCartDel.Builder>(internal__static_CSCartDel__Descriptor,
              new string[] { "Goodsid", "Goodsnum", });
      internal__static_CSPreBuy__Descriptor = Descriptor.MessageTypes[102];
      internal__static_CSPreBuy__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPreBuy, global::CSPreBuy.Builder>(internal__static_CSPreBuy__Descriptor,
              new string[] { "Cardnumber", "Goodsid", "Goodsnum", });
      internal__static_SCPreBuy__Descriptor = Descriptor.MessageTypes[103];
      internal__static_SCPreBuy__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPreBuy, global::SCPreBuy.Builder>(internal__static_SCPreBuy__Descriptor,
              new string[] { "Qrcode", });
      internal__static_SCToBuy__Descriptor = Descriptor.MessageTypes[104];
      internal__static_SCToBuy__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCToBuy, global::SCToBuy.Builder>(internal__static_SCToBuy__Descriptor,
              new string[] { "Name", "Cardnumber", "Right", "Usedmoney", "Usedintegal", "Balance", "Integal", });
      internal__static_SCSysMessage__Descriptor = Descriptor.MessageTypes[105];
      internal__static_SCSysMessage__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSysMessage, global::SCSysMessage.Builder>(internal__static_SCSysMessage__Descriptor,
              new string[] { "Cmd", "Params", });
      internal__static_CSEvaluate__Descriptor = Descriptor.MessageTypes[106];
      internal__static_CSEvaluate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEvaluate, global::CSEvaluate.Builder>(internal__static_CSEvaluate__Descriptor,
              new string[] { "StaffStar", "EnvStar", "DevStar", "Eval", });
      internal__static_SCEvaluate__Descriptor = Descriptor.MessageTypes[107];
      internal__static_SCEvaluate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEvaluate, global::SCEvaluate.Builder>(internal__static_SCEvaluate__Descriptor,
              new string[] { "Integal", });
      internal__static_CSVerifyCode__Descriptor = Descriptor.MessageTypes[108];
      internal__static_CSVerifyCode__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSVerifyCode, global::CSVerifyCode.Builder>(internal__static_CSVerifyCode__Descriptor,
              new string[] { "Phonenumber", });
      internal__static_SCVerifyCode__Descriptor = Descriptor.MessageTypes[109];
      internal__static_SCVerifyCode__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCVerifyCode, global::SCVerifyCode.Builder>(internal__static_SCVerifyCode__Descriptor,
              new string[] { "Verifycode", });
      internal__static_CSBindMobile__Descriptor = Descriptor.MessageTypes[110];
      internal__static_CSBindMobile__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSBindMobile, global::CSBindMobile.Builder>(internal__static_CSBindMobile__Descriptor,
              new string[] { "Phonenumber", "Verifycode", });
      internal__static_SCBindMobile__Descriptor = Descriptor.MessageTypes[111];
      internal__static_SCBindMobile__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCBindMobile, global::SCBindMobile.Builder>(internal__static_SCBindMobile__Descriptor,
              new string[] { "Integal", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        global::BaseStruct.Descriptor, 
        }, assigner);
  }
  #endregion
  
}
#region Enums
public enum Cmd {
  CMD_GETSERVER = 1000,
  CMD_AUTHEN = 1001,
  CMD_LOGIN = 1002,
  CMD_ACCOUNT_INFO = 1003,
  CMD_REALTIME_INFO = 1004,
  CMD_COMMAND = 1005,
  CMD_LOG = 1006,
  CMD_CALL_LIST = 1007,
  CMD_CALL_PROCESS = 1008,
  CMD_ROLE_LIST = 1010,
  CMD_ROLE_ADD = 1011,
  CMD_ROLE_DEL = 1012,
  CMD_ROLE_UPDATE = 1013,
  CMD_ROLE_RIGHTS = 1014,
  CMD_STAFF_LIST = 1020,
  CMD_STAFF_ADD = 1021,
  CMD_STAFF_DEL = 1022,
  CMD_STAFF_UPDATE = 1023,
  CMD_STAFF_FIND = 1024,
  CMD_STAFF_SNS = 1025,
  CMD_STAFF_COMMENT = 1026,
  CMD_STAFF_PERFORM = 1027,
  CMD_EARNING_DAY = 1030,
  CMD_EARNING_MONTH = 1031,
  CMD_EARNING_YEAR = 1032,
  CMD_COMPUTER_LIST = 1040,
  CMD_COMPUTER_ADD = 1041,
  CMD_COMPUTER_DEL = 1042,
  CMD_COMPUTER_UPDATE = 1043,
  CMD_COMPUTER_FIND = 1044,
  CMD_COMPUTER_OPEN = 1045,
  CMD_COMPUTER_CLOSE = 1046,
  CMD_MEMBER_LIST = 1050,
  CMD_MEMBER_ADD = 1051,
  CMD_MEMBER_DEL = 1052,
  CMD_MEMBER_UPDATE = 1053,
  CMD_MEMBER_FIND = 1054,
  CMD_MEMBER_CARD_INFO = 1055,
  CMD_MEMBER_CONSUM_RECORD = 1056,
  CMD_MEMBER_CONSUM_FILTER = 1057,
  CMD_SYS_BILLING_LIST = 1060,
  CMD_SYS_BILLING_UPDATE = 1061,
  CMD_SYS_INFO = 1062,
  CMD_SYS_ADD = 1063,
  CMD_SYS_DEL = 1064,
  CMD_SYS_UPDATE = 1065,
  CMD_EMK_CHECKIN = 1070,
  CMD_EMK_CHECKOUT = 1071,
  CMD_EMK_CANCEL = 1074,
  CMD_EMK_RECORD = 1075,
  CMD_EMK_RECORD_FIND = 1076,
  CMD_GOODS_ADD = 1080,
  CMD_GOODS_DEL = 1081,
  CMD_GOODS_UPDATE = 1082,
  CMD_GOODS_FIND = 1083,
  CMD_GOODS_SALES = 1084,
  CMD_GOODS_SALES_TOP = 1085,
  CMD_GOODS_STOCK = 1086,
  CMD_GOODS_ORDER = 1087,
  CMD_GOODS_ORDER_DETAIL = 1088,
  CMD_GOODS_ORDER_PROCESS = 1089,
  CMD_SHIFT_DELIVEREDBY = 1090,
  CMD_SHIFT_ADD = 1091,
  CMD_SHIFT_FIND = 1092,
  CMD_UPLOAD_HEAD = 1100,
  CMD_HEART = 1101,
  CMD_PLAYER_KICK = 1102,
  CMD_CHECK_NAME = 1103,
  CMD_CHECK_ACCOUNT = 1104,
  CMD_RECONNECT = 1105,
  CMD_CLIENT_OPEN = 2000,
  CMD_CLIENT_CLOSE = 2001,
  CMD_CLIENT_LOGON = 2002,
  CMD_CLIENT_LOGOFF = 2003,
  CMD_CLIENT_HUNGUP = 2004,
  CMD_PRECHARGE = 2005,
  CMD_TOCHARGE = 2006,
  CMD_CLIENT_CART_ADD = 2008,
  CMD_CLIENT_CART_DEL = 2009,
  CMD_PREBUY = 2010,
  CMD_TOBUY = 2011,
  CMD_CLIENT_SYSMESSAGE = 2012,
  CMD_CLIENT_EVALUATE = 2014,
  CMD_CLIENT_VERIFYCODE = 2015,
  CMD_CLIENT_BINDMOBILE = 2016,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MessagePack : pb::GeneratedMessage<MessagePack, MessagePack.Builder> {
  private MessagePack() { }
  private static readonly MessagePack defaultInstance = new MessagePack().MakeReadOnly();
  private static readonly string[] _messagePackFieldNames = new string[] { "cmd", "content", "sessionId", "version" };
  private static readonly uint[] _messagePackFieldTags = new uint[] { 8, 34, 24, 16 };
  public static MessagePack DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MessagePack DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MessagePack ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_MessagePack__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MessagePack, MessagePack.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_MessagePack__FieldAccessorTable; }
  }
  
  public const int CmdFieldNumber = 1;
  private bool hasCmd;
  private global::Cmd cmd_ = global::Cmd.CMD_GETSERVER;
  public bool HasCmd {
    get { return hasCmd; }
  }
  public global::Cmd Cmd {
    get { return cmd_; }
  }
  
  public const int VersionFieldNumber = 2;
  private bool hasVersion;
  private int version_;
  public bool HasVersion {
    get { return hasVersion; }
  }
  public int Version {
    get { return version_; }
  }
  
  public const int SessionIdFieldNumber = 3;
  private bool hasSessionId;
  private int sessionId_;
  public bool HasSessionId {
    get { return hasSessionId; }
  }
  public int SessionId {
    get { return sessionId_; }
  }
  
  public const int ContentFieldNumber = 4;
  private bool hasContent;
  private global::MessageContent content_;
  public bool HasContent {
    get { return hasContent; }
  }
  public global::MessageContent Content {
    get { return content_ ?? global::MessageContent.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCmd) return false;
      if (HasContent) {
        if (!Content.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _messagePackFieldNames;
    if (hasCmd) {
      output.WriteEnum(1, field_names[0], (int) Cmd, Cmd);
    }
    if (hasVersion) {
      output.WriteInt32(2, field_names[3], Version);
    }
    if (hasSessionId) {
      output.WriteInt32(3, field_names[2], SessionId);
    }
    if (hasContent) {
      output.WriteMessage(4, field_names[1], Content);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCmd) {
      size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Cmd);
    }
    if (hasVersion) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
    }
    if (hasSessionId) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, SessionId);
    }
    if (hasContent) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, Content);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MessagePack ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MessagePack ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MessagePack ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MessagePack ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MessagePack ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MessagePack ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MessagePack ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MessagePack ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MessagePack ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MessagePack ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MessagePack MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MessagePack prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MessagePack, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MessagePack cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MessagePack result;
    
    private MessagePack PrepareBuilder() {
      if (resultIsReadOnly) {
        MessagePack original = result;
        result = new MessagePack();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MessagePack MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MessagePack.Descriptor; }
    }
    
    public override MessagePack DefaultInstanceForType {
      get { return global::MessagePack.DefaultInstance; }
    }
    
    public override MessagePack BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MessagePack) {
        return MergeFrom((MessagePack) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MessagePack other) {
      if (other == global::MessagePack.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCmd) {
        Cmd = other.Cmd;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      if (other.HasSessionId) {
        SessionId = other.SessionId;
      }
      if (other.HasContent) {
        MergeContent(other.Content);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_messagePackFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _messagePackFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.cmd_, out unknown)) {
              result.hasCmd = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
          case 16: {
            result.hasVersion = input.ReadInt32(ref result.version_);
            break;
          }
          case 24: {
            result.hasSessionId = input.ReadInt32(ref result.sessionId_);
            break;
          }
          case 34: {
            global::MessageContent.Builder subBuilder = global::MessageContent.CreateBuilder();
            if (result.hasContent) {
              subBuilder.MergeFrom(Content);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Content = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCmd {
     get { return result.hasCmd; }
    }
    public global::Cmd Cmd {
      get { return result.Cmd; }
      set { SetCmd(value); }
    }
    public Builder SetCmd(global::Cmd value) {
      PrepareBuilder();
      result.hasCmd = true;
      result.cmd_ = value;
      return this;
    }
    public Builder ClearCmd() {
      PrepareBuilder();
      result.hasCmd = false;
      result.cmd_ = global::Cmd.CMD_GETSERVER;
      return this;
    }
    
    public bool HasVersion {
      get { return result.hasVersion; }
    }
    public int Version {
      get { return result.Version; }
      set { SetVersion(value); }
    }
    public Builder SetVersion(int value) {
      PrepareBuilder();
      result.hasVersion = true;
      result.version_ = value;
      return this;
    }
    public Builder ClearVersion() {
      PrepareBuilder();
      result.hasVersion = false;
      result.version_ = 0;
      return this;
    }
    
    public bool HasSessionId {
      get { return result.hasSessionId; }
    }
    public int SessionId {
      get { return result.SessionId; }
      set { SetSessionId(value); }
    }
    public Builder SetSessionId(int value) {
      PrepareBuilder();
      result.hasSessionId = true;
      result.sessionId_ = value;
      return this;
    }
    public Builder ClearSessionId() {
      PrepareBuilder();
      result.hasSessionId = false;
      result.sessionId_ = 0;
      return this;
    }
    
    public bool HasContent {
     get { return result.hasContent; }
    }
    public global::MessageContent Content {
      get { return result.Content; }
      set { SetContent(value); }
    }
    public Builder SetContent(global::MessageContent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasContent = true;
      result.content_ = value;
      return this;
    }
    public Builder SetContent(global::MessageContent.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasContent = true;
      result.content_ = builderForValue.Build();
      return this;
    }
    public Builder MergeContent(global::MessageContent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasContent &&
          result.content_ != global::MessageContent.DefaultInstance) {
          result.content_ = global::MessageContent.CreateBuilder(result.content_).MergeFrom(value).BuildPartial();
      } else {
        result.content_ = value;
      }
      result.hasContent = true;
      return this;
    }
    public Builder ClearContent() {
      PrepareBuilder();
      result.hasContent = false;
      result.content_ = null;
      return this;
    }
  }
  static MessagePack() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MessageContent : pb::GeneratedMessage<MessageContent, MessageContent.Builder> {
  private MessageContent() { }
  private static readonly MessageContent defaultInstance = new MessageContent().MakeReadOnly();
  private static readonly string[] _messageContentFieldNames = new string[] { "clAskServer", "csAccountAdd", "csAccountDel", "csAccountSnsSet", "csAccountUpdate", "csAddSysInfo", "csAuthen", "csBindMobile", "csCallProcess", "csCartAdd", "csCartDel", "csClientClose", "csClientOpen", "csCommand", "csComputerAdd", "csComputerDel", "csComputerFind", "csComputerUpdate", "csDelSysInfo", "csEarning", "csEmkCheckin", "csEmkCheckout", "csEmkRecord", "csEmkRecordFind", "csEvaluate", "csGoodsAdd", "csGoodsDel", "csGoodsFind", "csGoodsStock", "csGoodsUpdate", "csHungup", "csLog", "csLogin", "csLogoff", "csLogon", "csMemberAdd", "csMemberCardInfo", "csMemberConsumFilter", "csMemberConsumRecord", "csMemberDel", "csMemberFind", "csMemberList", "csMemberUpdate", "csOrderDetail", "csOrderList", "csOrderProcess", "csPreBuy", "csPreCharge", "csReconnect", "csRoleAdd", "csRoleDel", "csRoleRights", "csRoleUpdate", "csSalesRecord", "csSalesTop", "csShiftAdd", "csShiftFind", "csStaffComment", "csStaffPerform", "csSysBillUpdate", "csSysInfo", "csUpdateSysInfo", "csVerifyCode", "errorTip", "lcRetServer", "messageType", "scAccountInfo", "scAccountList", "scAuthen", "scBindMobile", "scCallList", "scComputerFind", "scComputerList", "scEarning", "scEmkCheckin", "scEmkCheckout", "scEmkRecord", "scEmkRecordFind", "scEvaluate", "scGoodsFind", "scGoodsStock", "scLog", "scLogin", "scLogoff", "scLogon", "scMemberAdd", "scMemberCardInfo", "scMemberConsumFilter", "scMemberConsumRecord", "scMemberFind", "scMemberList", "scOrderDetail", "scOrderList", "scPreBuy", "scPreCharge", "scRealtimeInfo", "scReconnect", "scRoleAdd", "scRoleList", "scSalesRecord", "scSalesTop", "scShiftDeliveredBy", "scShiftFind", "scStaffComment", "scStaffPerform", "scSysBillList", "scSysBillUpdate", "scSysInfo", "scSysMessage", "scToBuy", "scToCharge", "scVerifyCode" };
  private static readonly uint[] _messageContentFieldTags = new uint[] { 26, 186, 194, 210, 202, 482, 42, 1778, 82, 1690, 1698, 1610, 1602, 106, 290, 298, 314, 306, 490, 266, 506, 522, 538, 554, 1746, 586, 594, 570, 610, 602, 1650, 114, 58, 1634, 1618, 346, 394, 426, 410, 362, 378, 330, 370, 674, 658, 690, 1706, 1658, 730, 138, 154, 170, 162, 626, 642, 706, 714, 218, 234, 450, 466, 498, 1762, 18, 34, 8, 90, 178, 50, 1786, 74, 322, 282, 274, 514, 530, 546, 562, 1754, 578, 618, 122, 66, 1642, 1626, 354, 402, 434, 418, 386, 338, 682, 666, 1714, 1666, 98, 738, 146, 130, 634, 650, 698, 722, 226, 242, 442, 458, 474, 1730, 1722, 1674, 1770 };
  public static MessageContent DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MessageContent DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MessageContent ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_MessageContent__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MessageContent, MessageContent.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_MessageContent__FieldAccessorTable; }
  }
  
  public const int MessageTypeFieldNumber = 1;
  private bool hasMessageType;
  private int messageType_;
  public bool HasMessageType {
    get { return hasMessageType; }
  }
  public int MessageType {
    get { return messageType_; }
  }
  
  public const int ErrorTipFieldNumber = 2;
  private bool hasErrorTip;
  private global::StructErrorTip errorTip_;
  public bool HasErrorTip {
    get { return hasErrorTip; }
  }
  public global::StructErrorTip ErrorTip {
    get { return errorTip_ ?? global::StructErrorTip.DefaultInstance; }
  }
  
  public const int ClAskServerFieldNumber = 3;
  private bool hasClAskServer;
  private global::CLAskServer clAskServer_;
  public bool HasClAskServer {
    get { return hasClAskServer; }
  }
  public global::CLAskServer ClAskServer {
    get { return clAskServer_ ?? global::CLAskServer.DefaultInstance; }
  }
  
  public const int LcRetServerFieldNumber = 4;
  private bool hasLcRetServer;
  private global::LCRetServer lcRetServer_;
  public bool HasLcRetServer {
    get { return hasLcRetServer; }
  }
  public global::LCRetServer LcRetServer {
    get { return lcRetServer_ ?? global::LCRetServer.DefaultInstance; }
  }
  
  public const int CsAuthenFieldNumber = 5;
  private bool hasCsAuthen;
  private global::CSAuthen csAuthen_;
  public bool HasCsAuthen {
    get { return hasCsAuthen; }
  }
  public global::CSAuthen CsAuthen {
    get { return csAuthen_ ?? global::CSAuthen.DefaultInstance; }
  }
  
  public const int ScAuthenFieldNumber = 6;
  private bool hasScAuthen;
  private global::SCAuthen scAuthen_;
  public bool HasScAuthen {
    get { return hasScAuthen; }
  }
  public global::SCAuthen ScAuthen {
    get { return scAuthen_ ?? global::SCAuthen.DefaultInstance; }
  }
  
  public const int CsLoginFieldNumber = 7;
  private bool hasCsLogin;
  private global::CSLogin csLogin_;
  public bool HasCsLogin {
    get { return hasCsLogin; }
  }
  public global::CSLogin CsLogin {
    get { return csLogin_ ?? global::CSLogin.DefaultInstance; }
  }
  
  public const int ScLoginFieldNumber = 8;
  private bool hasScLogin;
  private global::SCLogin scLogin_;
  public bool HasScLogin {
    get { return hasScLogin; }
  }
  public global::SCLogin ScLogin {
    get { return scLogin_ ?? global::SCLogin.DefaultInstance; }
  }
  
  public const int ScCallListFieldNumber = 9;
  private bool hasScCallList;
  private global::SCCallList scCallList_;
  public bool HasScCallList {
    get { return hasScCallList; }
  }
  public global::SCCallList ScCallList {
    get { return scCallList_ ?? global::SCCallList.DefaultInstance; }
  }
  
  public const int CsCallProcessFieldNumber = 10;
  private bool hasCsCallProcess;
  private global::CSCallProcess csCallProcess_;
  public bool HasCsCallProcess {
    get { return hasCsCallProcess; }
  }
  public global::CSCallProcess CsCallProcess {
    get { return csCallProcess_ ?? global::CSCallProcess.DefaultInstance; }
  }
  
  public const int ScAccountInfoFieldNumber = 11;
  private bool hasScAccountInfo;
  private global::SCAccountInfo scAccountInfo_;
  public bool HasScAccountInfo {
    get { return hasScAccountInfo; }
  }
  public global::SCAccountInfo ScAccountInfo {
    get { return scAccountInfo_ ?? global::SCAccountInfo.DefaultInstance; }
  }
  
  public const int ScRealtimeInfoFieldNumber = 12;
  private bool hasScRealtimeInfo;
  private global::SCRealtimeInfo scRealtimeInfo_;
  public bool HasScRealtimeInfo {
    get { return hasScRealtimeInfo; }
  }
  public global::SCRealtimeInfo ScRealtimeInfo {
    get { return scRealtimeInfo_ ?? global::SCRealtimeInfo.DefaultInstance; }
  }
  
  public const int CsCommandFieldNumber = 13;
  private bool hasCsCommand;
  private global::CSCommand csCommand_;
  public bool HasCsCommand {
    get { return hasCsCommand; }
  }
  public global::CSCommand CsCommand {
    get { return csCommand_ ?? global::CSCommand.DefaultInstance; }
  }
  
  public const int CsLogFieldNumber = 14;
  private bool hasCsLog;
  private global::CSLog csLog_;
  public bool HasCsLog {
    get { return hasCsLog; }
  }
  public global::CSLog CsLog {
    get { return csLog_ ?? global::CSLog.DefaultInstance; }
  }
  
  public const int ScLogFieldNumber = 15;
  private bool hasScLog;
  private global::SCLog scLog_;
  public bool HasScLog {
    get { return hasScLog; }
  }
  public global::SCLog ScLog {
    get { return scLog_ ?? global::SCLog.DefaultInstance; }
  }
  
  public const int ScRoleListFieldNumber = 16;
  private bool hasScRoleList;
  private global::SCRoleList scRoleList_;
  public bool HasScRoleList {
    get { return hasScRoleList; }
  }
  public global::SCRoleList ScRoleList {
    get { return scRoleList_ ?? global::SCRoleList.DefaultInstance; }
  }
  
  public const int CsRoleAddFieldNumber = 17;
  private bool hasCsRoleAdd;
  private global::CSRoleAdd csRoleAdd_;
  public bool HasCsRoleAdd {
    get { return hasCsRoleAdd; }
  }
  public global::CSRoleAdd CsRoleAdd {
    get { return csRoleAdd_ ?? global::CSRoleAdd.DefaultInstance; }
  }
  
  public const int ScRoleAddFieldNumber = 18;
  private bool hasScRoleAdd;
  private global::SCRoleAdd scRoleAdd_;
  public bool HasScRoleAdd {
    get { return hasScRoleAdd; }
  }
  public global::SCRoleAdd ScRoleAdd {
    get { return scRoleAdd_ ?? global::SCRoleAdd.DefaultInstance; }
  }
  
  public const int CsRoleDelFieldNumber = 19;
  private bool hasCsRoleDel;
  private global::CSRoleDel csRoleDel_;
  public bool HasCsRoleDel {
    get { return hasCsRoleDel; }
  }
  public global::CSRoleDel CsRoleDel {
    get { return csRoleDel_ ?? global::CSRoleDel.DefaultInstance; }
  }
  
  public const int CsRoleUpdateFieldNumber = 20;
  private bool hasCsRoleUpdate;
  private global::CSRoleUpdate csRoleUpdate_;
  public bool HasCsRoleUpdate {
    get { return hasCsRoleUpdate; }
  }
  public global::CSRoleUpdate CsRoleUpdate {
    get { return csRoleUpdate_ ?? global::CSRoleUpdate.DefaultInstance; }
  }
  
  public const int CsRoleRightsFieldNumber = 21;
  private bool hasCsRoleRights;
  private global::CSRoleRights csRoleRights_;
  public bool HasCsRoleRights {
    get { return hasCsRoleRights; }
  }
  public global::CSRoleRights CsRoleRights {
    get { return csRoleRights_ ?? global::CSRoleRights.DefaultInstance; }
  }
  
  public const int ScAccountListFieldNumber = 22;
  private bool hasScAccountList;
  private global::SCAccountList scAccountList_;
  public bool HasScAccountList {
    get { return hasScAccountList; }
  }
  public global::SCAccountList ScAccountList {
    get { return scAccountList_ ?? global::SCAccountList.DefaultInstance; }
  }
  
  public const int CsAccountAddFieldNumber = 23;
  private bool hasCsAccountAdd;
  private global::CSAccountAdd csAccountAdd_;
  public bool HasCsAccountAdd {
    get { return hasCsAccountAdd; }
  }
  public global::CSAccountAdd CsAccountAdd {
    get { return csAccountAdd_ ?? global::CSAccountAdd.DefaultInstance; }
  }
  
  public const int CsAccountDelFieldNumber = 24;
  private bool hasCsAccountDel;
  private global::CSAccountDel csAccountDel_;
  public bool HasCsAccountDel {
    get { return hasCsAccountDel; }
  }
  public global::CSAccountDel CsAccountDel {
    get { return csAccountDel_ ?? global::CSAccountDel.DefaultInstance; }
  }
  
  public const int CsAccountUpdateFieldNumber = 25;
  private bool hasCsAccountUpdate;
  private global::CSAccountUpdate csAccountUpdate_;
  public bool HasCsAccountUpdate {
    get { return hasCsAccountUpdate; }
  }
  public global::CSAccountUpdate CsAccountUpdate {
    get { return csAccountUpdate_ ?? global::CSAccountUpdate.DefaultInstance; }
  }
  
  public const int CsAccountSnsSetFieldNumber = 26;
  private bool hasCsAccountSnsSet;
  private global::CSAccountSnsSet csAccountSnsSet_;
  public bool HasCsAccountSnsSet {
    get { return hasCsAccountSnsSet; }
  }
  public global::CSAccountSnsSet CsAccountSnsSet {
    get { return csAccountSnsSet_ ?? global::CSAccountSnsSet.DefaultInstance; }
  }
  
  public const int CsStaffCommentFieldNumber = 27;
  private bool hasCsStaffComment;
  private global::CSStaffComment csStaffComment_;
  public bool HasCsStaffComment {
    get { return hasCsStaffComment; }
  }
  public global::CSStaffComment CsStaffComment {
    get { return csStaffComment_ ?? global::CSStaffComment.DefaultInstance; }
  }
  
  public const int ScStaffCommentFieldNumber = 28;
  private bool hasScStaffComment;
  private global::SCStaffComment scStaffComment_;
  public bool HasScStaffComment {
    get { return hasScStaffComment; }
  }
  public global::SCStaffComment ScStaffComment {
    get { return scStaffComment_ ?? global::SCStaffComment.DefaultInstance; }
  }
  
  public const int CsStaffPerformFieldNumber = 29;
  private bool hasCsStaffPerform;
  private global::CSStaffPerform csStaffPerform_;
  public bool HasCsStaffPerform {
    get { return hasCsStaffPerform; }
  }
  public global::CSStaffPerform CsStaffPerform {
    get { return csStaffPerform_ ?? global::CSStaffPerform.DefaultInstance; }
  }
  
  public const int ScStaffPerformFieldNumber = 30;
  private bool hasScStaffPerform;
  private global::SCStaffPerform scStaffPerform_;
  public bool HasScStaffPerform {
    get { return hasScStaffPerform; }
  }
  public global::SCStaffPerform ScStaffPerform {
    get { return scStaffPerform_ ?? global::SCStaffPerform.DefaultInstance; }
  }
  
  public const int CsEarningFieldNumber = 33;
  private bool hasCsEarning;
  private global::CSEarning csEarning_;
  public bool HasCsEarning {
    get { return hasCsEarning; }
  }
  public global::CSEarning CsEarning {
    get { return csEarning_ ?? global::CSEarning.DefaultInstance; }
  }
  
  public const int ScEarningFieldNumber = 34;
  private bool hasScEarning;
  private global::SCEarning scEarning_;
  public bool HasScEarning {
    get { return hasScEarning; }
  }
  public global::SCEarning ScEarning {
    get { return scEarning_ ?? global::SCEarning.DefaultInstance; }
  }
  
  public const int ScComputerListFieldNumber = 35;
  private bool hasScComputerList;
  private global::SCComputerList scComputerList_;
  public bool HasScComputerList {
    get { return hasScComputerList; }
  }
  public global::SCComputerList ScComputerList {
    get { return scComputerList_ ?? global::SCComputerList.DefaultInstance; }
  }
  
  public const int CsComputerAddFieldNumber = 36;
  private bool hasCsComputerAdd;
  private global::CSComputerAdd csComputerAdd_;
  public bool HasCsComputerAdd {
    get { return hasCsComputerAdd; }
  }
  public global::CSComputerAdd CsComputerAdd {
    get { return csComputerAdd_ ?? global::CSComputerAdd.DefaultInstance; }
  }
  
  public const int CsComputerDelFieldNumber = 37;
  private bool hasCsComputerDel;
  private global::CSComputerDel csComputerDel_;
  public bool HasCsComputerDel {
    get { return hasCsComputerDel; }
  }
  public global::CSComputerDel CsComputerDel {
    get { return csComputerDel_ ?? global::CSComputerDel.DefaultInstance; }
  }
  
  public const int CsComputerUpdateFieldNumber = 38;
  private bool hasCsComputerUpdate;
  private global::CSComputerUpdate csComputerUpdate_;
  public bool HasCsComputerUpdate {
    get { return hasCsComputerUpdate; }
  }
  public global::CSComputerUpdate CsComputerUpdate {
    get { return csComputerUpdate_ ?? global::CSComputerUpdate.DefaultInstance; }
  }
  
  public const int CsComputerFindFieldNumber = 39;
  private bool hasCsComputerFind;
  private global::CSComputerFind csComputerFind_;
  public bool HasCsComputerFind {
    get { return hasCsComputerFind; }
  }
  public global::CSComputerFind CsComputerFind {
    get { return csComputerFind_ ?? global::CSComputerFind.DefaultInstance; }
  }
  
  public const int ScComputerFindFieldNumber = 40;
  private bool hasScComputerFind;
  private global::SCComputerFind scComputerFind_;
  public bool HasScComputerFind {
    get { return hasScComputerFind; }
  }
  public global::SCComputerFind ScComputerFind {
    get { return scComputerFind_ ?? global::SCComputerFind.DefaultInstance; }
  }
  
  public const int CsMemberListFieldNumber = 41;
  private bool hasCsMemberList;
  private global::CSMemberList csMemberList_;
  public bool HasCsMemberList {
    get { return hasCsMemberList; }
  }
  public global::CSMemberList CsMemberList {
    get { return csMemberList_ ?? global::CSMemberList.DefaultInstance; }
  }
  
  public const int ScMemberListFieldNumber = 42;
  private bool hasScMemberList;
  private global::SCMemberList scMemberList_;
  public bool HasScMemberList {
    get { return hasScMemberList; }
  }
  public global::SCMemberList ScMemberList {
    get { return scMemberList_ ?? global::SCMemberList.DefaultInstance; }
  }
  
  public const int CsMemberAddFieldNumber = 43;
  private bool hasCsMemberAdd;
  private global::CSMemberAdd csMemberAdd_;
  public bool HasCsMemberAdd {
    get { return hasCsMemberAdd; }
  }
  public global::CSMemberAdd CsMemberAdd {
    get { return csMemberAdd_ ?? global::CSMemberAdd.DefaultInstance; }
  }
  
  public const int ScMemberAddFieldNumber = 44;
  private bool hasScMemberAdd;
  private global::SCMemberAdd scMemberAdd_;
  public bool HasScMemberAdd {
    get { return hasScMemberAdd; }
  }
  public global::SCMemberAdd ScMemberAdd {
    get { return scMemberAdd_ ?? global::SCMemberAdd.DefaultInstance; }
  }
  
  public const int CsMemberDelFieldNumber = 45;
  private bool hasCsMemberDel;
  private global::CSMemberDel csMemberDel_;
  public bool HasCsMemberDel {
    get { return hasCsMemberDel; }
  }
  public global::CSMemberDel CsMemberDel {
    get { return csMemberDel_ ?? global::CSMemberDel.DefaultInstance; }
  }
  
  public const int CsMemberUpdateFieldNumber = 46;
  private bool hasCsMemberUpdate;
  private global::CSMemberUpdateStatus csMemberUpdate_;
  public bool HasCsMemberUpdate {
    get { return hasCsMemberUpdate; }
  }
  public global::CSMemberUpdateStatus CsMemberUpdate {
    get { return csMemberUpdate_ ?? global::CSMemberUpdateStatus.DefaultInstance; }
  }
  
  public const int CsMemberFindFieldNumber = 47;
  private bool hasCsMemberFind;
  private global::CSMemberFind csMemberFind_;
  public bool HasCsMemberFind {
    get { return hasCsMemberFind; }
  }
  public global::CSMemberFind CsMemberFind {
    get { return csMemberFind_ ?? global::CSMemberFind.DefaultInstance; }
  }
  
  public const int ScMemberFindFieldNumber = 48;
  private bool hasScMemberFind;
  private global::SCMemberFind scMemberFind_;
  public bool HasScMemberFind {
    get { return hasScMemberFind; }
  }
  public global::SCMemberFind ScMemberFind {
    get { return scMemberFind_ ?? global::SCMemberFind.DefaultInstance; }
  }
  
  public const int CsMemberCardInfoFieldNumber = 49;
  private bool hasCsMemberCardInfo;
  private global::CSMemberCardInfo csMemberCardInfo_;
  public bool HasCsMemberCardInfo {
    get { return hasCsMemberCardInfo; }
  }
  public global::CSMemberCardInfo CsMemberCardInfo {
    get { return csMemberCardInfo_ ?? global::CSMemberCardInfo.DefaultInstance; }
  }
  
  public const int ScMemberCardInfoFieldNumber = 50;
  private bool hasScMemberCardInfo;
  private global::SCMemberCardInfo scMemberCardInfo_;
  public bool HasScMemberCardInfo {
    get { return hasScMemberCardInfo; }
  }
  public global::SCMemberCardInfo ScMemberCardInfo {
    get { return scMemberCardInfo_ ?? global::SCMemberCardInfo.DefaultInstance; }
  }
  
  public const int CsMemberConsumRecordFieldNumber = 51;
  private bool hasCsMemberConsumRecord;
  private global::CSMemberConsumRecord csMemberConsumRecord_;
  public bool HasCsMemberConsumRecord {
    get { return hasCsMemberConsumRecord; }
  }
  public global::CSMemberConsumRecord CsMemberConsumRecord {
    get { return csMemberConsumRecord_ ?? global::CSMemberConsumRecord.DefaultInstance; }
  }
  
  public const int ScMemberConsumRecordFieldNumber = 52;
  private bool hasScMemberConsumRecord;
  private global::SCMemberConsumRecord scMemberConsumRecord_;
  public bool HasScMemberConsumRecord {
    get { return hasScMemberConsumRecord; }
  }
  public global::SCMemberConsumRecord ScMemberConsumRecord {
    get { return scMemberConsumRecord_ ?? global::SCMemberConsumRecord.DefaultInstance; }
  }
  
  public const int CsMemberConsumFilterFieldNumber = 53;
  private bool hasCsMemberConsumFilter;
  private global::CSMemberConsumFilter csMemberConsumFilter_;
  public bool HasCsMemberConsumFilter {
    get { return hasCsMemberConsumFilter; }
  }
  public global::CSMemberConsumFilter CsMemberConsumFilter {
    get { return csMemberConsumFilter_ ?? global::CSMemberConsumFilter.DefaultInstance; }
  }
  
  public const int ScMemberConsumFilterFieldNumber = 54;
  private bool hasScMemberConsumFilter;
  private global::SCMemberConsumFilter scMemberConsumFilter_;
  public bool HasScMemberConsumFilter {
    get { return hasScMemberConsumFilter; }
  }
  public global::SCMemberConsumFilter ScMemberConsumFilter {
    get { return scMemberConsumFilter_ ?? global::SCMemberConsumFilter.DefaultInstance; }
  }
  
  public const int ScSysBillListFieldNumber = 55;
  private bool hasScSysBillList;
  private global::SCSysBillList scSysBillList_;
  public bool HasScSysBillList {
    get { return hasScSysBillList; }
  }
  public global::SCSysBillList ScSysBillList {
    get { return scSysBillList_ ?? global::SCSysBillList.DefaultInstance; }
  }
  
  public const int CsSysBillUpdateFieldNumber = 56;
  private bool hasCsSysBillUpdate;
  private global::CSSysBillUpdate csSysBillUpdate_;
  public bool HasCsSysBillUpdate {
    get { return hasCsSysBillUpdate; }
  }
  public global::CSSysBillUpdate CsSysBillUpdate {
    get { return csSysBillUpdate_ ?? global::CSSysBillUpdate.DefaultInstance; }
  }
  
  public const int ScSysBillUpdateFieldNumber = 57;
  private bool hasScSysBillUpdate;
  private global::SCSysBillUpdate scSysBillUpdate_;
  public bool HasScSysBillUpdate {
    get { return hasScSysBillUpdate; }
  }
  public global::SCSysBillUpdate ScSysBillUpdate {
    get { return scSysBillUpdate_ ?? global::SCSysBillUpdate.DefaultInstance; }
  }
  
  public const int CsSysInfoFieldNumber = 58;
  private bool hasCsSysInfo;
  private global::CSSysInto csSysInfo_;
  public bool HasCsSysInfo {
    get { return hasCsSysInfo; }
  }
  public global::CSSysInto CsSysInfo {
    get { return csSysInfo_ ?? global::CSSysInto.DefaultInstance; }
  }
  
  public const int ScSysInfoFieldNumber = 59;
  private bool hasScSysInfo;
  private global::SCSysInfo scSysInfo_;
  public bool HasScSysInfo {
    get { return hasScSysInfo; }
  }
  public global::SCSysInfo ScSysInfo {
    get { return scSysInfo_ ?? global::SCSysInfo.DefaultInstance; }
  }
  
  public const int CsAddSysInfoFieldNumber = 60;
  private bool hasCsAddSysInfo;
  private global::CSAddSysInfo csAddSysInfo_;
  public bool HasCsAddSysInfo {
    get { return hasCsAddSysInfo; }
  }
  public global::CSAddSysInfo CsAddSysInfo {
    get { return csAddSysInfo_ ?? global::CSAddSysInfo.DefaultInstance; }
  }
  
  public const int CsDelSysInfoFieldNumber = 61;
  private bool hasCsDelSysInfo;
  private global::CSDelSysInfo csDelSysInfo_;
  public bool HasCsDelSysInfo {
    get { return hasCsDelSysInfo; }
  }
  public global::CSDelSysInfo CsDelSysInfo {
    get { return csDelSysInfo_ ?? global::CSDelSysInfo.DefaultInstance; }
  }
  
  public const int CsUpdateSysInfoFieldNumber = 62;
  private bool hasCsUpdateSysInfo;
  private global::CSUpdateSysInfo csUpdateSysInfo_;
  public bool HasCsUpdateSysInfo {
    get { return hasCsUpdateSysInfo; }
  }
  public global::CSUpdateSysInfo CsUpdateSysInfo {
    get { return csUpdateSysInfo_ ?? global::CSUpdateSysInfo.DefaultInstance; }
  }
  
  public const int CsEmkCheckinFieldNumber = 63;
  private bool hasCsEmkCheckin;
  private global::CSEmkCheckin csEmkCheckin_;
  public bool HasCsEmkCheckin {
    get { return hasCsEmkCheckin; }
  }
  public global::CSEmkCheckin CsEmkCheckin {
    get { return csEmkCheckin_ ?? global::CSEmkCheckin.DefaultInstance; }
  }
  
  public const int ScEmkCheckinFieldNumber = 64;
  private bool hasScEmkCheckin;
  private global::SCEmkCheckin scEmkCheckin_;
  public bool HasScEmkCheckin {
    get { return hasScEmkCheckin; }
  }
  public global::SCEmkCheckin ScEmkCheckin {
    get { return scEmkCheckin_ ?? global::SCEmkCheckin.DefaultInstance; }
  }
  
  public const int CsEmkCheckoutFieldNumber = 65;
  private bool hasCsEmkCheckout;
  private global::CSEmkCheckout csEmkCheckout_;
  public bool HasCsEmkCheckout {
    get { return hasCsEmkCheckout; }
  }
  public global::CSEmkCheckout CsEmkCheckout {
    get { return csEmkCheckout_ ?? global::CSEmkCheckout.DefaultInstance; }
  }
  
  public const int ScEmkCheckoutFieldNumber = 66;
  private bool hasScEmkCheckout;
  private global::SCEmkCheckout scEmkCheckout_;
  public bool HasScEmkCheckout {
    get { return hasScEmkCheckout; }
  }
  public global::SCEmkCheckout ScEmkCheckout {
    get { return scEmkCheckout_ ?? global::SCEmkCheckout.DefaultInstance; }
  }
  
  public const int CsEmkRecordFieldNumber = 67;
  private bool hasCsEmkRecord;
  private global::CSEmkRecord csEmkRecord_;
  public bool HasCsEmkRecord {
    get { return hasCsEmkRecord; }
  }
  public global::CSEmkRecord CsEmkRecord {
    get { return csEmkRecord_ ?? global::CSEmkRecord.DefaultInstance; }
  }
  
  public const int ScEmkRecordFieldNumber = 68;
  private bool hasScEmkRecord;
  private global::SCEmkRecord scEmkRecord_;
  public bool HasScEmkRecord {
    get { return hasScEmkRecord; }
  }
  public global::SCEmkRecord ScEmkRecord {
    get { return scEmkRecord_ ?? global::SCEmkRecord.DefaultInstance; }
  }
  
  public const int CsEmkRecordFindFieldNumber = 69;
  private bool hasCsEmkRecordFind;
  private global::CSEmkRecordFind csEmkRecordFind_;
  public bool HasCsEmkRecordFind {
    get { return hasCsEmkRecordFind; }
  }
  public global::CSEmkRecordFind CsEmkRecordFind {
    get { return csEmkRecordFind_ ?? global::CSEmkRecordFind.DefaultInstance; }
  }
  
  public const int ScEmkRecordFindFieldNumber = 70;
  private bool hasScEmkRecordFind;
  private global::SCEmkRecordFind scEmkRecordFind_;
  public bool HasScEmkRecordFind {
    get { return hasScEmkRecordFind; }
  }
  public global::SCEmkRecordFind ScEmkRecordFind {
    get { return scEmkRecordFind_ ?? global::SCEmkRecordFind.DefaultInstance; }
  }
  
  public const int CsGoodsFindFieldNumber = 71;
  private bool hasCsGoodsFind;
  private global::CSGoodsFind csGoodsFind_;
  public bool HasCsGoodsFind {
    get { return hasCsGoodsFind; }
  }
  public global::CSGoodsFind CsGoodsFind {
    get { return csGoodsFind_ ?? global::CSGoodsFind.DefaultInstance; }
  }
  
  public const int ScGoodsFindFieldNumber = 72;
  private bool hasScGoodsFind;
  private global::SCGoodsFind scGoodsFind_;
  public bool HasScGoodsFind {
    get { return hasScGoodsFind; }
  }
  public global::SCGoodsFind ScGoodsFind {
    get { return scGoodsFind_ ?? global::SCGoodsFind.DefaultInstance; }
  }
  
  public const int CsGoodsAddFieldNumber = 73;
  private bool hasCsGoodsAdd;
  private global::CSGoodsAdd csGoodsAdd_;
  public bool HasCsGoodsAdd {
    get { return hasCsGoodsAdd; }
  }
  public global::CSGoodsAdd CsGoodsAdd {
    get { return csGoodsAdd_ ?? global::CSGoodsAdd.DefaultInstance; }
  }
  
  public const int CsGoodsDelFieldNumber = 74;
  private bool hasCsGoodsDel;
  private global::CSGoodsDel csGoodsDel_;
  public bool HasCsGoodsDel {
    get { return hasCsGoodsDel; }
  }
  public global::CSGoodsDel CsGoodsDel {
    get { return csGoodsDel_ ?? global::CSGoodsDel.DefaultInstance; }
  }
  
  public const int CsGoodsUpdateFieldNumber = 75;
  private bool hasCsGoodsUpdate;
  private global::CSGoodsUpdate csGoodsUpdate_;
  public bool HasCsGoodsUpdate {
    get { return hasCsGoodsUpdate; }
  }
  public global::CSGoodsUpdate CsGoodsUpdate {
    get { return csGoodsUpdate_ ?? global::CSGoodsUpdate.DefaultInstance; }
  }
  
  public const int CsGoodsStockFieldNumber = 76;
  private bool hasCsGoodsStock;
  private global::CSGoodsStock csGoodsStock_;
  public bool HasCsGoodsStock {
    get { return hasCsGoodsStock; }
  }
  public global::CSGoodsStock CsGoodsStock {
    get { return csGoodsStock_ ?? global::CSGoodsStock.DefaultInstance; }
  }
  
  public const int ScGoodsStockFieldNumber = 77;
  private bool hasScGoodsStock;
  private global::SCGoodsStock scGoodsStock_;
  public bool HasScGoodsStock {
    get { return hasScGoodsStock; }
  }
  public global::SCGoodsStock ScGoodsStock {
    get { return scGoodsStock_ ?? global::SCGoodsStock.DefaultInstance; }
  }
  
  public const int CsSalesRecordFieldNumber = 78;
  private bool hasCsSalesRecord;
  private global::CSSalesRecord csSalesRecord_;
  public bool HasCsSalesRecord {
    get { return hasCsSalesRecord; }
  }
  public global::CSSalesRecord CsSalesRecord {
    get { return csSalesRecord_ ?? global::CSSalesRecord.DefaultInstance; }
  }
  
  public const int ScSalesRecordFieldNumber = 79;
  private bool hasScSalesRecord;
  private global::SCSalesRecord scSalesRecord_;
  public bool HasScSalesRecord {
    get { return hasScSalesRecord; }
  }
  public global::SCSalesRecord ScSalesRecord {
    get { return scSalesRecord_ ?? global::SCSalesRecord.DefaultInstance; }
  }
  
  public const int CsSalesTopFieldNumber = 80;
  private bool hasCsSalesTop;
  private global::CSSalesTop csSalesTop_;
  public bool HasCsSalesTop {
    get { return hasCsSalesTop; }
  }
  public global::CSSalesTop CsSalesTop {
    get { return csSalesTop_ ?? global::CSSalesTop.DefaultInstance; }
  }
  
  public const int ScSalesTopFieldNumber = 81;
  private bool hasScSalesTop;
  private global::SCSalesTop scSalesTop_;
  public bool HasScSalesTop {
    get { return hasScSalesTop; }
  }
  public global::SCSalesTop ScSalesTop {
    get { return scSalesTop_ ?? global::SCSalesTop.DefaultInstance; }
  }
  
  public const int CsOrderListFieldNumber = 82;
  private bool hasCsOrderList;
  private global::CSOrderList csOrderList_;
  public bool HasCsOrderList {
    get { return hasCsOrderList; }
  }
  public global::CSOrderList CsOrderList {
    get { return csOrderList_ ?? global::CSOrderList.DefaultInstance; }
  }
  
  public const int ScOrderListFieldNumber = 83;
  private bool hasScOrderList;
  private global::SCOrderList scOrderList_;
  public bool HasScOrderList {
    get { return hasScOrderList; }
  }
  public global::SCOrderList ScOrderList {
    get { return scOrderList_ ?? global::SCOrderList.DefaultInstance; }
  }
  
  public const int CsOrderDetailFieldNumber = 84;
  private bool hasCsOrderDetail;
  private global::CSOrderDetail csOrderDetail_;
  public bool HasCsOrderDetail {
    get { return hasCsOrderDetail; }
  }
  public global::CSOrderDetail CsOrderDetail {
    get { return csOrderDetail_ ?? global::CSOrderDetail.DefaultInstance; }
  }
  
  public const int ScOrderDetailFieldNumber = 85;
  private bool hasScOrderDetail;
  private global::SCOrderDetail scOrderDetail_;
  public bool HasScOrderDetail {
    get { return hasScOrderDetail; }
  }
  public global::SCOrderDetail ScOrderDetail {
    get { return scOrderDetail_ ?? global::SCOrderDetail.DefaultInstance; }
  }
  
  public const int CsOrderProcessFieldNumber = 86;
  private bool hasCsOrderProcess;
  private global::CSOrderProcess csOrderProcess_;
  public bool HasCsOrderProcess {
    get { return hasCsOrderProcess; }
  }
  public global::CSOrderProcess CsOrderProcess {
    get { return csOrderProcess_ ?? global::CSOrderProcess.DefaultInstance; }
  }
  
  public const int ScShiftDeliveredByFieldNumber = 87;
  private bool hasScShiftDeliveredBy;
  private global::SCShiftDeliveredBy scShiftDeliveredBy_;
  public bool HasScShiftDeliveredBy {
    get { return hasScShiftDeliveredBy; }
  }
  public global::SCShiftDeliveredBy ScShiftDeliveredBy {
    get { return scShiftDeliveredBy_ ?? global::SCShiftDeliveredBy.DefaultInstance; }
  }
  
  public const int CsShiftAddFieldNumber = 88;
  private bool hasCsShiftAdd;
  private global::CSShiftAdd csShiftAdd_;
  public bool HasCsShiftAdd {
    get { return hasCsShiftAdd; }
  }
  public global::CSShiftAdd CsShiftAdd {
    get { return csShiftAdd_ ?? global::CSShiftAdd.DefaultInstance; }
  }
  
  public const int CsShiftFindFieldNumber = 89;
  private bool hasCsShiftFind;
  private global::CSShiftFind csShiftFind_;
  public bool HasCsShiftFind {
    get { return hasCsShiftFind; }
  }
  public global::CSShiftFind CsShiftFind {
    get { return csShiftFind_ ?? global::CSShiftFind.DefaultInstance; }
  }
  
  public const int ScShiftFindFieldNumber = 90;
  private bool hasScShiftFind;
  private global::SCShiftFind scShiftFind_;
  public bool HasScShiftFind {
    get { return hasScShiftFind; }
  }
  public global::SCShiftFind ScShiftFind {
    get { return scShiftFind_ ?? global::SCShiftFind.DefaultInstance; }
  }
  
  public const int CsReconnectFieldNumber = 91;
  private bool hasCsReconnect;
  private global::CSReconnect csReconnect_;
  public bool HasCsReconnect {
    get { return hasCsReconnect; }
  }
  public global::CSReconnect CsReconnect {
    get { return csReconnect_ ?? global::CSReconnect.DefaultInstance; }
  }
  
  public const int ScReconnectFieldNumber = 92;
  private bool hasScReconnect;
  private global::SCReconnect scReconnect_;
  public bool HasScReconnect {
    get { return hasScReconnect; }
  }
  public global::SCReconnect ScReconnect {
    get { return scReconnect_ ?? global::SCReconnect.DefaultInstance; }
  }
  
  public const int CsClientOpenFieldNumber = 200;
  private bool hasCsClientOpen;
  private global::CSClientOpen csClientOpen_;
  public bool HasCsClientOpen {
    get { return hasCsClientOpen; }
  }
  public global::CSClientOpen CsClientOpen {
    get { return csClientOpen_ ?? global::CSClientOpen.DefaultInstance; }
  }
  
  public const int CsClientCloseFieldNumber = 201;
  private bool hasCsClientClose;
  private global::CSClientClose csClientClose_;
  public bool HasCsClientClose {
    get { return hasCsClientClose; }
  }
  public global::CSClientClose CsClientClose {
    get { return csClientClose_ ?? global::CSClientClose.DefaultInstance; }
  }
  
  public const int CsLogonFieldNumber = 202;
  private bool hasCsLogon;
  private global::CSLogon csLogon_;
  public bool HasCsLogon {
    get { return hasCsLogon; }
  }
  public global::CSLogon CsLogon {
    get { return csLogon_ ?? global::CSLogon.DefaultInstance; }
  }
  
  public const int ScLogonFieldNumber = 203;
  private bool hasScLogon;
  private global::SCLogon scLogon_;
  public bool HasScLogon {
    get { return hasScLogon; }
  }
  public global::SCLogon ScLogon {
    get { return scLogon_ ?? global::SCLogon.DefaultInstance; }
  }
  
  public const int CsLogoffFieldNumber = 204;
  private bool hasCsLogoff;
  private global::CSLogoff csLogoff_;
  public bool HasCsLogoff {
    get { return hasCsLogoff; }
  }
  public global::CSLogoff CsLogoff {
    get { return csLogoff_ ?? global::CSLogoff.DefaultInstance; }
  }
  
  public const int ScLogoffFieldNumber = 205;
  private bool hasScLogoff;
  private global::SCLogoff scLogoff_;
  public bool HasScLogoff {
    get { return hasScLogoff; }
  }
  public global::SCLogoff ScLogoff {
    get { return scLogoff_ ?? global::SCLogoff.DefaultInstance; }
  }
  
  public const int CsHungupFieldNumber = 206;
  private bool hasCsHungup;
  private global::CSHungup csHungup_;
  public bool HasCsHungup {
    get { return hasCsHungup; }
  }
  public global::CSHungup CsHungup {
    get { return csHungup_ ?? global::CSHungup.DefaultInstance; }
  }
  
  public const int CsPreChargeFieldNumber = 207;
  private bool hasCsPreCharge;
  private global::CSPreCharge csPreCharge_;
  public bool HasCsPreCharge {
    get { return hasCsPreCharge; }
  }
  public global::CSPreCharge CsPreCharge {
    get { return csPreCharge_ ?? global::CSPreCharge.DefaultInstance; }
  }
  
  public const int ScPreChargeFieldNumber = 208;
  private bool hasScPreCharge;
  private global::SCPreCharge scPreCharge_;
  public bool HasScPreCharge {
    get { return hasScPreCharge; }
  }
  public global::SCPreCharge ScPreCharge {
    get { return scPreCharge_ ?? global::SCPreCharge.DefaultInstance; }
  }
  
  public const int ScToChargeFieldNumber = 209;
  private bool hasScToCharge;
  private global::SCToCharge scToCharge_;
  public bool HasScToCharge {
    get { return hasScToCharge; }
  }
  public global::SCToCharge ScToCharge {
    get { return scToCharge_ ?? global::SCToCharge.DefaultInstance; }
  }
  
  public const int CsCartAddFieldNumber = 211;
  private bool hasCsCartAdd;
  private global::CSCartAdd csCartAdd_;
  public bool HasCsCartAdd {
    get { return hasCsCartAdd; }
  }
  public global::CSCartAdd CsCartAdd {
    get { return csCartAdd_ ?? global::CSCartAdd.DefaultInstance; }
  }
  
  public const int CsCartDelFieldNumber = 212;
  private bool hasCsCartDel;
  private global::CSCartDel csCartDel_;
  public bool HasCsCartDel {
    get { return hasCsCartDel; }
  }
  public global::CSCartDel CsCartDel {
    get { return csCartDel_ ?? global::CSCartDel.DefaultInstance; }
  }
  
  public const int CsPreBuyFieldNumber = 213;
  private bool hasCsPreBuy;
  private global::CSPreBuy csPreBuy_;
  public bool HasCsPreBuy {
    get { return hasCsPreBuy; }
  }
  public global::CSPreBuy CsPreBuy {
    get { return csPreBuy_ ?? global::CSPreBuy.DefaultInstance; }
  }
  
  public const int ScPreBuyFieldNumber = 214;
  private bool hasScPreBuy;
  private global::SCPreBuy scPreBuy_;
  public bool HasScPreBuy {
    get { return hasScPreBuy; }
  }
  public global::SCPreBuy ScPreBuy {
    get { return scPreBuy_ ?? global::SCPreBuy.DefaultInstance; }
  }
  
  public const int ScToBuyFieldNumber = 215;
  private bool hasScToBuy;
  private global::SCToBuy scToBuy_;
  public bool HasScToBuy {
    get { return hasScToBuy; }
  }
  public global::SCToBuy ScToBuy {
    get { return scToBuy_ ?? global::SCToBuy.DefaultInstance; }
  }
  
  public const int ScSysMessageFieldNumber = 216;
  private bool hasScSysMessage;
  private global::SCSysMessage scSysMessage_;
  public bool HasScSysMessage {
    get { return hasScSysMessage; }
  }
  public global::SCSysMessage ScSysMessage {
    get { return scSysMessage_ ?? global::SCSysMessage.DefaultInstance; }
  }
  
  public const int CsEvaluateFieldNumber = 218;
  private bool hasCsEvaluate;
  private global::CSEvaluate csEvaluate_;
  public bool HasCsEvaluate {
    get { return hasCsEvaluate; }
  }
  public global::CSEvaluate CsEvaluate {
    get { return csEvaluate_ ?? global::CSEvaluate.DefaultInstance; }
  }
  
  public const int ScEvaluateFieldNumber = 219;
  private bool hasScEvaluate;
  private global::SCEvaluate scEvaluate_;
  public bool HasScEvaluate {
    get { return hasScEvaluate; }
  }
  public global::SCEvaluate ScEvaluate {
    get { return scEvaluate_ ?? global::SCEvaluate.DefaultInstance; }
  }
  
  public const int CsVerifyCodeFieldNumber = 220;
  private bool hasCsVerifyCode;
  private global::CSVerifyCode csVerifyCode_;
  public bool HasCsVerifyCode {
    get { return hasCsVerifyCode; }
  }
  public global::CSVerifyCode CsVerifyCode {
    get { return csVerifyCode_ ?? global::CSVerifyCode.DefaultInstance; }
  }
  
  public const int ScVerifyCodeFieldNumber = 221;
  private bool hasScVerifyCode;
  private global::SCVerifyCode scVerifyCode_;
  public bool HasScVerifyCode {
    get { return hasScVerifyCode; }
  }
  public global::SCVerifyCode ScVerifyCode {
    get { return scVerifyCode_ ?? global::SCVerifyCode.DefaultInstance; }
  }
  
  public const int CsBindMobileFieldNumber = 222;
  private bool hasCsBindMobile;
  private global::CSBindMobile csBindMobile_;
  public bool HasCsBindMobile {
    get { return hasCsBindMobile; }
  }
  public global::CSBindMobile CsBindMobile {
    get { return csBindMobile_ ?? global::CSBindMobile.DefaultInstance; }
  }
  
  public const int ScBindMobileFieldNumber = 223;
  private bool hasScBindMobile;
  private global::SCBindMobile scBindMobile_;
  public bool HasScBindMobile {
    get { return hasScBindMobile; }
  }
  public global::SCBindMobile ScBindMobile {
    get { return scBindMobile_ ?? global::SCBindMobile.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMessageType) return false;
      if (HasErrorTip) {
        if (!ErrorTip.IsInitialized) return false;
      }
      if (HasClAskServer) {
        if (!ClAskServer.IsInitialized) return false;
      }
      if (HasCsAuthen) {
        if (!CsAuthen.IsInitialized) return false;
      }
      if (HasScAuthen) {
        if (!ScAuthen.IsInitialized) return false;
      }
      if (HasScLogin) {
        if (!ScLogin.IsInitialized) return false;
      }
      if (HasScCallList) {
        if (!ScCallList.IsInitialized) return false;
      }
      if (HasCsCallProcess) {
        if (!CsCallProcess.IsInitialized) return false;
      }
      if (HasScAccountInfo) {
        if (!ScAccountInfo.IsInitialized) return false;
      }
      if (HasScRealtimeInfo) {
        if (!ScRealtimeInfo.IsInitialized) return false;
      }
      if (HasCsCommand) {
        if (!CsCommand.IsInitialized) return false;
      }
      if (HasCsLog) {
        if (!CsLog.IsInitialized) return false;
      }
      if (HasScLog) {
        if (!ScLog.IsInitialized) return false;
      }
      if (HasScRoleList) {
        if (!ScRoleList.IsInitialized) return false;
      }
      if (HasCsRoleAdd) {
        if (!CsRoleAdd.IsInitialized) return false;
      }
      if (HasScRoleAdd) {
        if (!ScRoleAdd.IsInitialized) return false;
      }
      if (HasCsRoleDel) {
        if (!CsRoleDel.IsInitialized) return false;
      }
      if (HasCsRoleUpdate) {
        if (!CsRoleUpdate.IsInitialized) return false;
      }
      if (HasCsRoleRights) {
        if (!CsRoleRights.IsInitialized) return false;
      }
      if (HasScAccountList) {
        if (!ScAccountList.IsInitialized) return false;
      }
      if (HasCsAccountAdd) {
        if (!CsAccountAdd.IsInitialized) return false;
      }
      if (HasCsAccountDel) {
        if (!CsAccountDel.IsInitialized) return false;
      }
      if (HasCsAccountUpdate) {
        if (!CsAccountUpdate.IsInitialized) return false;
      }
      if (HasCsAccountSnsSet) {
        if (!CsAccountSnsSet.IsInitialized) return false;
      }
      if (HasCsStaffComment) {
        if (!CsStaffComment.IsInitialized) return false;
      }
      if (HasScStaffComment) {
        if (!ScStaffComment.IsInitialized) return false;
      }
      if (HasCsStaffPerform) {
        if (!CsStaffPerform.IsInitialized) return false;
      }
      if (HasScStaffPerform) {
        if (!ScStaffPerform.IsInitialized) return false;
      }
      if (HasCsEarning) {
        if (!CsEarning.IsInitialized) return false;
      }
      if (HasScEarning) {
        if (!ScEarning.IsInitialized) return false;
      }
      if (HasScComputerList) {
        if (!ScComputerList.IsInitialized) return false;
      }
      if (HasCsComputerAdd) {
        if (!CsComputerAdd.IsInitialized) return false;
      }
      if (HasCsComputerUpdate) {
        if (!CsComputerUpdate.IsInitialized) return false;
      }
      if (HasCsComputerFind) {
        if (!CsComputerFind.IsInitialized) return false;
      }
      if (HasScComputerFind) {
        if (!ScComputerFind.IsInitialized) return false;
      }
      if (HasCsMemberList) {
        if (!CsMemberList.IsInitialized) return false;
      }
      if (HasScMemberList) {
        if (!ScMemberList.IsInitialized) return false;
      }
      if (HasCsMemberAdd) {
        if (!CsMemberAdd.IsInitialized) return false;
      }
      if (HasScMemberAdd) {
        if (!ScMemberAdd.IsInitialized) return false;
      }
      if (HasCsMemberUpdate) {
        if (!CsMemberUpdate.IsInitialized) return false;
      }
      if (HasCsMemberFind) {
        if (!CsMemberFind.IsInitialized) return false;
      }
      if (HasScMemberFind) {
        if (!ScMemberFind.IsInitialized) return false;
      }
      if (HasCsMemberCardInfo) {
        if (!CsMemberCardInfo.IsInitialized) return false;
      }
      if (HasScMemberCardInfo) {
        if (!ScMemberCardInfo.IsInitialized) return false;
      }
      if (HasCsMemberConsumRecord) {
        if (!CsMemberConsumRecord.IsInitialized) return false;
      }
      if (HasScMemberConsumRecord) {
        if (!ScMemberConsumRecord.IsInitialized) return false;
      }
      if (HasCsMemberConsumFilter) {
        if (!CsMemberConsumFilter.IsInitialized) return false;
      }
      if (HasScMemberConsumFilter) {
        if (!ScMemberConsumFilter.IsInitialized) return false;
      }
      if (HasScSysBillList) {
        if (!ScSysBillList.IsInitialized) return false;
      }
      if (HasCsSysBillUpdate) {
        if (!CsSysBillUpdate.IsInitialized) return false;
      }
      if (HasScSysBillUpdate) {
        if (!ScSysBillUpdate.IsInitialized) return false;
      }
      if (HasCsSysInfo) {
        if (!CsSysInfo.IsInitialized) return false;
      }
      if (HasScSysInfo) {
        if (!ScSysInfo.IsInitialized) return false;
      }
      if (HasCsAddSysInfo) {
        if (!CsAddSysInfo.IsInitialized) return false;
      }
      if (HasCsDelSysInfo) {
        if (!CsDelSysInfo.IsInitialized) return false;
      }
      if (HasCsUpdateSysInfo) {
        if (!CsUpdateSysInfo.IsInitialized) return false;
      }
      if (HasCsEmkCheckin) {
        if (!CsEmkCheckin.IsInitialized) return false;
      }
      if (HasScEmkCheckin) {
        if (!ScEmkCheckin.IsInitialized) return false;
      }
      if (HasCsEmkCheckout) {
        if (!CsEmkCheckout.IsInitialized) return false;
      }
      if (HasScEmkCheckout) {
        if (!ScEmkCheckout.IsInitialized) return false;
      }
      if (HasCsEmkRecord) {
        if (!CsEmkRecord.IsInitialized) return false;
      }
      if (HasScEmkRecord) {
        if (!ScEmkRecord.IsInitialized) return false;
      }
      if (HasCsEmkRecordFind) {
        if (!CsEmkRecordFind.IsInitialized) return false;
      }
      if (HasScEmkRecordFind) {
        if (!ScEmkRecordFind.IsInitialized) return false;
      }
      if (HasCsGoodsFind) {
        if (!CsGoodsFind.IsInitialized) return false;
      }
      if (HasScGoodsFind) {
        if (!ScGoodsFind.IsInitialized) return false;
      }
      if (HasCsGoodsAdd) {
        if (!CsGoodsAdd.IsInitialized) return false;
      }
      if (HasCsGoodsUpdate) {
        if (!CsGoodsUpdate.IsInitialized) return false;
      }
      if (HasCsGoodsStock) {
        if (!CsGoodsStock.IsInitialized) return false;
      }
      if (HasScGoodsStock) {
        if (!ScGoodsStock.IsInitialized) return false;
      }
      if (HasCsSalesRecord) {
        if (!CsSalesRecord.IsInitialized) return false;
      }
      if (HasScSalesRecord) {
        if (!ScSalesRecord.IsInitialized) return false;
      }
      if (HasCsOrderList) {
        if (!CsOrderList.IsInitialized) return false;
      }
      if (HasScOrderList) {
        if (!ScOrderList.IsInitialized) return false;
      }
      if (HasCsOrderDetail) {
        if (!CsOrderDetail.IsInitialized) return false;
      }
      if (HasScOrderDetail) {
        if (!ScOrderDetail.IsInitialized) return false;
      }
      if (HasCsOrderProcess) {
        if (!CsOrderProcess.IsInitialized) return false;
      }
      if (HasScShiftDeliveredBy) {
        if (!ScShiftDeliveredBy.IsInitialized) return false;
      }
      if (HasCsShiftAdd) {
        if (!CsShiftAdd.IsInitialized) return false;
      }
      if (HasCsShiftFind) {
        if (!CsShiftFind.IsInitialized) return false;
      }
      if (HasScShiftFind) {
        if (!ScShiftFind.IsInitialized) return false;
      }
      if (HasCsReconnect) {
        if (!CsReconnect.IsInitialized) return false;
      }
      if (HasScReconnect) {
        if (!ScReconnect.IsInitialized) return false;
      }
      if (HasCsClientOpen) {
        if (!CsClientOpen.IsInitialized) return false;
      }
      if (HasCsLogon) {
        if (!CsLogon.IsInitialized) return false;
      }
      if (HasScLogon) {
        if (!ScLogon.IsInitialized) return false;
      }
      if (HasCsLogoff) {
        if (!CsLogoff.IsInitialized) return false;
      }
      if (HasScLogoff) {
        if (!ScLogoff.IsInitialized) return false;
      }
      if (HasCsHungup) {
        if (!CsHungup.IsInitialized) return false;
      }
      if (HasCsPreCharge) {
        if (!CsPreCharge.IsInitialized) return false;
      }
      if (HasScPreCharge) {
        if (!ScPreCharge.IsInitialized) return false;
      }
      if (HasScToCharge) {
        if (!ScToCharge.IsInitialized) return false;
      }
      if (HasCsCartAdd) {
        if (!CsCartAdd.IsInitialized) return false;
      }
      if (HasCsCartDel) {
        if (!CsCartDel.IsInitialized) return false;
      }
      if (HasCsPreBuy) {
        if (!CsPreBuy.IsInitialized) return false;
      }
      if (HasScPreBuy) {
        if (!ScPreBuy.IsInitialized) return false;
      }
      if (HasScToBuy) {
        if (!ScToBuy.IsInitialized) return false;
      }
      if (HasScSysMessage) {
        if (!ScSysMessage.IsInitialized) return false;
      }
      if (HasCsEvaluate) {
        if (!CsEvaluate.IsInitialized) return false;
      }
      if (HasScEvaluate) {
        if (!ScEvaluate.IsInitialized) return false;
      }
      if (HasCsVerifyCode) {
        if (!CsVerifyCode.IsInitialized) return false;
      }
      if (HasScVerifyCode) {
        if (!ScVerifyCode.IsInitialized) return false;
      }
      if (HasCsBindMobile) {
        if (!CsBindMobile.IsInitialized) return false;
      }
      if (HasScBindMobile) {
        if (!ScBindMobile.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _messageContentFieldNames;
    if (hasMessageType) {
      output.WriteInt32(1, field_names[65], MessageType);
    }
    if (hasErrorTip) {
      output.WriteMessage(2, field_names[63], ErrorTip);
    }
    if (hasClAskServer) {
      output.WriteMessage(3, field_names[0], ClAskServer);
    }
    if (hasLcRetServer) {
      output.WriteMessage(4, field_names[64], LcRetServer);
    }
    if (hasCsAuthen) {
      output.WriteMessage(5, field_names[6], CsAuthen);
    }
    if (hasScAuthen) {
      output.WriteMessage(6, field_names[68], ScAuthen);
    }
    if (hasCsLogin) {
      output.WriteMessage(7, field_names[32], CsLogin);
    }
    if (hasScLogin) {
      output.WriteMessage(8, field_names[82], ScLogin);
    }
    if (hasScCallList) {
      output.WriteMessage(9, field_names[70], ScCallList);
    }
    if (hasCsCallProcess) {
      output.WriteMessage(10, field_names[8], CsCallProcess);
    }
    if (hasScAccountInfo) {
      output.WriteMessage(11, field_names[66], ScAccountInfo);
    }
    if (hasScRealtimeInfo) {
      output.WriteMessage(12, field_names[95], ScRealtimeInfo);
    }
    if (hasCsCommand) {
      output.WriteMessage(13, field_names[13], CsCommand);
    }
    if (hasCsLog) {
      output.WriteMessage(14, field_names[31], CsLog);
    }
    if (hasScLog) {
      output.WriteMessage(15, field_names[81], ScLog);
    }
    if (hasScRoleList) {
      output.WriteMessage(16, field_names[98], ScRoleList);
    }
    if (hasCsRoleAdd) {
      output.WriteMessage(17, field_names[49], CsRoleAdd);
    }
    if (hasScRoleAdd) {
      output.WriteMessage(18, field_names[97], ScRoleAdd);
    }
    if (hasCsRoleDel) {
      output.WriteMessage(19, field_names[50], CsRoleDel);
    }
    if (hasCsRoleUpdate) {
      output.WriteMessage(20, field_names[52], CsRoleUpdate);
    }
    if (hasCsRoleRights) {
      output.WriteMessage(21, field_names[51], CsRoleRights);
    }
    if (hasScAccountList) {
      output.WriteMessage(22, field_names[67], ScAccountList);
    }
    if (hasCsAccountAdd) {
      output.WriteMessage(23, field_names[1], CsAccountAdd);
    }
    if (hasCsAccountDel) {
      output.WriteMessage(24, field_names[2], CsAccountDel);
    }
    if (hasCsAccountUpdate) {
      output.WriteMessage(25, field_names[4], CsAccountUpdate);
    }
    if (hasCsAccountSnsSet) {
      output.WriteMessage(26, field_names[3], CsAccountSnsSet);
    }
    if (hasCsStaffComment) {
      output.WriteMessage(27, field_names[57], CsStaffComment);
    }
    if (hasScStaffComment) {
      output.WriteMessage(28, field_names[103], ScStaffComment);
    }
    if (hasCsStaffPerform) {
      output.WriteMessage(29, field_names[58], CsStaffPerform);
    }
    if (hasScStaffPerform) {
      output.WriteMessage(30, field_names[104], ScStaffPerform);
    }
    if (hasCsEarning) {
      output.WriteMessage(33, field_names[19], CsEarning);
    }
    if (hasScEarning) {
      output.WriteMessage(34, field_names[73], ScEarning);
    }
    if (hasScComputerList) {
      output.WriteMessage(35, field_names[72], ScComputerList);
    }
    if (hasCsComputerAdd) {
      output.WriteMessage(36, field_names[14], CsComputerAdd);
    }
    if (hasCsComputerDel) {
      output.WriteMessage(37, field_names[15], CsComputerDel);
    }
    if (hasCsComputerUpdate) {
      output.WriteMessage(38, field_names[17], CsComputerUpdate);
    }
    if (hasCsComputerFind) {
      output.WriteMessage(39, field_names[16], CsComputerFind);
    }
    if (hasScComputerFind) {
      output.WriteMessage(40, field_names[71], ScComputerFind);
    }
    if (hasCsMemberList) {
      output.WriteMessage(41, field_names[41], CsMemberList);
    }
    if (hasScMemberList) {
      output.WriteMessage(42, field_names[90], ScMemberList);
    }
    if (hasCsMemberAdd) {
      output.WriteMessage(43, field_names[35], CsMemberAdd);
    }
    if (hasScMemberAdd) {
      output.WriteMessage(44, field_names[85], ScMemberAdd);
    }
    if (hasCsMemberDel) {
      output.WriteMessage(45, field_names[39], CsMemberDel);
    }
    if (hasCsMemberUpdate) {
      output.WriteMessage(46, field_names[42], CsMemberUpdate);
    }
    if (hasCsMemberFind) {
      output.WriteMessage(47, field_names[40], CsMemberFind);
    }
    if (hasScMemberFind) {
      output.WriteMessage(48, field_names[89], ScMemberFind);
    }
    if (hasCsMemberCardInfo) {
      output.WriteMessage(49, field_names[36], CsMemberCardInfo);
    }
    if (hasScMemberCardInfo) {
      output.WriteMessage(50, field_names[86], ScMemberCardInfo);
    }
    if (hasCsMemberConsumRecord) {
      output.WriteMessage(51, field_names[38], CsMemberConsumRecord);
    }
    if (hasScMemberConsumRecord) {
      output.WriteMessage(52, field_names[88], ScMemberConsumRecord);
    }
    if (hasCsMemberConsumFilter) {
      output.WriteMessage(53, field_names[37], CsMemberConsumFilter);
    }
    if (hasScMemberConsumFilter) {
      output.WriteMessage(54, field_names[87], ScMemberConsumFilter);
    }
    if (hasScSysBillList) {
      output.WriteMessage(55, field_names[105], ScSysBillList);
    }
    if (hasCsSysBillUpdate) {
      output.WriteMessage(56, field_names[59], CsSysBillUpdate);
    }
    if (hasScSysBillUpdate) {
      output.WriteMessage(57, field_names[106], ScSysBillUpdate);
    }
    if (hasCsSysInfo) {
      output.WriteMessage(58, field_names[60], CsSysInfo);
    }
    if (hasScSysInfo) {
      output.WriteMessage(59, field_names[107], ScSysInfo);
    }
    if (hasCsAddSysInfo) {
      output.WriteMessage(60, field_names[5], CsAddSysInfo);
    }
    if (hasCsDelSysInfo) {
      output.WriteMessage(61, field_names[18], CsDelSysInfo);
    }
    if (hasCsUpdateSysInfo) {
      output.WriteMessage(62, field_names[61], CsUpdateSysInfo);
    }
    if (hasCsEmkCheckin) {
      output.WriteMessage(63, field_names[20], CsEmkCheckin);
    }
    if (hasScEmkCheckin) {
      output.WriteMessage(64, field_names[74], ScEmkCheckin);
    }
    if (hasCsEmkCheckout) {
      output.WriteMessage(65, field_names[21], CsEmkCheckout);
    }
    if (hasScEmkCheckout) {
      output.WriteMessage(66, field_names[75], ScEmkCheckout);
    }
    if (hasCsEmkRecord) {
      output.WriteMessage(67, field_names[22], CsEmkRecord);
    }
    if (hasScEmkRecord) {
      output.WriteMessage(68, field_names[76], ScEmkRecord);
    }
    if (hasCsEmkRecordFind) {
      output.WriteMessage(69, field_names[23], CsEmkRecordFind);
    }
    if (hasScEmkRecordFind) {
      output.WriteMessage(70, field_names[77], ScEmkRecordFind);
    }
    if (hasCsGoodsFind) {
      output.WriteMessage(71, field_names[27], CsGoodsFind);
    }
    if (hasScGoodsFind) {
      output.WriteMessage(72, field_names[79], ScGoodsFind);
    }
    if (hasCsGoodsAdd) {
      output.WriteMessage(73, field_names[25], CsGoodsAdd);
    }
    if (hasCsGoodsDel) {
      output.WriteMessage(74, field_names[26], CsGoodsDel);
    }
    if (hasCsGoodsUpdate) {
      output.WriteMessage(75, field_names[29], CsGoodsUpdate);
    }
    if (hasCsGoodsStock) {
      output.WriteMessage(76, field_names[28], CsGoodsStock);
    }
    if (hasScGoodsStock) {
      output.WriteMessage(77, field_names[80], ScGoodsStock);
    }
    if (hasCsSalesRecord) {
      output.WriteMessage(78, field_names[53], CsSalesRecord);
    }
    if (hasScSalesRecord) {
      output.WriteMessage(79, field_names[99], ScSalesRecord);
    }
    if (hasCsSalesTop) {
      output.WriteMessage(80, field_names[54], CsSalesTop);
    }
    if (hasScSalesTop) {
      output.WriteMessage(81, field_names[100], ScSalesTop);
    }
    if (hasCsOrderList) {
      output.WriteMessage(82, field_names[44], CsOrderList);
    }
    if (hasScOrderList) {
      output.WriteMessage(83, field_names[92], ScOrderList);
    }
    if (hasCsOrderDetail) {
      output.WriteMessage(84, field_names[43], CsOrderDetail);
    }
    if (hasScOrderDetail) {
      output.WriteMessage(85, field_names[91], ScOrderDetail);
    }
    if (hasCsOrderProcess) {
      output.WriteMessage(86, field_names[45], CsOrderProcess);
    }
    if (hasScShiftDeliveredBy) {
      output.WriteMessage(87, field_names[101], ScShiftDeliveredBy);
    }
    if (hasCsShiftAdd) {
      output.WriteMessage(88, field_names[55], CsShiftAdd);
    }
    if (hasCsShiftFind) {
      output.WriteMessage(89, field_names[56], CsShiftFind);
    }
    if (hasScShiftFind) {
      output.WriteMessage(90, field_names[102], ScShiftFind);
    }
    if (hasCsReconnect) {
      output.WriteMessage(91, field_names[48], CsReconnect);
    }
    if (hasScReconnect) {
      output.WriteMessage(92, field_names[96], ScReconnect);
    }
    if (hasCsClientOpen) {
      output.WriteMessage(200, field_names[12], CsClientOpen);
    }
    if (hasCsClientClose) {
      output.WriteMessage(201, field_names[11], CsClientClose);
    }
    if (hasCsLogon) {
      output.WriteMessage(202, field_names[34], CsLogon);
    }
    if (hasScLogon) {
      output.WriteMessage(203, field_names[84], ScLogon);
    }
    if (hasCsLogoff) {
      output.WriteMessage(204, field_names[33], CsLogoff);
    }
    if (hasScLogoff) {
      output.WriteMessage(205, field_names[83], ScLogoff);
    }
    if (hasCsHungup) {
      output.WriteMessage(206, field_names[30], CsHungup);
    }
    if (hasCsPreCharge) {
      output.WriteMessage(207, field_names[47], CsPreCharge);
    }
    if (hasScPreCharge) {
      output.WriteMessage(208, field_names[94], ScPreCharge);
    }
    if (hasScToCharge) {
      output.WriteMessage(209, field_names[110], ScToCharge);
    }
    if (hasCsCartAdd) {
      output.WriteMessage(211, field_names[9], CsCartAdd);
    }
    if (hasCsCartDel) {
      output.WriteMessage(212, field_names[10], CsCartDel);
    }
    if (hasCsPreBuy) {
      output.WriteMessage(213, field_names[46], CsPreBuy);
    }
    if (hasScPreBuy) {
      output.WriteMessage(214, field_names[93], ScPreBuy);
    }
    if (hasScToBuy) {
      output.WriteMessage(215, field_names[109], ScToBuy);
    }
    if (hasScSysMessage) {
      output.WriteMessage(216, field_names[108], ScSysMessage);
    }
    if (hasCsEvaluate) {
      output.WriteMessage(218, field_names[24], CsEvaluate);
    }
    if (hasScEvaluate) {
      output.WriteMessage(219, field_names[78], ScEvaluate);
    }
    if (hasCsVerifyCode) {
      output.WriteMessage(220, field_names[62], CsVerifyCode);
    }
    if (hasScVerifyCode) {
      output.WriteMessage(221, field_names[111], ScVerifyCode);
    }
    if (hasCsBindMobile) {
      output.WriteMessage(222, field_names[7], CsBindMobile);
    }
    if (hasScBindMobile) {
      output.WriteMessage(223, field_names[69], ScBindMobile);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMessageType) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, MessageType);
    }
    if (hasErrorTip) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, ErrorTip);
    }
    if (hasClAskServer) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, ClAskServer);
    }
    if (hasLcRetServer) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, LcRetServer);
    }
    if (hasCsAuthen) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, CsAuthen);
    }
    if (hasScAuthen) {
      size += pb::CodedOutputStream.ComputeMessageSize(6, ScAuthen);
    }
    if (hasCsLogin) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, CsLogin);
    }
    if (hasScLogin) {
      size += pb::CodedOutputStream.ComputeMessageSize(8, ScLogin);
    }
    if (hasScCallList) {
      size += pb::CodedOutputStream.ComputeMessageSize(9, ScCallList);
    }
    if (hasCsCallProcess) {
      size += pb::CodedOutputStream.ComputeMessageSize(10, CsCallProcess);
    }
    if (hasScAccountInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(11, ScAccountInfo);
    }
    if (hasScRealtimeInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(12, ScRealtimeInfo);
    }
    if (hasCsCommand) {
      size += pb::CodedOutputStream.ComputeMessageSize(13, CsCommand);
    }
    if (hasCsLog) {
      size += pb::CodedOutputStream.ComputeMessageSize(14, CsLog);
    }
    if (hasScLog) {
      size += pb::CodedOutputStream.ComputeMessageSize(15, ScLog);
    }
    if (hasScRoleList) {
      size += pb::CodedOutputStream.ComputeMessageSize(16, ScRoleList);
    }
    if (hasCsRoleAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(17, CsRoleAdd);
    }
    if (hasScRoleAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(18, ScRoleAdd);
    }
    if (hasCsRoleDel) {
      size += pb::CodedOutputStream.ComputeMessageSize(19, CsRoleDel);
    }
    if (hasCsRoleUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(20, CsRoleUpdate);
    }
    if (hasCsRoleRights) {
      size += pb::CodedOutputStream.ComputeMessageSize(21, CsRoleRights);
    }
    if (hasScAccountList) {
      size += pb::CodedOutputStream.ComputeMessageSize(22, ScAccountList);
    }
    if (hasCsAccountAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(23, CsAccountAdd);
    }
    if (hasCsAccountDel) {
      size += pb::CodedOutputStream.ComputeMessageSize(24, CsAccountDel);
    }
    if (hasCsAccountUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(25, CsAccountUpdate);
    }
    if (hasCsAccountSnsSet) {
      size += pb::CodedOutputStream.ComputeMessageSize(26, CsAccountSnsSet);
    }
    if (hasCsStaffComment) {
      size += pb::CodedOutputStream.ComputeMessageSize(27, CsStaffComment);
    }
    if (hasScStaffComment) {
      size += pb::CodedOutputStream.ComputeMessageSize(28, ScStaffComment);
    }
    if (hasCsStaffPerform) {
      size += pb::CodedOutputStream.ComputeMessageSize(29, CsStaffPerform);
    }
    if (hasScStaffPerform) {
      size += pb::CodedOutputStream.ComputeMessageSize(30, ScStaffPerform);
    }
    if (hasCsEarning) {
      size += pb::CodedOutputStream.ComputeMessageSize(33, CsEarning);
    }
    if (hasScEarning) {
      size += pb::CodedOutputStream.ComputeMessageSize(34, ScEarning);
    }
    if (hasScComputerList) {
      size += pb::CodedOutputStream.ComputeMessageSize(35, ScComputerList);
    }
    if (hasCsComputerAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(36, CsComputerAdd);
    }
    if (hasCsComputerDel) {
      size += pb::CodedOutputStream.ComputeMessageSize(37, CsComputerDel);
    }
    if (hasCsComputerUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(38, CsComputerUpdate);
    }
    if (hasCsComputerFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(39, CsComputerFind);
    }
    if (hasScComputerFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(40, ScComputerFind);
    }
    if (hasCsMemberList) {
      size += pb::CodedOutputStream.ComputeMessageSize(41, CsMemberList);
    }
    if (hasScMemberList) {
      size += pb::CodedOutputStream.ComputeMessageSize(42, ScMemberList);
    }
    if (hasCsMemberAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(43, CsMemberAdd);
    }
    if (hasScMemberAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(44, ScMemberAdd);
    }
    if (hasCsMemberDel) {
      size += pb::CodedOutputStream.ComputeMessageSize(45, CsMemberDel);
    }
    if (hasCsMemberUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(46, CsMemberUpdate);
    }
    if (hasCsMemberFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(47, CsMemberFind);
    }
    if (hasScMemberFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(48, ScMemberFind);
    }
    if (hasCsMemberCardInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(49, CsMemberCardInfo);
    }
    if (hasScMemberCardInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(50, ScMemberCardInfo);
    }
    if (hasCsMemberConsumRecord) {
      size += pb::CodedOutputStream.ComputeMessageSize(51, CsMemberConsumRecord);
    }
    if (hasScMemberConsumRecord) {
      size += pb::CodedOutputStream.ComputeMessageSize(52, ScMemberConsumRecord);
    }
    if (hasCsMemberConsumFilter) {
      size += pb::CodedOutputStream.ComputeMessageSize(53, CsMemberConsumFilter);
    }
    if (hasScMemberConsumFilter) {
      size += pb::CodedOutputStream.ComputeMessageSize(54, ScMemberConsumFilter);
    }
    if (hasScSysBillList) {
      size += pb::CodedOutputStream.ComputeMessageSize(55, ScSysBillList);
    }
    if (hasCsSysBillUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(56, CsSysBillUpdate);
    }
    if (hasScSysBillUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(57, ScSysBillUpdate);
    }
    if (hasCsSysInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(58, CsSysInfo);
    }
    if (hasScSysInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(59, ScSysInfo);
    }
    if (hasCsAddSysInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(60, CsAddSysInfo);
    }
    if (hasCsDelSysInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(61, CsDelSysInfo);
    }
    if (hasCsUpdateSysInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(62, CsUpdateSysInfo);
    }
    if (hasCsEmkCheckin) {
      size += pb::CodedOutputStream.ComputeMessageSize(63, CsEmkCheckin);
    }
    if (hasScEmkCheckin) {
      size += pb::CodedOutputStream.ComputeMessageSize(64, ScEmkCheckin);
    }
    if (hasCsEmkCheckout) {
      size += pb::CodedOutputStream.ComputeMessageSize(65, CsEmkCheckout);
    }
    if (hasScEmkCheckout) {
      size += pb::CodedOutputStream.ComputeMessageSize(66, ScEmkCheckout);
    }
    if (hasCsEmkRecord) {
      size += pb::CodedOutputStream.ComputeMessageSize(67, CsEmkRecord);
    }
    if (hasScEmkRecord) {
      size += pb::CodedOutputStream.ComputeMessageSize(68, ScEmkRecord);
    }
    if (hasCsEmkRecordFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(69, CsEmkRecordFind);
    }
    if (hasScEmkRecordFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(70, ScEmkRecordFind);
    }
    if (hasCsGoodsFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(71, CsGoodsFind);
    }
    if (hasScGoodsFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(72, ScGoodsFind);
    }
    if (hasCsGoodsAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(73, CsGoodsAdd);
    }
    if (hasCsGoodsDel) {
      size += pb::CodedOutputStream.ComputeMessageSize(74, CsGoodsDel);
    }
    if (hasCsGoodsUpdate) {
      size += pb::CodedOutputStream.ComputeMessageSize(75, CsGoodsUpdate);
    }
    if (hasCsGoodsStock) {
      size += pb::CodedOutputStream.ComputeMessageSize(76, CsGoodsStock);
    }
    if (hasScGoodsStock) {
      size += pb::CodedOutputStream.ComputeMessageSize(77, ScGoodsStock);
    }
    if (hasCsSalesRecord) {
      size += pb::CodedOutputStream.ComputeMessageSize(78, CsSalesRecord);
    }
    if (hasScSalesRecord) {
      size += pb::CodedOutputStream.ComputeMessageSize(79, ScSalesRecord);
    }
    if (hasCsSalesTop) {
      size += pb::CodedOutputStream.ComputeMessageSize(80, CsSalesTop);
    }
    if (hasScSalesTop) {
      size += pb::CodedOutputStream.ComputeMessageSize(81, ScSalesTop);
    }
    if (hasCsOrderList) {
      size += pb::CodedOutputStream.ComputeMessageSize(82, CsOrderList);
    }
    if (hasScOrderList) {
      size += pb::CodedOutputStream.ComputeMessageSize(83, ScOrderList);
    }
    if (hasCsOrderDetail) {
      size += pb::CodedOutputStream.ComputeMessageSize(84, CsOrderDetail);
    }
    if (hasScOrderDetail) {
      size += pb::CodedOutputStream.ComputeMessageSize(85, ScOrderDetail);
    }
    if (hasCsOrderProcess) {
      size += pb::CodedOutputStream.ComputeMessageSize(86, CsOrderProcess);
    }
    if (hasScShiftDeliveredBy) {
      size += pb::CodedOutputStream.ComputeMessageSize(87, ScShiftDeliveredBy);
    }
    if (hasCsShiftAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(88, CsShiftAdd);
    }
    if (hasCsShiftFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(89, CsShiftFind);
    }
    if (hasScShiftFind) {
      size += pb::CodedOutputStream.ComputeMessageSize(90, ScShiftFind);
    }
    if (hasCsReconnect) {
      size += pb::CodedOutputStream.ComputeMessageSize(91, CsReconnect);
    }
    if (hasScReconnect) {
      size += pb::CodedOutputStream.ComputeMessageSize(92, ScReconnect);
    }
    if (hasCsClientOpen) {
      size += pb::CodedOutputStream.ComputeMessageSize(200, CsClientOpen);
    }
    if (hasCsClientClose) {
      size += pb::CodedOutputStream.ComputeMessageSize(201, CsClientClose);
    }
    if (hasCsLogon) {
      size += pb::CodedOutputStream.ComputeMessageSize(202, CsLogon);
    }
    if (hasScLogon) {
      size += pb::CodedOutputStream.ComputeMessageSize(203, ScLogon);
    }
    if (hasCsLogoff) {
      size += pb::CodedOutputStream.ComputeMessageSize(204, CsLogoff);
    }
    if (hasScLogoff) {
      size += pb::CodedOutputStream.ComputeMessageSize(205, ScLogoff);
    }
    if (hasCsHungup) {
      size += pb::CodedOutputStream.ComputeMessageSize(206, CsHungup);
    }
    if (hasCsPreCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(207, CsPreCharge);
    }
    if (hasScPreCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(208, ScPreCharge);
    }
    if (hasScToCharge) {
      size += pb::CodedOutputStream.ComputeMessageSize(209, ScToCharge);
    }
    if (hasCsCartAdd) {
      size += pb::CodedOutputStream.ComputeMessageSize(211, CsCartAdd);
    }
    if (hasCsCartDel) {
      size += pb::CodedOutputStream.ComputeMessageSize(212, CsCartDel);
    }
    if (hasCsPreBuy) {
      size += pb::CodedOutputStream.ComputeMessageSize(213, CsPreBuy);
    }
    if (hasScPreBuy) {
      size += pb::CodedOutputStream.ComputeMessageSize(214, ScPreBuy);
    }
    if (hasScToBuy) {
      size += pb::CodedOutputStream.ComputeMessageSize(215, ScToBuy);
    }
    if (hasScSysMessage) {
      size += pb::CodedOutputStream.ComputeMessageSize(216, ScSysMessage);
    }
    if (hasCsEvaluate) {
      size += pb::CodedOutputStream.ComputeMessageSize(218, CsEvaluate);
    }
    if (hasScEvaluate) {
      size += pb::CodedOutputStream.ComputeMessageSize(219, ScEvaluate);
    }
    if (hasCsVerifyCode) {
      size += pb::CodedOutputStream.ComputeMessageSize(220, CsVerifyCode);
    }
    if (hasScVerifyCode) {
      size += pb::CodedOutputStream.ComputeMessageSize(221, ScVerifyCode);
    }
    if (hasCsBindMobile) {
      size += pb::CodedOutputStream.ComputeMessageSize(222, CsBindMobile);
    }
    if (hasScBindMobile) {
      size += pb::CodedOutputStream.ComputeMessageSize(223, ScBindMobile);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MessageContent ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MessageContent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MessageContent ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MessageContent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MessageContent ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MessageContent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MessageContent ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MessageContent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MessageContent ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MessageContent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MessageContent MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MessageContent prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MessageContent, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MessageContent cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MessageContent result;
    
    private MessageContent PrepareBuilder() {
      if (resultIsReadOnly) {
        MessageContent original = result;
        result = new MessageContent();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MessageContent MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MessageContent.Descriptor; }
    }
    
    public override MessageContent DefaultInstanceForType {
      get { return global::MessageContent.DefaultInstance; }
    }
    
    public override MessageContent BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MessageContent) {
        return MergeFrom((MessageContent) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MessageContent other) {
      if (other == global::MessageContent.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMessageType) {
        MessageType = other.MessageType;
      }
      if (other.HasErrorTip) {
        MergeErrorTip(other.ErrorTip);
      }
      if (other.HasClAskServer) {
        MergeClAskServer(other.ClAskServer);
      }
      if (other.HasLcRetServer) {
        MergeLcRetServer(other.LcRetServer);
      }
      if (other.HasCsAuthen) {
        MergeCsAuthen(other.CsAuthen);
      }
      if (other.HasScAuthen) {
        MergeScAuthen(other.ScAuthen);
      }
      if (other.HasCsLogin) {
        MergeCsLogin(other.CsLogin);
      }
      if (other.HasScLogin) {
        MergeScLogin(other.ScLogin);
      }
      if (other.HasScCallList) {
        MergeScCallList(other.ScCallList);
      }
      if (other.HasCsCallProcess) {
        MergeCsCallProcess(other.CsCallProcess);
      }
      if (other.HasScAccountInfo) {
        MergeScAccountInfo(other.ScAccountInfo);
      }
      if (other.HasScRealtimeInfo) {
        MergeScRealtimeInfo(other.ScRealtimeInfo);
      }
      if (other.HasCsCommand) {
        MergeCsCommand(other.CsCommand);
      }
      if (other.HasCsLog) {
        MergeCsLog(other.CsLog);
      }
      if (other.HasScLog) {
        MergeScLog(other.ScLog);
      }
      if (other.HasScRoleList) {
        MergeScRoleList(other.ScRoleList);
      }
      if (other.HasCsRoleAdd) {
        MergeCsRoleAdd(other.CsRoleAdd);
      }
      if (other.HasScRoleAdd) {
        MergeScRoleAdd(other.ScRoleAdd);
      }
      if (other.HasCsRoleDel) {
        MergeCsRoleDel(other.CsRoleDel);
      }
      if (other.HasCsRoleUpdate) {
        MergeCsRoleUpdate(other.CsRoleUpdate);
      }
      if (other.HasCsRoleRights) {
        MergeCsRoleRights(other.CsRoleRights);
      }
      if (other.HasScAccountList) {
        MergeScAccountList(other.ScAccountList);
      }
      if (other.HasCsAccountAdd) {
        MergeCsAccountAdd(other.CsAccountAdd);
      }
      if (other.HasCsAccountDel) {
        MergeCsAccountDel(other.CsAccountDel);
      }
      if (other.HasCsAccountUpdate) {
        MergeCsAccountUpdate(other.CsAccountUpdate);
      }
      if (other.HasCsAccountSnsSet) {
        MergeCsAccountSnsSet(other.CsAccountSnsSet);
      }
      if (other.HasCsStaffComment) {
        MergeCsStaffComment(other.CsStaffComment);
      }
      if (other.HasScStaffComment) {
        MergeScStaffComment(other.ScStaffComment);
      }
      if (other.HasCsStaffPerform) {
        MergeCsStaffPerform(other.CsStaffPerform);
      }
      if (other.HasScStaffPerform) {
        MergeScStaffPerform(other.ScStaffPerform);
      }
      if (other.HasCsEarning) {
        MergeCsEarning(other.CsEarning);
      }
      if (other.HasScEarning) {
        MergeScEarning(other.ScEarning);
      }
      if (other.HasScComputerList) {
        MergeScComputerList(other.ScComputerList);
      }
      if (other.HasCsComputerAdd) {
        MergeCsComputerAdd(other.CsComputerAdd);
      }
      if (other.HasCsComputerDel) {
        MergeCsComputerDel(other.CsComputerDel);
      }
      if (other.HasCsComputerUpdate) {
        MergeCsComputerUpdate(other.CsComputerUpdate);
      }
      if (other.HasCsComputerFind) {
        MergeCsComputerFind(other.CsComputerFind);
      }
      if (other.HasScComputerFind) {
        MergeScComputerFind(other.ScComputerFind);
      }
      if (other.HasCsMemberList) {
        MergeCsMemberList(other.CsMemberList);
      }
      if (other.HasScMemberList) {
        MergeScMemberList(other.ScMemberList);
      }
      if (other.HasCsMemberAdd) {
        MergeCsMemberAdd(other.CsMemberAdd);
      }
      if (other.HasScMemberAdd) {
        MergeScMemberAdd(other.ScMemberAdd);
      }
      if (other.HasCsMemberDel) {
        MergeCsMemberDel(other.CsMemberDel);
      }
      if (other.HasCsMemberUpdate) {
        MergeCsMemberUpdate(other.CsMemberUpdate);
      }
      if (other.HasCsMemberFind) {
        MergeCsMemberFind(other.CsMemberFind);
      }
      if (other.HasScMemberFind) {
        MergeScMemberFind(other.ScMemberFind);
      }
      if (other.HasCsMemberCardInfo) {
        MergeCsMemberCardInfo(other.CsMemberCardInfo);
      }
      if (other.HasScMemberCardInfo) {
        MergeScMemberCardInfo(other.ScMemberCardInfo);
      }
      if (other.HasCsMemberConsumRecord) {
        MergeCsMemberConsumRecord(other.CsMemberConsumRecord);
      }
      if (other.HasScMemberConsumRecord) {
        MergeScMemberConsumRecord(other.ScMemberConsumRecord);
      }
      if (other.HasCsMemberConsumFilter) {
        MergeCsMemberConsumFilter(other.CsMemberConsumFilter);
      }
      if (other.HasScMemberConsumFilter) {
        MergeScMemberConsumFilter(other.ScMemberConsumFilter);
      }
      if (other.HasScSysBillList) {
        MergeScSysBillList(other.ScSysBillList);
      }
      if (other.HasCsSysBillUpdate) {
        MergeCsSysBillUpdate(other.CsSysBillUpdate);
      }
      if (other.HasScSysBillUpdate) {
        MergeScSysBillUpdate(other.ScSysBillUpdate);
      }
      if (other.HasCsSysInfo) {
        MergeCsSysInfo(other.CsSysInfo);
      }
      if (other.HasScSysInfo) {
        MergeScSysInfo(other.ScSysInfo);
      }
      if (other.HasCsAddSysInfo) {
        MergeCsAddSysInfo(other.CsAddSysInfo);
      }
      if (other.HasCsDelSysInfo) {
        MergeCsDelSysInfo(other.CsDelSysInfo);
      }
      if (other.HasCsUpdateSysInfo) {
        MergeCsUpdateSysInfo(other.CsUpdateSysInfo);
      }
      if (other.HasCsEmkCheckin) {
        MergeCsEmkCheckin(other.CsEmkCheckin);
      }
      if (other.HasScEmkCheckin) {
        MergeScEmkCheckin(other.ScEmkCheckin);
      }
      if (other.HasCsEmkCheckout) {
        MergeCsEmkCheckout(other.CsEmkCheckout);
      }
      if (other.HasScEmkCheckout) {
        MergeScEmkCheckout(other.ScEmkCheckout);
      }
      if (other.HasCsEmkRecord) {
        MergeCsEmkRecord(other.CsEmkRecord);
      }
      if (other.HasScEmkRecord) {
        MergeScEmkRecord(other.ScEmkRecord);
      }
      if (other.HasCsEmkRecordFind) {
        MergeCsEmkRecordFind(other.CsEmkRecordFind);
      }
      if (other.HasScEmkRecordFind) {
        MergeScEmkRecordFind(other.ScEmkRecordFind);
      }
      if (other.HasCsGoodsFind) {
        MergeCsGoodsFind(other.CsGoodsFind);
      }
      if (other.HasScGoodsFind) {
        MergeScGoodsFind(other.ScGoodsFind);
      }
      if (other.HasCsGoodsAdd) {
        MergeCsGoodsAdd(other.CsGoodsAdd);
      }
      if (other.HasCsGoodsDel) {
        MergeCsGoodsDel(other.CsGoodsDel);
      }
      if (other.HasCsGoodsUpdate) {
        MergeCsGoodsUpdate(other.CsGoodsUpdate);
      }
      if (other.HasCsGoodsStock) {
        MergeCsGoodsStock(other.CsGoodsStock);
      }
      if (other.HasScGoodsStock) {
        MergeScGoodsStock(other.ScGoodsStock);
      }
      if (other.HasCsSalesRecord) {
        MergeCsSalesRecord(other.CsSalesRecord);
      }
      if (other.HasScSalesRecord) {
        MergeScSalesRecord(other.ScSalesRecord);
      }
      if (other.HasCsSalesTop) {
        MergeCsSalesTop(other.CsSalesTop);
      }
      if (other.HasScSalesTop) {
        MergeScSalesTop(other.ScSalesTop);
      }
      if (other.HasCsOrderList) {
        MergeCsOrderList(other.CsOrderList);
      }
      if (other.HasScOrderList) {
        MergeScOrderList(other.ScOrderList);
      }
      if (other.HasCsOrderDetail) {
        MergeCsOrderDetail(other.CsOrderDetail);
      }
      if (other.HasScOrderDetail) {
        MergeScOrderDetail(other.ScOrderDetail);
      }
      if (other.HasCsOrderProcess) {
        MergeCsOrderProcess(other.CsOrderProcess);
      }
      if (other.HasScShiftDeliveredBy) {
        MergeScShiftDeliveredBy(other.ScShiftDeliveredBy);
      }
      if (other.HasCsShiftAdd) {
        MergeCsShiftAdd(other.CsShiftAdd);
      }
      if (other.HasCsShiftFind) {
        MergeCsShiftFind(other.CsShiftFind);
      }
      if (other.HasScShiftFind) {
        MergeScShiftFind(other.ScShiftFind);
      }
      if (other.HasCsReconnect) {
        MergeCsReconnect(other.CsReconnect);
      }
      if (other.HasScReconnect) {
        MergeScReconnect(other.ScReconnect);
      }
      if (other.HasCsClientOpen) {
        MergeCsClientOpen(other.CsClientOpen);
      }
      if (other.HasCsClientClose) {
        MergeCsClientClose(other.CsClientClose);
      }
      if (other.HasCsLogon) {
        MergeCsLogon(other.CsLogon);
      }
      if (other.HasScLogon) {
        MergeScLogon(other.ScLogon);
      }
      if (other.HasCsLogoff) {
        MergeCsLogoff(other.CsLogoff);
      }
      if (other.HasScLogoff) {
        MergeScLogoff(other.ScLogoff);
      }
      if (other.HasCsHungup) {
        MergeCsHungup(other.CsHungup);
      }
      if (other.HasCsPreCharge) {
        MergeCsPreCharge(other.CsPreCharge);
      }
      if (other.HasScPreCharge) {
        MergeScPreCharge(other.ScPreCharge);
      }
      if (other.HasScToCharge) {
        MergeScToCharge(other.ScToCharge);
      }
      if (other.HasCsCartAdd) {
        MergeCsCartAdd(other.CsCartAdd);
      }
      if (other.HasCsCartDel) {
        MergeCsCartDel(other.CsCartDel);
      }
      if (other.HasCsPreBuy) {
        MergeCsPreBuy(other.CsPreBuy);
      }
      if (other.HasScPreBuy) {
        MergeScPreBuy(other.ScPreBuy);
      }
      if (other.HasScToBuy) {
        MergeScToBuy(other.ScToBuy);
      }
      if (other.HasScSysMessage) {
        MergeScSysMessage(other.ScSysMessage);
      }
      if (other.HasCsEvaluate) {
        MergeCsEvaluate(other.CsEvaluate);
      }
      if (other.HasScEvaluate) {
        MergeScEvaluate(other.ScEvaluate);
      }
      if (other.HasCsVerifyCode) {
        MergeCsVerifyCode(other.CsVerifyCode);
      }
      if (other.HasScVerifyCode) {
        MergeScVerifyCode(other.ScVerifyCode);
      }
      if (other.HasCsBindMobile) {
        MergeCsBindMobile(other.CsBindMobile);
      }
      if (other.HasScBindMobile) {
        MergeScBindMobile(other.ScBindMobile);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_messageContentFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _messageContentFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMessageType = input.ReadInt32(ref result.messageType_);
            break;
          }
          case 18: {
            global::StructErrorTip.Builder subBuilder = global::StructErrorTip.CreateBuilder();
            if (result.hasErrorTip) {
              subBuilder.MergeFrom(ErrorTip);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ErrorTip = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            global::CLAskServer.Builder subBuilder = global::CLAskServer.CreateBuilder();
            if (result.hasClAskServer) {
              subBuilder.MergeFrom(ClAskServer);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ClAskServer = subBuilder.BuildPartial();
            break;
          }
          case 34: {
            global::LCRetServer.Builder subBuilder = global::LCRetServer.CreateBuilder();
            if (result.hasLcRetServer) {
              subBuilder.MergeFrom(LcRetServer);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            LcRetServer = subBuilder.BuildPartial();
            break;
          }
          case 42: {
            global::CSAuthen.Builder subBuilder = global::CSAuthen.CreateBuilder();
            if (result.hasCsAuthen) {
              subBuilder.MergeFrom(CsAuthen);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAuthen = subBuilder.BuildPartial();
            break;
          }
          case 50: {
            global::SCAuthen.Builder subBuilder = global::SCAuthen.CreateBuilder();
            if (result.hasScAuthen) {
              subBuilder.MergeFrom(ScAuthen);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScAuthen = subBuilder.BuildPartial();
            break;
          }
          case 58: {
            global::CSLogin.Builder subBuilder = global::CSLogin.CreateBuilder();
            if (result.hasCsLogin) {
              subBuilder.MergeFrom(CsLogin);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsLogin = subBuilder.BuildPartial();
            break;
          }
          case 66: {
            global::SCLogin.Builder subBuilder = global::SCLogin.CreateBuilder();
            if (result.hasScLogin) {
              subBuilder.MergeFrom(ScLogin);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScLogin = subBuilder.BuildPartial();
            break;
          }
          case 74: {
            global::SCCallList.Builder subBuilder = global::SCCallList.CreateBuilder();
            if (result.hasScCallList) {
              subBuilder.MergeFrom(ScCallList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScCallList = subBuilder.BuildPartial();
            break;
          }
          case 82: {
            global::CSCallProcess.Builder subBuilder = global::CSCallProcess.CreateBuilder();
            if (result.hasCsCallProcess) {
              subBuilder.MergeFrom(CsCallProcess);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsCallProcess = subBuilder.BuildPartial();
            break;
          }
          case 90: {
            global::SCAccountInfo.Builder subBuilder = global::SCAccountInfo.CreateBuilder();
            if (result.hasScAccountInfo) {
              subBuilder.MergeFrom(ScAccountInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScAccountInfo = subBuilder.BuildPartial();
            break;
          }
          case 98: {
            global::SCRealtimeInfo.Builder subBuilder = global::SCRealtimeInfo.CreateBuilder();
            if (result.hasScRealtimeInfo) {
              subBuilder.MergeFrom(ScRealtimeInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScRealtimeInfo = subBuilder.BuildPartial();
            break;
          }
          case 106: {
            global::CSCommand.Builder subBuilder = global::CSCommand.CreateBuilder();
            if (result.hasCsCommand) {
              subBuilder.MergeFrom(CsCommand);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsCommand = subBuilder.BuildPartial();
            break;
          }
          case 114: {
            global::CSLog.Builder subBuilder = global::CSLog.CreateBuilder();
            if (result.hasCsLog) {
              subBuilder.MergeFrom(CsLog);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsLog = subBuilder.BuildPartial();
            break;
          }
          case 122: {
            global::SCLog.Builder subBuilder = global::SCLog.CreateBuilder();
            if (result.hasScLog) {
              subBuilder.MergeFrom(ScLog);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScLog = subBuilder.BuildPartial();
            break;
          }
          case 130: {
            global::SCRoleList.Builder subBuilder = global::SCRoleList.CreateBuilder();
            if (result.hasScRoleList) {
              subBuilder.MergeFrom(ScRoleList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScRoleList = subBuilder.BuildPartial();
            break;
          }
          case 138: {
            global::CSRoleAdd.Builder subBuilder = global::CSRoleAdd.CreateBuilder();
            if (result.hasCsRoleAdd) {
              subBuilder.MergeFrom(CsRoleAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsRoleAdd = subBuilder.BuildPartial();
            break;
          }
          case 146: {
            global::SCRoleAdd.Builder subBuilder = global::SCRoleAdd.CreateBuilder();
            if (result.hasScRoleAdd) {
              subBuilder.MergeFrom(ScRoleAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScRoleAdd = subBuilder.BuildPartial();
            break;
          }
          case 154: {
            global::CSRoleDel.Builder subBuilder = global::CSRoleDel.CreateBuilder();
            if (result.hasCsRoleDel) {
              subBuilder.MergeFrom(CsRoleDel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsRoleDel = subBuilder.BuildPartial();
            break;
          }
          case 162: {
            global::CSRoleUpdate.Builder subBuilder = global::CSRoleUpdate.CreateBuilder();
            if (result.hasCsRoleUpdate) {
              subBuilder.MergeFrom(CsRoleUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsRoleUpdate = subBuilder.BuildPartial();
            break;
          }
          case 170: {
            global::CSRoleRights.Builder subBuilder = global::CSRoleRights.CreateBuilder();
            if (result.hasCsRoleRights) {
              subBuilder.MergeFrom(CsRoleRights);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsRoleRights = subBuilder.BuildPartial();
            break;
          }
          case 178: {
            global::SCAccountList.Builder subBuilder = global::SCAccountList.CreateBuilder();
            if (result.hasScAccountList) {
              subBuilder.MergeFrom(ScAccountList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScAccountList = subBuilder.BuildPartial();
            break;
          }
          case 186: {
            global::CSAccountAdd.Builder subBuilder = global::CSAccountAdd.CreateBuilder();
            if (result.hasCsAccountAdd) {
              subBuilder.MergeFrom(CsAccountAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAccountAdd = subBuilder.BuildPartial();
            break;
          }
          case 194: {
            global::CSAccountDel.Builder subBuilder = global::CSAccountDel.CreateBuilder();
            if (result.hasCsAccountDel) {
              subBuilder.MergeFrom(CsAccountDel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAccountDel = subBuilder.BuildPartial();
            break;
          }
          case 202: {
            global::CSAccountUpdate.Builder subBuilder = global::CSAccountUpdate.CreateBuilder();
            if (result.hasCsAccountUpdate) {
              subBuilder.MergeFrom(CsAccountUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAccountUpdate = subBuilder.BuildPartial();
            break;
          }
          case 210: {
            global::CSAccountSnsSet.Builder subBuilder = global::CSAccountSnsSet.CreateBuilder();
            if (result.hasCsAccountSnsSet) {
              subBuilder.MergeFrom(CsAccountSnsSet);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAccountSnsSet = subBuilder.BuildPartial();
            break;
          }
          case 218: {
            global::CSStaffComment.Builder subBuilder = global::CSStaffComment.CreateBuilder();
            if (result.hasCsStaffComment) {
              subBuilder.MergeFrom(CsStaffComment);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsStaffComment = subBuilder.BuildPartial();
            break;
          }
          case 226: {
            global::SCStaffComment.Builder subBuilder = global::SCStaffComment.CreateBuilder();
            if (result.hasScStaffComment) {
              subBuilder.MergeFrom(ScStaffComment);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScStaffComment = subBuilder.BuildPartial();
            break;
          }
          case 234: {
            global::CSStaffPerform.Builder subBuilder = global::CSStaffPerform.CreateBuilder();
            if (result.hasCsStaffPerform) {
              subBuilder.MergeFrom(CsStaffPerform);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsStaffPerform = subBuilder.BuildPartial();
            break;
          }
          case 242: {
            global::SCStaffPerform.Builder subBuilder = global::SCStaffPerform.CreateBuilder();
            if (result.hasScStaffPerform) {
              subBuilder.MergeFrom(ScStaffPerform);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScStaffPerform = subBuilder.BuildPartial();
            break;
          }
          case 266: {
            global::CSEarning.Builder subBuilder = global::CSEarning.CreateBuilder();
            if (result.hasCsEarning) {
              subBuilder.MergeFrom(CsEarning);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEarning = subBuilder.BuildPartial();
            break;
          }
          case 274: {
            global::SCEarning.Builder subBuilder = global::SCEarning.CreateBuilder();
            if (result.hasScEarning) {
              subBuilder.MergeFrom(ScEarning);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEarning = subBuilder.BuildPartial();
            break;
          }
          case 282: {
            global::SCComputerList.Builder subBuilder = global::SCComputerList.CreateBuilder();
            if (result.hasScComputerList) {
              subBuilder.MergeFrom(ScComputerList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScComputerList = subBuilder.BuildPartial();
            break;
          }
          case 290: {
            global::CSComputerAdd.Builder subBuilder = global::CSComputerAdd.CreateBuilder();
            if (result.hasCsComputerAdd) {
              subBuilder.MergeFrom(CsComputerAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsComputerAdd = subBuilder.BuildPartial();
            break;
          }
          case 298: {
            global::CSComputerDel.Builder subBuilder = global::CSComputerDel.CreateBuilder();
            if (result.hasCsComputerDel) {
              subBuilder.MergeFrom(CsComputerDel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsComputerDel = subBuilder.BuildPartial();
            break;
          }
          case 306: {
            global::CSComputerUpdate.Builder subBuilder = global::CSComputerUpdate.CreateBuilder();
            if (result.hasCsComputerUpdate) {
              subBuilder.MergeFrom(CsComputerUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsComputerUpdate = subBuilder.BuildPartial();
            break;
          }
          case 314: {
            global::CSComputerFind.Builder subBuilder = global::CSComputerFind.CreateBuilder();
            if (result.hasCsComputerFind) {
              subBuilder.MergeFrom(CsComputerFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsComputerFind = subBuilder.BuildPartial();
            break;
          }
          case 322: {
            global::SCComputerFind.Builder subBuilder = global::SCComputerFind.CreateBuilder();
            if (result.hasScComputerFind) {
              subBuilder.MergeFrom(ScComputerFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScComputerFind = subBuilder.BuildPartial();
            break;
          }
          case 330: {
            global::CSMemberList.Builder subBuilder = global::CSMemberList.CreateBuilder();
            if (result.hasCsMemberList) {
              subBuilder.MergeFrom(CsMemberList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberList = subBuilder.BuildPartial();
            break;
          }
          case 338: {
            global::SCMemberList.Builder subBuilder = global::SCMemberList.CreateBuilder();
            if (result.hasScMemberList) {
              subBuilder.MergeFrom(ScMemberList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScMemberList = subBuilder.BuildPartial();
            break;
          }
          case 346: {
            global::CSMemberAdd.Builder subBuilder = global::CSMemberAdd.CreateBuilder();
            if (result.hasCsMemberAdd) {
              subBuilder.MergeFrom(CsMemberAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberAdd = subBuilder.BuildPartial();
            break;
          }
          case 354: {
            global::SCMemberAdd.Builder subBuilder = global::SCMemberAdd.CreateBuilder();
            if (result.hasScMemberAdd) {
              subBuilder.MergeFrom(ScMemberAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScMemberAdd = subBuilder.BuildPartial();
            break;
          }
          case 362: {
            global::CSMemberDel.Builder subBuilder = global::CSMemberDel.CreateBuilder();
            if (result.hasCsMemberDel) {
              subBuilder.MergeFrom(CsMemberDel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberDel = subBuilder.BuildPartial();
            break;
          }
          case 370: {
            global::CSMemberUpdateStatus.Builder subBuilder = global::CSMemberUpdateStatus.CreateBuilder();
            if (result.hasCsMemberUpdate) {
              subBuilder.MergeFrom(CsMemberUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberUpdate = subBuilder.BuildPartial();
            break;
          }
          case 378: {
            global::CSMemberFind.Builder subBuilder = global::CSMemberFind.CreateBuilder();
            if (result.hasCsMemberFind) {
              subBuilder.MergeFrom(CsMemberFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberFind = subBuilder.BuildPartial();
            break;
          }
          case 386: {
            global::SCMemberFind.Builder subBuilder = global::SCMemberFind.CreateBuilder();
            if (result.hasScMemberFind) {
              subBuilder.MergeFrom(ScMemberFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScMemberFind = subBuilder.BuildPartial();
            break;
          }
          case 394: {
            global::CSMemberCardInfo.Builder subBuilder = global::CSMemberCardInfo.CreateBuilder();
            if (result.hasCsMemberCardInfo) {
              subBuilder.MergeFrom(CsMemberCardInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberCardInfo = subBuilder.BuildPartial();
            break;
          }
          case 402: {
            global::SCMemberCardInfo.Builder subBuilder = global::SCMemberCardInfo.CreateBuilder();
            if (result.hasScMemberCardInfo) {
              subBuilder.MergeFrom(ScMemberCardInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScMemberCardInfo = subBuilder.BuildPartial();
            break;
          }
          case 410: {
            global::CSMemberConsumRecord.Builder subBuilder = global::CSMemberConsumRecord.CreateBuilder();
            if (result.hasCsMemberConsumRecord) {
              subBuilder.MergeFrom(CsMemberConsumRecord);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberConsumRecord = subBuilder.BuildPartial();
            break;
          }
          case 418: {
            global::SCMemberConsumRecord.Builder subBuilder = global::SCMemberConsumRecord.CreateBuilder();
            if (result.hasScMemberConsumRecord) {
              subBuilder.MergeFrom(ScMemberConsumRecord);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScMemberConsumRecord = subBuilder.BuildPartial();
            break;
          }
          case 426: {
            global::CSMemberConsumFilter.Builder subBuilder = global::CSMemberConsumFilter.CreateBuilder();
            if (result.hasCsMemberConsumFilter) {
              subBuilder.MergeFrom(CsMemberConsumFilter);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsMemberConsumFilter = subBuilder.BuildPartial();
            break;
          }
          case 434: {
            global::SCMemberConsumFilter.Builder subBuilder = global::SCMemberConsumFilter.CreateBuilder();
            if (result.hasScMemberConsumFilter) {
              subBuilder.MergeFrom(ScMemberConsumFilter);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScMemberConsumFilter = subBuilder.BuildPartial();
            break;
          }
          case 442: {
            global::SCSysBillList.Builder subBuilder = global::SCSysBillList.CreateBuilder();
            if (result.hasScSysBillList) {
              subBuilder.MergeFrom(ScSysBillList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScSysBillList = subBuilder.BuildPartial();
            break;
          }
          case 450: {
            global::CSSysBillUpdate.Builder subBuilder = global::CSSysBillUpdate.CreateBuilder();
            if (result.hasCsSysBillUpdate) {
              subBuilder.MergeFrom(CsSysBillUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsSysBillUpdate = subBuilder.BuildPartial();
            break;
          }
          case 458: {
            global::SCSysBillUpdate.Builder subBuilder = global::SCSysBillUpdate.CreateBuilder();
            if (result.hasScSysBillUpdate) {
              subBuilder.MergeFrom(ScSysBillUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScSysBillUpdate = subBuilder.BuildPartial();
            break;
          }
          case 466: {
            global::CSSysInto.Builder subBuilder = global::CSSysInto.CreateBuilder();
            if (result.hasCsSysInfo) {
              subBuilder.MergeFrom(CsSysInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsSysInfo = subBuilder.BuildPartial();
            break;
          }
          case 474: {
            global::SCSysInfo.Builder subBuilder = global::SCSysInfo.CreateBuilder();
            if (result.hasScSysInfo) {
              subBuilder.MergeFrom(ScSysInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScSysInfo = subBuilder.BuildPartial();
            break;
          }
          case 482: {
            global::CSAddSysInfo.Builder subBuilder = global::CSAddSysInfo.CreateBuilder();
            if (result.hasCsAddSysInfo) {
              subBuilder.MergeFrom(CsAddSysInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsAddSysInfo = subBuilder.BuildPartial();
            break;
          }
          case 490: {
            global::CSDelSysInfo.Builder subBuilder = global::CSDelSysInfo.CreateBuilder();
            if (result.hasCsDelSysInfo) {
              subBuilder.MergeFrom(CsDelSysInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsDelSysInfo = subBuilder.BuildPartial();
            break;
          }
          case 498: {
            global::CSUpdateSysInfo.Builder subBuilder = global::CSUpdateSysInfo.CreateBuilder();
            if (result.hasCsUpdateSysInfo) {
              subBuilder.MergeFrom(CsUpdateSysInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsUpdateSysInfo = subBuilder.BuildPartial();
            break;
          }
          case 506: {
            global::CSEmkCheckin.Builder subBuilder = global::CSEmkCheckin.CreateBuilder();
            if (result.hasCsEmkCheckin) {
              subBuilder.MergeFrom(CsEmkCheckin);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkCheckin = subBuilder.BuildPartial();
            break;
          }
          case 514: {
            global::SCEmkCheckin.Builder subBuilder = global::SCEmkCheckin.CreateBuilder();
            if (result.hasScEmkCheckin) {
              subBuilder.MergeFrom(ScEmkCheckin);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEmkCheckin = subBuilder.BuildPartial();
            break;
          }
          case 522: {
            global::CSEmkCheckout.Builder subBuilder = global::CSEmkCheckout.CreateBuilder();
            if (result.hasCsEmkCheckout) {
              subBuilder.MergeFrom(CsEmkCheckout);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkCheckout = subBuilder.BuildPartial();
            break;
          }
          case 530: {
            global::SCEmkCheckout.Builder subBuilder = global::SCEmkCheckout.CreateBuilder();
            if (result.hasScEmkCheckout) {
              subBuilder.MergeFrom(ScEmkCheckout);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEmkCheckout = subBuilder.BuildPartial();
            break;
          }
          case 538: {
            global::CSEmkRecord.Builder subBuilder = global::CSEmkRecord.CreateBuilder();
            if (result.hasCsEmkRecord) {
              subBuilder.MergeFrom(CsEmkRecord);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkRecord = subBuilder.BuildPartial();
            break;
          }
          case 546: {
            global::SCEmkRecord.Builder subBuilder = global::SCEmkRecord.CreateBuilder();
            if (result.hasScEmkRecord) {
              subBuilder.MergeFrom(ScEmkRecord);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEmkRecord = subBuilder.BuildPartial();
            break;
          }
          case 554: {
            global::CSEmkRecordFind.Builder subBuilder = global::CSEmkRecordFind.CreateBuilder();
            if (result.hasCsEmkRecordFind) {
              subBuilder.MergeFrom(CsEmkRecordFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEmkRecordFind = subBuilder.BuildPartial();
            break;
          }
          case 562: {
            global::SCEmkRecordFind.Builder subBuilder = global::SCEmkRecordFind.CreateBuilder();
            if (result.hasScEmkRecordFind) {
              subBuilder.MergeFrom(ScEmkRecordFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEmkRecordFind = subBuilder.BuildPartial();
            break;
          }
          case 570: {
            global::CSGoodsFind.Builder subBuilder = global::CSGoodsFind.CreateBuilder();
            if (result.hasCsGoodsFind) {
              subBuilder.MergeFrom(CsGoodsFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsGoodsFind = subBuilder.BuildPartial();
            break;
          }
          case 578: {
            global::SCGoodsFind.Builder subBuilder = global::SCGoodsFind.CreateBuilder();
            if (result.hasScGoodsFind) {
              subBuilder.MergeFrom(ScGoodsFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScGoodsFind = subBuilder.BuildPartial();
            break;
          }
          case 586: {
            global::CSGoodsAdd.Builder subBuilder = global::CSGoodsAdd.CreateBuilder();
            if (result.hasCsGoodsAdd) {
              subBuilder.MergeFrom(CsGoodsAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsGoodsAdd = subBuilder.BuildPartial();
            break;
          }
          case 594: {
            global::CSGoodsDel.Builder subBuilder = global::CSGoodsDel.CreateBuilder();
            if (result.hasCsGoodsDel) {
              subBuilder.MergeFrom(CsGoodsDel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsGoodsDel = subBuilder.BuildPartial();
            break;
          }
          case 602: {
            global::CSGoodsUpdate.Builder subBuilder = global::CSGoodsUpdate.CreateBuilder();
            if (result.hasCsGoodsUpdate) {
              subBuilder.MergeFrom(CsGoodsUpdate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsGoodsUpdate = subBuilder.BuildPartial();
            break;
          }
          case 610: {
            global::CSGoodsStock.Builder subBuilder = global::CSGoodsStock.CreateBuilder();
            if (result.hasCsGoodsStock) {
              subBuilder.MergeFrom(CsGoodsStock);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsGoodsStock = subBuilder.BuildPartial();
            break;
          }
          case 618: {
            global::SCGoodsStock.Builder subBuilder = global::SCGoodsStock.CreateBuilder();
            if (result.hasScGoodsStock) {
              subBuilder.MergeFrom(ScGoodsStock);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScGoodsStock = subBuilder.BuildPartial();
            break;
          }
          case 626: {
            global::CSSalesRecord.Builder subBuilder = global::CSSalesRecord.CreateBuilder();
            if (result.hasCsSalesRecord) {
              subBuilder.MergeFrom(CsSalesRecord);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsSalesRecord = subBuilder.BuildPartial();
            break;
          }
          case 634: {
            global::SCSalesRecord.Builder subBuilder = global::SCSalesRecord.CreateBuilder();
            if (result.hasScSalesRecord) {
              subBuilder.MergeFrom(ScSalesRecord);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScSalesRecord = subBuilder.BuildPartial();
            break;
          }
          case 642: {
            global::CSSalesTop.Builder subBuilder = global::CSSalesTop.CreateBuilder();
            if (result.hasCsSalesTop) {
              subBuilder.MergeFrom(CsSalesTop);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsSalesTop = subBuilder.BuildPartial();
            break;
          }
          case 650: {
            global::SCSalesTop.Builder subBuilder = global::SCSalesTop.CreateBuilder();
            if (result.hasScSalesTop) {
              subBuilder.MergeFrom(ScSalesTop);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScSalesTop = subBuilder.BuildPartial();
            break;
          }
          case 658: {
            global::CSOrderList.Builder subBuilder = global::CSOrderList.CreateBuilder();
            if (result.hasCsOrderList) {
              subBuilder.MergeFrom(CsOrderList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsOrderList = subBuilder.BuildPartial();
            break;
          }
          case 666: {
            global::SCOrderList.Builder subBuilder = global::SCOrderList.CreateBuilder();
            if (result.hasScOrderList) {
              subBuilder.MergeFrom(ScOrderList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScOrderList = subBuilder.BuildPartial();
            break;
          }
          case 674: {
            global::CSOrderDetail.Builder subBuilder = global::CSOrderDetail.CreateBuilder();
            if (result.hasCsOrderDetail) {
              subBuilder.MergeFrom(CsOrderDetail);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsOrderDetail = subBuilder.BuildPartial();
            break;
          }
          case 682: {
            global::SCOrderDetail.Builder subBuilder = global::SCOrderDetail.CreateBuilder();
            if (result.hasScOrderDetail) {
              subBuilder.MergeFrom(ScOrderDetail);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScOrderDetail = subBuilder.BuildPartial();
            break;
          }
          case 690: {
            global::CSOrderProcess.Builder subBuilder = global::CSOrderProcess.CreateBuilder();
            if (result.hasCsOrderProcess) {
              subBuilder.MergeFrom(CsOrderProcess);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsOrderProcess = subBuilder.BuildPartial();
            break;
          }
          case 698: {
            global::SCShiftDeliveredBy.Builder subBuilder = global::SCShiftDeliveredBy.CreateBuilder();
            if (result.hasScShiftDeliveredBy) {
              subBuilder.MergeFrom(ScShiftDeliveredBy);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScShiftDeliveredBy = subBuilder.BuildPartial();
            break;
          }
          case 706: {
            global::CSShiftAdd.Builder subBuilder = global::CSShiftAdd.CreateBuilder();
            if (result.hasCsShiftAdd) {
              subBuilder.MergeFrom(CsShiftAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsShiftAdd = subBuilder.BuildPartial();
            break;
          }
          case 714: {
            global::CSShiftFind.Builder subBuilder = global::CSShiftFind.CreateBuilder();
            if (result.hasCsShiftFind) {
              subBuilder.MergeFrom(CsShiftFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsShiftFind = subBuilder.BuildPartial();
            break;
          }
          case 722: {
            global::SCShiftFind.Builder subBuilder = global::SCShiftFind.CreateBuilder();
            if (result.hasScShiftFind) {
              subBuilder.MergeFrom(ScShiftFind);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScShiftFind = subBuilder.BuildPartial();
            break;
          }
          case 730: {
            global::CSReconnect.Builder subBuilder = global::CSReconnect.CreateBuilder();
            if (result.hasCsReconnect) {
              subBuilder.MergeFrom(CsReconnect);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsReconnect = subBuilder.BuildPartial();
            break;
          }
          case 738: {
            global::SCReconnect.Builder subBuilder = global::SCReconnect.CreateBuilder();
            if (result.hasScReconnect) {
              subBuilder.MergeFrom(ScReconnect);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScReconnect = subBuilder.BuildPartial();
            break;
          }
          case 1602: {
            global::CSClientOpen.Builder subBuilder = global::CSClientOpen.CreateBuilder();
            if (result.hasCsClientOpen) {
              subBuilder.MergeFrom(CsClientOpen);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsClientOpen = subBuilder.BuildPartial();
            break;
          }
          case 1610: {
            global::CSClientClose.Builder subBuilder = global::CSClientClose.CreateBuilder();
            if (result.hasCsClientClose) {
              subBuilder.MergeFrom(CsClientClose);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsClientClose = subBuilder.BuildPartial();
            break;
          }
          case 1618: {
            global::CSLogon.Builder subBuilder = global::CSLogon.CreateBuilder();
            if (result.hasCsLogon) {
              subBuilder.MergeFrom(CsLogon);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsLogon = subBuilder.BuildPartial();
            break;
          }
          case 1626: {
            global::SCLogon.Builder subBuilder = global::SCLogon.CreateBuilder();
            if (result.hasScLogon) {
              subBuilder.MergeFrom(ScLogon);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScLogon = subBuilder.BuildPartial();
            break;
          }
          case 1634: {
            global::CSLogoff.Builder subBuilder = global::CSLogoff.CreateBuilder();
            if (result.hasCsLogoff) {
              subBuilder.MergeFrom(CsLogoff);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsLogoff = subBuilder.BuildPartial();
            break;
          }
          case 1642: {
            global::SCLogoff.Builder subBuilder = global::SCLogoff.CreateBuilder();
            if (result.hasScLogoff) {
              subBuilder.MergeFrom(ScLogoff);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScLogoff = subBuilder.BuildPartial();
            break;
          }
          case 1650: {
            global::CSHungup.Builder subBuilder = global::CSHungup.CreateBuilder();
            if (result.hasCsHungup) {
              subBuilder.MergeFrom(CsHungup);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsHungup = subBuilder.BuildPartial();
            break;
          }
          case 1658: {
            global::CSPreCharge.Builder subBuilder = global::CSPreCharge.CreateBuilder();
            if (result.hasCsPreCharge) {
              subBuilder.MergeFrom(CsPreCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsPreCharge = subBuilder.BuildPartial();
            break;
          }
          case 1666: {
            global::SCPreCharge.Builder subBuilder = global::SCPreCharge.CreateBuilder();
            if (result.hasScPreCharge) {
              subBuilder.MergeFrom(ScPreCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScPreCharge = subBuilder.BuildPartial();
            break;
          }
          case 1674: {
            global::SCToCharge.Builder subBuilder = global::SCToCharge.CreateBuilder();
            if (result.hasScToCharge) {
              subBuilder.MergeFrom(ScToCharge);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScToCharge = subBuilder.BuildPartial();
            break;
          }
          case 1690: {
            global::CSCartAdd.Builder subBuilder = global::CSCartAdd.CreateBuilder();
            if (result.hasCsCartAdd) {
              subBuilder.MergeFrom(CsCartAdd);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsCartAdd = subBuilder.BuildPartial();
            break;
          }
          case 1698: {
            global::CSCartDel.Builder subBuilder = global::CSCartDel.CreateBuilder();
            if (result.hasCsCartDel) {
              subBuilder.MergeFrom(CsCartDel);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsCartDel = subBuilder.BuildPartial();
            break;
          }
          case 1706: {
            global::CSPreBuy.Builder subBuilder = global::CSPreBuy.CreateBuilder();
            if (result.hasCsPreBuy) {
              subBuilder.MergeFrom(CsPreBuy);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsPreBuy = subBuilder.BuildPartial();
            break;
          }
          case 1714: {
            global::SCPreBuy.Builder subBuilder = global::SCPreBuy.CreateBuilder();
            if (result.hasScPreBuy) {
              subBuilder.MergeFrom(ScPreBuy);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScPreBuy = subBuilder.BuildPartial();
            break;
          }
          case 1722: {
            global::SCToBuy.Builder subBuilder = global::SCToBuy.CreateBuilder();
            if (result.hasScToBuy) {
              subBuilder.MergeFrom(ScToBuy);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScToBuy = subBuilder.BuildPartial();
            break;
          }
          case 1730: {
            global::SCSysMessage.Builder subBuilder = global::SCSysMessage.CreateBuilder();
            if (result.hasScSysMessage) {
              subBuilder.MergeFrom(ScSysMessage);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScSysMessage = subBuilder.BuildPartial();
            break;
          }
          case 1746: {
            global::CSEvaluate.Builder subBuilder = global::CSEvaluate.CreateBuilder();
            if (result.hasCsEvaluate) {
              subBuilder.MergeFrom(CsEvaluate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsEvaluate = subBuilder.BuildPartial();
            break;
          }
          case 1754: {
            global::SCEvaluate.Builder subBuilder = global::SCEvaluate.CreateBuilder();
            if (result.hasScEvaluate) {
              subBuilder.MergeFrom(ScEvaluate);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScEvaluate = subBuilder.BuildPartial();
            break;
          }
          case 1762: {
            global::CSVerifyCode.Builder subBuilder = global::CSVerifyCode.CreateBuilder();
            if (result.hasCsVerifyCode) {
              subBuilder.MergeFrom(CsVerifyCode);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsVerifyCode = subBuilder.BuildPartial();
            break;
          }
          case 1770: {
            global::SCVerifyCode.Builder subBuilder = global::SCVerifyCode.CreateBuilder();
            if (result.hasScVerifyCode) {
              subBuilder.MergeFrom(ScVerifyCode);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScVerifyCode = subBuilder.BuildPartial();
            break;
          }
          case 1778: {
            global::CSBindMobile.Builder subBuilder = global::CSBindMobile.CreateBuilder();
            if (result.hasCsBindMobile) {
              subBuilder.MergeFrom(CsBindMobile);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CsBindMobile = subBuilder.BuildPartial();
            break;
          }
          case 1786: {
            global::SCBindMobile.Builder subBuilder = global::SCBindMobile.CreateBuilder();
            if (result.hasScBindMobile) {
              subBuilder.MergeFrom(ScBindMobile);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ScBindMobile = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMessageType {
      get { return result.hasMessageType; }
    }
    public int MessageType {
      get { return result.MessageType; }
      set { SetMessageType(value); }
    }
    public Builder SetMessageType(int value) {
      PrepareBuilder();
      result.hasMessageType = true;
      result.messageType_ = value;
      return this;
    }
    public Builder ClearMessageType() {
      PrepareBuilder();
      result.hasMessageType = false;
      result.messageType_ = 0;
      return this;
    }
    
    public bool HasErrorTip {
     get { return result.hasErrorTip; }
    }
    public global::StructErrorTip ErrorTip {
      get { return result.ErrorTip; }
      set { SetErrorTip(value); }
    }
    public Builder SetErrorTip(global::StructErrorTip value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasErrorTip = true;
      result.errorTip_ = value;
      return this;
    }
    public Builder SetErrorTip(global::StructErrorTip.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasErrorTip = true;
      result.errorTip_ = builderForValue.Build();
      return this;
    }
    public Builder MergeErrorTip(global::StructErrorTip value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasErrorTip &&
          result.errorTip_ != global::StructErrorTip.DefaultInstance) {
          result.errorTip_ = global::StructErrorTip.CreateBuilder(result.errorTip_).MergeFrom(value).BuildPartial();
      } else {
        result.errorTip_ = value;
      }
      result.hasErrorTip = true;
      return this;
    }
    public Builder ClearErrorTip() {
      PrepareBuilder();
      result.hasErrorTip = false;
      result.errorTip_ = null;
      return this;
    }
    
    public bool HasClAskServer {
     get { return result.hasClAskServer; }
    }
    public global::CLAskServer ClAskServer {
      get { return result.ClAskServer; }
      set { SetClAskServer(value); }
    }
    public Builder SetClAskServer(global::CLAskServer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasClAskServer = true;
      result.clAskServer_ = value;
      return this;
    }
    public Builder SetClAskServer(global::CLAskServer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasClAskServer = true;
      result.clAskServer_ = builderForValue.Build();
      return this;
    }
    public Builder MergeClAskServer(global::CLAskServer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasClAskServer &&
          result.clAskServer_ != global::CLAskServer.DefaultInstance) {
          result.clAskServer_ = global::CLAskServer.CreateBuilder(result.clAskServer_).MergeFrom(value).BuildPartial();
      } else {
        result.clAskServer_ = value;
      }
      result.hasClAskServer = true;
      return this;
    }
    public Builder ClearClAskServer() {
      PrepareBuilder();
      result.hasClAskServer = false;
      result.clAskServer_ = null;
      return this;
    }
    
    public bool HasLcRetServer {
     get { return result.hasLcRetServer; }
    }
    public global::LCRetServer LcRetServer {
      get { return result.LcRetServer; }
      set { SetLcRetServer(value); }
    }
    public Builder SetLcRetServer(global::LCRetServer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLcRetServer = true;
      result.lcRetServer_ = value;
      return this;
    }
    public Builder SetLcRetServer(global::LCRetServer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLcRetServer = true;
      result.lcRetServer_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLcRetServer(global::LCRetServer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLcRetServer &&
          result.lcRetServer_ != global::LCRetServer.DefaultInstance) {
          result.lcRetServer_ = global::LCRetServer.CreateBuilder(result.lcRetServer_).MergeFrom(value).BuildPartial();
      } else {
        result.lcRetServer_ = value;
      }
      result.hasLcRetServer = true;
      return this;
    }
    public Builder ClearLcRetServer() {
      PrepareBuilder();
      result.hasLcRetServer = false;
      result.lcRetServer_ = null;
      return this;
    }
    
    public bool HasCsAuthen {
     get { return result.hasCsAuthen; }
    }
    public global::CSAuthen CsAuthen {
      get { return result.CsAuthen; }
      set { SetCsAuthen(value); }
    }
    public Builder SetCsAuthen(global::CSAuthen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAuthen = true;
      result.csAuthen_ = value;
      return this;
    }
    public Builder SetCsAuthen(global::CSAuthen.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAuthen = true;
      result.csAuthen_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAuthen(global::CSAuthen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAuthen &&
          result.csAuthen_ != global::CSAuthen.DefaultInstance) {
          result.csAuthen_ = global::CSAuthen.CreateBuilder(result.csAuthen_).MergeFrom(value).BuildPartial();
      } else {
        result.csAuthen_ = value;
      }
      result.hasCsAuthen = true;
      return this;
    }
    public Builder ClearCsAuthen() {
      PrepareBuilder();
      result.hasCsAuthen = false;
      result.csAuthen_ = null;
      return this;
    }
    
    public bool HasScAuthen {
     get { return result.hasScAuthen; }
    }
    public global::SCAuthen ScAuthen {
      get { return result.ScAuthen; }
      set { SetScAuthen(value); }
    }
    public Builder SetScAuthen(global::SCAuthen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScAuthen = true;
      result.scAuthen_ = value;
      return this;
    }
    public Builder SetScAuthen(global::SCAuthen.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScAuthen = true;
      result.scAuthen_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScAuthen(global::SCAuthen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScAuthen &&
          result.scAuthen_ != global::SCAuthen.DefaultInstance) {
          result.scAuthen_ = global::SCAuthen.CreateBuilder(result.scAuthen_).MergeFrom(value).BuildPartial();
      } else {
        result.scAuthen_ = value;
      }
      result.hasScAuthen = true;
      return this;
    }
    public Builder ClearScAuthen() {
      PrepareBuilder();
      result.hasScAuthen = false;
      result.scAuthen_ = null;
      return this;
    }
    
    public bool HasCsLogin {
     get { return result.hasCsLogin; }
    }
    public global::CSLogin CsLogin {
      get { return result.CsLogin; }
      set { SetCsLogin(value); }
    }
    public Builder SetCsLogin(global::CSLogin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsLogin = true;
      result.csLogin_ = value;
      return this;
    }
    public Builder SetCsLogin(global::CSLogin.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsLogin = true;
      result.csLogin_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsLogin(global::CSLogin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsLogin &&
          result.csLogin_ != global::CSLogin.DefaultInstance) {
          result.csLogin_ = global::CSLogin.CreateBuilder(result.csLogin_).MergeFrom(value).BuildPartial();
      } else {
        result.csLogin_ = value;
      }
      result.hasCsLogin = true;
      return this;
    }
    public Builder ClearCsLogin() {
      PrepareBuilder();
      result.hasCsLogin = false;
      result.csLogin_ = null;
      return this;
    }
    
    public bool HasScLogin {
     get { return result.hasScLogin; }
    }
    public global::SCLogin ScLogin {
      get { return result.ScLogin; }
      set { SetScLogin(value); }
    }
    public Builder SetScLogin(global::SCLogin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScLogin = true;
      result.scLogin_ = value;
      return this;
    }
    public Builder SetScLogin(global::SCLogin.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScLogin = true;
      result.scLogin_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScLogin(global::SCLogin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScLogin &&
          result.scLogin_ != global::SCLogin.DefaultInstance) {
          result.scLogin_ = global::SCLogin.CreateBuilder(result.scLogin_).MergeFrom(value).BuildPartial();
      } else {
        result.scLogin_ = value;
      }
      result.hasScLogin = true;
      return this;
    }
    public Builder ClearScLogin() {
      PrepareBuilder();
      result.hasScLogin = false;
      result.scLogin_ = null;
      return this;
    }
    
    public bool HasScCallList {
     get { return result.hasScCallList; }
    }
    public global::SCCallList ScCallList {
      get { return result.ScCallList; }
      set { SetScCallList(value); }
    }
    public Builder SetScCallList(global::SCCallList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScCallList = true;
      result.scCallList_ = value;
      return this;
    }
    public Builder SetScCallList(global::SCCallList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScCallList = true;
      result.scCallList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScCallList(global::SCCallList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScCallList &&
          result.scCallList_ != global::SCCallList.DefaultInstance) {
          result.scCallList_ = global::SCCallList.CreateBuilder(result.scCallList_).MergeFrom(value).BuildPartial();
      } else {
        result.scCallList_ = value;
      }
      result.hasScCallList = true;
      return this;
    }
    public Builder ClearScCallList() {
      PrepareBuilder();
      result.hasScCallList = false;
      result.scCallList_ = null;
      return this;
    }
    
    public bool HasCsCallProcess {
     get { return result.hasCsCallProcess; }
    }
    public global::CSCallProcess CsCallProcess {
      get { return result.CsCallProcess; }
      set { SetCsCallProcess(value); }
    }
    public Builder SetCsCallProcess(global::CSCallProcess value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsCallProcess = true;
      result.csCallProcess_ = value;
      return this;
    }
    public Builder SetCsCallProcess(global::CSCallProcess.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsCallProcess = true;
      result.csCallProcess_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsCallProcess(global::CSCallProcess value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsCallProcess &&
          result.csCallProcess_ != global::CSCallProcess.DefaultInstance) {
          result.csCallProcess_ = global::CSCallProcess.CreateBuilder(result.csCallProcess_).MergeFrom(value).BuildPartial();
      } else {
        result.csCallProcess_ = value;
      }
      result.hasCsCallProcess = true;
      return this;
    }
    public Builder ClearCsCallProcess() {
      PrepareBuilder();
      result.hasCsCallProcess = false;
      result.csCallProcess_ = null;
      return this;
    }
    
    public bool HasScAccountInfo {
     get { return result.hasScAccountInfo; }
    }
    public global::SCAccountInfo ScAccountInfo {
      get { return result.ScAccountInfo; }
      set { SetScAccountInfo(value); }
    }
    public Builder SetScAccountInfo(global::SCAccountInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScAccountInfo = true;
      result.scAccountInfo_ = value;
      return this;
    }
    public Builder SetScAccountInfo(global::SCAccountInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScAccountInfo = true;
      result.scAccountInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScAccountInfo(global::SCAccountInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScAccountInfo &&
          result.scAccountInfo_ != global::SCAccountInfo.DefaultInstance) {
          result.scAccountInfo_ = global::SCAccountInfo.CreateBuilder(result.scAccountInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.scAccountInfo_ = value;
      }
      result.hasScAccountInfo = true;
      return this;
    }
    public Builder ClearScAccountInfo() {
      PrepareBuilder();
      result.hasScAccountInfo = false;
      result.scAccountInfo_ = null;
      return this;
    }
    
    public bool HasScRealtimeInfo {
     get { return result.hasScRealtimeInfo; }
    }
    public global::SCRealtimeInfo ScRealtimeInfo {
      get { return result.ScRealtimeInfo; }
      set { SetScRealtimeInfo(value); }
    }
    public Builder SetScRealtimeInfo(global::SCRealtimeInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScRealtimeInfo = true;
      result.scRealtimeInfo_ = value;
      return this;
    }
    public Builder SetScRealtimeInfo(global::SCRealtimeInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScRealtimeInfo = true;
      result.scRealtimeInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScRealtimeInfo(global::SCRealtimeInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScRealtimeInfo &&
          result.scRealtimeInfo_ != global::SCRealtimeInfo.DefaultInstance) {
          result.scRealtimeInfo_ = global::SCRealtimeInfo.CreateBuilder(result.scRealtimeInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.scRealtimeInfo_ = value;
      }
      result.hasScRealtimeInfo = true;
      return this;
    }
    public Builder ClearScRealtimeInfo() {
      PrepareBuilder();
      result.hasScRealtimeInfo = false;
      result.scRealtimeInfo_ = null;
      return this;
    }
    
    public bool HasCsCommand {
     get { return result.hasCsCommand; }
    }
    public global::CSCommand CsCommand {
      get { return result.CsCommand; }
      set { SetCsCommand(value); }
    }
    public Builder SetCsCommand(global::CSCommand value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsCommand = true;
      result.csCommand_ = value;
      return this;
    }
    public Builder SetCsCommand(global::CSCommand.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsCommand = true;
      result.csCommand_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsCommand(global::CSCommand value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsCommand &&
          result.csCommand_ != global::CSCommand.DefaultInstance) {
          result.csCommand_ = global::CSCommand.CreateBuilder(result.csCommand_).MergeFrom(value).BuildPartial();
      } else {
        result.csCommand_ = value;
      }
      result.hasCsCommand = true;
      return this;
    }
    public Builder ClearCsCommand() {
      PrepareBuilder();
      result.hasCsCommand = false;
      result.csCommand_ = null;
      return this;
    }
    
    public bool HasCsLog {
     get { return result.hasCsLog; }
    }
    public global::CSLog CsLog {
      get { return result.CsLog; }
      set { SetCsLog(value); }
    }
    public Builder SetCsLog(global::CSLog value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsLog = true;
      result.csLog_ = value;
      return this;
    }
    public Builder SetCsLog(global::CSLog.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsLog = true;
      result.csLog_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsLog(global::CSLog value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsLog &&
          result.csLog_ != global::CSLog.DefaultInstance) {
          result.csLog_ = global::CSLog.CreateBuilder(result.csLog_).MergeFrom(value).BuildPartial();
      } else {
        result.csLog_ = value;
      }
      result.hasCsLog = true;
      return this;
    }
    public Builder ClearCsLog() {
      PrepareBuilder();
      result.hasCsLog = false;
      result.csLog_ = null;
      return this;
    }
    
    public bool HasScLog {
     get { return result.hasScLog; }
    }
    public global::SCLog ScLog {
      get { return result.ScLog; }
      set { SetScLog(value); }
    }
    public Builder SetScLog(global::SCLog value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScLog = true;
      result.scLog_ = value;
      return this;
    }
    public Builder SetScLog(global::SCLog.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScLog = true;
      result.scLog_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScLog(global::SCLog value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScLog &&
          result.scLog_ != global::SCLog.DefaultInstance) {
          result.scLog_ = global::SCLog.CreateBuilder(result.scLog_).MergeFrom(value).BuildPartial();
      } else {
        result.scLog_ = value;
      }
      result.hasScLog = true;
      return this;
    }
    public Builder ClearScLog() {
      PrepareBuilder();
      result.hasScLog = false;
      result.scLog_ = null;
      return this;
    }
    
    public bool HasScRoleList {
     get { return result.hasScRoleList; }
    }
    public global::SCRoleList ScRoleList {
      get { return result.ScRoleList; }
      set { SetScRoleList(value); }
    }
    public Builder SetScRoleList(global::SCRoleList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScRoleList = true;
      result.scRoleList_ = value;
      return this;
    }
    public Builder SetScRoleList(global::SCRoleList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScRoleList = true;
      result.scRoleList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScRoleList(global::SCRoleList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScRoleList &&
          result.scRoleList_ != global::SCRoleList.DefaultInstance) {
          result.scRoleList_ = global::SCRoleList.CreateBuilder(result.scRoleList_).MergeFrom(value).BuildPartial();
      } else {
        result.scRoleList_ = value;
      }
      result.hasScRoleList = true;
      return this;
    }
    public Builder ClearScRoleList() {
      PrepareBuilder();
      result.hasScRoleList = false;
      result.scRoleList_ = null;
      return this;
    }
    
    public bool HasCsRoleAdd {
     get { return result.hasCsRoleAdd; }
    }
    public global::CSRoleAdd CsRoleAdd {
      get { return result.CsRoleAdd; }
      set { SetCsRoleAdd(value); }
    }
    public Builder SetCsRoleAdd(global::CSRoleAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsRoleAdd = true;
      result.csRoleAdd_ = value;
      return this;
    }
    public Builder SetCsRoleAdd(global::CSRoleAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsRoleAdd = true;
      result.csRoleAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsRoleAdd(global::CSRoleAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsRoleAdd &&
          result.csRoleAdd_ != global::CSRoleAdd.DefaultInstance) {
          result.csRoleAdd_ = global::CSRoleAdd.CreateBuilder(result.csRoleAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csRoleAdd_ = value;
      }
      result.hasCsRoleAdd = true;
      return this;
    }
    public Builder ClearCsRoleAdd() {
      PrepareBuilder();
      result.hasCsRoleAdd = false;
      result.csRoleAdd_ = null;
      return this;
    }
    
    public bool HasScRoleAdd {
     get { return result.hasScRoleAdd; }
    }
    public global::SCRoleAdd ScRoleAdd {
      get { return result.ScRoleAdd; }
      set { SetScRoleAdd(value); }
    }
    public Builder SetScRoleAdd(global::SCRoleAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScRoleAdd = true;
      result.scRoleAdd_ = value;
      return this;
    }
    public Builder SetScRoleAdd(global::SCRoleAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScRoleAdd = true;
      result.scRoleAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScRoleAdd(global::SCRoleAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScRoleAdd &&
          result.scRoleAdd_ != global::SCRoleAdd.DefaultInstance) {
          result.scRoleAdd_ = global::SCRoleAdd.CreateBuilder(result.scRoleAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.scRoleAdd_ = value;
      }
      result.hasScRoleAdd = true;
      return this;
    }
    public Builder ClearScRoleAdd() {
      PrepareBuilder();
      result.hasScRoleAdd = false;
      result.scRoleAdd_ = null;
      return this;
    }
    
    public bool HasCsRoleDel {
     get { return result.hasCsRoleDel; }
    }
    public global::CSRoleDel CsRoleDel {
      get { return result.CsRoleDel; }
      set { SetCsRoleDel(value); }
    }
    public Builder SetCsRoleDel(global::CSRoleDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsRoleDel = true;
      result.csRoleDel_ = value;
      return this;
    }
    public Builder SetCsRoleDel(global::CSRoleDel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsRoleDel = true;
      result.csRoleDel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsRoleDel(global::CSRoleDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsRoleDel &&
          result.csRoleDel_ != global::CSRoleDel.DefaultInstance) {
          result.csRoleDel_ = global::CSRoleDel.CreateBuilder(result.csRoleDel_).MergeFrom(value).BuildPartial();
      } else {
        result.csRoleDel_ = value;
      }
      result.hasCsRoleDel = true;
      return this;
    }
    public Builder ClearCsRoleDel() {
      PrepareBuilder();
      result.hasCsRoleDel = false;
      result.csRoleDel_ = null;
      return this;
    }
    
    public bool HasCsRoleUpdate {
     get { return result.hasCsRoleUpdate; }
    }
    public global::CSRoleUpdate CsRoleUpdate {
      get { return result.CsRoleUpdate; }
      set { SetCsRoleUpdate(value); }
    }
    public Builder SetCsRoleUpdate(global::CSRoleUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsRoleUpdate = true;
      result.csRoleUpdate_ = value;
      return this;
    }
    public Builder SetCsRoleUpdate(global::CSRoleUpdate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsRoleUpdate = true;
      result.csRoleUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsRoleUpdate(global::CSRoleUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsRoleUpdate &&
          result.csRoleUpdate_ != global::CSRoleUpdate.DefaultInstance) {
          result.csRoleUpdate_ = global::CSRoleUpdate.CreateBuilder(result.csRoleUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.csRoleUpdate_ = value;
      }
      result.hasCsRoleUpdate = true;
      return this;
    }
    public Builder ClearCsRoleUpdate() {
      PrepareBuilder();
      result.hasCsRoleUpdate = false;
      result.csRoleUpdate_ = null;
      return this;
    }
    
    public bool HasCsRoleRights {
     get { return result.hasCsRoleRights; }
    }
    public global::CSRoleRights CsRoleRights {
      get { return result.CsRoleRights; }
      set { SetCsRoleRights(value); }
    }
    public Builder SetCsRoleRights(global::CSRoleRights value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsRoleRights = true;
      result.csRoleRights_ = value;
      return this;
    }
    public Builder SetCsRoleRights(global::CSRoleRights.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsRoleRights = true;
      result.csRoleRights_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsRoleRights(global::CSRoleRights value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsRoleRights &&
          result.csRoleRights_ != global::CSRoleRights.DefaultInstance) {
          result.csRoleRights_ = global::CSRoleRights.CreateBuilder(result.csRoleRights_).MergeFrom(value).BuildPartial();
      } else {
        result.csRoleRights_ = value;
      }
      result.hasCsRoleRights = true;
      return this;
    }
    public Builder ClearCsRoleRights() {
      PrepareBuilder();
      result.hasCsRoleRights = false;
      result.csRoleRights_ = null;
      return this;
    }
    
    public bool HasScAccountList {
     get { return result.hasScAccountList; }
    }
    public global::SCAccountList ScAccountList {
      get { return result.ScAccountList; }
      set { SetScAccountList(value); }
    }
    public Builder SetScAccountList(global::SCAccountList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScAccountList = true;
      result.scAccountList_ = value;
      return this;
    }
    public Builder SetScAccountList(global::SCAccountList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScAccountList = true;
      result.scAccountList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScAccountList(global::SCAccountList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScAccountList &&
          result.scAccountList_ != global::SCAccountList.DefaultInstance) {
          result.scAccountList_ = global::SCAccountList.CreateBuilder(result.scAccountList_).MergeFrom(value).BuildPartial();
      } else {
        result.scAccountList_ = value;
      }
      result.hasScAccountList = true;
      return this;
    }
    public Builder ClearScAccountList() {
      PrepareBuilder();
      result.hasScAccountList = false;
      result.scAccountList_ = null;
      return this;
    }
    
    public bool HasCsAccountAdd {
     get { return result.hasCsAccountAdd; }
    }
    public global::CSAccountAdd CsAccountAdd {
      get { return result.CsAccountAdd; }
      set { SetCsAccountAdd(value); }
    }
    public Builder SetCsAccountAdd(global::CSAccountAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAccountAdd = true;
      result.csAccountAdd_ = value;
      return this;
    }
    public Builder SetCsAccountAdd(global::CSAccountAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAccountAdd = true;
      result.csAccountAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAccountAdd(global::CSAccountAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAccountAdd &&
          result.csAccountAdd_ != global::CSAccountAdd.DefaultInstance) {
          result.csAccountAdd_ = global::CSAccountAdd.CreateBuilder(result.csAccountAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csAccountAdd_ = value;
      }
      result.hasCsAccountAdd = true;
      return this;
    }
    public Builder ClearCsAccountAdd() {
      PrepareBuilder();
      result.hasCsAccountAdd = false;
      result.csAccountAdd_ = null;
      return this;
    }
    
    public bool HasCsAccountDel {
     get { return result.hasCsAccountDel; }
    }
    public global::CSAccountDel CsAccountDel {
      get { return result.CsAccountDel; }
      set { SetCsAccountDel(value); }
    }
    public Builder SetCsAccountDel(global::CSAccountDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAccountDel = true;
      result.csAccountDel_ = value;
      return this;
    }
    public Builder SetCsAccountDel(global::CSAccountDel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAccountDel = true;
      result.csAccountDel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAccountDel(global::CSAccountDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAccountDel &&
          result.csAccountDel_ != global::CSAccountDel.DefaultInstance) {
          result.csAccountDel_ = global::CSAccountDel.CreateBuilder(result.csAccountDel_).MergeFrom(value).BuildPartial();
      } else {
        result.csAccountDel_ = value;
      }
      result.hasCsAccountDel = true;
      return this;
    }
    public Builder ClearCsAccountDel() {
      PrepareBuilder();
      result.hasCsAccountDel = false;
      result.csAccountDel_ = null;
      return this;
    }
    
    public bool HasCsAccountUpdate {
     get { return result.hasCsAccountUpdate; }
    }
    public global::CSAccountUpdate CsAccountUpdate {
      get { return result.CsAccountUpdate; }
      set { SetCsAccountUpdate(value); }
    }
    public Builder SetCsAccountUpdate(global::CSAccountUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAccountUpdate = true;
      result.csAccountUpdate_ = value;
      return this;
    }
    public Builder SetCsAccountUpdate(global::CSAccountUpdate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAccountUpdate = true;
      result.csAccountUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAccountUpdate(global::CSAccountUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAccountUpdate &&
          result.csAccountUpdate_ != global::CSAccountUpdate.DefaultInstance) {
          result.csAccountUpdate_ = global::CSAccountUpdate.CreateBuilder(result.csAccountUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.csAccountUpdate_ = value;
      }
      result.hasCsAccountUpdate = true;
      return this;
    }
    public Builder ClearCsAccountUpdate() {
      PrepareBuilder();
      result.hasCsAccountUpdate = false;
      result.csAccountUpdate_ = null;
      return this;
    }
    
    public bool HasCsAccountSnsSet {
     get { return result.hasCsAccountSnsSet; }
    }
    public global::CSAccountSnsSet CsAccountSnsSet {
      get { return result.CsAccountSnsSet; }
      set { SetCsAccountSnsSet(value); }
    }
    public Builder SetCsAccountSnsSet(global::CSAccountSnsSet value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAccountSnsSet = true;
      result.csAccountSnsSet_ = value;
      return this;
    }
    public Builder SetCsAccountSnsSet(global::CSAccountSnsSet.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAccountSnsSet = true;
      result.csAccountSnsSet_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAccountSnsSet(global::CSAccountSnsSet value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAccountSnsSet &&
          result.csAccountSnsSet_ != global::CSAccountSnsSet.DefaultInstance) {
          result.csAccountSnsSet_ = global::CSAccountSnsSet.CreateBuilder(result.csAccountSnsSet_).MergeFrom(value).BuildPartial();
      } else {
        result.csAccountSnsSet_ = value;
      }
      result.hasCsAccountSnsSet = true;
      return this;
    }
    public Builder ClearCsAccountSnsSet() {
      PrepareBuilder();
      result.hasCsAccountSnsSet = false;
      result.csAccountSnsSet_ = null;
      return this;
    }
    
    public bool HasCsStaffComment {
     get { return result.hasCsStaffComment; }
    }
    public global::CSStaffComment CsStaffComment {
      get { return result.CsStaffComment; }
      set { SetCsStaffComment(value); }
    }
    public Builder SetCsStaffComment(global::CSStaffComment value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsStaffComment = true;
      result.csStaffComment_ = value;
      return this;
    }
    public Builder SetCsStaffComment(global::CSStaffComment.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsStaffComment = true;
      result.csStaffComment_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsStaffComment(global::CSStaffComment value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsStaffComment &&
          result.csStaffComment_ != global::CSStaffComment.DefaultInstance) {
          result.csStaffComment_ = global::CSStaffComment.CreateBuilder(result.csStaffComment_).MergeFrom(value).BuildPartial();
      } else {
        result.csStaffComment_ = value;
      }
      result.hasCsStaffComment = true;
      return this;
    }
    public Builder ClearCsStaffComment() {
      PrepareBuilder();
      result.hasCsStaffComment = false;
      result.csStaffComment_ = null;
      return this;
    }
    
    public bool HasScStaffComment {
     get { return result.hasScStaffComment; }
    }
    public global::SCStaffComment ScStaffComment {
      get { return result.ScStaffComment; }
      set { SetScStaffComment(value); }
    }
    public Builder SetScStaffComment(global::SCStaffComment value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScStaffComment = true;
      result.scStaffComment_ = value;
      return this;
    }
    public Builder SetScStaffComment(global::SCStaffComment.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScStaffComment = true;
      result.scStaffComment_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScStaffComment(global::SCStaffComment value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScStaffComment &&
          result.scStaffComment_ != global::SCStaffComment.DefaultInstance) {
          result.scStaffComment_ = global::SCStaffComment.CreateBuilder(result.scStaffComment_).MergeFrom(value).BuildPartial();
      } else {
        result.scStaffComment_ = value;
      }
      result.hasScStaffComment = true;
      return this;
    }
    public Builder ClearScStaffComment() {
      PrepareBuilder();
      result.hasScStaffComment = false;
      result.scStaffComment_ = null;
      return this;
    }
    
    public bool HasCsStaffPerform {
     get { return result.hasCsStaffPerform; }
    }
    public global::CSStaffPerform CsStaffPerform {
      get { return result.CsStaffPerform; }
      set { SetCsStaffPerform(value); }
    }
    public Builder SetCsStaffPerform(global::CSStaffPerform value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsStaffPerform = true;
      result.csStaffPerform_ = value;
      return this;
    }
    public Builder SetCsStaffPerform(global::CSStaffPerform.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsStaffPerform = true;
      result.csStaffPerform_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsStaffPerform(global::CSStaffPerform value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsStaffPerform &&
          result.csStaffPerform_ != global::CSStaffPerform.DefaultInstance) {
          result.csStaffPerform_ = global::CSStaffPerform.CreateBuilder(result.csStaffPerform_).MergeFrom(value).BuildPartial();
      } else {
        result.csStaffPerform_ = value;
      }
      result.hasCsStaffPerform = true;
      return this;
    }
    public Builder ClearCsStaffPerform() {
      PrepareBuilder();
      result.hasCsStaffPerform = false;
      result.csStaffPerform_ = null;
      return this;
    }
    
    public bool HasScStaffPerform {
     get { return result.hasScStaffPerform; }
    }
    public global::SCStaffPerform ScStaffPerform {
      get { return result.ScStaffPerform; }
      set { SetScStaffPerform(value); }
    }
    public Builder SetScStaffPerform(global::SCStaffPerform value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScStaffPerform = true;
      result.scStaffPerform_ = value;
      return this;
    }
    public Builder SetScStaffPerform(global::SCStaffPerform.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScStaffPerform = true;
      result.scStaffPerform_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScStaffPerform(global::SCStaffPerform value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScStaffPerform &&
          result.scStaffPerform_ != global::SCStaffPerform.DefaultInstance) {
          result.scStaffPerform_ = global::SCStaffPerform.CreateBuilder(result.scStaffPerform_).MergeFrom(value).BuildPartial();
      } else {
        result.scStaffPerform_ = value;
      }
      result.hasScStaffPerform = true;
      return this;
    }
    public Builder ClearScStaffPerform() {
      PrepareBuilder();
      result.hasScStaffPerform = false;
      result.scStaffPerform_ = null;
      return this;
    }
    
    public bool HasCsEarning {
     get { return result.hasCsEarning; }
    }
    public global::CSEarning CsEarning {
      get { return result.CsEarning; }
      set { SetCsEarning(value); }
    }
    public Builder SetCsEarning(global::CSEarning value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEarning = true;
      result.csEarning_ = value;
      return this;
    }
    public Builder SetCsEarning(global::CSEarning.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEarning = true;
      result.csEarning_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEarning(global::CSEarning value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEarning &&
          result.csEarning_ != global::CSEarning.DefaultInstance) {
          result.csEarning_ = global::CSEarning.CreateBuilder(result.csEarning_).MergeFrom(value).BuildPartial();
      } else {
        result.csEarning_ = value;
      }
      result.hasCsEarning = true;
      return this;
    }
    public Builder ClearCsEarning() {
      PrepareBuilder();
      result.hasCsEarning = false;
      result.csEarning_ = null;
      return this;
    }
    
    public bool HasScEarning {
     get { return result.hasScEarning; }
    }
    public global::SCEarning ScEarning {
      get { return result.ScEarning; }
      set { SetScEarning(value); }
    }
    public Builder SetScEarning(global::SCEarning value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEarning = true;
      result.scEarning_ = value;
      return this;
    }
    public Builder SetScEarning(global::SCEarning.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEarning = true;
      result.scEarning_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEarning(global::SCEarning value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEarning &&
          result.scEarning_ != global::SCEarning.DefaultInstance) {
          result.scEarning_ = global::SCEarning.CreateBuilder(result.scEarning_).MergeFrom(value).BuildPartial();
      } else {
        result.scEarning_ = value;
      }
      result.hasScEarning = true;
      return this;
    }
    public Builder ClearScEarning() {
      PrepareBuilder();
      result.hasScEarning = false;
      result.scEarning_ = null;
      return this;
    }
    
    public bool HasScComputerList {
     get { return result.hasScComputerList; }
    }
    public global::SCComputerList ScComputerList {
      get { return result.ScComputerList; }
      set { SetScComputerList(value); }
    }
    public Builder SetScComputerList(global::SCComputerList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScComputerList = true;
      result.scComputerList_ = value;
      return this;
    }
    public Builder SetScComputerList(global::SCComputerList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScComputerList = true;
      result.scComputerList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScComputerList(global::SCComputerList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScComputerList &&
          result.scComputerList_ != global::SCComputerList.DefaultInstance) {
          result.scComputerList_ = global::SCComputerList.CreateBuilder(result.scComputerList_).MergeFrom(value).BuildPartial();
      } else {
        result.scComputerList_ = value;
      }
      result.hasScComputerList = true;
      return this;
    }
    public Builder ClearScComputerList() {
      PrepareBuilder();
      result.hasScComputerList = false;
      result.scComputerList_ = null;
      return this;
    }
    
    public bool HasCsComputerAdd {
     get { return result.hasCsComputerAdd; }
    }
    public global::CSComputerAdd CsComputerAdd {
      get { return result.CsComputerAdd; }
      set { SetCsComputerAdd(value); }
    }
    public Builder SetCsComputerAdd(global::CSComputerAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsComputerAdd = true;
      result.csComputerAdd_ = value;
      return this;
    }
    public Builder SetCsComputerAdd(global::CSComputerAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsComputerAdd = true;
      result.csComputerAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsComputerAdd(global::CSComputerAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsComputerAdd &&
          result.csComputerAdd_ != global::CSComputerAdd.DefaultInstance) {
          result.csComputerAdd_ = global::CSComputerAdd.CreateBuilder(result.csComputerAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csComputerAdd_ = value;
      }
      result.hasCsComputerAdd = true;
      return this;
    }
    public Builder ClearCsComputerAdd() {
      PrepareBuilder();
      result.hasCsComputerAdd = false;
      result.csComputerAdd_ = null;
      return this;
    }
    
    public bool HasCsComputerDel {
     get { return result.hasCsComputerDel; }
    }
    public global::CSComputerDel CsComputerDel {
      get { return result.CsComputerDel; }
      set { SetCsComputerDel(value); }
    }
    public Builder SetCsComputerDel(global::CSComputerDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsComputerDel = true;
      result.csComputerDel_ = value;
      return this;
    }
    public Builder SetCsComputerDel(global::CSComputerDel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsComputerDel = true;
      result.csComputerDel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsComputerDel(global::CSComputerDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsComputerDel &&
          result.csComputerDel_ != global::CSComputerDel.DefaultInstance) {
          result.csComputerDel_ = global::CSComputerDel.CreateBuilder(result.csComputerDel_).MergeFrom(value).BuildPartial();
      } else {
        result.csComputerDel_ = value;
      }
      result.hasCsComputerDel = true;
      return this;
    }
    public Builder ClearCsComputerDel() {
      PrepareBuilder();
      result.hasCsComputerDel = false;
      result.csComputerDel_ = null;
      return this;
    }
    
    public bool HasCsComputerUpdate {
     get { return result.hasCsComputerUpdate; }
    }
    public global::CSComputerUpdate CsComputerUpdate {
      get { return result.CsComputerUpdate; }
      set { SetCsComputerUpdate(value); }
    }
    public Builder SetCsComputerUpdate(global::CSComputerUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsComputerUpdate = true;
      result.csComputerUpdate_ = value;
      return this;
    }
    public Builder SetCsComputerUpdate(global::CSComputerUpdate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsComputerUpdate = true;
      result.csComputerUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsComputerUpdate(global::CSComputerUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsComputerUpdate &&
          result.csComputerUpdate_ != global::CSComputerUpdate.DefaultInstance) {
          result.csComputerUpdate_ = global::CSComputerUpdate.CreateBuilder(result.csComputerUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.csComputerUpdate_ = value;
      }
      result.hasCsComputerUpdate = true;
      return this;
    }
    public Builder ClearCsComputerUpdate() {
      PrepareBuilder();
      result.hasCsComputerUpdate = false;
      result.csComputerUpdate_ = null;
      return this;
    }
    
    public bool HasCsComputerFind {
     get { return result.hasCsComputerFind; }
    }
    public global::CSComputerFind CsComputerFind {
      get { return result.CsComputerFind; }
      set { SetCsComputerFind(value); }
    }
    public Builder SetCsComputerFind(global::CSComputerFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsComputerFind = true;
      result.csComputerFind_ = value;
      return this;
    }
    public Builder SetCsComputerFind(global::CSComputerFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsComputerFind = true;
      result.csComputerFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsComputerFind(global::CSComputerFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsComputerFind &&
          result.csComputerFind_ != global::CSComputerFind.DefaultInstance) {
          result.csComputerFind_ = global::CSComputerFind.CreateBuilder(result.csComputerFind_).MergeFrom(value).BuildPartial();
      } else {
        result.csComputerFind_ = value;
      }
      result.hasCsComputerFind = true;
      return this;
    }
    public Builder ClearCsComputerFind() {
      PrepareBuilder();
      result.hasCsComputerFind = false;
      result.csComputerFind_ = null;
      return this;
    }
    
    public bool HasScComputerFind {
     get { return result.hasScComputerFind; }
    }
    public global::SCComputerFind ScComputerFind {
      get { return result.ScComputerFind; }
      set { SetScComputerFind(value); }
    }
    public Builder SetScComputerFind(global::SCComputerFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScComputerFind = true;
      result.scComputerFind_ = value;
      return this;
    }
    public Builder SetScComputerFind(global::SCComputerFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScComputerFind = true;
      result.scComputerFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScComputerFind(global::SCComputerFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScComputerFind &&
          result.scComputerFind_ != global::SCComputerFind.DefaultInstance) {
          result.scComputerFind_ = global::SCComputerFind.CreateBuilder(result.scComputerFind_).MergeFrom(value).BuildPartial();
      } else {
        result.scComputerFind_ = value;
      }
      result.hasScComputerFind = true;
      return this;
    }
    public Builder ClearScComputerFind() {
      PrepareBuilder();
      result.hasScComputerFind = false;
      result.scComputerFind_ = null;
      return this;
    }
    
    public bool HasCsMemberList {
     get { return result.hasCsMemberList; }
    }
    public global::CSMemberList CsMemberList {
      get { return result.CsMemberList; }
      set { SetCsMemberList(value); }
    }
    public Builder SetCsMemberList(global::CSMemberList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberList = true;
      result.csMemberList_ = value;
      return this;
    }
    public Builder SetCsMemberList(global::CSMemberList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberList = true;
      result.csMemberList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberList(global::CSMemberList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberList &&
          result.csMemberList_ != global::CSMemberList.DefaultInstance) {
          result.csMemberList_ = global::CSMemberList.CreateBuilder(result.csMemberList_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberList_ = value;
      }
      result.hasCsMemberList = true;
      return this;
    }
    public Builder ClearCsMemberList() {
      PrepareBuilder();
      result.hasCsMemberList = false;
      result.csMemberList_ = null;
      return this;
    }
    
    public bool HasScMemberList {
     get { return result.hasScMemberList; }
    }
    public global::SCMemberList ScMemberList {
      get { return result.ScMemberList; }
      set { SetScMemberList(value); }
    }
    public Builder SetScMemberList(global::SCMemberList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScMemberList = true;
      result.scMemberList_ = value;
      return this;
    }
    public Builder SetScMemberList(global::SCMemberList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScMemberList = true;
      result.scMemberList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScMemberList(global::SCMemberList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScMemberList &&
          result.scMemberList_ != global::SCMemberList.DefaultInstance) {
          result.scMemberList_ = global::SCMemberList.CreateBuilder(result.scMemberList_).MergeFrom(value).BuildPartial();
      } else {
        result.scMemberList_ = value;
      }
      result.hasScMemberList = true;
      return this;
    }
    public Builder ClearScMemberList() {
      PrepareBuilder();
      result.hasScMemberList = false;
      result.scMemberList_ = null;
      return this;
    }
    
    public bool HasCsMemberAdd {
     get { return result.hasCsMemberAdd; }
    }
    public global::CSMemberAdd CsMemberAdd {
      get { return result.CsMemberAdd; }
      set { SetCsMemberAdd(value); }
    }
    public Builder SetCsMemberAdd(global::CSMemberAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberAdd = true;
      result.csMemberAdd_ = value;
      return this;
    }
    public Builder SetCsMemberAdd(global::CSMemberAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberAdd = true;
      result.csMemberAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberAdd(global::CSMemberAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberAdd &&
          result.csMemberAdd_ != global::CSMemberAdd.DefaultInstance) {
          result.csMemberAdd_ = global::CSMemberAdd.CreateBuilder(result.csMemberAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberAdd_ = value;
      }
      result.hasCsMemberAdd = true;
      return this;
    }
    public Builder ClearCsMemberAdd() {
      PrepareBuilder();
      result.hasCsMemberAdd = false;
      result.csMemberAdd_ = null;
      return this;
    }
    
    public bool HasScMemberAdd {
     get { return result.hasScMemberAdd; }
    }
    public global::SCMemberAdd ScMemberAdd {
      get { return result.ScMemberAdd; }
      set { SetScMemberAdd(value); }
    }
    public Builder SetScMemberAdd(global::SCMemberAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScMemberAdd = true;
      result.scMemberAdd_ = value;
      return this;
    }
    public Builder SetScMemberAdd(global::SCMemberAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScMemberAdd = true;
      result.scMemberAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScMemberAdd(global::SCMemberAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScMemberAdd &&
          result.scMemberAdd_ != global::SCMemberAdd.DefaultInstance) {
          result.scMemberAdd_ = global::SCMemberAdd.CreateBuilder(result.scMemberAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.scMemberAdd_ = value;
      }
      result.hasScMemberAdd = true;
      return this;
    }
    public Builder ClearScMemberAdd() {
      PrepareBuilder();
      result.hasScMemberAdd = false;
      result.scMemberAdd_ = null;
      return this;
    }
    
    public bool HasCsMemberDel {
     get { return result.hasCsMemberDel; }
    }
    public global::CSMemberDel CsMemberDel {
      get { return result.CsMemberDel; }
      set { SetCsMemberDel(value); }
    }
    public Builder SetCsMemberDel(global::CSMemberDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberDel = true;
      result.csMemberDel_ = value;
      return this;
    }
    public Builder SetCsMemberDel(global::CSMemberDel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberDel = true;
      result.csMemberDel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberDel(global::CSMemberDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberDel &&
          result.csMemberDel_ != global::CSMemberDel.DefaultInstance) {
          result.csMemberDel_ = global::CSMemberDel.CreateBuilder(result.csMemberDel_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberDel_ = value;
      }
      result.hasCsMemberDel = true;
      return this;
    }
    public Builder ClearCsMemberDel() {
      PrepareBuilder();
      result.hasCsMemberDel = false;
      result.csMemberDel_ = null;
      return this;
    }
    
    public bool HasCsMemberUpdate {
     get { return result.hasCsMemberUpdate; }
    }
    public global::CSMemberUpdateStatus CsMemberUpdate {
      get { return result.CsMemberUpdate; }
      set { SetCsMemberUpdate(value); }
    }
    public Builder SetCsMemberUpdate(global::CSMemberUpdateStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberUpdate = true;
      result.csMemberUpdate_ = value;
      return this;
    }
    public Builder SetCsMemberUpdate(global::CSMemberUpdateStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberUpdate = true;
      result.csMemberUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberUpdate(global::CSMemberUpdateStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberUpdate &&
          result.csMemberUpdate_ != global::CSMemberUpdateStatus.DefaultInstance) {
          result.csMemberUpdate_ = global::CSMemberUpdateStatus.CreateBuilder(result.csMemberUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberUpdate_ = value;
      }
      result.hasCsMemberUpdate = true;
      return this;
    }
    public Builder ClearCsMemberUpdate() {
      PrepareBuilder();
      result.hasCsMemberUpdate = false;
      result.csMemberUpdate_ = null;
      return this;
    }
    
    public bool HasCsMemberFind {
     get { return result.hasCsMemberFind; }
    }
    public global::CSMemberFind CsMemberFind {
      get { return result.CsMemberFind; }
      set { SetCsMemberFind(value); }
    }
    public Builder SetCsMemberFind(global::CSMemberFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberFind = true;
      result.csMemberFind_ = value;
      return this;
    }
    public Builder SetCsMemberFind(global::CSMemberFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberFind = true;
      result.csMemberFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberFind(global::CSMemberFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberFind &&
          result.csMemberFind_ != global::CSMemberFind.DefaultInstance) {
          result.csMemberFind_ = global::CSMemberFind.CreateBuilder(result.csMemberFind_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberFind_ = value;
      }
      result.hasCsMemberFind = true;
      return this;
    }
    public Builder ClearCsMemberFind() {
      PrepareBuilder();
      result.hasCsMemberFind = false;
      result.csMemberFind_ = null;
      return this;
    }
    
    public bool HasScMemberFind {
     get { return result.hasScMemberFind; }
    }
    public global::SCMemberFind ScMemberFind {
      get { return result.ScMemberFind; }
      set { SetScMemberFind(value); }
    }
    public Builder SetScMemberFind(global::SCMemberFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScMemberFind = true;
      result.scMemberFind_ = value;
      return this;
    }
    public Builder SetScMemberFind(global::SCMemberFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScMemberFind = true;
      result.scMemberFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScMemberFind(global::SCMemberFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScMemberFind &&
          result.scMemberFind_ != global::SCMemberFind.DefaultInstance) {
          result.scMemberFind_ = global::SCMemberFind.CreateBuilder(result.scMemberFind_).MergeFrom(value).BuildPartial();
      } else {
        result.scMemberFind_ = value;
      }
      result.hasScMemberFind = true;
      return this;
    }
    public Builder ClearScMemberFind() {
      PrepareBuilder();
      result.hasScMemberFind = false;
      result.scMemberFind_ = null;
      return this;
    }
    
    public bool HasCsMemberCardInfo {
     get { return result.hasCsMemberCardInfo; }
    }
    public global::CSMemberCardInfo CsMemberCardInfo {
      get { return result.CsMemberCardInfo; }
      set { SetCsMemberCardInfo(value); }
    }
    public Builder SetCsMemberCardInfo(global::CSMemberCardInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberCardInfo = true;
      result.csMemberCardInfo_ = value;
      return this;
    }
    public Builder SetCsMemberCardInfo(global::CSMemberCardInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberCardInfo = true;
      result.csMemberCardInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberCardInfo(global::CSMemberCardInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberCardInfo &&
          result.csMemberCardInfo_ != global::CSMemberCardInfo.DefaultInstance) {
          result.csMemberCardInfo_ = global::CSMemberCardInfo.CreateBuilder(result.csMemberCardInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberCardInfo_ = value;
      }
      result.hasCsMemberCardInfo = true;
      return this;
    }
    public Builder ClearCsMemberCardInfo() {
      PrepareBuilder();
      result.hasCsMemberCardInfo = false;
      result.csMemberCardInfo_ = null;
      return this;
    }
    
    public bool HasScMemberCardInfo {
     get { return result.hasScMemberCardInfo; }
    }
    public global::SCMemberCardInfo ScMemberCardInfo {
      get { return result.ScMemberCardInfo; }
      set { SetScMemberCardInfo(value); }
    }
    public Builder SetScMemberCardInfo(global::SCMemberCardInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScMemberCardInfo = true;
      result.scMemberCardInfo_ = value;
      return this;
    }
    public Builder SetScMemberCardInfo(global::SCMemberCardInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScMemberCardInfo = true;
      result.scMemberCardInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScMemberCardInfo(global::SCMemberCardInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScMemberCardInfo &&
          result.scMemberCardInfo_ != global::SCMemberCardInfo.DefaultInstance) {
          result.scMemberCardInfo_ = global::SCMemberCardInfo.CreateBuilder(result.scMemberCardInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.scMemberCardInfo_ = value;
      }
      result.hasScMemberCardInfo = true;
      return this;
    }
    public Builder ClearScMemberCardInfo() {
      PrepareBuilder();
      result.hasScMemberCardInfo = false;
      result.scMemberCardInfo_ = null;
      return this;
    }
    
    public bool HasCsMemberConsumRecord {
     get { return result.hasCsMemberConsumRecord; }
    }
    public global::CSMemberConsumRecord CsMemberConsumRecord {
      get { return result.CsMemberConsumRecord; }
      set { SetCsMemberConsumRecord(value); }
    }
    public Builder SetCsMemberConsumRecord(global::CSMemberConsumRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberConsumRecord = true;
      result.csMemberConsumRecord_ = value;
      return this;
    }
    public Builder SetCsMemberConsumRecord(global::CSMemberConsumRecord.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberConsumRecord = true;
      result.csMemberConsumRecord_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberConsumRecord(global::CSMemberConsumRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberConsumRecord &&
          result.csMemberConsumRecord_ != global::CSMemberConsumRecord.DefaultInstance) {
          result.csMemberConsumRecord_ = global::CSMemberConsumRecord.CreateBuilder(result.csMemberConsumRecord_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberConsumRecord_ = value;
      }
      result.hasCsMemberConsumRecord = true;
      return this;
    }
    public Builder ClearCsMemberConsumRecord() {
      PrepareBuilder();
      result.hasCsMemberConsumRecord = false;
      result.csMemberConsumRecord_ = null;
      return this;
    }
    
    public bool HasScMemberConsumRecord {
     get { return result.hasScMemberConsumRecord; }
    }
    public global::SCMemberConsumRecord ScMemberConsumRecord {
      get { return result.ScMemberConsumRecord; }
      set { SetScMemberConsumRecord(value); }
    }
    public Builder SetScMemberConsumRecord(global::SCMemberConsumRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScMemberConsumRecord = true;
      result.scMemberConsumRecord_ = value;
      return this;
    }
    public Builder SetScMemberConsumRecord(global::SCMemberConsumRecord.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScMemberConsumRecord = true;
      result.scMemberConsumRecord_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScMemberConsumRecord(global::SCMemberConsumRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScMemberConsumRecord &&
          result.scMemberConsumRecord_ != global::SCMemberConsumRecord.DefaultInstance) {
          result.scMemberConsumRecord_ = global::SCMemberConsumRecord.CreateBuilder(result.scMemberConsumRecord_).MergeFrom(value).BuildPartial();
      } else {
        result.scMemberConsumRecord_ = value;
      }
      result.hasScMemberConsumRecord = true;
      return this;
    }
    public Builder ClearScMemberConsumRecord() {
      PrepareBuilder();
      result.hasScMemberConsumRecord = false;
      result.scMemberConsumRecord_ = null;
      return this;
    }
    
    public bool HasCsMemberConsumFilter {
     get { return result.hasCsMemberConsumFilter; }
    }
    public global::CSMemberConsumFilter CsMemberConsumFilter {
      get { return result.CsMemberConsumFilter; }
      set { SetCsMemberConsumFilter(value); }
    }
    public Builder SetCsMemberConsumFilter(global::CSMemberConsumFilter value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsMemberConsumFilter = true;
      result.csMemberConsumFilter_ = value;
      return this;
    }
    public Builder SetCsMemberConsumFilter(global::CSMemberConsumFilter.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsMemberConsumFilter = true;
      result.csMemberConsumFilter_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsMemberConsumFilter(global::CSMemberConsumFilter value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsMemberConsumFilter &&
          result.csMemberConsumFilter_ != global::CSMemberConsumFilter.DefaultInstance) {
          result.csMemberConsumFilter_ = global::CSMemberConsumFilter.CreateBuilder(result.csMemberConsumFilter_).MergeFrom(value).BuildPartial();
      } else {
        result.csMemberConsumFilter_ = value;
      }
      result.hasCsMemberConsumFilter = true;
      return this;
    }
    public Builder ClearCsMemberConsumFilter() {
      PrepareBuilder();
      result.hasCsMemberConsumFilter = false;
      result.csMemberConsumFilter_ = null;
      return this;
    }
    
    public bool HasScMemberConsumFilter {
     get { return result.hasScMemberConsumFilter; }
    }
    public global::SCMemberConsumFilter ScMemberConsumFilter {
      get { return result.ScMemberConsumFilter; }
      set { SetScMemberConsumFilter(value); }
    }
    public Builder SetScMemberConsumFilter(global::SCMemberConsumFilter value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScMemberConsumFilter = true;
      result.scMemberConsumFilter_ = value;
      return this;
    }
    public Builder SetScMemberConsumFilter(global::SCMemberConsumFilter.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScMemberConsumFilter = true;
      result.scMemberConsumFilter_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScMemberConsumFilter(global::SCMemberConsumFilter value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScMemberConsumFilter &&
          result.scMemberConsumFilter_ != global::SCMemberConsumFilter.DefaultInstance) {
          result.scMemberConsumFilter_ = global::SCMemberConsumFilter.CreateBuilder(result.scMemberConsumFilter_).MergeFrom(value).BuildPartial();
      } else {
        result.scMemberConsumFilter_ = value;
      }
      result.hasScMemberConsumFilter = true;
      return this;
    }
    public Builder ClearScMemberConsumFilter() {
      PrepareBuilder();
      result.hasScMemberConsumFilter = false;
      result.scMemberConsumFilter_ = null;
      return this;
    }
    
    public bool HasScSysBillList {
     get { return result.hasScSysBillList; }
    }
    public global::SCSysBillList ScSysBillList {
      get { return result.ScSysBillList; }
      set { SetScSysBillList(value); }
    }
    public Builder SetScSysBillList(global::SCSysBillList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScSysBillList = true;
      result.scSysBillList_ = value;
      return this;
    }
    public Builder SetScSysBillList(global::SCSysBillList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScSysBillList = true;
      result.scSysBillList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScSysBillList(global::SCSysBillList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScSysBillList &&
          result.scSysBillList_ != global::SCSysBillList.DefaultInstance) {
          result.scSysBillList_ = global::SCSysBillList.CreateBuilder(result.scSysBillList_).MergeFrom(value).BuildPartial();
      } else {
        result.scSysBillList_ = value;
      }
      result.hasScSysBillList = true;
      return this;
    }
    public Builder ClearScSysBillList() {
      PrepareBuilder();
      result.hasScSysBillList = false;
      result.scSysBillList_ = null;
      return this;
    }
    
    public bool HasCsSysBillUpdate {
     get { return result.hasCsSysBillUpdate; }
    }
    public global::CSSysBillUpdate CsSysBillUpdate {
      get { return result.CsSysBillUpdate; }
      set { SetCsSysBillUpdate(value); }
    }
    public Builder SetCsSysBillUpdate(global::CSSysBillUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsSysBillUpdate = true;
      result.csSysBillUpdate_ = value;
      return this;
    }
    public Builder SetCsSysBillUpdate(global::CSSysBillUpdate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsSysBillUpdate = true;
      result.csSysBillUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsSysBillUpdate(global::CSSysBillUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsSysBillUpdate &&
          result.csSysBillUpdate_ != global::CSSysBillUpdate.DefaultInstance) {
          result.csSysBillUpdate_ = global::CSSysBillUpdate.CreateBuilder(result.csSysBillUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.csSysBillUpdate_ = value;
      }
      result.hasCsSysBillUpdate = true;
      return this;
    }
    public Builder ClearCsSysBillUpdate() {
      PrepareBuilder();
      result.hasCsSysBillUpdate = false;
      result.csSysBillUpdate_ = null;
      return this;
    }
    
    public bool HasScSysBillUpdate {
     get { return result.hasScSysBillUpdate; }
    }
    public global::SCSysBillUpdate ScSysBillUpdate {
      get { return result.ScSysBillUpdate; }
      set { SetScSysBillUpdate(value); }
    }
    public Builder SetScSysBillUpdate(global::SCSysBillUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScSysBillUpdate = true;
      result.scSysBillUpdate_ = value;
      return this;
    }
    public Builder SetScSysBillUpdate(global::SCSysBillUpdate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScSysBillUpdate = true;
      result.scSysBillUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScSysBillUpdate(global::SCSysBillUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScSysBillUpdate &&
          result.scSysBillUpdate_ != global::SCSysBillUpdate.DefaultInstance) {
          result.scSysBillUpdate_ = global::SCSysBillUpdate.CreateBuilder(result.scSysBillUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.scSysBillUpdate_ = value;
      }
      result.hasScSysBillUpdate = true;
      return this;
    }
    public Builder ClearScSysBillUpdate() {
      PrepareBuilder();
      result.hasScSysBillUpdate = false;
      result.scSysBillUpdate_ = null;
      return this;
    }
    
    public bool HasCsSysInfo {
     get { return result.hasCsSysInfo; }
    }
    public global::CSSysInto CsSysInfo {
      get { return result.CsSysInfo; }
      set { SetCsSysInfo(value); }
    }
    public Builder SetCsSysInfo(global::CSSysInto value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsSysInfo = true;
      result.csSysInfo_ = value;
      return this;
    }
    public Builder SetCsSysInfo(global::CSSysInto.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsSysInfo = true;
      result.csSysInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsSysInfo(global::CSSysInto value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsSysInfo &&
          result.csSysInfo_ != global::CSSysInto.DefaultInstance) {
          result.csSysInfo_ = global::CSSysInto.CreateBuilder(result.csSysInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csSysInfo_ = value;
      }
      result.hasCsSysInfo = true;
      return this;
    }
    public Builder ClearCsSysInfo() {
      PrepareBuilder();
      result.hasCsSysInfo = false;
      result.csSysInfo_ = null;
      return this;
    }
    
    public bool HasScSysInfo {
     get { return result.hasScSysInfo; }
    }
    public global::SCSysInfo ScSysInfo {
      get { return result.ScSysInfo; }
      set { SetScSysInfo(value); }
    }
    public Builder SetScSysInfo(global::SCSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScSysInfo = true;
      result.scSysInfo_ = value;
      return this;
    }
    public Builder SetScSysInfo(global::SCSysInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScSysInfo = true;
      result.scSysInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScSysInfo(global::SCSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScSysInfo &&
          result.scSysInfo_ != global::SCSysInfo.DefaultInstance) {
          result.scSysInfo_ = global::SCSysInfo.CreateBuilder(result.scSysInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.scSysInfo_ = value;
      }
      result.hasScSysInfo = true;
      return this;
    }
    public Builder ClearScSysInfo() {
      PrepareBuilder();
      result.hasScSysInfo = false;
      result.scSysInfo_ = null;
      return this;
    }
    
    public bool HasCsAddSysInfo {
     get { return result.hasCsAddSysInfo; }
    }
    public global::CSAddSysInfo CsAddSysInfo {
      get { return result.CsAddSysInfo; }
      set { SetCsAddSysInfo(value); }
    }
    public Builder SetCsAddSysInfo(global::CSAddSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsAddSysInfo = true;
      result.csAddSysInfo_ = value;
      return this;
    }
    public Builder SetCsAddSysInfo(global::CSAddSysInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsAddSysInfo = true;
      result.csAddSysInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsAddSysInfo(global::CSAddSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsAddSysInfo &&
          result.csAddSysInfo_ != global::CSAddSysInfo.DefaultInstance) {
          result.csAddSysInfo_ = global::CSAddSysInfo.CreateBuilder(result.csAddSysInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csAddSysInfo_ = value;
      }
      result.hasCsAddSysInfo = true;
      return this;
    }
    public Builder ClearCsAddSysInfo() {
      PrepareBuilder();
      result.hasCsAddSysInfo = false;
      result.csAddSysInfo_ = null;
      return this;
    }
    
    public bool HasCsDelSysInfo {
     get { return result.hasCsDelSysInfo; }
    }
    public global::CSDelSysInfo CsDelSysInfo {
      get { return result.CsDelSysInfo; }
      set { SetCsDelSysInfo(value); }
    }
    public Builder SetCsDelSysInfo(global::CSDelSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsDelSysInfo = true;
      result.csDelSysInfo_ = value;
      return this;
    }
    public Builder SetCsDelSysInfo(global::CSDelSysInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsDelSysInfo = true;
      result.csDelSysInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsDelSysInfo(global::CSDelSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsDelSysInfo &&
          result.csDelSysInfo_ != global::CSDelSysInfo.DefaultInstance) {
          result.csDelSysInfo_ = global::CSDelSysInfo.CreateBuilder(result.csDelSysInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csDelSysInfo_ = value;
      }
      result.hasCsDelSysInfo = true;
      return this;
    }
    public Builder ClearCsDelSysInfo() {
      PrepareBuilder();
      result.hasCsDelSysInfo = false;
      result.csDelSysInfo_ = null;
      return this;
    }
    
    public bool HasCsUpdateSysInfo {
     get { return result.hasCsUpdateSysInfo; }
    }
    public global::CSUpdateSysInfo CsUpdateSysInfo {
      get { return result.CsUpdateSysInfo; }
      set { SetCsUpdateSysInfo(value); }
    }
    public Builder SetCsUpdateSysInfo(global::CSUpdateSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsUpdateSysInfo = true;
      result.csUpdateSysInfo_ = value;
      return this;
    }
    public Builder SetCsUpdateSysInfo(global::CSUpdateSysInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsUpdateSysInfo = true;
      result.csUpdateSysInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsUpdateSysInfo(global::CSUpdateSysInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsUpdateSysInfo &&
          result.csUpdateSysInfo_ != global::CSUpdateSysInfo.DefaultInstance) {
          result.csUpdateSysInfo_ = global::CSUpdateSysInfo.CreateBuilder(result.csUpdateSysInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.csUpdateSysInfo_ = value;
      }
      result.hasCsUpdateSysInfo = true;
      return this;
    }
    public Builder ClearCsUpdateSysInfo() {
      PrepareBuilder();
      result.hasCsUpdateSysInfo = false;
      result.csUpdateSysInfo_ = null;
      return this;
    }
    
    public bool HasCsEmkCheckin {
     get { return result.hasCsEmkCheckin; }
    }
    public global::CSEmkCheckin CsEmkCheckin {
      get { return result.CsEmkCheckin; }
      set { SetCsEmkCheckin(value); }
    }
    public Builder SetCsEmkCheckin(global::CSEmkCheckin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkCheckin = true;
      result.csEmkCheckin_ = value;
      return this;
    }
    public Builder SetCsEmkCheckin(global::CSEmkCheckin.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkCheckin = true;
      result.csEmkCheckin_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkCheckin(global::CSEmkCheckin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkCheckin &&
          result.csEmkCheckin_ != global::CSEmkCheckin.DefaultInstance) {
          result.csEmkCheckin_ = global::CSEmkCheckin.CreateBuilder(result.csEmkCheckin_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkCheckin_ = value;
      }
      result.hasCsEmkCheckin = true;
      return this;
    }
    public Builder ClearCsEmkCheckin() {
      PrepareBuilder();
      result.hasCsEmkCheckin = false;
      result.csEmkCheckin_ = null;
      return this;
    }
    
    public bool HasScEmkCheckin {
     get { return result.hasScEmkCheckin; }
    }
    public global::SCEmkCheckin ScEmkCheckin {
      get { return result.ScEmkCheckin; }
      set { SetScEmkCheckin(value); }
    }
    public Builder SetScEmkCheckin(global::SCEmkCheckin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEmkCheckin = true;
      result.scEmkCheckin_ = value;
      return this;
    }
    public Builder SetScEmkCheckin(global::SCEmkCheckin.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEmkCheckin = true;
      result.scEmkCheckin_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEmkCheckin(global::SCEmkCheckin value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEmkCheckin &&
          result.scEmkCheckin_ != global::SCEmkCheckin.DefaultInstance) {
          result.scEmkCheckin_ = global::SCEmkCheckin.CreateBuilder(result.scEmkCheckin_).MergeFrom(value).BuildPartial();
      } else {
        result.scEmkCheckin_ = value;
      }
      result.hasScEmkCheckin = true;
      return this;
    }
    public Builder ClearScEmkCheckin() {
      PrepareBuilder();
      result.hasScEmkCheckin = false;
      result.scEmkCheckin_ = null;
      return this;
    }
    
    public bool HasCsEmkCheckout {
     get { return result.hasCsEmkCheckout; }
    }
    public global::CSEmkCheckout CsEmkCheckout {
      get { return result.CsEmkCheckout; }
      set { SetCsEmkCheckout(value); }
    }
    public Builder SetCsEmkCheckout(global::CSEmkCheckout value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkCheckout = true;
      result.csEmkCheckout_ = value;
      return this;
    }
    public Builder SetCsEmkCheckout(global::CSEmkCheckout.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkCheckout = true;
      result.csEmkCheckout_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkCheckout(global::CSEmkCheckout value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkCheckout &&
          result.csEmkCheckout_ != global::CSEmkCheckout.DefaultInstance) {
          result.csEmkCheckout_ = global::CSEmkCheckout.CreateBuilder(result.csEmkCheckout_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkCheckout_ = value;
      }
      result.hasCsEmkCheckout = true;
      return this;
    }
    public Builder ClearCsEmkCheckout() {
      PrepareBuilder();
      result.hasCsEmkCheckout = false;
      result.csEmkCheckout_ = null;
      return this;
    }
    
    public bool HasScEmkCheckout {
     get { return result.hasScEmkCheckout; }
    }
    public global::SCEmkCheckout ScEmkCheckout {
      get { return result.ScEmkCheckout; }
      set { SetScEmkCheckout(value); }
    }
    public Builder SetScEmkCheckout(global::SCEmkCheckout value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEmkCheckout = true;
      result.scEmkCheckout_ = value;
      return this;
    }
    public Builder SetScEmkCheckout(global::SCEmkCheckout.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEmkCheckout = true;
      result.scEmkCheckout_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEmkCheckout(global::SCEmkCheckout value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEmkCheckout &&
          result.scEmkCheckout_ != global::SCEmkCheckout.DefaultInstance) {
          result.scEmkCheckout_ = global::SCEmkCheckout.CreateBuilder(result.scEmkCheckout_).MergeFrom(value).BuildPartial();
      } else {
        result.scEmkCheckout_ = value;
      }
      result.hasScEmkCheckout = true;
      return this;
    }
    public Builder ClearScEmkCheckout() {
      PrepareBuilder();
      result.hasScEmkCheckout = false;
      result.scEmkCheckout_ = null;
      return this;
    }
    
    public bool HasCsEmkRecord {
     get { return result.hasCsEmkRecord; }
    }
    public global::CSEmkRecord CsEmkRecord {
      get { return result.CsEmkRecord; }
      set { SetCsEmkRecord(value); }
    }
    public Builder SetCsEmkRecord(global::CSEmkRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkRecord = true;
      result.csEmkRecord_ = value;
      return this;
    }
    public Builder SetCsEmkRecord(global::CSEmkRecord.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkRecord = true;
      result.csEmkRecord_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkRecord(global::CSEmkRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkRecord &&
          result.csEmkRecord_ != global::CSEmkRecord.DefaultInstance) {
          result.csEmkRecord_ = global::CSEmkRecord.CreateBuilder(result.csEmkRecord_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkRecord_ = value;
      }
      result.hasCsEmkRecord = true;
      return this;
    }
    public Builder ClearCsEmkRecord() {
      PrepareBuilder();
      result.hasCsEmkRecord = false;
      result.csEmkRecord_ = null;
      return this;
    }
    
    public bool HasScEmkRecord {
     get { return result.hasScEmkRecord; }
    }
    public global::SCEmkRecord ScEmkRecord {
      get { return result.ScEmkRecord; }
      set { SetScEmkRecord(value); }
    }
    public Builder SetScEmkRecord(global::SCEmkRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEmkRecord = true;
      result.scEmkRecord_ = value;
      return this;
    }
    public Builder SetScEmkRecord(global::SCEmkRecord.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEmkRecord = true;
      result.scEmkRecord_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEmkRecord(global::SCEmkRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEmkRecord &&
          result.scEmkRecord_ != global::SCEmkRecord.DefaultInstance) {
          result.scEmkRecord_ = global::SCEmkRecord.CreateBuilder(result.scEmkRecord_).MergeFrom(value).BuildPartial();
      } else {
        result.scEmkRecord_ = value;
      }
      result.hasScEmkRecord = true;
      return this;
    }
    public Builder ClearScEmkRecord() {
      PrepareBuilder();
      result.hasScEmkRecord = false;
      result.scEmkRecord_ = null;
      return this;
    }
    
    public bool HasCsEmkRecordFind {
     get { return result.hasCsEmkRecordFind; }
    }
    public global::CSEmkRecordFind CsEmkRecordFind {
      get { return result.CsEmkRecordFind; }
      set { SetCsEmkRecordFind(value); }
    }
    public Builder SetCsEmkRecordFind(global::CSEmkRecordFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEmkRecordFind = true;
      result.csEmkRecordFind_ = value;
      return this;
    }
    public Builder SetCsEmkRecordFind(global::CSEmkRecordFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEmkRecordFind = true;
      result.csEmkRecordFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEmkRecordFind(global::CSEmkRecordFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEmkRecordFind &&
          result.csEmkRecordFind_ != global::CSEmkRecordFind.DefaultInstance) {
          result.csEmkRecordFind_ = global::CSEmkRecordFind.CreateBuilder(result.csEmkRecordFind_).MergeFrom(value).BuildPartial();
      } else {
        result.csEmkRecordFind_ = value;
      }
      result.hasCsEmkRecordFind = true;
      return this;
    }
    public Builder ClearCsEmkRecordFind() {
      PrepareBuilder();
      result.hasCsEmkRecordFind = false;
      result.csEmkRecordFind_ = null;
      return this;
    }
    
    public bool HasScEmkRecordFind {
     get { return result.hasScEmkRecordFind; }
    }
    public global::SCEmkRecordFind ScEmkRecordFind {
      get { return result.ScEmkRecordFind; }
      set { SetScEmkRecordFind(value); }
    }
    public Builder SetScEmkRecordFind(global::SCEmkRecordFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEmkRecordFind = true;
      result.scEmkRecordFind_ = value;
      return this;
    }
    public Builder SetScEmkRecordFind(global::SCEmkRecordFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEmkRecordFind = true;
      result.scEmkRecordFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEmkRecordFind(global::SCEmkRecordFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEmkRecordFind &&
          result.scEmkRecordFind_ != global::SCEmkRecordFind.DefaultInstance) {
          result.scEmkRecordFind_ = global::SCEmkRecordFind.CreateBuilder(result.scEmkRecordFind_).MergeFrom(value).BuildPartial();
      } else {
        result.scEmkRecordFind_ = value;
      }
      result.hasScEmkRecordFind = true;
      return this;
    }
    public Builder ClearScEmkRecordFind() {
      PrepareBuilder();
      result.hasScEmkRecordFind = false;
      result.scEmkRecordFind_ = null;
      return this;
    }
    
    public bool HasCsGoodsFind {
     get { return result.hasCsGoodsFind; }
    }
    public global::CSGoodsFind CsGoodsFind {
      get { return result.CsGoodsFind; }
      set { SetCsGoodsFind(value); }
    }
    public Builder SetCsGoodsFind(global::CSGoodsFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsGoodsFind = true;
      result.csGoodsFind_ = value;
      return this;
    }
    public Builder SetCsGoodsFind(global::CSGoodsFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsGoodsFind = true;
      result.csGoodsFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsGoodsFind(global::CSGoodsFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsGoodsFind &&
          result.csGoodsFind_ != global::CSGoodsFind.DefaultInstance) {
          result.csGoodsFind_ = global::CSGoodsFind.CreateBuilder(result.csGoodsFind_).MergeFrom(value).BuildPartial();
      } else {
        result.csGoodsFind_ = value;
      }
      result.hasCsGoodsFind = true;
      return this;
    }
    public Builder ClearCsGoodsFind() {
      PrepareBuilder();
      result.hasCsGoodsFind = false;
      result.csGoodsFind_ = null;
      return this;
    }
    
    public bool HasScGoodsFind {
     get { return result.hasScGoodsFind; }
    }
    public global::SCGoodsFind ScGoodsFind {
      get { return result.ScGoodsFind; }
      set { SetScGoodsFind(value); }
    }
    public Builder SetScGoodsFind(global::SCGoodsFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScGoodsFind = true;
      result.scGoodsFind_ = value;
      return this;
    }
    public Builder SetScGoodsFind(global::SCGoodsFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScGoodsFind = true;
      result.scGoodsFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScGoodsFind(global::SCGoodsFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScGoodsFind &&
          result.scGoodsFind_ != global::SCGoodsFind.DefaultInstance) {
          result.scGoodsFind_ = global::SCGoodsFind.CreateBuilder(result.scGoodsFind_).MergeFrom(value).BuildPartial();
      } else {
        result.scGoodsFind_ = value;
      }
      result.hasScGoodsFind = true;
      return this;
    }
    public Builder ClearScGoodsFind() {
      PrepareBuilder();
      result.hasScGoodsFind = false;
      result.scGoodsFind_ = null;
      return this;
    }
    
    public bool HasCsGoodsAdd {
     get { return result.hasCsGoodsAdd; }
    }
    public global::CSGoodsAdd CsGoodsAdd {
      get { return result.CsGoodsAdd; }
      set { SetCsGoodsAdd(value); }
    }
    public Builder SetCsGoodsAdd(global::CSGoodsAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsGoodsAdd = true;
      result.csGoodsAdd_ = value;
      return this;
    }
    public Builder SetCsGoodsAdd(global::CSGoodsAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsGoodsAdd = true;
      result.csGoodsAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsGoodsAdd(global::CSGoodsAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsGoodsAdd &&
          result.csGoodsAdd_ != global::CSGoodsAdd.DefaultInstance) {
          result.csGoodsAdd_ = global::CSGoodsAdd.CreateBuilder(result.csGoodsAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csGoodsAdd_ = value;
      }
      result.hasCsGoodsAdd = true;
      return this;
    }
    public Builder ClearCsGoodsAdd() {
      PrepareBuilder();
      result.hasCsGoodsAdd = false;
      result.csGoodsAdd_ = null;
      return this;
    }
    
    public bool HasCsGoodsDel {
     get { return result.hasCsGoodsDel; }
    }
    public global::CSGoodsDel CsGoodsDel {
      get { return result.CsGoodsDel; }
      set { SetCsGoodsDel(value); }
    }
    public Builder SetCsGoodsDel(global::CSGoodsDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsGoodsDel = true;
      result.csGoodsDel_ = value;
      return this;
    }
    public Builder SetCsGoodsDel(global::CSGoodsDel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsGoodsDel = true;
      result.csGoodsDel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsGoodsDel(global::CSGoodsDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsGoodsDel &&
          result.csGoodsDel_ != global::CSGoodsDel.DefaultInstance) {
          result.csGoodsDel_ = global::CSGoodsDel.CreateBuilder(result.csGoodsDel_).MergeFrom(value).BuildPartial();
      } else {
        result.csGoodsDel_ = value;
      }
      result.hasCsGoodsDel = true;
      return this;
    }
    public Builder ClearCsGoodsDel() {
      PrepareBuilder();
      result.hasCsGoodsDel = false;
      result.csGoodsDel_ = null;
      return this;
    }
    
    public bool HasCsGoodsUpdate {
     get { return result.hasCsGoodsUpdate; }
    }
    public global::CSGoodsUpdate CsGoodsUpdate {
      get { return result.CsGoodsUpdate; }
      set { SetCsGoodsUpdate(value); }
    }
    public Builder SetCsGoodsUpdate(global::CSGoodsUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsGoodsUpdate = true;
      result.csGoodsUpdate_ = value;
      return this;
    }
    public Builder SetCsGoodsUpdate(global::CSGoodsUpdate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsGoodsUpdate = true;
      result.csGoodsUpdate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsGoodsUpdate(global::CSGoodsUpdate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsGoodsUpdate &&
          result.csGoodsUpdate_ != global::CSGoodsUpdate.DefaultInstance) {
          result.csGoodsUpdate_ = global::CSGoodsUpdate.CreateBuilder(result.csGoodsUpdate_).MergeFrom(value).BuildPartial();
      } else {
        result.csGoodsUpdate_ = value;
      }
      result.hasCsGoodsUpdate = true;
      return this;
    }
    public Builder ClearCsGoodsUpdate() {
      PrepareBuilder();
      result.hasCsGoodsUpdate = false;
      result.csGoodsUpdate_ = null;
      return this;
    }
    
    public bool HasCsGoodsStock {
     get { return result.hasCsGoodsStock; }
    }
    public global::CSGoodsStock CsGoodsStock {
      get { return result.CsGoodsStock; }
      set { SetCsGoodsStock(value); }
    }
    public Builder SetCsGoodsStock(global::CSGoodsStock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsGoodsStock = true;
      result.csGoodsStock_ = value;
      return this;
    }
    public Builder SetCsGoodsStock(global::CSGoodsStock.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsGoodsStock = true;
      result.csGoodsStock_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsGoodsStock(global::CSGoodsStock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsGoodsStock &&
          result.csGoodsStock_ != global::CSGoodsStock.DefaultInstance) {
          result.csGoodsStock_ = global::CSGoodsStock.CreateBuilder(result.csGoodsStock_).MergeFrom(value).BuildPartial();
      } else {
        result.csGoodsStock_ = value;
      }
      result.hasCsGoodsStock = true;
      return this;
    }
    public Builder ClearCsGoodsStock() {
      PrepareBuilder();
      result.hasCsGoodsStock = false;
      result.csGoodsStock_ = null;
      return this;
    }
    
    public bool HasScGoodsStock {
     get { return result.hasScGoodsStock; }
    }
    public global::SCGoodsStock ScGoodsStock {
      get { return result.ScGoodsStock; }
      set { SetScGoodsStock(value); }
    }
    public Builder SetScGoodsStock(global::SCGoodsStock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScGoodsStock = true;
      result.scGoodsStock_ = value;
      return this;
    }
    public Builder SetScGoodsStock(global::SCGoodsStock.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScGoodsStock = true;
      result.scGoodsStock_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScGoodsStock(global::SCGoodsStock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScGoodsStock &&
          result.scGoodsStock_ != global::SCGoodsStock.DefaultInstance) {
          result.scGoodsStock_ = global::SCGoodsStock.CreateBuilder(result.scGoodsStock_).MergeFrom(value).BuildPartial();
      } else {
        result.scGoodsStock_ = value;
      }
      result.hasScGoodsStock = true;
      return this;
    }
    public Builder ClearScGoodsStock() {
      PrepareBuilder();
      result.hasScGoodsStock = false;
      result.scGoodsStock_ = null;
      return this;
    }
    
    public bool HasCsSalesRecord {
     get { return result.hasCsSalesRecord; }
    }
    public global::CSSalesRecord CsSalesRecord {
      get { return result.CsSalesRecord; }
      set { SetCsSalesRecord(value); }
    }
    public Builder SetCsSalesRecord(global::CSSalesRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsSalesRecord = true;
      result.csSalesRecord_ = value;
      return this;
    }
    public Builder SetCsSalesRecord(global::CSSalesRecord.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsSalesRecord = true;
      result.csSalesRecord_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsSalesRecord(global::CSSalesRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsSalesRecord &&
          result.csSalesRecord_ != global::CSSalesRecord.DefaultInstance) {
          result.csSalesRecord_ = global::CSSalesRecord.CreateBuilder(result.csSalesRecord_).MergeFrom(value).BuildPartial();
      } else {
        result.csSalesRecord_ = value;
      }
      result.hasCsSalesRecord = true;
      return this;
    }
    public Builder ClearCsSalesRecord() {
      PrepareBuilder();
      result.hasCsSalesRecord = false;
      result.csSalesRecord_ = null;
      return this;
    }
    
    public bool HasScSalesRecord {
     get { return result.hasScSalesRecord; }
    }
    public global::SCSalesRecord ScSalesRecord {
      get { return result.ScSalesRecord; }
      set { SetScSalesRecord(value); }
    }
    public Builder SetScSalesRecord(global::SCSalesRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScSalesRecord = true;
      result.scSalesRecord_ = value;
      return this;
    }
    public Builder SetScSalesRecord(global::SCSalesRecord.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScSalesRecord = true;
      result.scSalesRecord_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScSalesRecord(global::SCSalesRecord value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScSalesRecord &&
          result.scSalesRecord_ != global::SCSalesRecord.DefaultInstance) {
          result.scSalesRecord_ = global::SCSalesRecord.CreateBuilder(result.scSalesRecord_).MergeFrom(value).BuildPartial();
      } else {
        result.scSalesRecord_ = value;
      }
      result.hasScSalesRecord = true;
      return this;
    }
    public Builder ClearScSalesRecord() {
      PrepareBuilder();
      result.hasScSalesRecord = false;
      result.scSalesRecord_ = null;
      return this;
    }
    
    public bool HasCsSalesTop {
     get { return result.hasCsSalesTop; }
    }
    public global::CSSalesTop CsSalesTop {
      get { return result.CsSalesTop; }
      set { SetCsSalesTop(value); }
    }
    public Builder SetCsSalesTop(global::CSSalesTop value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsSalesTop = true;
      result.csSalesTop_ = value;
      return this;
    }
    public Builder SetCsSalesTop(global::CSSalesTop.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsSalesTop = true;
      result.csSalesTop_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsSalesTop(global::CSSalesTop value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsSalesTop &&
          result.csSalesTop_ != global::CSSalesTop.DefaultInstance) {
          result.csSalesTop_ = global::CSSalesTop.CreateBuilder(result.csSalesTop_).MergeFrom(value).BuildPartial();
      } else {
        result.csSalesTop_ = value;
      }
      result.hasCsSalesTop = true;
      return this;
    }
    public Builder ClearCsSalesTop() {
      PrepareBuilder();
      result.hasCsSalesTop = false;
      result.csSalesTop_ = null;
      return this;
    }
    
    public bool HasScSalesTop {
     get { return result.hasScSalesTop; }
    }
    public global::SCSalesTop ScSalesTop {
      get { return result.ScSalesTop; }
      set { SetScSalesTop(value); }
    }
    public Builder SetScSalesTop(global::SCSalesTop value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScSalesTop = true;
      result.scSalesTop_ = value;
      return this;
    }
    public Builder SetScSalesTop(global::SCSalesTop.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScSalesTop = true;
      result.scSalesTop_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScSalesTop(global::SCSalesTop value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScSalesTop &&
          result.scSalesTop_ != global::SCSalesTop.DefaultInstance) {
          result.scSalesTop_ = global::SCSalesTop.CreateBuilder(result.scSalesTop_).MergeFrom(value).BuildPartial();
      } else {
        result.scSalesTop_ = value;
      }
      result.hasScSalesTop = true;
      return this;
    }
    public Builder ClearScSalesTop() {
      PrepareBuilder();
      result.hasScSalesTop = false;
      result.scSalesTop_ = null;
      return this;
    }
    
    public bool HasCsOrderList {
     get { return result.hasCsOrderList; }
    }
    public global::CSOrderList CsOrderList {
      get { return result.CsOrderList; }
      set { SetCsOrderList(value); }
    }
    public Builder SetCsOrderList(global::CSOrderList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsOrderList = true;
      result.csOrderList_ = value;
      return this;
    }
    public Builder SetCsOrderList(global::CSOrderList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsOrderList = true;
      result.csOrderList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsOrderList(global::CSOrderList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsOrderList &&
          result.csOrderList_ != global::CSOrderList.DefaultInstance) {
          result.csOrderList_ = global::CSOrderList.CreateBuilder(result.csOrderList_).MergeFrom(value).BuildPartial();
      } else {
        result.csOrderList_ = value;
      }
      result.hasCsOrderList = true;
      return this;
    }
    public Builder ClearCsOrderList() {
      PrepareBuilder();
      result.hasCsOrderList = false;
      result.csOrderList_ = null;
      return this;
    }
    
    public bool HasScOrderList {
     get { return result.hasScOrderList; }
    }
    public global::SCOrderList ScOrderList {
      get { return result.ScOrderList; }
      set { SetScOrderList(value); }
    }
    public Builder SetScOrderList(global::SCOrderList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScOrderList = true;
      result.scOrderList_ = value;
      return this;
    }
    public Builder SetScOrderList(global::SCOrderList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScOrderList = true;
      result.scOrderList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScOrderList(global::SCOrderList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScOrderList &&
          result.scOrderList_ != global::SCOrderList.DefaultInstance) {
          result.scOrderList_ = global::SCOrderList.CreateBuilder(result.scOrderList_).MergeFrom(value).BuildPartial();
      } else {
        result.scOrderList_ = value;
      }
      result.hasScOrderList = true;
      return this;
    }
    public Builder ClearScOrderList() {
      PrepareBuilder();
      result.hasScOrderList = false;
      result.scOrderList_ = null;
      return this;
    }
    
    public bool HasCsOrderDetail {
     get { return result.hasCsOrderDetail; }
    }
    public global::CSOrderDetail CsOrderDetail {
      get { return result.CsOrderDetail; }
      set { SetCsOrderDetail(value); }
    }
    public Builder SetCsOrderDetail(global::CSOrderDetail value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsOrderDetail = true;
      result.csOrderDetail_ = value;
      return this;
    }
    public Builder SetCsOrderDetail(global::CSOrderDetail.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsOrderDetail = true;
      result.csOrderDetail_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsOrderDetail(global::CSOrderDetail value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsOrderDetail &&
          result.csOrderDetail_ != global::CSOrderDetail.DefaultInstance) {
          result.csOrderDetail_ = global::CSOrderDetail.CreateBuilder(result.csOrderDetail_).MergeFrom(value).BuildPartial();
      } else {
        result.csOrderDetail_ = value;
      }
      result.hasCsOrderDetail = true;
      return this;
    }
    public Builder ClearCsOrderDetail() {
      PrepareBuilder();
      result.hasCsOrderDetail = false;
      result.csOrderDetail_ = null;
      return this;
    }
    
    public bool HasScOrderDetail {
     get { return result.hasScOrderDetail; }
    }
    public global::SCOrderDetail ScOrderDetail {
      get { return result.ScOrderDetail; }
      set { SetScOrderDetail(value); }
    }
    public Builder SetScOrderDetail(global::SCOrderDetail value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScOrderDetail = true;
      result.scOrderDetail_ = value;
      return this;
    }
    public Builder SetScOrderDetail(global::SCOrderDetail.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScOrderDetail = true;
      result.scOrderDetail_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScOrderDetail(global::SCOrderDetail value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScOrderDetail &&
          result.scOrderDetail_ != global::SCOrderDetail.DefaultInstance) {
          result.scOrderDetail_ = global::SCOrderDetail.CreateBuilder(result.scOrderDetail_).MergeFrom(value).BuildPartial();
      } else {
        result.scOrderDetail_ = value;
      }
      result.hasScOrderDetail = true;
      return this;
    }
    public Builder ClearScOrderDetail() {
      PrepareBuilder();
      result.hasScOrderDetail = false;
      result.scOrderDetail_ = null;
      return this;
    }
    
    public bool HasCsOrderProcess {
     get { return result.hasCsOrderProcess; }
    }
    public global::CSOrderProcess CsOrderProcess {
      get { return result.CsOrderProcess; }
      set { SetCsOrderProcess(value); }
    }
    public Builder SetCsOrderProcess(global::CSOrderProcess value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsOrderProcess = true;
      result.csOrderProcess_ = value;
      return this;
    }
    public Builder SetCsOrderProcess(global::CSOrderProcess.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsOrderProcess = true;
      result.csOrderProcess_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsOrderProcess(global::CSOrderProcess value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsOrderProcess &&
          result.csOrderProcess_ != global::CSOrderProcess.DefaultInstance) {
          result.csOrderProcess_ = global::CSOrderProcess.CreateBuilder(result.csOrderProcess_).MergeFrom(value).BuildPartial();
      } else {
        result.csOrderProcess_ = value;
      }
      result.hasCsOrderProcess = true;
      return this;
    }
    public Builder ClearCsOrderProcess() {
      PrepareBuilder();
      result.hasCsOrderProcess = false;
      result.csOrderProcess_ = null;
      return this;
    }
    
    public bool HasScShiftDeliveredBy {
     get { return result.hasScShiftDeliveredBy; }
    }
    public global::SCShiftDeliveredBy ScShiftDeliveredBy {
      get { return result.ScShiftDeliveredBy; }
      set { SetScShiftDeliveredBy(value); }
    }
    public Builder SetScShiftDeliveredBy(global::SCShiftDeliveredBy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScShiftDeliveredBy = true;
      result.scShiftDeliveredBy_ = value;
      return this;
    }
    public Builder SetScShiftDeliveredBy(global::SCShiftDeliveredBy.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScShiftDeliveredBy = true;
      result.scShiftDeliveredBy_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScShiftDeliveredBy(global::SCShiftDeliveredBy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScShiftDeliveredBy &&
          result.scShiftDeliveredBy_ != global::SCShiftDeliveredBy.DefaultInstance) {
          result.scShiftDeliveredBy_ = global::SCShiftDeliveredBy.CreateBuilder(result.scShiftDeliveredBy_).MergeFrom(value).BuildPartial();
      } else {
        result.scShiftDeliveredBy_ = value;
      }
      result.hasScShiftDeliveredBy = true;
      return this;
    }
    public Builder ClearScShiftDeliveredBy() {
      PrepareBuilder();
      result.hasScShiftDeliveredBy = false;
      result.scShiftDeliveredBy_ = null;
      return this;
    }
    
    public bool HasCsShiftAdd {
     get { return result.hasCsShiftAdd; }
    }
    public global::CSShiftAdd CsShiftAdd {
      get { return result.CsShiftAdd; }
      set { SetCsShiftAdd(value); }
    }
    public Builder SetCsShiftAdd(global::CSShiftAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsShiftAdd = true;
      result.csShiftAdd_ = value;
      return this;
    }
    public Builder SetCsShiftAdd(global::CSShiftAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsShiftAdd = true;
      result.csShiftAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsShiftAdd(global::CSShiftAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsShiftAdd &&
          result.csShiftAdd_ != global::CSShiftAdd.DefaultInstance) {
          result.csShiftAdd_ = global::CSShiftAdd.CreateBuilder(result.csShiftAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csShiftAdd_ = value;
      }
      result.hasCsShiftAdd = true;
      return this;
    }
    public Builder ClearCsShiftAdd() {
      PrepareBuilder();
      result.hasCsShiftAdd = false;
      result.csShiftAdd_ = null;
      return this;
    }
    
    public bool HasCsShiftFind {
     get { return result.hasCsShiftFind; }
    }
    public global::CSShiftFind CsShiftFind {
      get { return result.CsShiftFind; }
      set { SetCsShiftFind(value); }
    }
    public Builder SetCsShiftFind(global::CSShiftFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsShiftFind = true;
      result.csShiftFind_ = value;
      return this;
    }
    public Builder SetCsShiftFind(global::CSShiftFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsShiftFind = true;
      result.csShiftFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsShiftFind(global::CSShiftFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsShiftFind &&
          result.csShiftFind_ != global::CSShiftFind.DefaultInstance) {
          result.csShiftFind_ = global::CSShiftFind.CreateBuilder(result.csShiftFind_).MergeFrom(value).BuildPartial();
      } else {
        result.csShiftFind_ = value;
      }
      result.hasCsShiftFind = true;
      return this;
    }
    public Builder ClearCsShiftFind() {
      PrepareBuilder();
      result.hasCsShiftFind = false;
      result.csShiftFind_ = null;
      return this;
    }
    
    public bool HasScShiftFind {
     get { return result.hasScShiftFind; }
    }
    public global::SCShiftFind ScShiftFind {
      get { return result.ScShiftFind; }
      set { SetScShiftFind(value); }
    }
    public Builder SetScShiftFind(global::SCShiftFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScShiftFind = true;
      result.scShiftFind_ = value;
      return this;
    }
    public Builder SetScShiftFind(global::SCShiftFind.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScShiftFind = true;
      result.scShiftFind_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScShiftFind(global::SCShiftFind value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScShiftFind &&
          result.scShiftFind_ != global::SCShiftFind.DefaultInstance) {
          result.scShiftFind_ = global::SCShiftFind.CreateBuilder(result.scShiftFind_).MergeFrom(value).BuildPartial();
      } else {
        result.scShiftFind_ = value;
      }
      result.hasScShiftFind = true;
      return this;
    }
    public Builder ClearScShiftFind() {
      PrepareBuilder();
      result.hasScShiftFind = false;
      result.scShiftFind_ = null;
      return this;
    }
    
    public bool HasCsReconnect {
     get { return result.hasCsReconnect; }
    }
    public global::CSReconnect CsReconnect {
      get { return result.CsReconnect; }
      set { SetCsReconnect(value); }
    }
    public Builder SetCsReconnect(global::CSReconnect value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsReconnect = true;
      result.csReconnect_ = value;
      return this;
    }
    public Builder SetCsReconnect(global::CSReconnect.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsReconnect = true;
      result.csReconnect_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsReconnect(global::CSReconnect value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsReconnect &&
          result.csReconnect_ != global::CSReconnect.DefaultInstance) {
          result.csReconnect_ = global::CSReconnect.CreateBuilder(result.csReconnect_).MergeFrom(value).BuildPartial();
      } else {
        result.csReconnect_ = value;
      }
      result.hasCsReconnect = true;
      return this;
    }
    public Builder ClearCsReconnect() {
      PrepareBuilder();
      result.hasCsReconnect = false;
      result.csReconnect_ = null;
      return this;
    }
    
    public bool HasScReconnect {
     get { return result.hasScReconnect; }
    }
    public global::SCReconnect ScReconnect {
      get { return result.ScReconnect; }
      set { SetScReconnect(value); }
    }
    public Builder SetScReconnect(global::SCReconnect value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScReconnect = true;
      result.scReconnect_ = value;
      return this;
    }
    public Builder SetScReconnect(global::SCReconnect.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScReconnect = true;
      result.scReconnect_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScReconnect(global::SCReconnect value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScReconnect &&
          result.scReconnect_ != global::SCReconnect.DefaultInstance) {
          result.scReconnect_ = global::SCReconnect.CreateBuilder(result.scReconnect_).MergeFrom(value).BuildPartial();
      } else {
        result.scReconnect_ = value;
      }
      result.hasScReconnect = true;
      return this;
    }
    public Builder ClearScReconnect() {
      PrepareBuilder();
      result.hasScReconnect = false;
      result.scReconnect_ = null;
      return this;
    }
    
    public bool HasCsClientOpen {
     get { return result.hasCsClientOpen; }
    }
    public global::CSClientOpen CsClientOpen {
      get { return result.CsClientOpen; }
      set { SetCsClientOpen(value); }
    }
    public Builder SetCsClientOpen(global::CSClientOpen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsClientOpen = true;
      result.csClientOpen_ = value;
      return this;
    }
    public Builder SetCsClientOpen(global::CSClientOpen.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsClientOpen = true;
      result.csClientOpen_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsClientOpen(global::CSClientOpen value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsClientOpen &&
          result.csClientOpen_ != global::CSClientOpen.DefaultInstance) {
          result.csClientOpen_ = global::CSClientOpen.CreateBuilder(result.csClientOpen_).MergeFrom(value).BuildPartial();
      } else {
        result.csClientOpen_ = value;
      }
      result.hasCsClientOpen = true;
      return this;
    }
    public Builder ClearCsClientOpen() {
      PrepareBuilder();
      result.hasCsClientOpen = false;
      result.csClientOpen_ = null;
      return this;
    }
    
    public bool HasCsClientClose {
     get { return result.hasCsClientClose; }
    }
    public global::CSClientClose CsClientClose {
      get { return result.CsClientClose; }
      set { SetCsClientClose(value); }
    }
    public Builder SetCsClientClose(global::CSClientClose value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsClientClose = true;
      result.csClientClose_ = value;
      return this;
    }
    public Builder SetCsClientClose(global::CSClientClose.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsClientClose = true;
      result.csClientClose_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsClientClose(global::CSClientClose value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsClientClose &&
          result.csClientClose_ != global::CSClientClose.DefaultInstance) {
          result.csClientClose_ = global::CSClientClose.CreateBuilder(result.csClientClose_).MergeFrom(value).BuildPartial();
      } else {
        result.csClientClose_ = value;
      }
      result.hasCsClientClose = true;
      return this;
    }
    public Builder ClearCsClientClose() {
      PrepareBuilder();
      result.hasCsClientClose = false;
      result.csClientClose_ = null;
      return this;
    }
    
    public bool HasCsLogon {
     get { return result.hasCsLogon; }
    }
    public global::CSLogon CsLogon {
      get { return result.CsLogon; }
      set { SetCsLogon(value); }
    }
    public Builder SetCsLogon(global::CSLogon value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsLogon = true;
      result.csLogon_ = value;
      return this;
    }
    public Builder SetCsLogon(global::CSLogon.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsLogon = true;
      result.csLogon_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsLogon(global::CSLogon value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsLogon &&
          result.csLogon_ != global::CSLogon.DefaultInstance) {
          result.csLogon_ = global::CSLogon.CreateBuilder(result.csLogon_).MergeFrom(value).BuildPartial();
      } else {
        result.csLogon_ = value;
      }
      result.hasCsLogon = true;
      return this;
    }
    public Builder ClearCsLogon() {
      PrepareBuilder();
      result.hasCsLogon = false;
      result.csLogon_ = null;
      return this;
    }
    
    public bool HasScLogon {
     get { return result.hasScLogon; }
    }
    public global::SCLogon ScLogon {
      get { return result.ScLogon; }
      set { SetScLogon(value); }
    }
    public Builder SetScLogon(global::SCLogon value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScLogon = true;
      result.scLogon_ = value;
      return this;
    }
    public Builder SetScLogon(global::SCLogon.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScLogon = true;
      result.scLogon_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScLogon(global::SCLogon value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScLogon &&
          result.scLogon_ != global::SCLogon.DefaultInstance) {
          result.scLogon_ = global::SCLogon.CreateBuilder(result.scLogon_).MergeFrom(value).BuildPartial();
      } else {
        result.scLogon_ = value;
      }
      result.hasScLogon = true;
      return this;
    }
    public Builder ClearScLogon() {
      PrepareBuilder();
      result.hasScLogon = false;
      result.scLogon_ = null;
      return this;
    }
    
    public bool HasCsLogoff {
     get { return result.hasCsLogoff; }
    }
    public global::CSLogoff CsLogoff {
      get { return result.CsLogoff; }
      set { SetCsLogoff(value); }
    }
    public Builder SetCsLogoff(global::CSLogoff value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsLogoff = true;
      result.csLogoff_ = value;
      return this;
    }
    public Builder SetCsLogoff(global::CSLogoff.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsLogoff = true;
      result.csLogoff_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsLogoff(global::CSLogoff value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsLogoff &&
          result.csLogoff_ != global::CSLogoff.DefaultInstance) {
          result.csLogoff_ = global::CSLogoff.CreateBuilder(result.csLogoff_).MergeFrom(value).BuildPartial();
      } else {
        result.csLogoff_ = value;
      }
      result.hasCsLogoff = true;
      return this;
    }
    public Builder ClearCsLogoff() {
      PrepareBuilder();
      result.hasCsLogoff = false;
      result.csLogoff_ = null;
      return this;
    }
    
    public bool HasScLogoff {
     get { return result.hasScLogoff; }
    }
    public global::SCLogoff ScLogoff {
      get { return result.ScLogoff; }
      set { SetScLogoff(value); }
    }
    public Builder SetScLogoff(global::SCLogoff value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScLogoff = true;
      result.scLogoff_ = value;
      return this;
    }
    public Builder SetScLogoff(global::SCLogoff.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScLogoff = true;
      result.scLogoff_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScLogoff(global::SCLogoff value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScLogoff &&
          result.scLogoff_ != global::SCLogoff.DefaultInstance) {
          result.scLogoff_ = global::SCLogoff.CreateBuilder(result.scLogoff_).MergeFrom(value).BuildPartial();
      } else {
        result.scLogoff_ = value;
      }
      result.hasScLogoff = true;
      return this;
    }
    public Builder ClearScLogoff() {
      PrepareBuilder();
      result.hasScLogoff = false;
      result.scLogoff_ = null;
      return this;
    }
    
    public bool HasCsHungup {
     get { return result.hasCsHungup; }
    }
    public global::CSHungup CsHungup {
      get { return result.CsHungup; }
      set { SetCsHungup(value); }
    }
    public Builder SetCsHungup(global::CSHungup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsHungup = true;
      result.csHungup_ = value;
      return this;
    }
    public Builder SetCsHungup(global::CSHungup.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsHungup = true;
      result.csHungup_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsHungup(global::CSHungup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsHungup &&
          result.csHungup_ != global::CSHungup.DefaultInstance) {
          result.csHungup_ = global::CSHungup.CreateBuilder(result.csHungup_).MergeFrom(value).BuildPartial();
      } else {
        result.csHungup_ = value;
      }
      result.hasCsHungup = true;
      return this;
    }
    public Builder ClearCsHungup() {
      PrepareBuilder();
      result.hasCsHungup = false;
      result.csHungup_ = null;
      return this;
    }
    
    public bool HasCsPreCharge {
     get { return result.hasCsPreCharge; }
    }
    public global::CSPreCharge CsPreCharge {
      get { return result.CsPreCharge; }
      set { SetCsPreCharge(value); }
    }
    public Builder SetCsPreCharge(global::CSPreCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsPreCharge = true;
      result.csPreCharge_ = value;
      return this;
    }
    public Builder SetCsPreCharge(global::CSPreCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsPreCharge = true;
      result.csPreCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsPreCharge(global::CSPreCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsPreCharge &&
          result.csPreCharge_ != global::CSPreCharge.DefaultInstance) {
          result.csPreCharge_ = global::CSPreCharge.CreateBuilder(result.csPreCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.csPreCharge_ = value;
      }
      result.hasCsPreCharge = true;
      return this;
    }
    public Builder ClearCsPreCharge() {
      PrepareBuilder();
      result.hasCsPreCharge = false;
      result.csPreCharge_ = null;
      return this;
    }
    
    public bool HasScPreCharge {
     get { return result.hasScPreCharge; }
    }
    public global::SCPreCharge ScPreCharge {
      get { return result.ScPreCharge; }
      set { SetScPreCharge(value); }
    }
    public Builder SetScPreCharge(global::SCPreCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScPreCharge = true;
      result.scPreCharge_ = value;
      return this;
    }
    public Builder SetScPreCharge(global::SCPreCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScPreCharge = true;
      result.scPreCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScPreCharge(global::SCPreCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScPreCharge &&
          result.scPreCharge_ != global::SCPreCharge.DefaultInstance) {
          result.scPreCharge_ = global::SCPreCharge.CreateBuilder(result.scPreCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.scPreCharge_ = value;
      }
      result.hasScPreCharge = true;
      return this;
    }
    public Builder ClearScPreCharge() {
      PrepareBuilder();
      result.hasScPreCharge = false;
      result.scPreCharge_ = null;
      return this;
    }
    
    public bool HasScToCharge {
     get { return result.hasScToCharge; }
    }
    public global::SCToCharge ScToCharge {
      get { return result.ScToCharge; }
      set { SetScToCharge(value); }
    }
    public Builder SetScToCharge(global::SCToCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScToCharge = true;
      result.scToCharge_ = value;
      return this;
    }
    public Builder SetScToCharge(global::SCToCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScToCharge = true;
      result.scToCharge_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScToCharge(global::SCToCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScToCharge &&
          result.scToCharge_ != global::SCToCharge.DefaultInstance) {
          result.scToCharge_ = global::SCToCharge.CreateBuilder(result.scToCharge_).MergeFrom(value).BuildPartial();
      } else {
        result.scToCharge_ = value;
      }
      result.hasScToCharge = true;
      return this;
    }
    public Builder ClearScToCharge() {
      PrepareBuilder();
      result.hasScToCharge = false;
      result.scToCharge_ = null;
      return this;
    }
    
    public bool HasCsCartAdd {
     get { return result.hasCsCartAdd; }
    }
    public global::CSCartAdd CsCartAdd {
      get { return result.CsCartAdd; }
      set { SetCsCartAdd(value); }
    }
    public Builder SetCsCartAdd(global::CSCartAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsCartAdd = true;
      result.csCartAdd_ = value;
      return this;
    }
    public Builder SetCsCartAdd(global::CSCartAdd.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsCartAdd = true;
      result.csCartAdd_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsCartAdd(global::CSCartAdd value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsCartAdd &&
          result.csCartAdd_ != global::CSCartAdd.DefaultInstance) {
          result.csCartAdd_ = global::CSCartAdd.CreateBuilder(result.csCartAdd_).MergeFrom(value).BuildPartial();
      } else {
        result.csCartAdd_ = value;
      }
      result.hasCsCartAdd = true;
      return this;
    }
    public Builder ClearCsCartAdd() {
      PrepareBuilder();
      result.hasCsCartAdd = false;
      result.csCartAdd_ = null;
      return this;
    }
    
    public bool HasCsCartDel {
     get { return result.hasCsCartDel; }
    }
    public global::CSCartDel CsCartDel {
      get { return result.CsCartDel; }
      set { SetCsCartDel(value); }
    }
    public Builder SetCsCartDel(global::CSCartDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsCartDel = true;
      result.csCartDel_ = value;
      return this;
    }
    public Builder SetCsCartDel(global::CSCartDel.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsCartDel = true;
      result.csCartDel_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsCartDel(global::CSCartDel value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsCartDel &&
          result.csCartDel_ != global::CSCartDel.DefaultInstance) {
          result.csCartDel_ = global::CSCartDel.CreateBuilder(result.csCartDel_).MergeFrom(value).BuildPartial();
      } else {
        result.csCartDel_ = value;
      }
      result.hasCsCartDel = true;
      return this;
    }
    public Builder ClearCsCartDel() {
      PrepareBuilder();
      result.hasCsCartDel = false;
      result.csCartDel_ = null;
      return this;
    }
    
    public bool HasCsPreBuy {
     get { return result.hasCsPreBuy; }
    }
    public global::CSPreBuy CsPreBuy {
      get { return result.CsPreBuy; }
      set { SetCsPreBuy(value); }
    }
    public Builder SetCsPreBuy(global::CSPreBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsPreBuy = true;
      result.csPreBuy_ = value;
      return this;
    }
    public Builder SetCsPreBuy(global::CSPreBuy.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsPreBuy = true;
      result.csPreBuy_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsPreBuy(global::CSPreBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsPreBuy &&
          result.csPreBuy_ != global::CSPreBuy.DefaultInstance) {
          result.csPreBuy_ = global::CSPreBuy.CreateBuilder(result.csPreBuy_).MergeFrom(value).BuildPartial();
      } else {
        result.csPreBuy_ = value;
      }
      result.hasCsPreBuy = true;
      return this;
    }
    public Builder ClearCsPreBuy() {
      PrepareBuilder();
      result.hasCsPreBuy = false;
      result.csPreBuy_ = null;
      return this;
    }
    
    public bool HasScPreBuy {
     get { return result.hasScPreBuy; }
    }
    public global::SCPreBuy ScPreBuy {
      get { return result.ScPreBuy; }
      set { SetScPreBuy(value); }
    }
    public Builder SetScPreBuy(global::SCPreBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScPreBuy = true;
      result.scPreBuy_ = value;
      return this;
    }
    public Builder SetScPreBuy(global::SCPreBuy.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScPreBuy = true;
      result.scPreBuy_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScPreBuy(global::SCPreBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScPreBuy &&
          result.scPreBuy_ != global::SCPreBuy.DefaultInstance) {
          result.scPreBuy_ = global::SCPreBuy.CreateBuilder(result.scPreBuy_).MergeFrom(value).BuildPartial();
      } else {
        result.scPreBuy_ = value;
      }
      result.hasScPreBuy = true;
      return this;
    }
    public Builder ClearScPreBuy() {
      PrepareBuilder();
      result.hasScPreBuy = false;
      result.scPreBuy_ = null;
      return this;
    }
    
    public bool HasScToBuy {
     get { return result.hasScToBuy; }
    }
    public global::SCToBuy ScToBuy {
      get { return result.ScToBuy; }
      set { SetScToBuy(value); }
    }
    public Builder SetScToBuy(global::SCToBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScToBuy = true;
      result.scToBuy_ = value;
      return this;
    }
    public Builder SetScToBuy(global::SCToBuy.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScToBuy = true;
      result.scToBuy_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScToBuy(global::SCToBuy value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScToBuy &&
          result.scToBuy_ != global::SCToBuy.DefaultInstance) {
          result.scToBuy_ = global::SCToBuy.CreateBuilder(result.scToBuy_).MergeFrom(value).BuildPartial();
      } else {
        result.scToBuy_ = value;
      }
      result.hasScToBuy = true;
      return this;
    }
    public Builder ClearScToBuy() {
      PrepareBuilder();
      result.hasScToBuy = false;
      result.scToBuy_ = null;
      return this;
    }
    
    public bool HasScSysMessage {
     get { return result.hasScSysMessage; }
    }
    public global::SCSysMessage ScSysMessage {
      get { return result.ScSysMessage; }
      set { SetScSysMessage(value); }
    }
    public Builder SetScSysMessage(global::SCSysMessage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScSysMessage = true;
      result.scSysMessage_ = value;
      return this;
    }
    public Builder SetScSysMessage(global::SCSysMessage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScSysMessage = true;
      result.scSysMessage_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScSysMessage(global::SCSysMessage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScSysMessage &&
          result.scSysMessage_ != global::SCSysMessage.DefaultInstance) {
          result.scSysMessage_ = global::SCSysMessage.CreateBuilder(result.scSysMessage_).MergeFrom(value).BuildPartial();
      } else {
        result.scSysMessage_ = value;
      }
      result.hasScSysMessage = true;
      return this;
    }
    public Builder ClearScSysMessage() {
      PrepareBuilder();
      result.hasScSysMessage = false;
      result.scSysMessage_ = null;
      return this;
    }
    
    public bool HasCsEvaluate {
     get { return result.hasCsEvaluate; }
    }
    public global::CSEvaluate CsEvaluate {
      get { return result.CsEvaluate; }
      set { SetCsEvaluate(value); }
    }
    public Builder SetCsEvaluate(global::CSEvaluate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsEvaluate = true;
      result.csEvaluate_ = value;
      return this;
    }
    public Builder SetCsEvaluate(global::CSEvaluate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsEvaluate = true;
      result.csEvaluate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsEvaluate(global::CSEvaluate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsEvaluate &&
          result.csEvaluate_ != global::CSEvaluate.DefaultInstance) {
          result.csEvaluate_ = global::CSEvaluate.CreateBuilder(result.csEvaluate_).MergeFrom(value).BuildPartial();
      } else {
        result.csEvaluate_ = value;
      }
      result.hasCsEvaluate = true;
      return this;
    }
    public Builder ClearCsEvaluate() {
      PrepareBuilder();
      result.hasCsEvaluate = false;
      result.csEvaluate_ = null;
      return this;
    }
    
    public bool HasScEvaluate {
     get { return result.hasScEvaluate; }
    }
    public global::SCEvaluate ScEvaluate {
      get { return result.ScEvaluate; }
      set { SetScEvaluate(value); }
    }
    public Builder SetScEvaluate(global::SCEvaluate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScEvaluate = true;
      result.scEvaluate_ = value;
      return this;
    }
    public Builder SetScEvaluate(global::SCEvaluate.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScEvaluate = true;
      result.scEvaluate_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScEvaluate(global::SCEvaluate value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScEvaluate &&
          result.scEvaluate_ != global::SCEvaluate.DefaultInstance) {
          result.scEvaluate_ = global::SCEvaluate.CreateBuilder(result.scEvaluate_).MergeFrom(value).BuildPartial();
      } else {
        result.scEvaluate_ = value;
      }
      result.hasScEvaluate = true;
      return this;
    }
    public Builder ClearScEvaluate() {
      PrepareBuilder();
      result.hasScEvaluate = false;
      result.scEvaluate_ = null;
      return this;
    }
    
    public bool HasCsVerifyCode {
     get { return result.hasCsVerifyCode; }
    }
    public global::CSVerifyCode CsVerifyCode {
      get { return result.CsVerifyCode; }
      set { SetCsVerifyCode(value); }
    }
    public Builder SetCsVerifyCode(global::CSVerifyCode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsVerifyCode = true;
      result.csVerifyCode_ = value;
      return this;
    }
    public Builder SetCsVerifyCode(global::CSVerifyCode.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsVerifyCode = true;
      result.csVerifyCode_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsVerifyCode(global::CSVerifyCode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsVerifyCode &&
          result.csVerifyCode_ != global::CSVerifyCode.DefaultInstance) {
          result.csVerifyCode_ = global::CSVerifyCode.CreateBuilder(result.csVerifyCode_).MergeFrom(value).BuildPartial();
      } else {
        result.csVerifyCode_ = value;
      }
      result.hasCsVerifyCode = true;
      return this;
    }
    public Builder ClearCsVerifyCode() {
      PrepareBuilder();
      result.hasCsVerifyCode = false;
      result.csVerifyCode_ = null;
      return this;
    }
    
    public bool HasScVerifyCode {
     get { return result.hasScVerifyCode; }
    }
    public global::SCVerifyCode ScVerifyCode {
      get { return result.ScVerifyCode; }
      set { SetScVerifyCode(value); }
    }
    public Builder SetScVerifyCode(global::SCVerifyCode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScVerifyCode = true;
      result.scVerifyCode_ = value;
      return this;
    }
    public Builder SetScVerifyCode(global::SCVerifyCode.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScVerifyCode = true;
      result.scVerifyCode_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScVerifyCode(global::SCVerifyCode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScVerifyCode &&
          result.scVerifyCode_ != global::SCVerifyCode.DefaultInstance) {
          result.scVerifyCode_ = global::SCVerifyCode.CreateBuilder(result.scVerifyCode_).MergeFrom(value).BuildPartial();
      } else {
        result.scVerifyCode_ = value;
      }
      result.hasScVerifyCode = true;
      return this;
    }
    public Builder ClearScVerifyCode() {
      PrepareBuilder();
      result.hasScVerifyCode = false;
      result.scVerifyCode_ = null;
      return this;
    }
    
    public bool HasCsBindMobile {
     get { return result.hasCsBindMobile; }
    }
    public global::CSBindMobile CsBindMobile {
      get { return result.CsBindMobile; }
      set { SetCsBindMobile(value); }
    }
    public Builder SetCsBindMobile(global::CSBindMobile value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCsBindMobile = true;
      result.csBindMobile_ = value;
      return this;
    }
    public Builder SetCsBindMobile(global::CSBindMobile.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCsBindMobile = true;
      result.csBindMobile_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCsBindMobile(global::CSBindMobile value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCsBindMobile &&
          result.csBindMobile_ != global::CSBindMobile.DefaultInstance) {
          result.csBindMobile_ = global::CSBindMobile.CreateBuilder(result.csBindMobile_).MergeFrom(value).BuildPartial();
      } else {
        result.csBindMobile_ = value;
      }
      result.hasCsBindMobile = true;
      return this;
    }
    public Builder ClearCsBindMobile() {
      PrepareBuilder();
      result.hasCsBindMobile = false;
      result.csBindMobile_ = null;
      return this;
    }
    
    public bool HasScBindMobile {
     get { return result.hasScBindMobile; }
    }
    public global::SCBindMobile ScBindMobile {
      get { return result.ScBindMobile; }
      set { SetScBindMobile(value); }
    }
    public Builder SetScBindMobile(global::SCBindMobile value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScBindMobile = true;
      result.scBindMobile_ = value;
      return this;
    }
    public Builder SetScBindMobile(global::SCBindMobile.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasScBindMobile = true;
      result.scBindMobile_ = builderForValue.Build();
      return this;
    }
    public Builder MergeScBindMobile(global::SCBindMobile value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasScBindMobile &&
          result.scBindMobile_ != global::SCBindMobile.DefaultInstance) {
          result.scBindMobile_ = global::SCBindMobile.CreateBuilder(result.scBindMobile_).MergeFrom(value).BuildPartial();
      } else {
        result.scBindMobile_ = value;
      }
      result.hasScBindMobile = true;
      return this;
    }
    public Builder ClearScBindMobile() {
      PrepareBuilder();
      result.hasScBindMobile = false;
      result.scBindMobile_ = null;
      return this;
    }
  }
  static MessageContent() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CLAskServer : pb::GeneratedMessage<CLAskServer, CLAskServer.Builder> {
  private CLAskServer() { }
  private static readonly CLAskServer defaultInstance = new CLAskServer().MakeReadOnly();
  private static readonly string[] _cLAskServerFieldNames = new string[] { "uuid" };
  private static readonly uint[] _cLAskServerFieldTags = new uint[] { 10 };
  public static CLAskServer DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CLAskServer DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CLAskServer ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CLAskServer__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CLAskServer, CLAskServer.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CLAskServer__FieldAccessorTable; }
  }
  
  public const int UuidFieldNumber = 1;
  private bool hasUuid;
  private string uuid_ = "";
  public bool HasUuid {
    get { return hasUuid; }
  }
  public string Uuid {
    get { return uuid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasUuid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cLAskServerFieldNames;
    if (hasUuid) {
      output.WriteString(1, field_names[0], Uuid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUuid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Uuid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CLAskServer ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CLAskServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CLAskServer ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CLAskServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CLAskServer ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CLAskServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CLAskServer ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CLAskServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CLAskServer ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CLAskServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CLAskServer MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CLAskServer prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CLAskServer, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CLAskServer cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CLAskServer result;
    
    private CLAskServer PrepareBuilder() {
      if (resultIsReadOnly) {
        CLAskServer original = result;
        result = new CLAskServer();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CLAskServer MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CLAskServer.Descriptor; }
    }
    
    public override CLAskServer DefaultInstanceForType {
      get { return global::CLAskServer.DefaultInstance; }
    }
    
    public override CLAskServer BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CLAskServer) {
        return MergeFrom((CLAskServer) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CLAskServer other) {
      if (other == global::CLAskServer.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUuid) {
        Uuid = other.Uuid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cLAskServerFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cLAskServerFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUuid = input.ReadString(ref result.uuid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUuid {
      get { return result.hasUuid; }
    }
    public string Uuid {
      get { return result.Uuid; }
      set { SetUuid(value); }
    }
    public Builder SetUuid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUuid = true;
      result.uuid_ = value;
      return this;
    }
    public Builder ClearUuid() {
      PrepareBuilder();
      result.hasUuid = false;
      result.uuid_ = "";
      return this;
    }
  }
  static CLAskServer() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class LCRetServer : pb::GeneratedMessage<LCRetServer, LCRetServer.Builder> {
  private LCRetServer() { }
  private static readonly LCRetServer defaultInstance = new LCRetServer().MakeReadOnly();
  private static readonly string[] _lCRetServerFieldNames = new string[] { "port", "serverip" };
  private static readonly uint[] _lCRetServerFieldTags = new uint[] { 16, 10 };
  public static LCRetServer DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override LCRetServer DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override LCRetServer ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_LCRetServer__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<LCRetServer, LCRetServer.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_LCRetServer__FieldAccessorTable; }
  }
  
  public const int ServeripFieldNumber = 1;
  private bool hasServerip;
  private string serverip_ = "";
  public bool HasServerip {
    get { return hasServerip; }
  }
  public string Serverip {
    get { return serverip_; }
  }
  
  public const int PortFieldNumber = 2;
  private bool hasPort;
  private int port_;
  public bool HasPort {
    get { return hasPort; }
  }
  public int Port {
    get { return port_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _lCRetServerFieldNames;
    if (hasServerip) {
      output.WriteString(1, field_names[1], Serverip);
    }
    if (hasPort) {
      output.WriteInt32(2, field_names[0], Port);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasServerip) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Serverip);
    }
    if (hasPort) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Port);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static LCRetServer ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LCRetServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LCRetServer ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LCRetServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LCRetServer ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LCRetServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static LCRetServer ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static LCRetServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static LCRetServer ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LCRetServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private LCRetServer MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(LCRetServer prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<LCRetServer, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(LCRetServer cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private LCRetServer result;
    
    private LCRetServer PrepareBuilder() {
      if (resultIsReadOnly) {
        LCRetServer original = result;
        result = new LCRetServer();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override LCRetServer MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::LCRetServer.Descriptor; }
    }
    
    public override LCRetServer DefaultInstanceForType {
      get { return global::LCRetServer.DefaultInstance; }
    }
    
    public override LCRetServer BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is LCRetServer) {
        return MergeFrom((LCRetServer) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(LCRetServer other) {
      if (other == global::LCRetServer.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasServerip) {
        Serverip = other.Serverip;
      }
      if (other.HasPort) {
        Port = other.Port;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_lCRetServerFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _lCRetServerFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasServerip = input.ReadString(ref result.serverip_);
            break;
          }
          case 16: {
            result.hasPort = input.ReadInt32(ref result.port_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasServerip {
      get { return result.hasServerip; }
    }
    public string Serverip {
      get { return result.Serverip; }
      set { SetServerip(value); }
    }
    public Builder SetServerip(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasServerip = true;
      result.serverip_ = value;
      return this;
    }
    public Builder ClearServerip() {
      PrepareBuilder();
      result.hasServerip = false;
      result.serverip_ = "";
      return this;
    }
    
    public bool HasPort {
      get { return result.hasPort; }
    }
    public int Port {
      get { return result.Port; }
      set { SetPort(value); }
    }
    public Builder SetPort(int value) {
      PrepareBuilder();
      result.hasPort = true;
      result.port_ = value;
      return this;
    }
    public Builder ClearPort() {
      PrepareBuilder();
      result.hasPort = false;
      result.port_ = 0;
      return this;
    }
  }
  static LCRetServer() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAuthen : pb::GeneratedMessage<CSAuthen, CSAuthen.Builder> {
  private CSAuthen() { }
  private static readonly CSAuthen defaultInstance = new CSAuthen().MakeReadOnly();
  private static readonly string[] _cSAuthenFieldNames = new string[] { "text" };
  private static readonly uint[] _cSAuthenFieldTags = new uint[] { 10 };
  public static CSAuthen DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAuthen DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAuthen ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSAuthen__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAuthen, CSAuthen.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSAuthen__FieldAccessorTable; }
  }
  
  public const int TextFieldNumber = 1;
  private bool hasText;
  private string text_ = "";
  public bool HasText {
    get { return hasText; }
  }
  public string Text {
    get { return text_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasText) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAuthenFieldNames;
    if (hasText) {
      output.WriteString(1, field_names[0], Text);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasText) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Text);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAuthen ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAuthen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAuthen ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAuthen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAuthen ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAuthen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAuthen ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAuthen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAuthen ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAuthen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAuthen MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAuthen prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAuthen, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAuthen cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAuthen result;
    
    private CSAuthen PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAuthen original = result;
        result = new CSAuthen();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAuthen MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAuthen.Descriptor; }
    }
    
    public override CSAuthen DefaultInstanceForType {
      get { return global::CSAuthen.DefaultInstance; }
    }
    
    public override CSAuthen BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAuthen) {
        return MergeFrom((CSAuthen) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAuthen other) {
      if (other == global::CSAuthen.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasText) {
        Text = other.Text;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAuthenFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAuthenFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasText = input.ReadString(ref result.text_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasText {
      get { return result.hasText; }
    }
    public string Text {
      get { return result.Text; }
      set { SetText(value); }
    }
    public Builder SetText(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasText = true;
      result.text_ = value;
      return this;
    }
    public Builder ClearText() {
      PrepareBuilder();
      result.hasText = false;
      result.text_ = "";
      return this;
    }
  }
  static CSAuthen() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCAuthen : pb::GeneratedMessage<SCAuthen, SCAuthen.Builder> {
  private SCAuthen() { }
  private static readonly SCAuthen defaultInstance = new SCAuthen().MakeReadOnly();
  private static readonly string[] _sCAuthenFieldNames = new string[] { "guid", "sessionId" };
  private static readonly uint[] _sCAuthenFieldTags = new uint[] { 16, 8 };
  public static SCAuthen DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCAuthen DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCAuthen ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCAuthen__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCAuthen, SCAuthen.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCAuthen__FieldAccessorTable; }
  }
  
  public const int SessionIdFieldNumber = 1;
  private bool hasSessionId;
  private int sessionId_;
  public bool HasSessionId {
    get { return hasSessionId; }
  }
  public int SessionId {
    get { return sessionId_; }
  }
  
  public const int GuidFieldNumber = 2;
  private bool hasGuid;
  private int guid_;
  public bool HasGuid {
    get { return hasGuid; }
  }
  public int Guid {
    get { return guid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasSessionId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCAuthenFieldNames;
    if (hasSessionId) {
      output.WriteInt32(1, field_names[1], SessionId);
    }
    if (hasGuid) {
      output.WriteInt32(2, field_names[0], Guid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSessionId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, SessionId);
    }
    if (hasGuid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Guid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCAuthen ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAuthen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAuthen ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAuthen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAuthen ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAuthen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCAuthen ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCAuthen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCAuthen ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAuthen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCAuthen MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCAuthen prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCAuthen, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCAuthen cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCAuthen result;
    
    private SCAuthen PrepareBuilder() {
      if (resultIsReadOnly) {
        SCAuthen original = result;
        result = new SCAuthen();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCAuthen MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCAuthen.Descriptor; }
    }
    
    public override SCAuthen DefaultInstanceForType {
      get { return global::SCAuthen.DefaultInstance; }
    }
    
    public override SCAuthen BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCAuthen) {
        return MergeFrom((SCAuthen) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCAuthen other) {
      if (other == global::SCAuthen.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSessionId) {
        SessionId = other.SessionId;
      }
      if (other.HasGuid) {
        Guid = other.Guid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCAuthenFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCAuthenFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSessionId = input.ReadInt32(ref result.sessionId_);
            break;
          }
          case 16: {
            result.hasGuid = input.ReadInt32(ref result.guid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSessionId {
      get { return result.hasSessionId; }
    }
    public int SessionId {
      get { return result.SessionId; }
      set { SetSessionId(value); }
    }
    public Builder SetSessionId(int value) {
      PrepareBuilder();
      result.hasSessionId = true;
      result.sessionId_ = value;
      return this;
    }
    public Builder ClearSessionId() {
      PrepareBuilder();
      result.hasSessionId = false;
      result.sessionId_ = 0;
      return this;
    }
    
    public bool HasGuid {
      get { return result.hasGuid; }
    }
    public int Guid {
      get { return result.Guid; }
      set { SetGuid(value); }
    }
    public Builder SetGuid(int value) {
      PrepareBuilder();
      result.hasGuid = true;
      result.guid_ = value;
      return this;
    }
    public Builder ClearGuid() {
      PrepareBuilder();
      result.hasGuid = false;
      result.guid_ = 0;
      return this;
    }
  }
  static SCAuthen() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSLogin : pb::GeneratedMessage<CSLogin, CSLogin.Builder> {
  private CSLogin() { }
  private static readonly CSLogin defaultInstance = new CSLogin().MakeReadOnly();
  private static readonly string[] _cSLoginFieldNames = new string[] { "password", "userId" };
  private static readonly uint[] _cSLoginFieldTags = new uint[] { 18, 10 };
  public static CSLogin DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSLogin DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSLogin ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSLogin__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSLogin, CSLogin.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSLogin__FieldAccessorTable; }
  }
  
  public const int UserIdFieldNumber = 1;
  private bool hasUserId;
  private string userId_ = "";
  public bool HasUserId {
    get { return hasUserId; }
  }
  public string UserId {
    get { return userId_; }
  }
  
  public const int PasswordFieldNumber = 2;
  private bool hasPassword;
  private string password_ = "";
  public bool HasPassword {
    get { return hasPassword; }
  }
  public string Password {
    get { return password_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSLoginFieldNames;
    if (hasUserId) {
      output.WriteString(1, field_names[1], UserId);
    }
    if (hasPassword) {
      output.WriteString(2, field_names[0], Password);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUserId) {
      size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
    }
    if (hasPassword) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Password);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSLogin ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogin ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogin ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSLogin ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSLogin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSLogin ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSLogin MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSLogin prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSLogin, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSLogin cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSLogin result;
    
    private CSLogin PrepareBuilder() {
      if (resultIsReadOnly) {
        CSLogin original = result;
        result = new CSLogin();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSLogin MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSLogin.Descriptor; }
    }
    
    public override CSLogin DefaultInstanceForType {
      get { return global::CSLogin.DefaultInstance; }
    }
    
    public override CSLogin BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSLogin) {
        return MergeFrom((CSLogin) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSLogin other) {
      if (other == global::CSLogin.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUserId) {
        UserId = other.UserId;
      }
      if (other.HasPassword) {
        Password = other.Password;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSLoginFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSLoginFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUserId = input.ReadString(ref result.userId_);
            break;
          }
          case 18: {
            result.hasPassword = input.ReadString(ref result.password_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUserId {
      get { return result.hasUserId; }
    }
    public string UserId {
      get { return result.UserId; }
      set { SetUserId(value); }
    }
    public Builder SetUserId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserId = true;
      result.userId_ = value;
      return this;
    }
    public Builder ClearUserId() {
      PrepareBuilder();
      result.hasUserId = false;
      result.userId_ = "";
      return this;
    }
    
    public bool HasPassword {
      get { return result.hasPassword; }
    }
    public string Password {
      get { return result.Password; }
      set { SetPassword(value); }
    }
    public Builder SetPassword(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPassword = true;
      result.password_ = value;
      return this;
    }
    public Builder ClearPassword() {
      PrepareBuilder();
      result.hasPassword = false;
      result.password_ = "";
      return this;
    }
  }
  static CSLogin() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCLogin : pb::GeneratedMessage<SCLogin, SCLogin.Builder> {
  private SCLogin() { }
  private static readonly SCLogin defaultInstance = new SCLogin().MakeReadOnly();
  private static readonly string[] _sCLoginFieldNames = new string[] { "guid", "sessionId" };
  private static readonly uint[] _sCLoginFieldTags = new uint[] { 16, 8 };
  public static SCLogin DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCLogin DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCLogin ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCLogin__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCLogin, SCLogin.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCLogin__FieldAccessorTable; }
  }
  
  public const int SessionIdFieldNumber = 1;
  private bool hasSessionId;
  private int sessionId_;
  public bool HasSessionId {
    get { return hasSessionId; }
  }
  public int SessionId {
    get { return sessionId_; }
  }
  
  public const int GuidFieldNumber = 2;
  private bool hasGuid;
  private int guid_;
  public bool HasGuid {
    get { return hasGuid; }
  }
  public int Guid {
    get { return guid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasSessionId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCLoginFieldNames;
    if (hasSessionId) {
      output.WriteInt32(1, field_names[1], SessionId);
    }
    if (hasGuid) {
      output.WriteInt32(2, field_names[0], Guid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSessionId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, SessionId);
    }
    if (hasGuid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Guid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCLogin ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogin ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogin ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCLogin ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCLogin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCLogin ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCLogin MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCLogin prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCLogin, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCLogin cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCLogin result;
    
    private SCLogin PrepareBuilder() {
      if (resultIsReadOnly) {
        SCLogin original = result;
        result = new SCLogin();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCLogin MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCLogin.Descriptor; }
    }
    
    public override SCLogin DefaultInstanceForType {
      get { return global::SCLogin.DefaultInstance; }
    }
    
    public override SCLogin BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCLogin) {
        return MergeFrom((SCLogin) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCLogin other) {
      if (other == global::SCLogin.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSessionId) {
        SessionId = other.SessionId;
      }
      if (other.HasGuid) {
        Guid = other.Guid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCLoginFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCLoginFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSessionId = input.ReadInt32(ref result.sessionId_);
            break;
          }
          case 16: {
            result.hasGuid = input.ReadInt32(ref result.guid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSessionId {
      get { return result.hasSessionId; }
    }
    public int SessionId {
      get { return result.SessionId; }
      set { SetSessionId(value); }
    }
    public Builder SetSessionId(int value) {
      PrepareBuilder();
      result.hasSessionId = true;
      result.sessionId_ = value;
      return this;
    }
    public Builder ClearSessionId() {
      PrepareBuilder();
      result.hasSessionId = false;
      result.sessionId_ = 0;
      return this;
    }
    
    public bool HasGuid {
      get { return result.hasGuid; }
    }
    public int Guid {
      get { return result.Guid; }
      set { SetGuid(value); }
    }
    public Builder SetGuid(int value) {
      PrepareBuilder();
      result.hasGuid = true;
      result.guid_ = value;
      return this;
    }
    public Builder ClearGuid() {
      PrepareBuilder();
      result.hasGuid = false;
      result.guid_ = 0;
      return this;
    }
  }
  static SCLogin() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCAccountInfo : pb::GeneratedMessage<SCAccountInfo, SCAccountInfo.Builder> {
  private SCAccountInfo() { }
  private static readonly SCAccountInfo defaultInstance = new SCAccountInfo().MakeReadOnly();
  private static readonly string[] _sCAccountInfoFieldNames = new string[] { "account", "role" };
  private static readonly uint[] _sCAccountInfoFieldTags = new uint[] { 10, 18 };
  public static SCAccountInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCAccountInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCAccountInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCAccountInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCAccountInfo, SCAccountInfo.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCAccountInfo__FieldAccessorTable; }
  }
  
  public const int AccountFieldNumber = 1;
  private bool hasAccount;
  private global::StructAccount account_;
  public bool HasAccount {
    get { return hasAccount; }
  }
  public global::StructAccount Account {
    get { return account_ ?? global::StructAccount.DefaultInstance; }
  }
  
  public const int RoleFieldNumber = 2;
  private bool hasRole;
  private global::StructRole role_;
  public bool HasRole {
    get { return hasRole; }
  }
  public global::StructRole Role {
    get { return role_ ?? global::StructRole.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAccount) return false;
      if (!hasRole) return false;
      if (!Account.IsInitialized) return false;
      if (!Role.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCAccountInfoFieldNames;
    if (hasAccount) {
      output.WriteMessage(1, field_names[0], Account);
    }
    if (hasRole) {
      output.WriteMessage(2, field_names[1], Role);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAccount) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Account);
    }
    if (hasRole) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Role);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCAccountInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCAccountInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCAccountInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCAccountInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCAccountInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCAccountInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCAccountInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCAccountInfo result;
    
    private SCAccountInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        SCAccountInfo original = result;
        result = new SCAccountInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCAccountInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCAccountInfo.Descriptor; }
    }
    
    public override SCAccountInfo DefaultInstanceForType {
      get { return global::SCAccountInfo.DefaultInstance; }
    }
    
    public override SCAccountInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCAccountInfo) {
        return MergeFrom((SCAccountInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCAccountInfo other) {
      if (other == global::SCAccountInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccount) {
        MergeAccount(other.Account);
      }
      if (other.HasRole) {
        MergeRole(other.Role);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCAccountInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCAccountInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructAccount.Builder subBuilder = global::StructAccount.CreateBuilder();
            if (result.hasAccount) {
              subBuilder.MergeFrom(Account);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Account = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::StructRole.Builder subBuilder = global::StructRole.CreateBuilder();
            if (result.hasRole) {
              subBuilder.MergeFrom(Role);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Role = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccount {
     get { return result.hasAccount; }
    }
    public global::StructAccount Account {
      get { return result.Account; }
      set { SetAccount(value); }
    }
    public Builder SetAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = value;
      return this;
    }
    public Builder SetAccount(global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = builderForValue.Build();
      return this;
    }
    public Builder MergeAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasAccount &&
          result.account_ != global::StructAccount.DefaultInstance) {
          result.account_ = global::StructAccount.CreateBuilder(result.account_).MergeFrom(value).BuildPartial();
      } else {
        result.account_ = value;
      }
      result.hasAccount = true;
      return this;
    }
    public Builder ClearAccount() {
      PrepareBuilder();
      result.hasAccount = false;
      result.account_ = null;
      return this;
    }
    
    public bool HasRole {
     get { return result.hasRole; }
    }
    public global::StructRole Role {
      get { return result.Role; }
      set { SetRole(value); }
    }
    public Builder SetRole(global::StructRole value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRole = true;
      result.role_ = value;
      return this;
    }
    public Builder SetRole(global::StructRole.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasRole = true;
      result.role_ = builderForValue.Build();
      return this;
    }
    public Builder MergeRole(global::StructRole value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasRole &&
          result.role_ != global::StructRole.DefaultInstance) {
          result.role_ = global::StructRole.CreateBuilder(result.role_).MergeFrom(value).BuildPartial();
      } else {
        result.role_ = value;
      }
      result.hasRole = true;
      return this;
    }
    public Builder ClearRole() {
      PrepareBuilder();
      result.hasRole = false;
      result.role_ = null;
      return this;
    }
  }
  static SCAccountInfo() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCRealtimeInfo : pb::GeneratedMessage<SCRealtimeInfo, SCRealtimeInfo.Builder> {
  private SCRealtimeInfo() { }
  private static readonly SCRealtimeInfo defaultInstance = new SCRealtimeInfo().MakeReadOnly();
  private static readonly string[] _sCRealtimeInfoFieldNames = new string[] { "realtimes" };
  private static readonly uint[] _sCRealtimeInfoFieldTags = new uint[] { 10 };
  public static SCRealtimeInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCRealtimeInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCRealtimeInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCRealtimeInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCRealtimeInfo, SCRealtimeInfo.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCRealtimeInfo__FieldAccessorTable; }
  }
  
  public const int RealtimesFieldNumber = 1;
  private pbc::PopsicleList<global::StructRealTime> realtimes_ = new pbc::PopsicleList<global::StructRealTime>();
  public scg::IList<global::StructRealTime> RealtimesList {
    get { return realtimes_; }
  }
  public int RealtimesCount {
    get { return realtimes_.Count; }
  }
  public global::StructRealTime GetRealtimes(int index) {
    return realtimes_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructRealTime element in RealtimesList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCRealtimeInfoFieldNames;
    if (realtimes_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], realtimes_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructRealTime element in RealtimesList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCRealtimeInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCRealtimeInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCRealtimeInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCRealtimeInfo MakeReadOnly() {
    realtimes_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCRealtimeInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCRealtimeInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCRealtimeInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCRealtimeInfo result;
    
    private SCRealtimeInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        SCRealtimeInfo original = result;
        result = new SCRealtimeInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCRealtimeInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCRealtimeInfo.Descriptor; }
    }
    
    public override SCRealtimeInfo DefaultInstanceForType {
      get { return global::SCRealtimeInfo.DefaultInstance; }
    }
    
    public override SCRealtimeInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCRealtimeInfo) {
        return MergeFrom((SCRealtimeInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCRealtimeInfo other) {
      if (other == global::SCRealtimeInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.realtimes_.Count != 0) {
        result.realtimes_.Add(other.realtimes_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCRealtimeInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCRealtimeInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.realtimes_, global::StructRealTime.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructRealTime> RealtimesList {
      get { return PrepareBuilder().realtimes_; }
    }
    public int RealtimesCount {
      get { return result.RealtimesCount; }
    }
    public global::StructRealTime GetRealtimes(int index) {
      return result.GetRealtimes(index);
    }
    public Builder SetRealtimes(int index, global::StructRealTime value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.realtimes_[index] = value;
      return this;
    }
    public Builder SetRealtimes(int index, global::StructRealTime.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.realtimes_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRealtimes(global::StructRealTime value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.realtimes_.Add(value);
      return this;
    }
    public Builder AddRealtimes(global::StructRealTime.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.realtimes_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRealtimes(scg::IEnumerable<global::StructRealTime> values) {
      PrepareBuilder();
      result.realtimes_.Add(values);
      return this;
    }
    public Builder ClearRealtimes() {
      PrepareBuilder();
      result.realtimes_.Clear();
      return this;
    }
  }
  static SCRealtimeInfo() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCommand : pb::GeneratedMessage<CSCommand, CSCommand.Builder> {
  private CSCommand() { }
  private static readonly CSCommand defaultInstance = new CSCommand().MakeReadOnly();
  private static readonly string[] _cSCommandFieldNames = new string[] { "cmd", "params" };
  private static readonly uint[] _cSCommandFieldTags = new uint[] { 8, 18 };
  public static CSCommand DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCommand DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCommand ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSCommand__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCommand, CSCommand.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSCommand__FieldAccessorTable; }
  }
  
  public const int CmdFieldNumber = 1;
  private bool hasCmd;
  private int cmd_;
  public bool HasCmd {
    get { return hasCmd; }
  }
  public int Cmd {
    get { return cmd_; }
  }
  
  public const int ParamsFieldNumber = 2;
  private pbc::PopsicleList<string> params_ = new pbc::PopsicleList<string>();
  public scg::IList<string> ParamsList {
    get { return pbc::Lists.AsReadOnly(params_); }
  }
  public int ParamsCount {
    get { return params_.Count; }
  }
  public string GetParams(int index) {
    return params_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCmd) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCommandFieldNames;
    if (hasCmd) {
      output.WriteInt32(1, field_names[0], Cmd);
    }
    if (params_.Count > 0) {
      output.WriteStringArray(2, field_names[1], params_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCmd) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Cmd);
    }
    {
      int dataSize = 0;
      foreach (string element in ParamsList) {
        dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * params_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCommand ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCommand ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCommand ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCommand ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCommand ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCommand MakeReadOnly() {
    params_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCommand prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCommand, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCommand cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCommand result;
    
    private CSCommand PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCommand original = result;
        result = new CSCommand();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCommand MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCommand.Descriptor; }
    }
    
    public override CSCommand DefaultInstanceForType {
      get { return global::CSCommand.DefaultInstance; }
    }
    
    public override CSCommand BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCommand) {
        return MergeFrom((CSCommand) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCommand other) {
      if (other == global::CSCommand.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCmd) {
        Cmd = other.Cmd;
      }
      if (other.params_.Count != 0) {
        result.params_.Add(other.params_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCommandFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCmd = input.ReadInt32(ref result.cmd_);
            break;
          }
          case 18: {
            input.ReadStringArray(tag, field_name, result.params_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCmd {
      get { return result.hasCmd; }
    }
    public int Cmd {
      get { return result.Cmd; }
      set { SetCmd(value); }
    }
    public Builder SetCmd(int value) {
      PrepareBuilder();
      result.hasCmd = true;
      result.cmd_ = value;
      return this;
    }
    public Builder ClearCmd() {
      PrepareBuilder();
      result.hasCmd = false;
      result.cmd_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<string> ParamsList {
      get { return PrepareBuilder().params_; }
    }
    public int ParamsCount {
      get { return result.ParamsCount; }
    }
    public string GetParams(int index) {
      return result.GetParams(index);
    }
    public Builder SetParams(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.params_[index] = value;
      return this;
    }
    public Builder AddParams(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.params_.Add(value);
      return this;
    }
    public Builder AddRangeParams(scg::IEnumerable<string> values) {
      PrepareBuilder();
      result.params_.Add(values);
      return this;
    }
    public Builder ClearParams() {
      PrepareBuilder();
      result.params_.Clear();
      return this;
    }
  }
  static CSCommand() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSLog : pb::GeneratedMessage<CSLog, CSLog.Builder> {
  private CSLog() { }
  private static readonly CSLog defaultInstance = new CSLog().MakeReadOnly();
  private static readonly string[] _cSLogFieldNames = new string[] { "endtime", "keyword", "operator", "page", "starttime" };
  private static readonly uint[] _cSLogFieldTags = new uint[] { 34, 42, 18, 10, 26 };
  public static CSLog DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSLog DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSLog ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSLog__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSLog, CSLog.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSLog__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int OperatorFieldNumber = 2;
  private bool hasOperator;
  private string operator_ = "";
  public bool HasOperator {
    get { return hasOperator; }
  }
  public string Operator {
    get { return operator_; }
  }
  
  public const int StarttimeFieldNumber = 3;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int EndtimeFieldNumber = 4;
  private bool hasEndtime;
  private string endtime_ = "";
  public bool HasEndtime {
    get { return hasEndtime; }
  }
  public string Endtime {
    get { return endtime_; }
  }
  
  public const int KeywordFieldNumber = 5;
  private bool hasKeyword;
  private string keyword_ = "";
  public bool HasKeyword {
    get { return hasKeyword; }
  }
  public string Keyword {
    get { return keyword_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSLogFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[3], Page);
    }
    if (hasOperator) {
      output.WriteString(2, field_names[2], Operator);
    }
    if (hasStarttime) {
      output.WriteString(3, field_names[4], Starttime);
    }
    if (hasEndtime) {
      output.WriteString(4, field_names[0], Endtime);
    }
    if (hasKeyword) {
      output.WriteString(5, field_names[1], Keyword);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasOperator) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Operator);
    }
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Starttime);
    }
    if (hasEndtime) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Endtime);
    }
    if (hasKeyword) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Keyword);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSLog ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLog ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLog ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLog ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLog ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLog ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSLog ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSLog ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSLog ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLog ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSLog MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSLog prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSLog, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSLog cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSLog result;
    
    private CSLog PrepareBuilder() {
      if (resultIsReadOnly) {
        CSLog original = result;
        result = new CSLog();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSLog MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSLog.Descriptor; }
    }
    
    public override CSLog DefaultInstanceForType {
      get { return global::CSLog.DefaultInstance; }
    }
    
    public override CSLog BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSLog) {
        return MergeFrom((CSLog) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSLog other) {
      if (other == global::CSLog.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasOperator) {
        Operator = other.Operator;
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasEndtime) {
        Endtime = other.Endtime;
      }
      if (other.HasKeyword) {
        Keyword = other.Keyword;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSLogFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSLogFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasOperator = input.ReadString(ref result.operator_);
            break;
          }
          case 26: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 34: {
            result.hasEndtime = input.ReadString(ref result.endtime_);
            break;
          }
          case 42: {
            result.hasKeyword = input.ReadString(ref result.keyword_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasOperator {
      get { return result.hasOperator; }
    }
    public string Operator {
      get { return result.Operator; }
      set { SetOperator(value); }
    }
    public Builder SetOperator(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOperator = true;
      result.operator_ = value;
      return this;
    }
    public Builder ClearOperator() {
      PrepareBuilder();
      result.hasOperator = false;
      result.operator_ = "";
      return this;
    }
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasEndtime {
      get { return result.hasEndtime; }
    }
    public string Endtime {
      get { return result.Endtime; }
      set { SetEndtime(value); }
    }
    public Builder SetEndtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEndtime = true;
      result.endtime_ = value;
      return this;
    }
    public Builder ClearEndtime() {
      PrepareBuilder();
      result.hasEndtime = false;
      result.endtime_ = "";
      return this;
    }
    
    public bool HasKeyword {
      get { return result.hasKeyword; }
    }
    public string Keyword {
      get { return result.Keyword; }
      set { SetKeyword(value); }
    }
    public Builder SetKeyword(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKeyword = true;
      result.keyword_ = value;
      return this;
    }
    public Builder ClearKeyword() {
      PrepareBuilder();
      result.hasKeyword = false;
      result.keyword_ = "";
      return this;
    }
  }
  static CSLog() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCLog : pb::GeneratedMessage<SCLog, SCLog.Builder> {
  private SCLog() { }
  private static readonly SCLog defaultInstance = new SCLog().MakeReadOnly();
  private static readonly string[] _sCLogFieldNames = new string[] { "logs" };
  private static readonly uint[] _sCLogFieldTags = new uint[] { 10 };
  public static SCLog DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCLog DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCLog ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCLog__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCLog, SCLog.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCLog__FieldAccessorTable; }
  }
  
  public const int LogsFieldNumber = 1;
  private pbc::PopsicleList<global::StructLog> logs_ = new pbc::PopsicleList<global::StructLog>();
  public scg::IList<global::StructLog> LogsList {
    get { return logs_; }
  }
  public int LogsCount {
    get { return logs_.Count; }
  }
  public global::StructLog GetLogs(int index) {
    return logs_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructLog element in LogsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCLogFieldNames;
    if (logs_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], logs_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructLog element in LogsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCLog ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLog ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLog ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLog ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLog ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLog ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCLog ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCLog ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCLog ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLog ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCLog MakeReadOnly() {
    logs_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCLog prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCLog, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCLog cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCLog result;
    
    private SCLog PrepareBuilder() {
      if (resultIsReadOnly) {
        SCLog original = result;
        result = new SCLog();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCLog MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCLog.Descriptor; }
    }
    
    public override SCLog DefaultInstanceForType {
      get { return global::SCLog.DefaultInstance; }
    }
    
    public override SCLog BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCLog) {
        return MergeFrom((SCLog) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCLog other) {
      if (other == global::SCLog.DefaultInstance) return this;
      PrepareBuilder();
      if (other.logs_.Count != 0) {
        result.logs_.Add(other.logs_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCLogFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCLogFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.logs_, global::StructLog.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructLog> LogsList {
      get { return PrepareBuilder().logs_; }
    }
    public int LogsCount {
      get { return result.LogsCount; }
    }
    public global::StructLog GetLogs(int index) {
      return result.GetLogs(index);
    }
    public Builder SetLogs(int index, global::StructLog value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.logs_[index] = value;
      return this;
    }
    public Builder SetLogs(int index, global::StructLog.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.logs_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddLogs(global::StructLog value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.logs_.Add(value);
      return this;
    }
    public Builder AddLogs(global::StructLog.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.logs_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeLogs(scg::IEnumerable<global::StructLog> values) {
      PrepareBuilder();
      result.logs_.Add(values);
      return this;
    }
    public Builder ClearLogs() {
      PrepareBuilder();
      result.logs_.Clear();
      return this;
    }
  }
  static SCLog() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCCallList : pb::GeneratedMessage<SCCallList, SCCallList.Builder> {
  private SCCallList() { }
  private static readonly SCCallList defaultInstance = new SCCallList().MakeReadOnly();
  private static readonly string[] _sCCallListFieldNames = new string[] { "calls" };
  private static readonly uint[] _sCCallListFieldTags = new uint[] { 10 };
  public static SCCallList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCCallList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCCallList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCCallList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCCallList, SCCallList.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCCallList__FieldAccessorTable; }
  }
  
  public const int CallsFieldNumber = 1;
  private pbc::PopsicleList<global::StructCall> calls_ = new pbc::PopsicleList<global::StructCall>();
  public scg::IList<global::StructCall> CallsList {
    get { return calls_; }
  }
  public int CallsCount {
    get { return calls_.Count; }
  }
  public global::StructCall GetCalls(int index) {
    return calls_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructCall element in CallsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCCallListFieldNames;
    if (calls_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], calls_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructCall element in CallsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCCallList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCallList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCallList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCallList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCallList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCallList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCCallList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCCallList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCCallList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCallList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCCallList MakeReadOnly() {
    calls_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCCallList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCCallList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCCallList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCCallList result;
    
    private SCCallList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCCallList original = result;
        result = new SCCallList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCCallList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCCallList.Descriptor; }
    }
    
    public override SCCallList DefaultInstanceForType {
      get { return global::SCCallList.DefaultInstance; }
    }
    
    public override SCCallList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCCallList) {
        return MergeFrom((SCCallList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCCallList other) {
      if (other == global::SCCallList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.calls_.Count != 0) {
        result.calls_.Add(other.calls_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCCallListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCCallListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.calls_, global::StructCall.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructCall> CallsList {
      get { return PrepareBuilder().calls_; }
    }
    public int CallsCount {
      get { return result.CallsCount; }
    }
    public global::StructCall GetCalls(int index) {
      return result.GetCalls(index);
    }
    public Builder SetCalls(int index, global::StructCall value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.calls_[index] = value;
      return this;
    }
    public Builder SetCalls(int index, global::StructCall.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.calls_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddCalls(global::StructCall value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.calls_.Add(value);
      return this;
    }
    public Builder AddCalls(global::StructCall.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.calls_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeCalls(scg::IEnumerable<global::StructCall> values) {
      PrepareBuilder();
      result.calls_.Add(values);
      return this;
    }
    public Builder ClearCalls() {
      PrepareBuilder();
      result.calls_.Clear();
      return this;
    }
  }
  static SCCallList() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCallProcess : pb::GeneratedMessage<CSCallProcess, CSCallProcess.Builder> {
  private CSCallProcess() { }
  private static readonly CSCallProcess defaultInstance = new CSCallProcess().MakeReadOnly();
  private static readonly string[] _cSCallProcessFieldNames = new string[] { "callid" };
  private static readonly uint[] _cSCallProcessFieldTags = new uint[] { 8 };
  public static CSCallProcess DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCallProcess DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCallProcess ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSCallProcess__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCallProcess, CSCallProcess.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSCallProcess__FieldAccessorTable; }
  }
  
  public const int CallidFieldNumber = 1;
  private bool hasCallid;
  private int callid_;
  public bool HasCallid {
    get { return hasCallid; }
  }
  public int Callid {
    get { return callid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCallid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCallProcessFieldNames;
    if (hasCallid) {
      output.WriteInt32(1, field_names[0], Callid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCallid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Callid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCallProcess ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCallProcess ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCallProcess ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCallProcess ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCallProcess ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCallProcess ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCallProcess ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCallProcess ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCallProcess ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCallProcess ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCallProcess MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCallProcess prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCallProcess, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCallProcess cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCallProcess result;
    
    private CSCallProcess PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCallProcess original = result;
        result = new CSCallProcess();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCallProcess MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCallProcess.Descriptor; }
    }
    
    public override CSCallProcess DefaultInstanceForType {
      get { return global::CSCallProcess.DefaultInstance; }
    }
    
    public override CSCallProcess BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCallProcess) {
        return MergeFrom((CSCallProcess) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCallProcess other) {
      if (other == global::CSCallProcess.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCallid) {
        Callid = other.Callid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCallProcessFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCallProcessFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCallid = input.ReadInt32(ref result.callid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCallid {
      get { return result.hasCallid; }
    }
    public int Callid {
      get { return result.Callid; }
      set { SetCallid(value); }
    }
    public Builder SetCallid(int value) {
      PrepareBuilder();
      result.hasCallid = true;
      result.callid_ = value;
      return this;
    }
    public Builder ClearCallid() {
      PrepareBuilder();
      result.hasCallid = false;
      result.callid_ = 0;
      return this;
    }
  }
  static CSCallProcess() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCRoleList : pb::GeneratedMessage<SCRoleList, SCRoleList.Builder> {
  private SCRoleList() { }
  private static readonly SCRoleList defaultInstance = new SCRoleList().MakeReadOnly();
  private static readonly string[] _sCRoleListFieldNames = new string[] { "roles" };
  private static readonly uint[] _sCRoleListFieldTags = new uint[] { 10 };
  public static SCRoleList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCRoleList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCRoleList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCRoleList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCRoleList, SCRoleList.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCRoleList__FieldAccessorTable; }
  }
  
  public const int RolesFieldNumber = 1;
  private pbc::PopsicleList<global::StructRole> roles_ = new pbc::PopsicleList<global::StructRole>();
  public scg::IList<global::StructRole> RolesList {
    get { return roles_; }
  }
  public int RolesCount {
    get { return roles_.Count; }
  }
  public global::StructRole GetRoles(int index) {
    return roles_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructRole element in RolesList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCRoleListFieldNames;
    if (roles_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], roles_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructRole element in RolesList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCRoleList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRoleList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRoleList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRoleList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRoleList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRoleList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCRoleList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCRoleList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCRoleList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRoleList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCRoleList MakeReadOnly() {
    roles_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCRoleList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCRoleList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCRoleList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCRoleList result;
    
    private SCRoleList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCRoleList original = result;
        result = new SCRoleList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCRoleList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCRoleList.Descriptor; }
    }
    
    public override SCRoleList DefaultInstanceForType {
      get { return global::SCRoleList.DefaultInstance; }
    }
    
    public override SCRoleList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCRoleList) {
        return MergeFrom((SCRoleList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCRoleList other) {
      if (other == global::SCRoleList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.roles_.Count != 0) {
        result.roles_.Add(other.roles_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCRoleListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCRoleListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.roles_, global::StructRole.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructRole> RolesList {
      get { return PrepareBuilder().roles_; }
    }
    public int RolesCount {
      get { return result.RolesCount; }
    }
    public global::StructRole GetRoles(int index) {
      return result.GetRoles(index);
    }
    public Builder SetRoles(int index, global::StructRole value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.roles_[index] = value;
      return this;
    }
    public Builder SetRoles(int index, global::StructRole.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.roles_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRoles(global::StructRole value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.roles_.Add(value);
      return this;
    }
    public Builder AddRoles(global::StructRole.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.roles_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRoles(scg::IEnumerable<global::StructRole> values) {
      PrepareBuilder();
      result.roles_.Add(values);
      return this;
    }
    public Builder ClearRoles() {
      PrepareBuilder();
      result.roles_.Clear();
      return this;
    }
  }
  static SCRoleList() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSRoleAdd : pb::GeneratedMessage<CSRoleAdd, CSRoleAdd.Builder> {
  private CSRoleAdd() { }
  private static readonly CSRoleAdd defaultInstance = new CSRoleAdd().MakeReadOnly();
  private static readonly string[] _cSRoleAddFieldNames = new string[] { "name" };
  private static readonly uint[] _cSRoleAddFieldTags = new uint[] { 10 };
  public static CSRoleAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSRoleAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSRoleAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSRoleAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSRoleAdd, CSRoleAdd.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSRoleAdd__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSRoleAddFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[0], Name);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSRoleAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSRoleAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSRoleAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSRoleAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSRoleAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSRoleAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSRoleAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSRoleAdd result;
    
    private CSRoleAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSRoleAdd original = result;
        result = new CSRoleAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSRoleAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSRoleAdd.Descriptor; }
    }
    
    public override CSRoleAdd DefaultInstanceForType {
      get { return global::CSRoleAdd.DefaultInstance; }
    }
    
    public override CSRoleAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSRoleAdd) {
        return MergeFrom((CSRoleAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSRoleAdd other) {
      if (other == global::CSRoleAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSRoleAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSRoleAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
  }
  static CSRoleAdd() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCRoleAdd : pb::GeneratedMessage<SCRoleAdd, SCRoleAdd.Builder> {
  private SCRoleAdd() { }
  private static readonly SCRoleAdd defaultInstance = new SCRoleAdd().MakeReadOnly();
  private static readonly string[] _sCRoleAddFieldNames = new string[] { "role" };
  private static readonly uint[] _sCRoleAddFieldTags = new uint[] { 10 };
  public static SCRoleAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCRoleAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCRoleAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCRoleAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCRoleAdd, SCRoleAdd.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCRoleAdd__FieldAccessorTable; }
  }
  
  public const int RoleFieldNumber = 1;
  private bool hasRole;
  private global::StructRole role_;
  public bool HasRole {
    get { return hasRole; }
  }
  public global::StructRole Role {
    get { return role_ ?? global::StructRole.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRole) return false;
      if (!Role.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCRoleAddFieldNames;
    if (hasRole) {
      output.WriteMessage(1, field_names[0], Role);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRole) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Role);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCRoleAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCRoleAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCRoleAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCRoleAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCRoleAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCRoleAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCRoleAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCRoleAdd result;
    
    private SCRoleAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        SCRoleAdd original = result;
        result = new SCRoleAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCRoleAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCRoleAdd.Descriptor; }
    }
    
    public override SCRoleAdd DefaultInstanceForType {
      get { return global::SCRoleAdd.DefaultInstance; }
    }
    
    public override SCRoleAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCRoleAdd) {
        return MergeFrom((SCRoleAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCRoleAdd other) {
      if (other == global::SCRoleAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRole) {
        MergeRole(other.Role);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCRoleAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCRoleAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructRole.Builder subBuilder = global::StructRole.CreateBuilder();
            if (result.hasRole) {
              subBuilder.MergeFrom(Role);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Role = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRole {
     get { return result.hasRole; }
    }
    public global::StructRole Role {
      get { return result.Role; }
      set { SetRole(value); }
    }
    public Builder SetRole(global::StructRole value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRole = true;
      result.role_ = value;
      return this;
    }
    public Builder SetRole(global::StructRole.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasRole = true;
      result.role_ = builderForValue.Build();
      return this;
    }
    public Builder MergeRole(global::StructRole value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasRole &&
          result.role_ != global::StructRole.DefaultInstance) {
          result.role_ = global::StructRole.CreateBuilder(result.role_).MergeFrom(value).BuildPartial();
      } else {
        result.role_ = value;
      }
      result.hasRole = true;
      return this;
    }
    public Builder ClearRole() {
      PrepareBuilder();
      result.hasRole = false;
      result.role_ = null;
      return this;
    }
  }
  static SCRoleAdd() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSRoleDel : pb::GeneratedMessage<CSRoleDel, CSRoleDel.Builder> {
  private CSRoleDel() { }
  private static readonly CSRoleDel defaultInstance = new CSRoleDel().MakeReadOnly();
  private static readonly string[] _cSRoleDelFieldNames = new string[] { "roleid" };
  private static readonly uint[] _cSRoleDelFieldTags = new uint[] { 8 };
  public static CSRoleDel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSRoleDel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSRoleDel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSRoleDel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSRoleDel, CSRoleDel.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSRoleDel__FieldAccessorTable; }
  }
  
  public const int RoleidFieldNumber = 1;
  private bool hasRoleid;
  private int roleid_;
  public bool HasRoleid {
    get { return hasRoleid; }
  }
  public int Roleid {
    get { return roleid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoleid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSRoleDelFieldNames;
    if (hasRoleid) {
      output.WriteInt32(1, field_names[0], Roleid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRoleid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Roleid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSRoleDel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleDel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleDel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSRoleDel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSRoleDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSRoleDel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSRoleDel MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSRoleDel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSRoleDel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSRoleDel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSRoleDel result;
    
    private CSRoleDel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSRoleDel original = result;
        result = new CSRoleDel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSRoleDel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSRoleDel.Descriptor; }
    }
    
    public override CSRoleDel DefaultInstanceForType {
      get { return global::CSRoleDel.DefaultInstance; }
    }
    
    public override CSRoleDel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSRoleDel) {
        return MergeFrom((CSRoleDel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSRoleDel other) {
      if (other == global::CSRoleDel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoleid) {
        Roleid = other.Roleid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSRoleDelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSRoleDelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRoleid = input.ReadInt32(ref result.roleid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoleid {
      get { return result.hasRoleid; }
    }
    public int Roleid {
      get { return result.Roleid; }
      set { SetRoleid(value); }
    }
    public Builder SetRoleid(int value) {
      PrepareBuilder();
      result.hasRoleid = true;
      result.roleid_ = value;
      return this;
    }
    public Builder ClearRoleid() {
      PrepareBuilder();
      result.hasRoleid = false;
      result.roleid_ = 0;
      return this;
    }
  }
  static CSRoleDel() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSRoleUpdate : pb::GeneratedMessage<CSRoleUpdate, CSRoleUpdate.Builder> {
  private CSRoleUpdate() { }
  private static readonly CSRoleUpdate defaultInstance = new CSRoleUpdate().MakeReadOnly();
  private static readonly string[] _cSRoleUpdateFieldNames = new string[] { "name", "roleid" };
  private static readonly uint[] _cSRoleUpdateFieldTags = new uint[] { 18, 8 };
  public static CSRoleUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSRoleUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSRoleUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSRoleUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSRoleUpdate, CSRoleUpdate.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSRoleUpdate__FieldAccessorTable; }
  }
  
  public const int RoleidFieldNumber = 1;
  private bool hasRoleid;
  private int roleid_;
  public bool HasRoleid {
    get { return hasRoleid; }
  }
  public int Roleid {
    get { return roleid_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoleid) return false;
      if (!hasName) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSRoleUpdateFieldNames;
    if (hasRoleid) {
      output.WriteInt32(1, field_names[1], Roleid);
    }
    if (hasName) {
      output.WriteString(2, field_names[0], Name);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRoleid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Roleid);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Name);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSRoleUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSRoleUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSRoleUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSRoleUpdate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSRoleUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSRoleUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSRoleUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSRoleUpdate result;
    
    private CSRoleUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSRoleUpdate original = result;
        result = new CSRoleUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSRoleUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSRoleUpdate.Descriptor; }
    }
    
    public override CSRoleUpdate DefaultInstanceForType {
      get { return global::CSRoleUpdate.DefaultInstance; }
    }
    
    public override CSRoleUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSRoleUpdate) {
        return MergeFrom((CSRoleUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSRoleUpdate other) {
      if (other == global::CSRoleUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoleid) {
        Roleid = other.Roleid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSRoleUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSRoleUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRoleid = input.ReadInt32(ref result.roleid_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoleid {
      get { return result.hasRoleid; }
    }
    public int Roleid {
      get { return result.Roleid; }
      set { SetRoleid(value); }
    }
    public Builder SetRoleid(int value) {
      PrepareBuilder();
      result.hasRoleid = true;
      result.roleid_ = value;
      return this;
    }
    public Builder ClearRoleid() {
      PrepareBuilder();
      result.hasRoleid = false;
      result.roleid_ = 0;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
  }
  static CSRoleUpdate() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSRoleRights : pb::GeneratedMessage<CSRoleRights, CSRoleRights.Builder> {
  private CSRoleRights() { }
  private static readonly CSRoleRights defaultInstance = new CSRoleRights().MakeReadOnly();
  private static readonly string[] _cSRoleRightsFieldNames = new string[] { "rights", "righttype", "roleid" };
  private static readonly uint[] _cSRoleRightsFieldTags = new uint[] { 26, 16, 8 };
  public static CSRoleRights DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSRoleRights DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSRoleRights ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSRoleRights__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSRoleRights, CSRoleRights.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSRoleRights__FieldAccessorTable; }
  }
  
  public const int RoleidFieldNumber = 1;
  private bool hasRoleid;
  private int roleid_;
  public bool HasRoleid {
    get { return hasRoleid; }
  }
  public int Roleid {
    get { return roleid_; }
  }
  
  public const int RighttypeFieldNumber = 2;
  private bool hasRighttype;
  private int righttype_;
  public bool HasRighttype {
    get { return hasRighttype; }
  }
  public int Righttype {
    get { return righttype_; }
  }
  
  public const int RightsFieldNumber = 3;
  private bool hasRights;
  private string rights_ = "";
  public bool HasRights {
    get { return hasRights; }
  }
  public string Rights {
    get { return rights_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoleid) return false;
      if (!hasRighttype) return false;
      if (!hasRights) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSRoleRightsFieldNames;
    if (hasRoleid) {
      output.WriteInt32(1, field_names[2], Roleid);
    }
    if (hasRighttype) {
      output.WriteInt32(2, field_names[1], Righttype);
    }
    if (hasRights) {
      output.WriteString(3, field_names[0], Rights);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRoleid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Roleid);
    }
    if (hasRighttype) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Righttype);
    }
    if (hasRights) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Rights);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSRoleRights ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleRights ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleRights ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleRights ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleRights ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleRights ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSRoleRights ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSRoleRights ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSRoleRights ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleRights ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSRoleRights MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSRoleRights prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSRoleRights, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSRoleRights cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSRoleRights result;
    
    private CSRoleRights PrepareBuilder() {
      if (resultIsReadOnly) {
        CSRoleRights original = result;
        result = new CSRoleRights();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSRoleRights MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSRoleRights.Descriptor; }
    }
    
    public override CSRoleRights DefaultInstanceForType {
      get { return global::CSRoleRights.DefaultInstance; }
    }
    
    public override CSRoleRights BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSRoleRights) {
        return MergeFrom((CSRoleRights) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSRoleRights other) {
      if (other == global::CSRoleRights.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoleid) {
        Roleid = other.Roleid;
      }
      if (other.HasRighttype) {
        Righttype = other.Righttype;
      }
      if (other.HasRights) {
        Rights = other.Rights;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSRoleRightsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSRoleRightsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRoleid = input.ReadInt32(ref result.roleid_);
            break;
          }
          case 16: {
            result.hasRighttype = input.ReadInt32(ref result.righttype_);
            break;
          }
          case 26: {
            result.hasRights = input.ReadString(ref result.rights_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoleid {
      get { return result.hasRoleid; }
    }
    public int Roleid {
      get { return result.Roleid; }
      set { SetRoleid(value); }
    }
    public Builder SetRoleid(int value) {
      PrepareBuilder();
      result.hasRoleid = true;
      result.roleid_ = value;
      return this;
    }
    public Builder ClearRoleid() {
      PrepareBuilder();
      result.hasRoleid = false;
      result.roleid_ = 0;
      return this;
    }
    
    public bool HasRighttype {
      get { return result.hasRighttype; }
    }
    public int Righttype {
      get { return result.Righttype; }
      set { SetRighttype(value); }
    }
    public Builder SetRighttype(int value) {
      PrepareBuilder();
      result.hasRighttype = true;
      result.righttype_ = value;
      return this;
    }
    public Builder ClearRighttype() {
      PrepareBuilder();
      result.hasRighttype = false;
      result.righttype_ = 0;
      return this;
    }
    
    public bool HasRights {
      get { return result.hasRights; }
    }
    public string Rights {
      get { return result.Rights; }
      set { SetRights(value); }
    }
    public Builder SetRights(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRights = true;
      result.rights_ = value;
      return this;
    }
    public Builder ClearRights() {
      PrepareBuilder();
      result.hasRights = false;
      result.rights_ = "";
      return this;
    }
  }
  static CSRoleRights() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCAccountList : pb::GeneratedMessage<SCAccountList, SCAccountList.Builder> {
  private SCAccountList() { }
  private static readonly SCAccountList defaultInstance = new SCAccountList().MakeReadOnly();
  private static readonly string[] _sCAccountListFieldNames = new string[] { "account" };
  private static readonly uint[] _sCAccountListFieldTags = new uint[] { 10 };
  public static SCAccountList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCAccountList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCAccountList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCAccountList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCAccountList, SCAccountList.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCAccountList__FieldAccessorTable; }
  }
  
  public const int AccountFieldNumber = 1;
  private pbc::PopsicleList<global::StructAccount> account_ = new pbc::PopsicleList<global::StructAccount>();
  public scg::IList<global::StructAccount> AccountList {
    get { return account_; }
  }
  public int AccountCount {
    get { return account_.Count; }
  }
  public global::StructAccount GetAccount(int index) {
    return account_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructAccount element in AccountList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCAccountListFieldNames;
    if (account_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], account_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructAccount element in AccountList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCAccountList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAccountList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAccountList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAccountList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAccountList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAccountList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCAccountList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCAccountList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCAccountList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAccountList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCAccountList MakeReadOnly() {
    account_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCAccountList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCAccountList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCAccountList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCAccountList result;
    
    private SCAccountList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCAccountList original = result;
        result = new SCAccountList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCAccountList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCAccountList.Descriptor; }
    }
    
    public override SCAccountList DefaultInstanceForType {
      get { return global::SCAccountList.DefaultInstance; }
    }
    
    public override SCAccountList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCAccountList) {
        return MergeFrom((SCAccountList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCAccountList other) {
      if (other == global::SCAccountList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.account_.Count != 0) {
        result.account_.Add(other.account_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCAccountListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCAccountListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.account_, global::StructAccount.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructAccount> AccountList {
      get { return PrepareBuilder().account_; }
    }
    public int AccountCount {
      get { return result.AccountCount; }
    }
    public global::StructAccount GetAccount(int index) {
      return result.GetAccount(index);
    }
    public Builder SetAccount(int index, global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.account_[index] = value;
      return this;
    }
    public Builder SetAccount(int index, global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.account_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.account_.Add(value);
      return this;
    }
    public Builder AddAccount(global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.account_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeAccount(scg::IEnumerable<global::StructAccount> values) {
      PrepareBuilder();
      result.account_.Add(values);
      return this;
    }
    public Builder ClearAccount() {
      PrepareBuilder();
      result.account_.Clear();
      return this;
    }
  }
  static SCAccountList() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAccountAdd : pb::GeneratedMessage<CSAccountAdd, CSAccountAdd.Builder> {
  private CSAccountAdd() { }
  private static readonly CSAccountAdd defaultInstance = new CSAccountAdd().MakeReadOnly();
  private static readonly string[] _cSAccountAddFieldNames = new string[] { "account" };
  private static readonly uint[] _cSAccountAddFieldTags = new uint[] { 10 };
  public static CSAccountAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAccountAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAccountAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSAccountAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAccountAdd, CSAccountAdd.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSAccountAdd__FieldAccessorTable; }
  }
  
  public const int AccountFieldNumber = 1;
  private bool hasAccount;
  private global::StructAccount account_;
  public bool HasAccount {
    get { return hasAccount; }
  }
  public global::StructAccount Account {
    get { return account_ ?? global::StructAccount.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAccount) return false;
      if (!Account.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAccountAddFieldNames;
    if (hasAccount) {
      output.WriteMessage(1, field_names[0], Account);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAccount) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Account);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAccountAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAccountAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAccountAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAccountAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAccountAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAccountAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAccountAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAccountAdd result;
    
    private CSAccountAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAccountAdd original = result;
        result = new CSAccountAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAccountAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAccountAdd.Descriptor; }
    }
    
    public override CSAccountAdd DefaultInstanceForType {
      get { return global::CSAccountAdd.DefaultInstance; }
    }
    
    public override CSAccountAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAccountAdd) {
        return MergeFrom((CSAccountAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAccountAdd other) {
      if (other == global::CSAccountAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccount) {
        MergeAccount(other.Account);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAccountAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAccountAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructAccount.Builder subBuilder = global::StructAccount.CreateBuilder();
            if (result.hasAccount) {
              subBuilder.MergeFrom(Account);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Account = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccount {
     get { return result.hasAccount; }
    }
    public global::StructAccount Account {
      get { return result.Account; }
      set { SetAccount(value); }
    }
    public Builder SetAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = value;
      return this;
    }
    public Builder SetAccount(global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = builderForValue.Build();
      return this;
    }
    public Builder MergeAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasAccount &&
          result.account_ != global::StructAccount.DefaultInstance) {
          result.account_ = global::StructAccount.CreateBuilder(result.account_).MergeFrom(value).BuildPartial();
      } else {
        result.account_ = value;
      }
      result.hasAccount = true;
      return this;
    }
    public Builder ClearAccount() {
      PrepareBuilder();
      result.hasAccount = false;
      result.account_ = null;
      return this;
    }
  }
  static CSAccountAdd() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAccountDel : pb::GeneratedMessage<CSAccountDel, CSAccountDel.Builder> {
  private CSAccountDel() { }
  private static readonly CSAccountDel defaultInstance = new CSAccountDel().MakeReadOnly();
  private static readonly string[] _cSAccountDelFieldNames = new string[] { "adminid" };
  private static readonly uint[] _cSAccountDelFieldTags = new uint[] { 10 };
  public static CSAccountDel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAccountDel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAccountDel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSAccountDel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAccountDel, CSAccountDel.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSAccountDel__FieldAccessorTable; }
  }
  
  public const int AdminidFieldNumber = 1;
  private bool hasAdminid;
  private string adminid_ = "";
  public bool HasAdminid {
    get { return hasAdminid; }
  }
  public string Adminid {
    get { return adminid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAdminid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAccountDelFieldNames;
    if (hasAdminid) {
      output.WriteString(1, field_names[0], Adminid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAdminid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Adminid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAccountDel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountDel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountDel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAccountDel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAccountDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAccountDel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAccountDel MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAccountDel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAccountDel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAccountDel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAccountDel result;
    
    private CSAccountDel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAccountDel original = result;
        result = new CSAccountDel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAccountDel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAccountDel.Descriptor; }
    }
    
    public override CSAccountDel DefaultInstanceForType {
      get { return global::CSAccountDel.DefaultInstance; }
    }
    
    public override CSAccountDel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAccountDel) {
        return MergeFrom((CSAccountDel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAccountDel other) {
      if (other == global::CSAccountDel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAdminid) {
        Adminid = other.Adminid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAccountDelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAccountDelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasAdminid = input.ReadString(ref result.adminid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAdminid {
      get { return result.hasAdminid; }
    }
    public string Adminid {
      get { return result.Adminid; }
      set { SetAdminid(value); }
    }
    public Builder SetAdminid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAdminid = true;
      result.adminid_ = value;
      return this;
    }
    public Builder ClearAdminid() {
      PrepareBuilder();
      result.hasAdminid = false;
      result.adminid_ = "";
      return this;
    }
  }
  static CSAccountDel() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAccountUpdate : pb::GeneratedMessage<CSAccountUpdate, CSAccountUpdate.Builder> {
  private CSAccountUpdate() { }
  private static readonly CSAccountUpdate defaultInstance = new CSAccountUpdate().MakeReadOnly();
  private static readonly string[] _cSAccountUpdateFieldNames = new string[] { "account" };
  private static readonly uint[] _cSAccountUpdateFieldTags = new uint[] { 10 };
  public static CSAccountUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAccountUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAccountUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSAccountUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAccountUpdate, CSAccountUpdate.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSAccountUpdate__FieldAccessorTable; }
  }
  
  public const int AccountFieldNumber = 1;
  private bool hasAccount;
  private global::StructAccount account_;
  public bool HasAccount {
    get { return hasAccount; }
  }
  public global::StructAccount Account {
    get { return account_ ?? global::StructAccount.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAccount) return false;
      if (!Account.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAccountUpdateFieldNames;
    if (hasAccount) {
      output.WriteMessage(1, field_names[0], Account);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAccount) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Account);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAccountUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAccountUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAccountUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAccountUpdate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAccountUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAccountUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAccountUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAccountUpdate result;
    
    private CSAccountUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAccountUpdate original = result;
        result = new CSAccountUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAccountUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAccountUpdate.Descriptor; }
    }
    
    public override CSAccountUpdate DefaultInstanceForType {
      get { return global::CSAccountUpdate.DefaultInstance; }
    }
    
    public override CSAccountUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAccountUpdate) {
        return MergeFrom((CSAccountUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAccountUpdate other) {
      if (other == global::CSAccountUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccount) {
        MergeAccount(other.Account);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAccountUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAccountUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructAccount.Builder subBuilder = global::StructAccount.CreateBuilder();
            if (result.hasAccount) {
              subBuilder.MergeFrom(Account);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Account = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccount {
     get { return result.hasAccount; }
    }
    public global::StructAccount Account {
      get { return result.Account; }
      set { SetAccount(value); }
    }
    public Builder SetAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = value;
      return this;
    }
    public Builder SetAccount(global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = builderForValue.Build();
      return this;
    }
    public Builder MergeAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasAccount &&
          result.account_ != global::StructAccount.DefaultInstance) {
          result.account_ = global::StructAccount.CreateBuilder(result.account_).MergeFrom(value).BuildPartial();
      } else {
        result.account_ = value;
      }
      result.hasAccount = true;
      return this;
    }
    public Builder ClearAccount() {
      PrepareBuilder();
      result.hasAccount = false;
      result.account_ = null;
      return this;
    }
  }
  static CSAccountUpdate() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAccountSnsSet : pb::GeneratedMessage<CSAccountSnsSet, CSAccountSnsSet.Builder> {
  private CSAccountSnsSet() { }
  private static readonly CSAccountSnsSet defaultInstance = new CSAccountSnsSet().MakeReadOnly();
  private static readonly string[] _cSAccountSnsSetFieldNames = new string[] { "account" };
  private static readonly uint[] _cSAccountSnsSetFieldTags = new uint[] { 10 };
  public static CSAccountSnsSet DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAccountSnsSet DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAccountSnsSet ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSAccountSnsSet__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAccountSnsSet, CSAccountSnsSet.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSAccountSnsSet__FieldAccessorTable; }
  }
  
  public const int AccountFieldNumber = 1;
  private pbc::PopsicleList<global::StructAccount> account_ = new pbc::PopsicleList<global::StructAccount>();
  public scg::IList<global::StructAccount> AccountList {
    get { return account_; }
  }
  public int AccountCount {
    get { return account_.Count; }
  }
  public global::StructAccount GetAccount(int index) {
    return account_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructAccount element in AccountList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAccountSnsSetFieldNames;
    if (account_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], account_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructAccount element in AccountList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAccountSnsSet ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAccountSnsSet ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAccountSnsSet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAccountSnsSet MakeReadOnly() {
    account_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAccountSnsSet prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAccountSnsSet, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAccountSnsSet cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAccountSnsSet result;
    
    private CSAccountSnsSet PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAccountSnsSet original = result;
        result = new CSAccountSnsSet();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAccountSnsSet MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAccountSnsSet.Descriptor; }
    }
    
    public override CSAccountSnsSet DefaultInstanceForType {
      get { return global::CSAccountSnsSet.DefaultInstance; }
    }
    
    public override CSAccountSnsSet BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAccountSnsSet) {
        return MergeFrom((CSAccountSnsSet) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAccountSnsSet other) {
      if (other == global::CSAccountSnsSet.DefaultInstance) return this;
      PrepareBuilder();
      if (other.account_.Count != 0) {
        result.account_.Add(other.account_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAccountSnsSetFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAccountSnsSetFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.account_, global::StructAccount.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructAccount> AccountList {
      get { return PrepareBuilder().account_; }
    }
    public int AccountCount {
      get { return result.AccountCount; }
    }
    public global::StructAccount GetAccount(int index) {
      return result.GetAccount(index);
    }
    public Builder SetAccount(int index, global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.account_[index] = value;
      return this;
    }
    public Builder SetAccount(int index, global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.account_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.account_.Add(value);
      return this;
    }
    public Builder AddAccount(global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.account_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeAccount(scg::IEnumerable<global::StructAccount> values) {
      PrepareBuilder();
      result.account_.Add(values);
      return this;
    }
    public Builder ClearAccount() {
      PrepareBuilder();
      result.account_.Clear();
      return this;
    }
  }
  static CSAccountSnsSet() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSStaffComment : pb::GeneratedMessage<CSStaffComment, CSStaffComment.Builder> {
  private CSStaffComment() { }
  private static readonly CSStaffComment defaultInstance = new CSStaffComment().MakeReadOnly();
  private static readonly string[] _cSStaffCommentFieldNames = new string[] { "customer", "endtime", "page", "staff", "starttime", "type" };
  private static readonly uint[] _cSStaffCommentFieldTags = new uint[] { 50, 34, 10, 42, 26, 16 };
  public static CSStaffComment DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSStaffComment DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSStaffComment ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSStaffComment__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSStaffComment, CSStaffComment.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSStaffComment__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int StarttimeFieldNumber = 3;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int EndtimeFieldNumber = 4;
  private bool hasEndtime;
  private string endtime_ = "";
  public bool HasEndtime {
    get { return hasEndtime; }
  }
  public string Endtime {
    get { return endtime_; }
  }
  
  public const int StaffFieldNumber = 5;
  private bool hasStaff;
  private string staff_ = "";
  public bool HasStaff {
    get { return hasStaff; }
  }
  public string Staff {
    get { return staff_; }
  }
  
  public const int CustomerFieldNumber = 6;
  private bool hasCustomer;
  private string customer_ = "";
  public bool HasCustomer {
    get { return hasCustomer; }
  }
  public string Customer {
    get { return customer_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!hasType) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSStaffCommentFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[2], Page);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[5], Type);
    }
    if (hasStarttime) {
      output.WriteString(3, field_names[4], Starttime);
    }
    if (hasEndtime) {
      output.WriteString(4, field_names[1], Endtime);
    }
    if (hasStaff) {
      output.WriteString(5, field_names[3], Staff);
    }
    if (hasCustomer) {
      output.WriteString(6, field_names[0], Customer);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Starttime);
    }
    if (hasEndtime) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Endtime);
    }
    if (hasStaff) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Staff);
    }
    if (hasCustomer) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Customer);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSStaffComment ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSStaffComment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSStaffComment ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSStaffComment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSStaffComment ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSStaffComment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSStaffComment ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSStaffComment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSStaffComment ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSStaffComment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSStaffComment MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSStaffComment prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSStaffComment, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSStaffComment cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSStaffComment result;
    
    private CSStaffComment PrepareBuilder() {
      if (resultIsReadOnly) {
        CSStaffComment original = result;
        result = new CSStaffComment();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSStaffComment MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSStaffComment.Descriptor; }
    }
    
    public override CSStaffComment DefaultInstanceForType {
      get { return global::CSStaffComment.DefaultInstance; }
    }
    
    public override CSStaffComment BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSStaffComment) {
        return MergeFrom((CSStaffComment) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSStaffComment other) {
      if (other == global::CSStaffComment.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasEndtime) {
        Endtime = other.Endtime;
      }
      if (other.HasStaff) {
        Staff = other.Staff;
      }
      if (other.HasCustomer) {
        Customer = other.Customer;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSStaffCommentFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSStaffCommentFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 26: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 34: {
            result.hasEndtime = input.ReadString(ref result.endtime_);
            break;
          }
          case 42: {
            result.hasStaff = input.ReadString(ref result.staff_);
            break;
          }
          case 50: {
            result.hasCustomer = input.ReadString(ref result.customer_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasEndtime {
      get { return result.hasEndtime; }
    }
    public string Endtime {
      get { return result.Endtime; }
      set { SetEndtime(value); }
    }
    public Builder SetEndtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEndtime = true;
      result.endtime_ = value;
      return this;
    }
    public Builder ClearEndtime() {
      PrepareBuilder();
      result.hasEndtime = false;
      result.endtime_ = "";
      return this;
    }
    
    public bool HasStaff {
      get { return result.hasStaff; }
    }
    public string Staff {
      get { return result.Staff; }
      set { SetStaff(value); }
    }
    public Builder SetStaff(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStaff = true;
      result.staff_ = value;
      return this;
    }
    public Builder ClearStaff() {
      PrepareBuilder();
      result.hasStaff = false;
      result.staff_ = "";
      return this;
    }
    
    public bool HasCustomer {
      get { return result.hasCustomer; }
    }
    public string Customer {
      get { return result.Customer; }
      set { SetCustomer(value); }
    }
    public Builder SetCustomer(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCustomer = true;
      result.customer_ = value;
      return this;
    }
    public Builder ClearCustomer() {
      PrepareBuilder();
      result.hasCustomer = false;
      result.customer_ = "";
      return this;
    }
  }
  static CSStaffComment() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCStaffComment : pb::GeneratedMessage<SCStaffComment, SCStaffComment.Builder> {
  private SCStaffComment() { }
  private static readonly SCStaffComment defaultInstance = new SCStaffComment().MakeReadOnly();
  private static readonly string[] _sCStaffCommentFieldNames = new string[] { "comments" };
  private static readonly uint[] _sCStaffCommentFieldTags = new uint[] { 10 };
  public static SCStaffComment DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCStaffComment DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCStaffComment ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCStaffComment__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCStaffComment, SCStaffComment.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCStaffComment__FieldAccessorTable; }
  }
  
  public const int CommentsFieldNumber = 1;
  private pbc::PopsicleList<global::StructComment> comments_ = new pbc::PopsicleList<global::StructComment>();
  public scg::IList<global::StructComment> CommentsList {
    get { return comments_; }
  }
  public int CommentsCount {
    get { return comments_.Count; }
  }
  public global::StructComment GetComments(int index) {
    return comments_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructComment element in CommentsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCStaffCommentFieldNames;
    if (comments_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], comments_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructComment element in CommentsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCStaffComment ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCStaffComment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCStaffComment ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCStaffComment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCStaffComment ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCStaffComment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCStaffComment ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCStaffComment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCStaffComment ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCStaffComment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCStaffComment MakeReadOnly() {
    comments_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCStaffComment prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCStaffComment, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCStaffComment cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCStaffComment result;
    
    private SCStaffComment PrepareBuilder() {
      if (resultIsReadOnly) {
        SCStaffComment original = result;
        result = new SCStaffComment();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCStaffComment MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCStaffComment.Descriptor; }
    }
    
    public override SCStaffComment DefaultInstanceForType {
      get { return global::SCStaffComment.DefaultInstance; }
    }
    
    public override SCStaffComment BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCStaffComment) {
        return MergeFrom((SCStaffComment) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCStaffComment other) {
      if (other == global::SCStaffComment.DefaultInstance) return this;
      PrepareBuilder();
      if (other.comments_.Count != 0) {
        result.comments_.Add(other.comments_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCStaffCommentFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCStaffCommentFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.comments_, global::StructComment.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructComment> CommentsList {
      get { return PrepareBuilder().comments_; }
    }
    public int CommentsCount {
      get { return result.CommentsCount; }
    }
    public global::StructComment GetComments(int index) {
      return result.GetComments(index);
    }
    public Builder SetComments(int index, global::StructComment value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.comments_[index] = value;
      return this;
    }
    public Builder SetComments(int index, global::StructComment.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.comments_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddComments(global::StructComment value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.comments_.Add(value);
      return this;
    }
    public Builder AddComments(global::StructComment.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.comments_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeComments(scg::IEnumerable<global::StructComment> values) {
      PrepareBuilder();
      result.comments_.Add(values);
      return this;
    }
    public Builder ClearComments() {
      PrepareBuilder();
      result.comments_.Clear();
      return this;
    }
  }
  static SCStaffComment() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSStaffPerform : pb::GeneratedMessage<CSStaffPerform, CSStaffPerform.Builder> {
  private CSStaffPerform() { }
  private static readonly CSStaffPerform defaultInstance = new CSStaffPerform().MakeReadOnly();
  private static readonly string[] _cSStaffPerformFieldNames = new string[] { "month", "year" };
  private static readonly uint[] _cSStaffPerformFieldTags = new uint[] { 16, 8 };
  public static CSStaffPerform DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSStaffPerform DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSStaffPerform ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSStaffPerform__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSStaffPerform, CSStaffPerform.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSStaffPerform__FieldAccessorTable; }
  }
  
  public const int YearFieldNumber = 1;
  private bool hasYear;
  private int year_;
  public bool HasYear {
    get { return hasYear; }
  }
  public int Year {
    get { return year_; }
  }
  
  public const int MonthFieldNumber = 2;
  private bool hasMonth;
  private int month_;
  public bool HasMonth {
    get { return hasMonth; }
  }
  public int Month {
    get { return month_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasYear) return false;
      if (!hasMonth) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSStaffPerformFieldNames;
    if (hasYear) {
      output.WriteInt32(1, field_names[1], Year);
    }
    if (hasMonth) {
      output.WriteInt32(2, field_names[0], Month);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasYear) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Year);
    }
    if (hasMonth) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Month);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSStaffPerform ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSStaffPerform ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSStaffPerform ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSStaffPerform MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSStaffPerform prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSStaffPerform, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSStaffPerform cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSStaffPerform result;
    
    private CSStaffPerform PrepareBuilder() {
      if (resultIsReadOnly) {
        CSStaffPerform original = result;
        result = new CSStaffPerform();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSStaffPerform MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSStaffPerform.Descriptor; }
    }
    
    public override CSStaffPerform DefaultInstanceForType {
      get { return global::CSStaffPerform.DefaultInstance; }
    }
    
    public override CSStaffPerform BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSStaffPerform) {
        return MergeFrom((CSStaffPerform) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSStaffPerform other) {
      if (other == global::CSStaffPerform.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasYear) {
        Year = other.Year;
      }
      if (other.HasMonth) {
        Month = other.Month;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSStaffPerformFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSStaffPerformFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasYear = input.ReadInt32(ref result.year_);
            break;
          }
          case 16: {
            result.hasMonth = input.ReadInt32(ref result.month_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasYear {
      get { return result.hasYear; }
    }
    public int Year {
      get { return result.Year; }
      set { SetYear(value); }
    }
    public Builder SetYear(int value) {
      PrepareBuilder();
      result.hasYear = true;
      result.year_ = value;
      return this;
    }
    public Builder ClearYear() {
      PrepareBuilder();
      result.hasYear = false;
      result.year_ = 0;
      return this;
    }
    
    public bool HasMonth {
      get { return result.hasMonth; }
    }
    public int Month {
      get { return result.Month; }
      set { SetMonth(value); }
    }
    public Builder SetMonth(int value) {
      PrepareBuilder();
      result.hasMonth = true;
      result.month_ = value;
      return this;
    }
    public Builder ClearMonth() {
      PrepareBuilder();
      result.hasMonth = false;
      result.month_ = 0;
      return this;
    }
  }
  static CSStaffPerform() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCStaffPerform : pb::GeneratedMessage<SCStaffPerform, SCStaffPerform.Builder> {
  private SCStaffPerform() { }
  private static readonly SCStaffPerform defaultInstance = new SCStaffPerform().MakeReadOnly();
  private static readonly string[] _sCStaffPerformFieldNames = new string[] { "performs" };
  private static readonly uint[] _sCStaffPerformFieldTags = new uint[] { 10 };
  public static SCStaffPerform DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCStaffPerform DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCStaffPerform ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCStaffPerform__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCStaffPerform, SCStaffPerform.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCStaffPerform__FieldAccessorTable; }
  }
  
  public const int PerformsFieldNumber = 1;
  private pbc::PopsicleList<global::StructPerform> performs_ = new pbc::PopsicleList<global::StructPerform>();
  public scg::IList<global::StructPerform> PerformsList {
    get { return performs_; }
  }
  public int PerformsCount {
    get { return performs_.Count; }
  }
  public global::StructPerform GetPerforms(int index) {
    return performs_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructPerform element in PerformsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCStaffPerformFieldNames;
    if (performs_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], performs_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructPerform element in PerformsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCStaffPerform ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCStaffPerform ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCStaffPerform ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCStaffPerform MakeReadOnly() {
    performs_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCStaffPerform prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCStaffPerform, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCStaffPerform cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCStaffPerform result;
    
    private SCStaffPerform PrepareBuilder() {
      if (resultIsReadOnly) {
        SCStaffPerform original = result;
        result = new SCStaffPerform();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCStaffPerform MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCStaffPerform.Descriptor; }
    }
    
    public override SCStaffPerform DefaultInstanceForType {
      get { return global::SCStaffPerform.DefaultInstance; }
    }
    
    public override SCStaffPerform BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCStaffPerform) {
        return MergeFrom((SCStaffPerform) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCStaffPerform other) {
      if (other == global::SCStaffPerform.DefaultInstance) return this;
      PrepareBuilder();
      if (other.performs_.Count != 0) {
        result.performs_.Add(other.performs_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCStaffPerformFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCStaffPerformFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.performs_, global::StructPerform.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructPerform> PerformsList {
      get { return PrepareBuilder().performs_; }
    }
    public int PerformsCount {
      get { return result.PerformsCount; }
    }
    public global::StructPerform GetPerforms(int index) {
      return result.GetPerforms(index);
    }
    public Builder SetPerforms(int index, global::StructPerform value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.performs_[index] = value;
      return this;
    }
    public Builder SetPerforms(int index, global::StructPerform.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.performs_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPerforms(global::StructPerform value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.performs_.Add(value);
      return this;
    }
    public Builder AddPerforms(global::StructPerform.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.performs_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePerforms(scg::IEnumerable<global::StructPerform> values) {
      PrepareBuilder();
      result.performs_.Add(values);
      return this;
    }
    public Builder ClearPerforms() {
      PrepareBuilder();
      result.performs_.Clear();
      return this;
    }
  }
  static SCStaffPerform() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEarning : pb::GeneratedMessage<CSEarning, CSEarning.Builder> {
  private CSEarning() { }
  private static readonly CSEarning defaultInstance = new CSEarning().MakeReadOnly();
  private static readonly string[] _cSEarningFieldNames = new string[] { "endtime", "starttime" };
  private static readonly uint[] _cSEarningFieldTags = new uint[] { 18, 10 };
  public static CSEarning DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEarning DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEarning ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSEarning__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEarning, CSEarning.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSEarning__FieldAccessorTable; }
  }
  
  public const int StarttimeFieldNumber = 1;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int EndtimeFieldNumber = 2;
  private bool hasEndtime;
  private string endtime_ = "";
  public bool HasEndtime {
    get { return hasEndtime; }
  }
  public string Endtime {
    get { return endtime_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasStarttime) return false;
      if (!hasEndtime) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEarningFieldNames;
    if (hasStarttime) {
      output.WriteString(1, field_names[1], Starttime);
    }
    if (hasEndtime) {
      output.WriteString(2, field_names[0], Endtime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Starttime);
    }
    if (hasEndtime) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Endtime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEarning ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEarning ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEarning ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEarning ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEarning ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEarning ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEarning ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEarning ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEarning ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEarning ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEarning MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEarning prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEarning, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEarning cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEarning result;
    
    private CSEarning PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEarning original = result;
        result = new CSEarning();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEarning MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEarning.Descriptor; }
    }
    
    public override CSEarning DefaultInstanceForType {
      get { return global::CSEarning.DefaultInstance; }
    }
    
    public override CSEarning BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEarning) {
        return MergeFrom((CSEarning) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEarning other) {
      if (other == global::CSEarning.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasEndtime) {
        Endtime = other.Endtime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEarningFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEarningFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 18: {
            result.hasEndtime = input.ReadString(ref result.endtime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasEndtime {
      get { return result.hasEndtime; }
    }
    public string Endtime {
      get { return result.Endtime; }
      set { SetEndtime(value); }
    }
    public Builder SetEndtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEndtime = true;
      result.endtime_ = value;
      return this;
    }
    public Builder ClearEndtime() {
      PrepareBuilder();
      result.hasEndtime = false;
      result.endtime_ = "";
      return this;
    }
  }
  static CSEarning() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEarning : pb::GeneratedMessage<SCEarning, SCEarning.Builder> {
  private SCEarning() { }
  private static readonly SCEarning defaultInstance = new SCEarning().MakeReadOnly();
  private static readonly string[] _sCEarningFieldNames = new string[] { "earns" };
  private static readonly uint[] _sCEarningFieldTags = new uint[] { 10 };
  public static SCEarning DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEarning DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEarning ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCEarning__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEarning, SCEarning.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCEarning__FieldAccessorTable; }
  }
  
  public const int EarnsFieldNumber = 1;
  private pbc::PopsicleList<global::StructEarn> earns_ = new pbc::PopsicleList<global::StructEarn>();
  public scg::IList<global::StructEarn> EarnsList {
    get { return earns_; }
  }
  public int EarnsCount {
    get { return earns_.Count; }
  }
  public global::StructEarn GetEarns(int index) {
    return earns_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructEarn element in EarnsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEarningFieldNames;
    if (earns_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], earns_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructEarn element in EarnsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEarning ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEarning ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEarning ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEarning ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEarning ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEarning ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEarning ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEarning ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEarning ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEarning ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEarning MakeReadOnly() {
    earns_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEarning prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEarning, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEarning cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEarning result;
    
    private SCEarning PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEarning original = result;
        result = new SCEarning();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEarning MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEarning.Descriptor; }
    }
    
    public override SCEarning DefaultInstanceForType {
      get { return global::SCEarning.DefaultInstance; }
    }
    
    public override SCEarning BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEarning) {
        return MergeFrom((SCEarning) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEarning other) {
      if (other == global::SCEarning.DefaultInstance) return this;
      PrepareBuilder();
      if (other.earns_.Count != 0) {
        result.earns_.Add(other.earns_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEarningFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEarningFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.earns_, global::StructEarn.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructEarn> EarnsList {
      get { return PrepareBuilder().earns_; }
    }
    public int EarnsCount {
      get { return result.EarnsCount; }
    }
    public global::StructEarn GetEarns(int index) {
      return result.GetEarns(index);
    }
    public Builder SetEarns(int index, global::StructEarn value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.earns_[index] = value;
      return this;
    }
    public Builder SetEarns(int index, global::StructEarn.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.earns_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddEarns(global::StructEarn value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.earns_.Add(value);
      return this;
    }
    public Builder AddEarns(global::StructEarn.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.earns_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeEarns(scg::IEnumerable<global::StructEarn> values) {
      PrepareBuilder();
      result.earns_.Add(values);
      return this;
    }
    public Builder ClearEarns() {
      PrepareBuilder();
      result.earns_.Clear();
      return this;
    }
  }
  static SCEarning() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCComputerList : pb::GeneratedMessage<SCComputerList, SCComputerList.Builder> {
  private SCComputerList() { }
  private static readonly SCComputerList defaultInstance = new SCComputerList().MakeReadOnly();
  private static readonly string[] _sCComputerListFieldNames = new string[] { "computers" };
  private static readonly uint[] _sCComputerListFieldTags = new uint[] { 10 };
  public static SCComputerList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCComputerList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCComputerList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCComputerList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCComputerList, SCComputerList.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCComputerList__FieldAccessorTable; }
  }
  
  public const int ComputersFieldNumber = 1;
  private pbc::PopsicleList<global::StructComputer> computers_ = new pbc::PopsicleList<global::StructComputer>();
  public scg::IList<global::StructComputer> ComputersList {
    get { return computers_; }
  }
  public int ComputersCount {
    get { return computers_.Count; }
  }
  public global::StructComputer GetComputers(int index) {
    return computers_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructComputer element in ComputersList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCComputerListFieldNames;
    if (computers_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], computers_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructComputer element in ComputersList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCComputerList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCComputerList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCComputerList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCComputerList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCComputerList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCComputerList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCComputerList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCComputerList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCComputerList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCComputerList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCComputerList MakeReadOnly() {
    computers_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCComputerList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCComputerList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCComputerList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCComputerList result;
    
    private SCComputerList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCComputerList original = result;
        result = new SCComputerList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCComputerList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCComputerList.Descriptor; }
    }
    
    public override SCComputerList DefaultInstanceForType {
      get { return global::SCComputerList.DefaultInstance; }
    }
    
    public override SCComputerList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCComputerList) {
        return MergeFrom((SCComputerList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCComputerList other) {
      if (other == global::SCComputerList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.computers_.Count != 0) {
        result.computers_.Add(other.computers_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCComputerListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCComputerListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.computers_, global::StructComputer.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructComputer> ComputersList {
      get { return PrepareBuilder().computers_; }
    }
    public int ComputersCount {
      get { return result.ComputersCount; }
    }
    public global::StructComputer GetComputers(int index) {
      return result.GetComputers(index);
    }
    public Builder SetComputers(int index, global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.computers_[index] = value;
      return this;
    }
    public Builder SetComputers(int index, global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.computers_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddComputers(global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.computers_.Add(value);
      return this;
    }
    public Builder AddComputers(global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.computers_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeComputers(scg::IEnumerable<global::StructComputer> values) {
      PrepareBuilder();
      result.computers_.Add(values);
      return this;
    }
    public Builder ClearComputers() {
      PrepareBuilder();
      result.computers_.Clear();
      return this;
    }
  }
  static SCComputerList() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSComputerAdd : pb::GeneratedMessage<CSComputerAdd, CSComputerAdd.Builder> {
  private CSComputerAdd() { }
  private static readonly CSComputerAdd defaultInstance = new CSComputerAdd().MakeReadOnly();
  private static readonly string[] _cSComputerAddFieldNames = new string[] { "computer" };
  private static readonly uint[] _cSComputerAddFieldTags = new uint[] { 10 };
  public static CSComputerAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSComputerAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSComputerAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSComputerAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSComputerAdd, CSComputerAdd.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSComputerAdd__FieldAccessorTable; }
  }
  
  public const int ComputerFieldNumber = 1;
  private bool hasComputer;
  private global::StructComputer computer_;
  public bool HasComputer {
    get { return hasComputer; }
  }
  public global::StructComputer Computer {
    get { return computer_ ?? global::StructComputer.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasComputer) return false;
      if (!Computer.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSComputerAddFieldNames;
    if (hasComputer) {
      output.WriteMessage(1, field_names[0], Computer);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasComputer) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Computer);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSComputerAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSComputerAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSComputerAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSComputerAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSComputerAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSComputerAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSComputerAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSComputerAdd result;
    
    private CSComputerAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSComputerAdd original = result;
        result = new CSComputerAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSComputerAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSComputerAdd.Descriptor; }
    }
    
    public override CSComputerAdd DefaultInstanceForType {
      get { return global::CSComputerAdd.DefaultInstance; }
    }
    
    public override CSComputerAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSComputerAdd) {
        return MergeFrom((CSComputerAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSComputerAdd other) {
      if (other == global::CSComputerAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasComputer) {
        MergeComputer(other.Computer);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSComputerAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSComputerAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructComputer.Builder subBuilder = global::StructComputer.CreateBuilder();
            if (result.hasComputer) {
              subBuilder.MergeFrom(Computer);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Computer = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasComputer {
     get { return result.hasComputer; }
    }
    public global::StructComputer Computer {
      get { return result.Computer; }
      set { SetComputer(value); }
    }
    public Builder SetComputer(global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasComputer = true;
      result.computer_ = value;
      return this;
    }
    public Builder SetComputer(global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasComputer = true;
      result.computer_ = builderForValue.Build();
      return this;
    }
    public Builder MergeComputer(global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasComputer &&
          result.computer_ != global::StructComputer.DefaultInstance) {
          result.computer_ = global::StructComputer.CreateBuilder(result.computer_).MergeFrom(value).BuildPartial();
      } else {
        result.computer_ = value;
      }
      result.hasComputer = true;
      return this;
    }
    public Builder ClearComputer() {
      PrepareBuilder();
      result.hasComputer = false;
      result.computer_ = null;
      return this;
    }
  }
  static CSComputerAdd() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSComputerDel : pb::GeneratedMessage<CSComputerDel, CSComputerDel.Builder> {
  private CSComputerDel() { }
  private static readonly CSComputerDel defaultInstance = new CSComputerDel().MakeReadOnly();
  private static readonly string[] _cSComputerDelFieldNames = new string[] { "computerid" };
  private static readonly uint[] _cSComputerDelFieldTags = new uint[] { 8 };
  public static CSComputerDel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSComputerDel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSComputerDel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSComputerDel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSComputerDel, CSComputerDel.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSComputerDel__FieldAccessorTable; }
  }
  
  public const int ComputeridFieldNumber = 1;
  private pbc::PopsicleList<int> computerid_ = new pbc::PopsicleList<int>();
  public scg::IList<int> ComputeridList {
    get { return pbc::Lists.AsReadOnly(computerid_); }
  }
  public int ComputeridCount {
    get { return computerid_.Count; }
  }
  public int GetComputerid(int index) {
    return computerid_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSComputerDelFieldNames;
    if (computerid_.Count > 0) {
      output.WriteInt32Array(1, field_names[0], computerid_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (int element in ComputeridList) {
        dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * computerid_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSComputerDel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerDel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerDel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSComputerDel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSComputerDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSComputerDel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSComputerDel MakeReadOnly() {
    computerid_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSComputerDel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSComputerDel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSComputerDel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSComputerDel result;
    
    private CSComputerDel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSComputerDel original = result;
        result = new CSComputerDel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSComputerDel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSComputerDel.Descriptor; }
    }
    
    public override CSComputerDel DefaultInstanceForType {
      get { return global::CSComputerDel.DefaultInstance; }
    }
    
    public override CSComputerDel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSComputerDel) {
        return MergeFrom((CSComputerDel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSComputerDel other) {
      if (other == global::CSComputerDel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.computerid_.Count != 0) {
        result.computerid_.Add(other.computerid_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSComputerDelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSComputerDelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt32Array(tag, field_name, result.computerid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<int> ComputeridList {
      get { return PrepareBuilder().computerid_; }
    }
    public int ComputeridCount {
      get { return result.ComputeridCount; }
    }
    public int GetComputerid(int index) {
      return result.GetComputerid(index);
    }
    public Builder SetComputerid(int index, int value) {
      PrepareBuilder();
      result.computerid_[index] = value;
      return this;
    }
    public Builder AddComputerid(int value) {
      PrepareBuilder();
      result.computerid_.Add(value);
      return this;
    }
    public Builder AddRangeComputerid(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.computerid_.Add(values);
      return this;
    }
    public Builder ClearComputerid() {
      PrepareBuilder();
      result.computerid_.Clear();
      return this;
    }
  }
  static CSComputerDel() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSComputerUpdate : pb::GeneratedMessage<CSComputerUpdate, CSComputerUpdate.Builder> {
  private CSComputerUpdate() { }
  private static readonly CSComputerUpdate defaultInstance = new CSComputerUpdate().MakeReadOnly();
  private static readonly string[] _cSComputerUpdateFieldNames = new string[] { "computer" };
  private static readonly uint[] _cSComputerUpdateFieldTags = new uint[] { 10 };
  public static CSComputerUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSComputerUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSComputerUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSComputerUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSComputerUpdate, CSComputerUpdate.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSComputerUpdate__FieldAccessorTable; }
  }
  
  public const int ComputerFieldNumber = 1;
  private pbc::PopsicleList<global::StructComputer> computer_ = new pbc::PopsicleList<global::StructComputer>();
  public scg::IList<global::StructComputer> ComputerList {
    get { return computer_; }
  }
  public int ComputerCount {
    get { return computer_.Count; }
  }
  public global::StructComputer GetComputer(int index) {
    return computer_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructComputer element in ComputerList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSComputerUpdateFieldNames;
    if (computer_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], computer_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructComputer element in ComputerList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSComputerUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSComputerUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSComputerUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSComputerUpdate MakeReadOnly() {
    computer_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSComputerUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSComputerUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSComputerUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSComputerUpdate result;
    
    private CSComputerUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSComputerUpdate original = result;
        result = new CSComputerUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSComputerUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSComputerUpdate.Descriptor; }
    }
    
    public override CSComputerUpdate DefaultInstanceForType {
      get { return global::CSComputerUpdate.DefaultInstance; }
    }
    
    public override CSComputerUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSComputerUpdate) {
        return MergeFrom((CSComputerUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSComputerUpdate other) {
      if (other == global::CSComputerUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.computer_.Count != 0) {
        result.computer_.Add(other.computer_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSComputerUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSComputerUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.computer_, global::StructComputer.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructComputer> ComputerList {
      get { return PrepareBuilder().computer_; }
    }
    public int ComputerCount {
      get { return result.ComputerCount; }
    }
    public global::StructComputer GetComputer(int index) {
      return result.GetComputer(index);
    }
    public Builder SetComputer(int index, global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.computer_[index] = value;
      return this;
    }
    public Builder SetComputer(int index, global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.computer_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddComputer(global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.computer_.Add(value);
      return this;
    }
    public Builder AddComputer(global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.computer_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeComputer(scg::IEnumerable<global::StructComputer> values) {
      PrepareBuilder();
      result.computer_.Add(values);
      return this;
    }
    public Builder ClearComputer() {
      PrepareBuilder();
      result.computer_.Clear();
      return this;
    }
  }
  static CSComputerUpdate() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSComputerFind : pb::GeneratedMessage<CSComputerFind, CSComputerFind.Builder> {
  private CSComputerFind() { }
  private static readonly CSComputerFind defaultInstance = new CSComputerFind().MakeReadOnly();
  private static readonly string[] _cSComputerFindFieldNames = new string[] { "name" };
  private static readonly uint[] _cSComputerFindFieldTags = new uint[] { 10 };
  public static CSComputerFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSComputerFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSComputerFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSComputerFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSComputerFind, CSComputerFind.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSComputerFind__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSComputerFindFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[0], Name);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSComputerFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSComputerFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSComputerFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSComputerFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSComputerFind MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSComputerFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSComputerFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSComputerFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSComputerFind result;
    
    private CSComputerFind PrepareBuilder() {
      if (resultIsReadOnly) {
        CSComputerFind original = result;
        result = new CSComputerFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSComputerFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSComputerFind.Descriptor; }
    }
    
    public override CSComputerFind DefaultInstanceForType {
      get { return global::CSComputerFind.DefaultInstance; }
    }
    
    public override CSComputerFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSComputerFind) {
        return MergeFrom((CSComputerFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSComputerFind other) {
      if (other == global::CSComputerFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSComputerFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSComputerFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
  }
  static CSComputerFind() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCComputerFind : pb::GeneratedMessage<SCComputerFind, SCComputerFind.Builder> {
  private SCComputerFind() { }
  private static readonly SCComputerFind defaultInstance = new SCComputerFind().MakeReadOnly();
  private static readonly string[] _sCComputerFindFieldNames = new string[] { "computers" };
  private static readonly uint[] _sCComputerFindFieldTags = new uint[] { 10 };
  public static SCComputerFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCComputerFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCComputerFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCComputerFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCComputerFind, SCComputerFind.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCComputerFind__FieldAccessorTable; }
  }
  
  public const int ComputersFieldNumber = 1;
  private pbc::PopsicleList<global::StructComputer> computers_ = new pbc::PopsicleList<global::StructComputer>();
  public scg::IList<global::StructComputer> ComputersList {
    get { return computers_; }
  }
  public int ComputersCount {
    get { return computers_.Count; }
  }
  public global::StructComputer GetComputers(int index) {
    return computers_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructComputer element in ComputersList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCComputerFindFieldNames;
    if (computers_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], computers_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructComputer element in ComputersList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCComputerFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCComputerFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCComputerFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCComputerFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCComputerFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCComputerFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCComputerFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCComputerFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCComputerFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCComputerFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCComputerFind MakeReadOnly() {
    computers_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCComputerFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCComputerFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCComputerFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCComputerFind result;
    
    private SCComputerFind PrepareBuilder() {
      if (resultIsReadOnly) {
        SCComputerFind original = result;
        result = new SCComputerFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCComputerFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCComputerFind.Descriptor; }
    }
    
    public override SCComputerFind DefaultInstanceForType {
      get { return global::SCComputerFind.DefaultInstance; }
    }
    
    public override SCComputerFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCComputerFind) {
        return MergeFrom((SCComputerFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCComputerFind other) {
      if (other == global::SCComputerFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.computers_.Count != 0) {
        result.computers_.Add(other.computers_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCComputerFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCComputerFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.computers_, global::StructComputer.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructComputer> ComputersList {
      get { return PrepareBuilder().computers_; }
    }
    public int ComputersCount {
      get { return result.ComputersCount; }
    }
    public global::StructComputer GetComputers(int index) {
      return result.GetComputers(index);
    }
    public Builder SetComputers(int index, global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.computers_[index] = value;
      return this;
    }
    public Builder SetComputers(int index, global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.computers_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddComputers(global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.computers_.Add(value);
      return this;
    }
    public Builder AddComputers(global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.computers_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeComputers(scg::IEnumerable<global::StructComputer> values) {
      PrepareBuilder();
      result.computers_.Add(values);
      return this;
    }
    public Builder ClearComputers() {
      PrepareBuilder();
      result.computers_.Clear();
      return this;
    }
  }
  static SCComputerFind() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberList : pb::GeneratedMessage<CSMemberList, CSMemberList.Builder> {
  private CSMemberList() { }
  private static readonly CSMemberList defaultInstance = new CSMemberList().MakeReadOnly();
  private static readonly string[] _cSMemberListFieldNames = new string[] { "page" };
  private static readonly uint[] _cSMemberListFieldTags = new uint[] { 10 };
  public static CSMemberList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSMemberList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberList, CSMemberList.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSMemberList__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberListFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[0], Page);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberList MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberList result;
    
    private CSMemberList PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberList original = result;
        result = new CSMemberList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberList.Descriptor; }
    }
    
    public override CSMemberList DefaultInstanceForType {
      get { return global::CSMemberList.DefaultInstance; }
    }
    
    public override CSMemberList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberList) {
        return MergeFrom((CSMemberList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberList other) {
      if (other == global::CSMemberList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
  }
  static CSMemberList() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCMemberList : pb::GeneratedMessage<SCMemberList, SCMemberList.Builder> {
  private SCMemberList() { }
  private static readonly SCMemberList defaultInstance = new SCMemberList().MakeReadOnly();
  private static readonly string[] _sCMemberListFieldNames = new string[] { "members" };
  private static readonly uint[] _sCMemberListFieldTags = new uint[] { 10 };
  public static SCMemberList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCMemberList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCMemberList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCMemberList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCMemberList, SCMemberList.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCMemberList__FieldAccessorTable; }
  }
  
  public const int MembersFieldNumber = 1;
  private pbc::PopsicleList<global::StructMember> members_ = new pbc::PopsicleList<global::StructMember>();
  public scg::IList<global::StructMember> MembersList {
    get { return members_; }
  }
  public int MembersCount {
    get { return members_.Count; }
  }
  public global::StructMember GetMembers(int index) {
    return members_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructMember element in MembersList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCMemberListFieldNames;
    if (members_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], members_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructMember element in MembersList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCMemberList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCMemberList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCMemberList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCMemberList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCMemberList MakeReadOnly() {
    members_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCMemberList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCMemberList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCMemberList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCMemberList result;
    
    private SCMemberList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCMemberList original = result;
        result = new SCMemberList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCMemberList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCMemberList.Descriptor; }
    }
    
    public override SCMemberList DefaultInstanceForType {
      get { return global::SCMemberList.DefaultInstance; }
    }
    
    public override SCMemberList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCMemberList) {
        return MergeFrom((SCMemberList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCMemberList other) {
      if (other == global::SCMemberList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.members_.Count != 0) {
        result.members_.Add(other.members_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCMemberListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCMemberListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.members_, global::StructMember.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructMember> MembersList {
      get { return PrepareBuilder().members_; }
    }
    public int MembersCount {
      get { return result.MembersCount; }
    }
    public global::StructMember GetMembers(int index) {
      return result.GetMembers(index);
    }
    public Builder SetMembers(int index, global::StructMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.members_[index] = value;
      return this;
    }
    public Builder SetMembers(int index, global::StructMember.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.members_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMembers(global::StructMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.members_.Add(value);
      return this;
    }
    public Builder AddMembers(global::StructMember.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.members_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMembers(scg::IEnumerable<global::StructMember> values) {
      PrepareBuilder();
      result.members_.Add(values);
      return this;
    }
    public Builder ClearMembers() {
      PrepareBuilder();
      result.members_.Clear();
      return this;
    }
  }
  static SCMemberList() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberAdd : pb::GeneratedMessage<CSMemberAdd, CSMemberAdd.Builder> {
  private CSMemberAdd() { }
  private static readonly CSMemberAdd defaultInstance = new CSMemberAdd().MakeReadOnly();
  private static readonly string[] _cSMemberAddFieldNames = new string[] { "cardinfo", "fingerprint1", "fingerprint2", "membertype", "phone", "recharge" };
  private static readonly uint[] _cSMemberAddFieldTags = new uint[] { 10, 42, 50, 16, 34, 24 };
  public static CSMemberAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSMemberAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberAdd, CSMemberAdd.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSMemberAdd__FieldAccessorTable; }
  }
  
  public const int CardinfoFieldNumber = 1;
  private bool hasCardinfo;
  private global::StructCard cardinfo_;
  public bool HasCardinfo {
    get { return hasCardinfo; }
  }
  public global::StructCard Cardinfo {
    get { return cardinfo_ ?? global::StructCard.DefaultInstance; }
  }
  
  public const int MembertypeFieldNumber = 2;
  private bool hasMembertype;
  private int membertype_;
  public bool HasMembertype {
    get { return hasMembertype; }
  }
  public int Membertype {
    get { return membertype_; }
  }
  
  public const int RechargeFieldNumber = 3;
  private bool hasRecharge;
  private int recharge_;
  public bool HasRecharge {
    get { return hasRecharge; }
  }
  public int Recharge {
    get { return recharge_; }
  }
  
  public const int PhoneFieldNumber = 4;
  private bool hasPhone;
  private string phone_ = "";
  public bool HasPhone {
    get { return hasPhone; }
  }
  public string Phone {
    get { return phone_; }
  }
  
  public const int Fingerprint1FieldNumber = 5;
  private bool hasFingerprint1;
  private string fingerprint1_ = "";
  public bool HasFingerprint1 {
    get { return hasFingerprint1; }
  }
  public string Fingerprint1 {
    get { return fingerprint1_; }
  }
  
  public const int Fingerprint2FieldNumber = 6;
  private bool hasFingerprint2;
  private string fingerprint2_ = "";
  public bool HasFingerprint2 {
    get { return hasFingerprint2; }
  }
  public string Fingerprint2 {
    get { return fingerprint2_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardinfo) return false;
      if (!hasMembertype) return false;
      if (!hasRecharge) return false;
      if (!Cardinfo.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberAddFieldNames;
    if (hasCardinfo) {
      output.WriteMessage(1, field_names[0], Cardinfo);
    }
    if (hasMembertype) {
      output.WriteInt32(2, field_names[3], Membertype);
    }
    if (hasRecharge) {
      output.WriteInt32(3, field_names[5], Recharge);
    }
    if (hasPhone) {
      output.WriteString(4, field_names[4], Phone);
    }
    if (hasFingerprint1) {
      output.WriteString(5, field_names[1], Fingerprint1);
    }
    if (hasFingerprint2) {
      output.WriteString(6, field_names[2], Fingerprint2);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardinfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Cardinfo);
    }
    if (hasMembertype) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Membertype);
    }
    if (hasRecharge) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Recharge);
    }
    if (hasPhone) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Phone);
    }
    if (hasFingerprint1) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Fingerprint1);
    }
    if (hasFingerprint2) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Fingerprint2);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberAdd result;
    
    private CSMemberAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberAdd original = result;
        result = new CSMemberAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberAdd.Descriptor; }
    }
    
    public override CSMemberAdd DefaultInstanceForType {
      get { return global::CSMemberAdd.DefaultInstance; }
    }
    
    public override CSMemberAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberAdd) {
        return MergeFrom((CSMemberAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberAdd other) {
      if (other == global::CSMemberAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardinfo) {
        MergeCardinfo(other.Cardinfo);
      }
      if (other.HasMembertype) {
        Membertype = other.Membertype;
      }
      if (other.HasRecharge) {
        Recharge = other.Recharge;
      }
      if (other.HasPhone) {
        Phone = other.Phone;
      }
      if (other.HasFingerprint1) {
        Fingerprint1 = other.Fingerprint1;
      }
      if (other.HasFingerprint2) {
        Fingerprint2 = other.Fingerprint2;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructCard.Builder subBuilder = global::StructCard.CreateBuilder();
            if (result.hasCardinfo) {
              subBuilder.MergeFrom(Cardinfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Cardinfo = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasMembertype = input.ReadInt32(ref result.membertype_);
            break;
          }
          case 24: {
            result.hasRecharge = input.ReadInt32(ref result.recharge_);
            break;
          }
          case 34: {
            result.hasPhone = input.ReadString(ref result.phone_);
            break;
          }
          case 42: {
            result.hasFingerprint1 = input.ReadString(ref result.fingerprint1_);
            break;
          }
          case 50: {
            result.hasFingerprint2 = input.ReadString(ref result.fingerprint2_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardinfo {
     get { return result.hasCardinfo; }
    }
    public global::StructCard Cardinfo {
      get { return result.Cardinfo; }
      set { SetCardinfo(value); }
    }
    public Builder SetCardinfo(global::StructCard value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardinfo = true;
      result.cardinfo_ = value;
      return this;
    }
    public Builder SetCardinfo(global::StructCard.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCardinfo = true;
      result.cardinfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCardinfo(global::StructCard value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCardinfo &&
          result.cardinfo_ != global::StructCard.DefaultInstance) {
          result.cardinfo_ = global::StructCard.CreateBuilder(result.cardinfo_).MergeFrom(value).BuildPartial();
      } else {
        result.cardinfo_ = value;
      }
      result.hasCardinfo = true;
      return this;
    }
    public Builder ClearCardinfo() {
      PrepareBuilder();
      result.hasCardinfo = false;
      result.cardinfo_ = null;
      return this;
    }
    
    public bool HasMembertype {
      get { return result.hasMembertype; }
    }
    public int Membertype {
      get { return result.Membertype; }
      set { SetMembertype(value); }
    }
    public Builder SetMembertype(int value) {
      PrepareBuilder();
      result.hasMembertype = true;
      result.membertype_ = value;
      return this;
    }
    public Builder ClearMembertype() {
      PrepareBuilder();
      result.hasMembertype = false;
      result.membertype_ = 0;
      return this;
    }
    
    public bool HasRecharge {
      get { return result.hasRecharge; }
    }
    public int Recharge {
      get { return result.Recharge; }
      set { SetRecharge(value); }
    }
    public Builder SetRecharge(int value) {
      PrepareBuilder();
      result.hasRecharge = true;
      result.recharge_ = value;
      return this;
    }
    public Builder ClearRecharge() {
      PrepareBuilder();
      result.hasRecharge = false;
      result.recharge_ = 0;
      return this;
    }
    
    public bool HasPhone {
      get { return result.hasPhone; }
    }
    public string Phone {
      get { return result.Phone; }
      set { SetPhone(value); }
    }
    public Builder SetPhone(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPhone = true;
      result.phone_ = value;
      return this;
    }
    public Builder ClearPhone() {
      PrepareBuilder();
      result.hasPhone = false;
      result.phone_ = "";
      return this;
    }
    
    public bool HasFingerprint1 {
      get { return result.hasFingerprint1; }
    }
    public string Fingerprint1 {
      get { return result.Fingerprint1; }
      set { SetFingerprint1(value); }
    }
    public Builder SetFingerprint1(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFingerprint1 = true;
      result.fingerprint1_ = value;
      return this;
    }
    public Builder ClearFingerprint1() {
      PrepareBuilder();
      result.hasFingerprint1 = false;
      result.fingerprint1_ = "";
      return this;
    }
    
    public bool HasFingerprint2 {
      get { return result.hasFingerprint2; }
    }
    public string Fingerprint2 {
      get { return result.Fingerprint2; }
      set { SetFingerprint2(value); }
    }
    public Builder SetFingerprint2(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFingerprint2 = true;
      result.fingerprint2_ = value;
      return this;
    }
    public Builder ClearFingerprint2() {
      PrepareBuilder();
      result.hasFingerprint2 = false;
      result.fingerprint2_ = "";
      return this;
    }
  }
  static CSMemberAdd() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCMemberAdd : pb::GeneratedMessage<SCMemberAdd, SCMemberAdd.Builder> {
  private SCMemberAdd() { }
  private static readonly SCMemberAdd defaultInstance = new SCMemberAdd().MakeReadOnly();
  private static readonly string[] _sCMemberAddFieldNames = new string[] { "balance", "cardnumber", "integal", "name", "recharge", "right" };
  private static readonly uint[] _sCMemberAddFieldTags = new uint[] { 40, 18, 48, 10, 32, 26 };
  public static SCMemberAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCMemberAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCMemberAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCMemberAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCMemberAdd, SCMemberAdd.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCMemberAdd__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int RechargeFieldNumber = 4;
  private bool hasRecharge;
  private int recharge_;
  public bool HasRecharge {
    get { return hasRecharge; }
  }
  public int Recharge {
    get { return recharge_; }
  }
  
  public const int BalanceFieldNumber = 5;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int IntegalFieldNumber = 6;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasRecharge) return false;
      if (!hasBalance) return false;
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCMemberAddFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[3], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[5], Right);
    }
    if (hasRecharge) {
      output.WriteInt32(4, field_names[4], Recharge);
    }
    if (hasBalance) {
      output.WriteInt32(5, field_names[0], Balance);
    }
    if (hasIntegal) {
      output.WriteInt32(6, field_names[2], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasRecharge) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Recharge);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Balance);
    }
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCMemberAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCMemberAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCMemberAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCMemberAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCMemberAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCMemberAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCMemberAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCMemberAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCMemberAdd result;
    
    private SCMemberAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        SCMemberAdd original = result;
        result = new SCMemberAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCMemberAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCMemberAdd.Descriptor; }
    }
    
    public override SCMemberAdd DefaultInstanceForType {
      get { return global::SCMemberAdd.DefaultInstance; }
    }
    
    public override SCMemberAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCMemberAdd) {
        return MergeFrom((SCMemberAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCMemberAdd other) {
      if (other == global::SCMemberAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasRecharge) {
        Recharge = other.Recharge;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCMemberAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCMemberAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasRecharge = input.ReadInt32(ref result.recharge_);
            break;
          }
          case 40: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 48: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasRecharge {
      get { return result.hasRecharge; }
    }
    public int Recharge {
      get { return result.Recharge; }
      set { SetRecharge(value); }
    }
    public Builder SetRecharge(int value) {
      PrepareBuilder();
      result.hasRecharge = true;
      result.recharge_ = value;
      return this;
    }
    public Builder ClearRecharge() {
      PrepareBuilder();
      result.hasRecharge = false;
      result.recharge_ = 0;
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCMemberAdd() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberDel : pb::GeneratedMessage<CSMemberDel, CSMemberDel.Builder> {
  private CSMemberDel() { }
  private static readonly CSMemberDel defaultInstance = new CSMemberDel().MakeReadOnly();
  private static readonly string[] _cSMemberDelFieldNames = new string[] { "memberid" };
  private static readonly uint[] _cSMemberDelFieldTags = new uint[] { 8 };
  public static CSMemberDel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberDel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberDel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSMemberDel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberDel, CSMemberDel.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSMemberDel__FieldAccessorTable; }
  }
  
  public const int MemberidFieldNumber = 1;
  private pbc::PopsicleList<int> memberid_ = new pbc::PopsicleList<int>();
  public scg::IList<int> MemberidList {
    get { return pbc::Lists.AsReadOnly(memberid_); }
  }
  public int MemberidCount {
    get { return memberid_.Count; }
  }
  public int GetMemberid(int index) {
    return memberid_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberDelFieldNames;
    if (memberid_.Count > 0) {
      output.WriteInt32Array(1, field_names[0], memberid_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (int element in MemberidList) {
        dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * memberid_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberDel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberDel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberDel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberDel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberDel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberDel MakeReadOnly() {
    memberid_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberDel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberDel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberDel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberDel result;
    
    private CSMemberDel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberDel original = result;
        result = new CSMemberDel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberDel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberDel.Descriptor; }
    }
    
    public override CSMemberDel DefaultInstanceForType {
      get { return global::CSMemberDel.DefaultInstance; }
    }
    
    public override CSMemberDel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberDel) {
        return MergeFrom((CSMemberDel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberDel other) {
      if (other == global::CSMemberDel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.memberid_.Count != 0) {
        result.memberid_.Add(other.memberid_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberDelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberDelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt32Array(tag, field_name, result.memberid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<int> MemberidList {
      get { return PrepareBuilder().memberid_; }
    }
    public int MemberidCount {
      get { return result.MemberidCount; }
    }
    public int GetMemberid(int index) {
      return result.GetMemberid(index);
    }
    public Builder SetMemberid(int index, int value) {
      PrepareBuilder();
      result.memberid_[index] = value;
      return this;
    }
    public Builder AddMemberid(int value) {
      PrepareBuilder();
      result.memberid_.Add(value);
      return this;
    }
    public Builder AddRangeMemberid(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.memberid_.Add(values);
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.memberid_.Clear();
      return this;
    }
  }
  static CSMemberDel() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberUpdateStatus : pb::GeneratedMessage<CSMemberUpdateStatus, CSMemberUpdateStatus.Builder> {
  private CSMemberUpdateStatus() { }
  private static readonly CSMemberUpdateStatus defaultInstance = new CSMemberUpdateStatus().MakeReadOnly();
  private static readonly string[] _cSMemberUpdateStatusFieldNames = new string[] { "mask", "memberids" };
  private static readonly uint[] _cSMemberUpdateStatusFieldTags = new uint[] { 8, 16 };
  public static CSMemberUpdateStatus DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberUpdateStatus DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberUpdateStatus ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSMemberUpdateStatus__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberUpdateStatus, CSMemberUpdateStatus.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSMemberUpdateStatus__FieldAccessorTable; }
  }
  
  public const int MaskFieldNumber = 1;
  private bool hasMask;
  private int mask_;
  public bool HasMask {
    get { return hasMask; }
  }
  public int Mask {
    get { return mask_; }
  }
  
  public const int MemberidsFieldNumber = 2;
  private bool hasMemberids;
  private int memberids_;
  public bool HasMemberids {
    get { return hasMemberids; }
  }
  public int Memberids {
    get { return memberids_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMask) return false;
      if (!hasMemberids) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberUpdateStatusFieldNames;
    if (hasMask) {
      output.WriteInt32(1, field_names[0], Mask);
    }
    if (hasMemberids) {
      output.WriteInt32(2, field_names[1], Memberids);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMask) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Mask);
    }
    if (hasMemberids) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Memberids);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberUpdateStatus ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberUpdateStatus MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberUpdateStatus prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberUpdateStatus, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberUpdateStatus cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberUpdateStatus result;
    
    private CSMemberUpdateStatus PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberUpdateStatus original = result;
        result = new CSMemberUpdateStatus();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberUpdateStatus MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberUpdateStatus.Descriptor; }
    }
    
    public override CSMemberUpdateStatus DefaultInstanceForType {
      get { return global::CSMemberUpdateStatus.DefaultInstance; }
    }
    
    public override CSMemberUpdateStatus BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberUpdateStatus) {
        return MergeFrom((CSMemberUpdateStatus) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberUpdateStatus other) {
      if (other == global::CSMemberUpdateStatus.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMask) {
        Mask = other.Mask;
      }
      if (other.HasMemberids) {
        Memberids = other.Memberids;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberUpdateStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberUpdateStatusFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMask = input.ReadInt32(ref result.mask_);
            break;
          }
          case 16: {
            result.hasMemberids = input.ReadInt32(ref result.memberids_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMask {
      get { return result.hasMask; }
    }
    public int Mask {
      get { return result.Mask; }
      set { SetMask(value); }
    }
    public Builder SetMask(int value) {
      PrepareBuilder();
      result.hasMask = true;
      result.mask_ = value;
      return this;
    }
    public Builder ClearMask() {
      PrepareBuilder();
      result.hasMask = false;
      result.mask_ = 0;
      return this;
    }
    
    public bool HasMemberids {
      get { return result.hasMemberids; }
    }
    public int Memberids {
      get { return result.Memberids; }
      set { SetMemberids(value); }
    }
    public Builder SetMemberids(int value) {
      PrepareBuilder();
      result.hasMemberids = true;
      result.memberids_ = value;
      return this;
    }
    public Builder ClearMemberids() {
      PrepareBuilder();
      result.hasMemberids = false;
      result.memberids_ = 0;
      return this;
    }
  }
  static CSMemberUpdateStatus() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberFind : pb::GeneratedMessage<CSMemberFind, CSMemberFind.Builder> {
  private CSMemberFind() { }
  private static readonly CSMemberFind defaultInstance = new CSMemberFind().MakeReadOnly();
  private static readonly string[] _cSMemberFindFieldNames = new string[] { "keywords", "page", "right", "status" };
  private static readonly uint[] _cSMemberFindFieldTags = new uint[] { 34, 10, 24, 16 };
  public static CSMemberFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSMemberFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberFind, CSMemberFind.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSMemberFind__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int StatusFieldNumber = 2;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private int right_;
  public bool HasRight {
    get { return hasRight; }
  }
  public int Right {
    get { return right_; }
  }
  
  public const int KeywordsFieldNumber = 4;
  private bool hasKeywords;
  private string keywords_ = "";
  public bool HasKeywords {
    get { return hasKeywords; }
  }
  public string Keywords {
    get { return keywords_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberFindFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[1], Page);
    }
    if (hasStatus) {
      output.WriteInt32(2, field_names[3], Status);
    }
    if (hasRight) {
      output.WriteInt32(3, field_names[2], Right);
    }
    if (hasKeywords) {
      output.WriteString(4, field_names[0], Keywords);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Status);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Right);
    }
    if (hasKeywords) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Keywords);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberFind MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberFind result;
    
    private CSMemberFind PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberFind original = result;
        result = new CSMemberFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberFind.Descriptor; }
    }
    
    public override CSMemberFind DefaultInstanceForType {
      get { return global::CSMemberFind.DefaultInstance; }
    }
    
    public override CSMemberFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberFind) {
        return MergeFrom((CSMemberFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberFind other) {
      if (other == global::CSMemberFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasKeywords) {
        Keywords = other.Keywords;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 24: {
            result.hasRight = input.ReadInt32(ref result.right_);
            break;
          }
          case 34: {
            result.hasKeywords = input.ReadString(ref result.keywords_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public int Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(int value) {
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = 0;
      return this;
    }
    
    public bool HasKeywords {
      get { return result.hasKeywords; }
    }
    public string Keywords {
      get { return result.Keywords; }
      set { SetKeywords(value); }
    }
    public Builder SetKeywords(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKeywords = true;
      result.keywords_ = value;
      return this;
    }
    public Builder ClearKeywords() {
      PrepareBuilder();
      result.hasKeywords = false;
      result.keywords_ = "";
      return this;
    }
  }
  static CSMemberFind() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCMemberFind : pb::GeneratedMessage<SCMemberFind, SCMemberFind.Builder> {
  private SCMemberFind() { }
  private static readonly SCMemberFind defaultInstance = new SCMemberFind().MakeReadOnly();
  private static readonly string[] _sCMemberFindFieldNames = new string[] { "members" };
  private static readonly uint[] _sCMemberFindFieldTags = new uint[] { 10 };
  public static SCMemberFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCMemberFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCMemberFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCMemberFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCMemberFind, SCMemberFind.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCMemberFind__FieldAccessorTable; }
  }
  
  public const int MembersFieldNumber = 1;
  private pbc::PopsicleList<global::StructMember> members_ = new pbc::PopsicleList<global::StructMember>();
  public scg::IList<global::StructMember> MembersList {
    get { return members_; }
  }
  public int MembersCount {
    get { return members_.Count; }
  }
  public global::StructMember GetMembers(int index) {
    return members_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructMember element in MembersList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCMemberFindFieldNames;
    if (members_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], members_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructMember element in MembersList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCMemberFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCMemberFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCMemberFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCMemberFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCMemberFind MakeReadOnly() {
    members_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCMemberFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCMemberFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCMemberFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCMemberFind result;
    
    private SCMemberFind PrepareBuilder() {
      if (resultIsReadOnly) {
        SCMemberFind original = result;
        result = new SCMemberFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCMemberFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCMemberFind.Descriptor; }
    }
    
    public override SCMemberFind DefaultInstanceForType {
      get { return global::SCMemberFind.DefaultInstance; }
    }
    
    public override SCMemberFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCMemberFind) {
        return MergeFrom((SCMemberFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCMemberFind other) {
      if (other == global::SCMemberFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.members_.Count != 0) {
        result.members_.Add(other.members_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCMemberFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCMemberFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.members_, global::StructMember.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructMember> MembersList {
      get { return PrepareBuilder().members_; }
    }
    public int MembersCount {
      get { return result.MembersCount; }
    }
    public global::StructMember GetMembers(int index) {
      return result.GetMembers(index);
    }
    public Builder SetMembers(int index, global::StructMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.members_[index] = value;
      return this;
    }
    public Builder SetMembers(int index, global::StructMember.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.members_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMembers(global::StructMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.members_.Add(value);
      return this;
    }
    public Builder AddMembers(global::StructMember.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.members_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMembers(scg::IEnumerable<global::StructMember> values) {
      PrepareBuilder();
      result.members_.Add(values);
      return this;
    }
    public Builder ClearMembers() {
      PrepareBuilder();
      result.members_.Clear();
      return this;
    }
  }
  static SCMemberFind() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberCardInfo : pb::GeneratedMessage<CSMemberCardInfo, CSMemberCardInfo.Builder> {
  private CSMemberCardInfo() { }
  private static readonly CSMemberCardInfo defaultInstance = new CSMemberCardInfo().MakeReadOnly();
  private static readonly string[] _cSMemberCardInfoFieldNames = new string[] { "memberid" };
  private static readonly uint[] _cSMemberCardInfoFieldTags = new uint[] { 8 };
  public static CSMemberCardInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberCardInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberCardInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSMemberCardInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberCardInfo, CSMemberCardInfo.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSMemberCardInfo__FieldAccessorTable; }
  }
  
  public const int MemberidFieldNumber = 1;
  private bool hasMemberid;
  private int memberid_;
  public bool HasMemberid {
    get { return hasMemberid; }
  }
  public int Memberid {
    get { return memberid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMemberid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberCardInfoFieldNames;
    if (hasMemberid) {
      output.WriteInt32(1, field_names[0], Memberid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMemberid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Memberid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberCardInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberCardInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberCardInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberCardInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberCardInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberCardInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberCardInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberCardInfo result;
    
    private CSMemberCardInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberCardInfo original = result;
        result = new CSMemberCardInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberCardInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberCardInfo.Descriptor; }
    }
    
    public override CSMemberCardInfo DefaultInstanceForType {
      get { return global::CSMemberCardInfo.DefaultInstance; }
    }
    
    public override CSMemberCardInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberCardInfo) {
        return MergeFrom((CSMemberCardInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberCardInfo other) {
      if (other == global::CSMemberCardInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMemberid) {
        Memberid = other.Memberid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberCardInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberCardInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMemberid = input.ReadInt32(ref result.memberid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMemberid {
      get { return result.hasMemberid; }
    }
    public int Memberid {
      get { return result.Memberid; }
      set { SetMemberid(value); }
    }
    public Builder SetMemberid(int value) {
      PrepareBuilder();
      result.hasMemberid = true;
      result.memberid_ = value;
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.hasMemberid = false;
      result.memberid_ = 0;
      return this;
    }
  }
  static CSMemberCardInfo() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCMemberCardInfo : pb::GeneratedMessage<SCMemberCardInfo, SCMemberCardInfo.Builder> {
  private SCMemberCardInfo() { }
  private static readonly SCMemberCardInfo defaultInstance = new SCMemberCardInfo().MakeReadOnly();
  private static readonly string[] _sCMemberCardInfoFieldNames = new string[] { "cardinfo" };
  private static readonly uint[] _sCMemberCardInfoFieldTags = new uint[] { 10 };
  public static SCMemberCardInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCMemberCardInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCMemberCardInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCMemberCardInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCMemberCardInfo, SCMemberCardInfo.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCMemberCardInfo__FieldAccessorTable; }
  }
  
  public const int CardinfoFieldNumber = 1;
  private bool hasCardinfo;
  private global::StructCard cardinfo_;
  public bool HasCardinfo {
    get { return hasCardinfo; }
  }
  public global::StructCard Cardinfo {
    get { return cardinfo_ ?? global::StructCard.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardinfo) return false;
      if (!Cardinfo.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCMemberCardInfoFieldNames;
    if (hasCardinfo) {
      output.WriteMessage(1, field_names[0], Cardinfo);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardinfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Cardinfo);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCMemberCardInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCMemberCardInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCMemberCardInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCMemberCardInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCMemberCardInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCMemberCardInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCMemberCardInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCMemberCardInfo result;
    
    private SCMemberCardInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        SCMemberCardInfo original = result;
        result = new SCMemberCardInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCMemberCardInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCMemberCardInfo.Descriptor; }
    }
    
    public override SCMemberCardInfo DefaultInstanceForType {
      get { return global::SCMemberCardInfo.DefaultInstance; }
    }
    
    public override SCMemberCardInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCMemberCardInfo) {
        return MergeFrom((SCMemberCardInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCMemberCardInfo other) {
      if (other == global::SCMemberCardInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardinfo) {
        MergeCardinfo(other.Cardinfo);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCMemberCardInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCMemberCardInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructCard.Builder subBuilder = global::StructCard.CreateBuilder();
            if (result.hasCardinfo) {
              subBuilder.MergeFrom(Cardinfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Cardinfo = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardinfo {
     get { return result.hasCardinfo; }
    }
    public global::StructCard Cardinfo {
      get { return result.Cardinfo; }
      set { SetCardinfo(value); }
    }
    public Builder SetCardinfo(global::StructCard value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardinfo = true;
      result.cardinfo_ = value;
      return this;
    }
    public Builder SetCardinfo(global::StructCard.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCardinfo = true;
      result.cardinfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCardinfo(global::StructCard value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCardinfo &&
          result.cardinfo_ != global::StructCard.DefaultInstance) {
          result.cardinfo_ = global::StructCard.CreateBuilder(result.cardinfo_).MergeFrom(value).BuildPartial();
      } else {
        result.cardinfo_ = value;
      }
      result.hasCardinfo = true;
      return this;
    }
    public Builder ClearCardinfo() {
      PrepareBuilder();
      result.hasCardinfo = false;
      result.cardinfo_ = null;
      return this;
    }
  }
  static SCMemberCardInfo() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberConsumRecord : pb::GeneratedMessage<CSMemberConsumRecord, CSMemberConsumRecord.Builder> {
  private CSMemberConsumRecord() { }
  private static readonly CSMemberConsumRecord defaultInstance = new CSMemberConsumRecord().MakeReadOnly();
  private static readonly string[] _cSMemberConsumRecordFieldNames = new string[] { "memberid", "page" };
  private static readonly uint[] _cSMemberConsumRecordFieldTags = new uint[] { 16, 10 };
  public static CSMemberConsumRecord DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberConsumRecord DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberConsumRecord ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSMemberConsumRecord__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberConsumRecord, CSMemberConsumRecord.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSMemberConsumRecord__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int MemberidFieldNumber = 2;
  private bool hasMemberid;
  private int memberid_;
  public bool HasMemberid {
    get { return hasMemberid; }
  }
  public int Memberid {
    get { return memberid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!hasMemberid) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberConsumRecordFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[1], Page);
    }
    if (hasMemberid) {
      output.WriteInt32(2, field_names[0], Memberid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasMemberid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Memberid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberConsumRecord ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberConsumRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberConsumRecord ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberConsumRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberConsumRecord ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberConsumRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberConsumRecord ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberConsumRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberConsumRecord ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberConsumRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberConsumRecord MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberConsumRecord prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberConsumRecord, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberConsumRecord cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberConsumRecord result;
    
    private CSMemberConsumRecord PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberConsumRecord original = result;
        result = new CSMemberConsumRecord();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberConsumRecord MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberConsumRecord.Descriptor; }
    }
    
    public override CSMemberConsumRecord DefaultInstanceForType {
      get { return global::CSMemberConsumRecord.DefaultInstance; }
    }
    
    public override CSMemberConsumRecord BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberConsumRecord) {
        return MergeFrom((CSMemberConsumRecord) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberConsumRecord other) {
      if (other == global::CSMemberConsumRecord.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasMemberid) {
        Memberid = other.Memberid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberConsumRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberConsumRecordFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasMemberid = input.ReadInt32(ref result.memberid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasMemberid {
      get { return result.hasMemberid; }
    }
    public int Memberid {
      get { return result.Memberid; }
      set { SetMemberid(value); }
    }
    public Builder SetMemberid(int value) {
      PrepareBuilder();
      result.hasMemberid = true;
      result.memberid_ = value;
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.hasMemberid = false;
      result.memberid_ = 0;
      return this;
    }
  }
  static CSMemberConsumRecord() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCMemberConsumRecord : pb::GeneratedMessage<SCMemberConsumRecord, SCMemberConsumRecord.Builder> {
  private SCMemberConsumRecord() { }
  private static readonly SCMemberConsumRecord defaultInstance = new SCMemberConsumRecord().MakeReadOnly();
  private static readonly string[] _sCMemberConsumRecordFieldNames = new string[] { "consuminfo" };
  private static readonly uint[] _sCMemberConsumRecordFieldTags = new uint[] { 10 };
  public static SCMemberConsumRecord DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCMemberConsumRecord DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCMemberConsumRecord ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCMemberConsumRecord__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCMemberConsumRecord, SCMemberConsumRecord.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCMemberConsumRecord__FieldAccessorTable; }
  }
  
  public const int ConsuminfoFieldNumber = 1;
  private pbc::PopsicleList<global::StructConsum> consuminfo_ = new pbc::PopsicleList<global::StructConsum>();
  public scg::IList<global::StructConsum> ConsuminfoList {
    get { return consuminfo_; }
  }
  public int ConsuminfoCount {
    get { return consuminfo_.Count; }
  }
  public global::StructConsum GetConsuminfo(int index) {
    return consuminfo_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructConsum element in ConsuminfoList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCMemberConsumRecordFieldNames;
    if (consuminfo_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], consuminfo_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructConsum element in ConsuminfoList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCMemberConsumRecord ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberConsumRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberConsumRecord ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberConsumRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberConsumRecord ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberConsumRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCMemberConsumRecord ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCMemberConsumRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCMemberConsumRecord ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberConsumRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCMemberConsumRecord MakeReadOnly() {
    consuminfo_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCMemberConsumRecord prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCMemberConsumRecord, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCMemberConsumRecord cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCMemberConsumRecord result;
    
    private SCMemberConsumRecord PrepareBuilder() {
      if (resultIsReadOnly) {
        SCMemberConsumRecord original = result;
        result = new SCMemberConsumRecord();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCMemberConsumRecord MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCMemberConsumRecord.Descriptor; }
    }
    
    public override SCMemberConsumRecord DefaultInstanceForType {
      get { return global::SCMemberConsumRecord.DefaultInstance; }
    }
    
    public override SCMemberConsumRecord BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCMemberConsumRecord) {
        return MergeFrom((SCMemberConsumRecord) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCMemberConsumRecord other) {
      if (other == global::SCMemberConsumRecord.DefaultInstance) return this;
      PrepareBuilder();
      if (other.consuminfo_.Count != 0) {
        result.consuminfo_.Add(other.consuminfo_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCMemberConsumRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCMemberConsumRecordFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.consuminfo_, global::StructConsum.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructConsum> ConsuminfoList {
      get { return PrepareBuilder().consuminfo_; }
    }
    public int ConsuminfoCount {
      get { return result.ConsuminfoCount; }
    }
    public global::StructConsum GetConsuminfo(int index) {
      return result.GetConsuminfo(index);
    }
    public Builder SetConsuminfo(int index, global::StructConsum value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.consuminfo_[index] = value;
      return this;
    }
    public Builder SetConsuminfo(int index, global::StructConsum.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.consuminfo_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddConsuminfo(global::StructConsum value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.consuminfo_.Add(value);
      return this;
    }
    public Builder AddConsuminfo(global::StructConsum.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.consuminfo_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeConsuminfo(scg::IEnumerable<global::StructConsum> values) {
      PrepareBuilder();
      result.consuminfo_.Add(values);
      return this;
    }
    public Builder ClearConsuminfo() {
      PrepareBuilder();
      result.consuminfo_.Clear();
      return this;
    }
  }
  static SCMemberConsumRecord() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberConsumFilter : pb::GeneratedMessage<CSMemberConsumFilter, CSMemberConsumFilter.Builder> {
  private CSMemberConsumFilter() { }
  private static readonly CSMemberConsumFilter defaultInstance = new CSMemberConsumFilter().MakeReadOnly();
  private static readonly string[] _cSMemberConsumFilterFieldNames = new string[] { "begintime", "consumtype", "endtime", "memberid", "page", "paymode" };
  private static readonly uint[] _cSMemberConsumFilterFieldTags = new uint[] { 26, 40, 34, 16, 10, 48 };
  public static CSMemberConsumFilter DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberConsumFilter DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberConsumFilter ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSMemberConsumFilter__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberConsumFilter, CSMemberConsumFilter.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSMemberConsumFilter__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int MemberidFieldNumber = 2;
  private bool hasMemberid;
  private int memberid_;
  public bool HasMemberid {
    get { return hasMemberid; }
  }
  public int Memberid {
    get { return memberid_; }
  }
  
  public const int BegintimeFieldNumber = 3;
  private bool hasBegintime;
  private string begintime_ = "";
  public bool HasBegintime {
    get { return hasBegintime; }
  }
  public string Begintime {
    get { return begintime_; }
  }
  
  public const int EndtimeFieldNumber = 4;
  private bool hasEndtime;
  private string endtime_ = "";
  public bool HasEndtime {
    get { return hasEndtime; }
  }
  public string Endtime {
    get { return endtime_; }
  }
  
  public const int ConsumtypeFieldNumber = 5;
  private bool hasConsumtype;
  private int consumtype_;
  public bool HasConsumtype {
    get { return hasConsumtype; }
  }
  public int Consumtype {
    get { return consumtype_; }
  }
  
  public const int PaymodeFieldNumber = 6;
  private bool hasPaymode;
  private int paymode_;
  public bool HasPaymode {
    get { return hasPaymode; }
  }
  public int Paymode {
    get { return paymode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!hasMemberid) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberConsumFilterFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[4], Page);
    }
    if (hasMemberid) {
      output.WriteInt32(2, field_names[3], Memberid);
    }
    if (hasBegintime) {
      output.WriteString(3, field_names[0], Begintime);
    }
    if (hasEndtime) {
      output.WriteString(4, field_names[2], Endtime);
    }
    if (hasConsumtype) {
      output.WriteInt32(5, field_names[1], Consumtype);
    }
    if (hasPaymode) {
      output.WriteInt32(6, field_names[5], Paymode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasMemberid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Memberid);
    }
    if (hasBegintime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Begintime);
    }
    if (hasEndtime) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Endtime);
    }
    if (hasConsumtype) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Consumtype);
    }
    if (hasPaymode) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Paymode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberConsumFilter ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberConsumFilter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberConsumFilter ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberConsumFilter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberConsumFilter ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberConsumFilter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberConsumFilter ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberConsumFilter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberConsumFilter ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberConsumFilter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberConsumFilter MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberConsumFilter prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberConsumFilter, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberConsumFilter cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberConsumFilter result;
    
    private CSMemberConsumFilter PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberConsumFilter original = result;
        result = new CSMemberConsumFilter();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberConsumFilter MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberConsumFilter.Descriptor; }
    }
    
    public override CSMemberConsumFilter DefaultInstanceForType {
      get { return global::CSMemberConsumFilter.DefaultInstance; }
    }
    
    public override CSMemberConsumFilter BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberConsumFilter) {
        return MergeFrom((CSMemberConsumFilter) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberConsumFilter other) {
      if (other == global::CSMemberConsumFilter.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasMemberid) {
        Memberid = other.Memberid;
      }
      if (other.HasBegintime) {
        Begintime = other.Begintime;
      }
      if (other.HasEndtime) {
        Endtime = other.Endtime;
      }
      if (other.HasConsumtype) {
        Consumtype = other.Consumtype;
      }
      if (other.HasPaymode) {
        Paymode = other.Paymode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberConsumFilterFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberConsumFilterFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasMemberid = input.ReadInt32(ref result.memberid_);
            break;
          }
          case 26: {
            result.hasBegintime = input.ReadString(ref result.begintime_);
            break;
          }
          case 34: {
            result.hasEndtime = input.ReadString(ref result.endtime_);
            break;
          }
          case 40: {
            result.hasConsumtype = input.ReadInt32(ref result.consumtype_);
            break;
          }
          case 48: {
            result.hasPaymode = input.ReadInt32(ref result.paymode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasMemberid {
      get { return result.hasMemberid; }
    }
    public int Memberid {
      get { return result.Memberid; }
      set { SetMemberid(value); }
    }
    public Builder SetMemberid(int value) {
      PrepareBuilder();
      result.hasMemberid = true;
      result.memberid_ = value;
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.hasMemberid = false;
      result.memberid_ = 0;
      return this;
    }
    
    public bool HasBegintime {
      get { return result.hasBegintime; }
    }
    public string Begintime {
      get { return result.Begintime; }
      set { SetBegintime(value); }
    }
    public Builder SetBegintime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBegintime = true;
      result.begintime_ = value;
      return this;
    }
    public Builder ClearBegintime() {
      PrepareBuilder();
      result.hasBegintime = false;
      result.begintime_ = "";
      return this;
    }
    
    public bool HasEndtime {
      get { return result.hasEndtime; }
    }
    public string Endtime {
      get { return result.Endtime; }
      set { SetEndtime(value); }
    }
    public Builder SetEndtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEndtime = true;
      result.endtime_ = value;
      return this;
    }
    public Builder ClearEndtime() {
      PrepareBuilder();
      result.hasEndtime = false;
      result.endtime_ = "";
      return this;
    }
    
    public bool HasConsumtype {
      get { return result.hasConsumtype; }
    }
    public int Consumtype {
      get { return result.Consumtype; }
      set { SetConsumtype(value); }
    }
    public Builder SetConsumtype(int value) {
      PrepareBuilder();
      result.hasConsumtype = true;
      result.consumtype_ = value;
      return this;
    }
    public Builder ClearConsumtype() {
      PrepareBuilder();
      result.hasConsumtype = false;
      result.consumtype_ = 0;
      return this;
    }
    
    public bool HasPaymode {
      get { return result.hasPaymode; }
    }
    public int Paymode {
      get { return result.Paymode; }
      set { SetPaymode(value); }
    }
    public Builder SetPaymode(int value) {
      PrepareBuilder();
      result.hasPaymode = true;
      result.paymode_ = value;
      return this;
    }
    public Builder ClearPaymode() {
      PrepareBuilder();
      result.hasPaymode = false;
      result.paymode_ = 0;
      return this;
    }
  }
  static CSMemberConsumFilter() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCMemberConsumFilter : pb::GeneratedMessage<SCMemberConsumFilter, SCMemberConsumFilter.Builder> {
  private SCMemberConsumFilter() { }
  private static readonly SCMemberConsumFilter defaultInstance = new SCMemberConsumFilter().MakeReadOnly();
  private static readonly string[] _sCMemberConsumFilterFieldNames = new string[] { "consuminfo" };
  private static readonly uint[] _sCMemberConsumFilterFieldTags = new uint[] { 10 };
  public static SCMemberConsumFilter DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCMemberConsumFilter DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCMemberConsumFilter ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCMemberConsumFilter__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCMemberConsumFilter, SCMemberConsumFilter.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCMemberConsumFilter__FieldAccessorTable; }
  }
  
  public const int ConsuminfoFieldNumber = 1;
  private pbc::PopsicleList<global::StructConsum> consuminfo_ = new pbc::PopsicleList<global::StructConsum>();
  public scg::IList<global::StructConsum> ConsuminfoList {
    get { return consuminfo_; }
  }
  public int ConsuminfoCount {
    get { return consuminfo_.Count; }
  }
  public global::StructConsum GetConsuminfo(int index) {
    return consuminfo_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructConsum element in ConsuminfoList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCMemberConsumFilterFieldNames;
    if (consuminfo_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], consuminfo_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructConsum element in ConsuminfoList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCMemberConsumFilter ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberConsumFilter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberConsumFilter ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberConsumFilter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberConsumFilter ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberConsumFilter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCMemberConsumFilter ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCMemberConsumFilter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCMemberConsumFilter ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberConsumFilter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCMemberConsumFilter MakeReadOnly() {
    consuminfo_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCMemberConsumFilter prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCMemberConsumFilter, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCMemberConsumFilter cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCMemberConsumFilter result;
    
    private SCMemberConsumFilter PrepareBuilder() {
      if (resultIsReadOnly) {
        SCMemberConsumFilter original = result;
        result = new SCMemberConsumFilter();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCMemberConsumFilter MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCMemberConsumFilter.Descriptor; }
    }
    
    public override SCMemberConsumFilter DefaultInstanceForType {
      get { return global::SCMemberConsumFilter.DefaultInstance; }
    }
    
    public override SCMemberConsumFilter BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCMemberConsumFilter) {
        return MergeFrom((SCMemberConsumFilter) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCMemberConsumFilter other) {
      if (other == global::SCMemberConsumFilter.DefaultInstance) return this;
      PrepareBuilder();
      if (other.consuminfo_.Count != 0) {
        result.consuminfo_.Add(other.consuminfo_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCMemberConsumFilterFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCMemberConsumFilterFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.consuminfo_, global::StructConsum.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructConsum> ConsuminfoList {
      get { return PrepareBuilder().consuminfo_; }
    }
    public int ConsuminfoCount {
      get { return result.ConsuminfoCount; }
    }
    public global::StructConsum GetConsuminfo(int index) {
      return result.GetConsuminfo(index);
    }
    public Builder SetConsuminfo(int index, global::StructConsum value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.consuminfo_[index] = value;
      return this;
    }
    public Builder SetConsuminfo(int index, global::StructConsum.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.consuminfo_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddConsuminfo(global::StructConsum value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.consuminfo_.Add(value);
      return this;
    }
    public Builder AddConsuminfo(global::StructConsum.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.consuminfo_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeConsuminfo(scg::IEnumerable<global::StructConsum> values) {
      PrepareBuilder();
      result.consuminfo_.Add(values);
      return this;
    }
    public Builder ClearConsuminfo() {
      PrepareBuilder();
      result.consuminfo_.Clear();
      return this;
    }
  }
  static SCMemberConsumFilter() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSysBillList : pb::GeneratedMessage<SCSysBillList, SCSysBillList.Builder> {
  private SCSysBillList() { }
  private static readonly SCSysBillList defaultInstance = new SCSysBillList().MakeReadOnly();
  private static readonly string[] _sCSysBillListFieldNames = new string[] { "setting", "userArea" };
  private static readonly uint[] _sCSysBillListFieldTags = new uint[] { 18, 10 };
  public static SCSysBillList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSysBillList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSysBillList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCSysBillList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSysBillList, SCSysBillList.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCSysBillList__FieldAccessorTable; }
  }
  
  public const int UserAreaFieldNumber = 1;
  private pbc::PopsicleList<global::StructUserArea> userArea_ = new pbc::PopsicleList<global::StructUserArea>();
  public scg::IList<global::StructUserArea> UserAreaList {
    get { return userArea_; }
  }
  public int UserAreaCount {
    get { return userArea_.Count; }
  }
  public global::StructUserArea GetUserArea(int index) {
    return userArea_[index];
  }
  
  public const int SettingFieldNumber = 2;
  private pbc::PopsicleList<global::StructBillSetting> setting_ = new pbc::PopsicleList<global::StructBillSetting>();
  public scg::IList<global::StructBillSetting> SettingList {
    get { return setting_; }
  }
  public int SettingCount {
    get { return setting_.Count; }
  }
  public global::StructBillSetting GetSetting(int index) {
    return setting_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructUserArea element in UserAreaList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::StructBillSetting element in SettingList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSysBillListFieldNames;
    if (userArea_.Count > 0) {
      output.WriteMessageArray(1, field_names[1], userArea_);
    }
    if (setting_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], setting_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructUserArea element in UserAreaList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    foreach (global::StructBillSetting element in SettingList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSysBillList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysBillList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysBillList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysBillList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysBillList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysBillList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSysBillList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSysBillList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSysBillList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysBillList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSysBillList MakeReadOnly() {
    userArea_.MakeReadOnly();
    setting_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSysBillList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSysBillList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSysBillList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSysBillList result;
    
    private SCSysBillList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSysBillList original = result;
        result = new SCSysBillList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSysBillList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSysBillList.Descriptor; }
    }
    
    public override SCSysBillList DefaultInstanceForType {
      get { return global::SCSysBillList.DefaultInstance; }
    }
    
    public override SCSysBillList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSysBillList) {
        return MergeFrom((SCSysBillList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSysBillList other) {
      if (other == global::SCSysBillList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.userArea_.Count != 0) {
        result.userArea_.Add(other.userArea_);
      }
      if (other.setting_.Count != 0) {
        result.setting_.Add(other.setting_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSysBillListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSysBillListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.userArea_, global::StructUserArea.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.setting_, global::StructBillSetting.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructUserArea> UserAreaList {
      get { return PrepareBuilder().userArea_; }
    }
    public int UserAreaCount {
      get { return result.UserAreaCount; }
    }
    public global::StructUserArea GetUserArea(int index) {
      return result.GetUserArea(index);
    }
    public Builder SetUserArea(int index, global::StructUserArea value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userArea_[index] = value;
      return this;
    }
    public Builder SetUserArea(int index, global::StructUserArea.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userArea_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddUserArea(global::StructUserArea value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userArea_.Add(value);
      return this;
    }
    public Builder AddUserArea(global::StructUserArea.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userArea_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeUserArea(scg::IEnumerable<global::StructUserArea> values) {
      PrepareBuilder();
      result.userArea_.Add(values);
      return this;
    }
    public Builder ClearUserArea() {
      PrepareBuilder();
      result.userArea_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::StructBillSetting> SettingList {
      get { return PrepareBuilder().setting_; }
    }
    public int SettingCount {
      get { return result.SettingCount; }
    }
    public global::StructBillSetting GetSetting(int index) {
      return result.GetSetting(index);
    }
    public Builder SetSetting(int index, global::StructBillSetting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.setting_[index] = value;
      return this;
    }
    public Builder SetSetting(int index, global::StructBillSetting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.setting_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSetting(global::StructBillSetting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.setting_.Add(value);
      return this;
    }
    public Builder AddSetting(global::StructBillSetting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.setting_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSetting(scg::IEnumerable<global::StructBillSetting> values) {
      PrepareBuilder();
      result.setting_.Add(values);
      return this;
    }
    public Builder ClearSetting() {
      PrepareBuilder();
      result.setting_.Clear();
      return this;
    }
  }
  static SCSysBillList() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSysBillUpdate : pb::GeneratedMessage<CSSysBillUpdate, CSSysBillUpdate.Builder> {
  private CSSysBillUpdate() { }
  private static readonly CSSysBillUpdate defaultInstance = new CSSysBillUpdate().MakeReadOnly();
  private static readonly string[] _cSSysBillUpdateFieldNames = new string[] { "setting", "userArea" };
  private static readonly uint[] _cSSysBillUpdateFieldTags = new uint[] { 18, 10 };
  public static CSSysBillUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSysBillUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSysBillUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSSysBillUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSysBillUpdate, CSSysBillUpdate.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSSysBillUpdate__FieldAccessorTable; }
  }
  
  public const int UserAreaFieldNumber = 1;
  private pbc::PopsicleList<global::StructUserArea> userArea_ = new pbc::PopsicleList<global::StructUserArea>();
  public scg::IList<global::StructUserArea> UserAreaList {
    get { return userArea_; }
  }
  public int UserAreaCount {
    get { return userArea_.Count; }
  }
  public global::StructUserArea GetUserArea(int index) {
    return userArea_[index];
  }
  
  public const int SettingFieldNumber = 2;
  private pbc::PopsicleList<global::StructBillSetting> setting_ = new pbc::PopsicleList<global::StructBillSetting>();
  public scg::IList<global::StructBillSetting> SettingList {
    get { return setting_; }
  }
  public int SettingCount {
    get { return setting_.Count; }
  }
  public global::StructBillSetting GetSetting(int index) {
    return setting_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructUserArea element in UserAreaList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::StructBillSetting element in SettingList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSysBillUpdateFieldNames;
    if (userArea_.Count > 0) {
      output.WriteMessageArray(1, field_names[1], userArea_);
    }
    if (setting_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], setting_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructUserArea element in UserAreaList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    foreach (global::StructBillSetting element in SettingList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSysBillUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSysBillUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSysBillUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSysBillUpdate MakeReadOnly() {
    userArea_.MakeReadOnly();
    setting_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSysBillUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSysBillUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSysBillUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSysBillUpdate result;
    
    private CSSysBillUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSysBillUpdate original = result;
        result = new CSSysBillUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSysBillUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSysBillUpdate.Descriptor; }
    }
    
    public override CSSysBillUpdate DefaultInstanceForType {
      get { return global::CSSysBillUpdate.DefaultInstance; }
    }
    
    public override CSSysBillUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSysBillUpdate) {
        return MergeFrom((CSSysBillUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSysBillUpdate other) {
      if (other == global::CSSysBillUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.userArea_.Count != 0) {
        result.userArea_.Add(other.userArea_);
      }
      if (other.setting_.Count != 0) {
        result.setting_.Add(other.setting_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSysBillUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSysBillUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.userArea_, global::StructUserArea.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.setting_, global::StructBillSetting.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructUserArea> UserAreaList {
      get { return PrepareBuilder().userArea_; }
    }
    public int UserAreaCount {
      get { return result.UserAreaCount; }
    }
    public global::StructUserArea GetUserArea(int index) {
      return result.GetUserArea(index);
    }
    public Builder SetUserArea(int index, global::StructUserArea value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userArea_[index] = value;
      return this;
    }
    public Builder SetUserArea(int index, global::StructUserArea.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userArea_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddUserArea(global::StructUserArea value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userArea_.Add(value);
      return this;
    }
    public Builder AddUserArea(global::StructUserArea.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userArea_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeUserArea(scg::IEnumerable<global::StructUserArea> values) {
      PrepareBuilder();
      result.userArea_.Add(values);
      return this;
    }
    public Builder ClearUserArea() {
      PrepareBuilder();
      result.userArea_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::StructBillSetting> SettingList {
      get { return PrepareBuilder().setting_; }
    }
    public int SettingCount {
      get { return result.SettingCount; }
    }
    public global::StructBillSetting GetSetting(int index) {
      return result.GetSetting(index);
    }
    public Builder SetSetting(int index, global::StructBillSetting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.setting_[index] = value;
      return this;
    }
    public Builder SetSetting(int index, global::StructBillSetting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.setting_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSetting(global::StructBillSetting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.setting_.Add(value);
      return this;
    }
    public Builder AddSetting(global::StructBillSetting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.setting_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSetting(scg::IEnumerable<global::StructBillSetting> values) {
      PrepareBuilder();
      result.setting_.Add(values);
      return this;
    }
    public Builder ClearSetting() {
      PrepareBuilder();
      result.setting_.Clear();
      return this;
    }
  }
  static CSSysBillUpdate() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSysBillUpdate : pb::GeneratedMessage<SCSysBillUpdate, SCSysBillUpdate.Builder> {
  private SCSysBillUpdate() { }
  private static readonly SCSysBillUpdate defaultInstance = new SCSysBillUpdate().MakeReadOnly();
  private static readonly string[] _sCSysBillUpdateFieldNames = new string[] { "setting", "userArea" };
  private static readonly uint[] _sCSysBillUpdateFieldTags = new uint[] { 18, 10 };
  public static SCSysBillUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSysBillUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSysBillUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCSysBillUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSysBillUpdate, SCSysBillUpdate.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCSysBillUpdate__FieldAccessorTable; }
  }
  
  public const int UserAreaFieldNumber = 1;
  private pbc::PopsicleList<global::StructUserArea> userArea_ = new pbc::PopsicleList<global::StructUserArea>();
  public scg::IList<global::StructUserArea> UserAreaList {
    get { return userArea_; }
  }
  public int UserAreaCount {
    get { return userArea_.Count; }
  }
  public global::StructUserArea GetUserArea(int index) {
    return userArea_[index];
  }
  
  public const int SettingFieldNumber = 2;
  private pbc::PopsicleList<global::StructBillSetting> setting_ = new pbc::PopsicleList<global::StructBillSetting>();
  public scg::IList<global::StructBillSetting> SettingList {
    get { return setting_; }
  }
  public int SettingCount {
    get { return setting_.Count; }
  }
  public global::StructBillSetting GetSetting(int index) {
    return setting_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructUserArea element in UserAreaList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::StructBillSetting element in SettingList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSysBillUpdateFieldNames;
    if (userArea_.Count > 0) {
      output.WriteMessageArray(1, field_names[1], userArea_);
    }
    if (setting_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], setting_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructUserArea element in UserAreaList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    foreach (global::StructBillSetting element in SettingList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSysBillUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSysBillUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSysBillUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSysBillUpdate MakeReadOnly() {
    userArea_.MakeReadOnly();
    setting_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSysBillUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSysBillUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSysBillUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSysBillUpdate result;
    
    private SCSysBillUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSysBillUpdate original = result;
        result = new SCSysBillUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSysBillUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSysBillUpdate.Descriptor; }
    }
    
    public override SCSysBillUpdate DefaultInstanceForType {
      get { return global::SCSysBillUpdate.DefaultInstance; }
    }
    
    public override SCSysBillUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSysBillUpdate) {
        return MergeFrom((SCSysBillUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSysBillUpdate other) {
      if (other == global::SCSysBillUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.userArea_.Count != 0) {
        result.userArea_.Add(other.userArea_);
      }
      if (other.setting_.Count != 0) {
        result.setting_.Add(other.setting_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSysBillUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSysBillUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.userArea_, global::StructUserArea.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.setting_, global::StructBillSetting.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructUserArea> UserAreaList {
      get { return PrepareBuilder().userArea_; }
    }
    public int UserAreaCount {
      get { return result.UserAreaCount; }
    }
    public global::StructUserArea GetUserArea(int index) {
      return result.GetUserArea(index);
    }
    public Builder SetUserArea(int index, global::StructUserArea value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userArea_[index] = value;
      return this;
    }
    public Builder SetUserArea(int index, global::StructUserArea.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userArea_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddUserArea(global::StructUserArea value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userArea_.Add(value);
      return this;
    }
    public Builder AddUserArea(global::StructUserArea.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userArea_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeUserArea(scg::IEnumerable<global::StructUserArea> values) {
      PrepareBuilder();
      result.userArea_.Add(values);
      return this;
    }
    public Builder ClearUserArea() {
      PrepareBuilder();
      result.userArea_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::StructBillSetting> SettingList {
      get { return PrepareBuilder().setting_; }
    }
    public int SettingCount {
      get { return result.SettingCount; }
    }
    public global::StructBillSetting GetSetting(int index) {
      return result.GetSetting(index);
    }
    public Builder SetSetting(int index, global::StructBillSetting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.setting_[index] = value;
      return this;
    }
    public Builder SetSetting(int index, global::StructBillSetting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.setting_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSetting(global::StructBillSetting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.setting_.Add(value);
      return this;
    }
    public Builder AddSetting(global::StructBillSetting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.setting_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSetting(scg::IEnumerable<global::StructBillSetting> values) {
      PrepareBuilder();
      result.setting_.Add(values);
      return this;
    }
    public Builder ClearSetting() {
      PrepareBuilder();
      result.setting_.Clear();
      return this;
    }
  }
  static SCSysBillUpdate() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSysInto : pb::GeneratedMessage<CSSysInto, CSSysInto.Builder> {
  private CSSysInto() { }
  private static readonly CSSysInto defaultInstance = new CSSysInto().MakeReadOnly();
  private static readonly string[] _cSSysIntoFieldNames = new string[] { "parent" };
  private static readonly uint[] _cSSysIntoFieldTags = new uint[] { 10 };
  public static CSSysInto DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSysInto DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSysInto ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSSysInto__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSysInto, CSSysInto.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSSysInto__FieldAccessorTable; }
  }
  
  public const int ParentFieldNumber = 1;
  private bool hasParent;
  private string parent_ = "";
  public bool HasParent {
    get { return hasParent; }
  }
  public string Parent {
    get { return parent_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasParent) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSysIntoFieldNames;
    if (hasParent) {
      output.WriteString(1, field_names[0], Parent);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasParent) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Parent);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSysInto ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSysInto ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSysInto ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSysInto ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSysInto ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSysInto ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSysInto ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSysInto ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSysInto ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSysInto ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSysInto MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSysInto prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSysInto, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSysInto cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSysInto result;
    
    private CSSysInto PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSysInto original = result;
        result = new CSSysInto();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSysInto MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSysInto.Descriptor; }
    }
    
    public override CSSysInto DefaultInstanceForType {
      get { return global::CSSysInto.DefaultInstance; }
    }
    
    public override CSSysInto BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSysInto) {
        return MergeFrom((CSSysInto) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSysInto other) {
      if (other == global::CSSysInto.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasParent) {
        Parent = other.Parent;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSysIntoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSysIntoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasParent = input.ReadString(ref result.parent_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasParent {
      get { return result.hasParent; }
    }
    public string Parent {
      get { return result.Parent; }
      set { SetParent(value); }
    }
    public Builder SetParent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasParent = true;
      result.parent_ = value;
      return this;
    }
    public Builder ClearParent() {
      PrepareBuilder();
      result.hasParent = false;
      result.parent_ = "";
      return this;
    }
  }
  static CSSysInto() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSysInfo : pb::GeneratedMessage<SCSysInfo, SCSysInfo.Builder> {
  private SCSysInfo() { }
  private static readonly SCSysInfo defaultInstance = new SCSysInfo().MakeReadOnly();
  private static readonly string[] _sCSysInfoFieldNames = new string[] { "child", "parent" };
  private static readonly uint[] _sCSysInfoFieldTags = new uint[] { 18, 10 };
  public static SCSysInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSysInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSysInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCSysInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSysInfo, SCSysInfo.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCSysInfo__FieldAccessorTable; }
  }
  
  public const int ParentFieldNumber = 1;
  private bool hasParent;
  private string parent_ = "";
  public bool HasParent {
    get { return hasParent; }
  }
  public string Parent {
    get { return parent_; }
  }
  
  public const int ChildFieldNumber = 2;
  private pbc::PopsicleList<global::StructDictItem> child_ = new pbc::PopsicleList<global::StructDictItem>();
  public scg::IList<global::StructDictItem> ChildList {
    get { return child_; }
  }
  public int ChildCount {
    get { return child_.Count; }
  }
  public global::StructDictItem GetChild(int index) {
    return child_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasParent) return false;
      foreach (global::StructDictItem element in ChildList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSysInfoFieldNames;
    if (hasParent) {
      output.WriteString(1, field_names[1], Parent);
    }
    if (child_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], child_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasParent) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Parent);
    }
    foreach (global::StructDictItem element in ChildList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSysInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSysInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSysInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSysInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSysInfo MakeReadOnly() {
    child_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSysInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSysInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSysInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSysInfo result;
    
    private SCSysInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSysInfo original = result;
        result = new SCSysInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSysInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSysInfo.Descriptor; }
    }
    
    public override SCSysInfo DefaultInstanceForType {
      get { return global::SCSysInfo.DefaultInstance; }
    }
    
    public override SCSysInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSysInfo) {
        return MergeFrom((SCSysInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSysInfo other) {
      if (other == global::SCSysInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasParent) {
        Parent = other.Parent;
      }
      if (other.child_.Count != 0) {
        result.child_.Add(other.child_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSysInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSysInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasParent = input.ReadString(ref result.parent_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.child_, global::StructDictItem.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasParent {
      get { return result.hasParent; }
    }
    public string Parent {
      get { return result.Parent; }
      set { SetParent(value); }
    }
    public Builder SetParent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasParent = true;
      result.parent_ = value;
      return this;
    }
    public Builder ClearParent() {
      PrepareBuilder();
      result.hasParent = false;
      result.parent_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::StructDictItem> ChildList {
      get { return PrepareBuilder().child_; }
    }
    public int ChildCount {
      get { return result.ChildCount; }
    }
    public global::StructDictItem GetChild(int index) {
      return result.GetChild(index);
    }
    public Builder SetChild(int index, global::StructDictItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.child_[index] = value;
      return this;
    }
    public Builder SetChild(int index, global::StructDictItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.child_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddChild(global::StructDictItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.child_.Add(value);
      return this;
    }
    public Builder AddChild(global::StructDictItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.child_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeChild(scg::IEnumerable<global::StructDictItem> values) {
      PrepareBuilder();
      result.child_.Add(values);
      return this;
    }
    public Builder ClearChild() {
      PrepareBuilder();
      result.child_.Clear();
      return this;
    }
  }
  static SCSysInfo() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAddSysInfo : pb::GeneratedMessage<CSAddSysInfo, CSAddSysInfo.Builder> {
  private CSAddSysInfo() { }
  private static readonly CSAddSysInfo defaultInstance = new CSAddSysInfo().MakeReadOnly();
  private static readonly string[] _cSAddSysInfoFieldNames = new string[] { "child", "parent" };
  private static readonly uint[] _cSAddSysInfoFieldTags = new uint[] { 18, 10 };
  public static CSAddSysInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAddSysInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAddSysInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSAddSysInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAddSysInfo, CSAddSysInfo.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSAddSysInfo__FieldAccessorTable; }
  }
  
  public const int ParentFieldNumber = 1;
  private bool hasParent;
  private string parent_ = "";
  public bool HasParent {
    get { return hasParent; }
  }
  public string Parent {
    get { return parent_; }
  }
  
  public const int ChildFieldNumber = 2;
  private bool hasChild;
  private global::StructDictItem child_;
  public bool HasChild {
    get { return hasChild; }
  }
  public global::StructDictItem Child {
    get { return child_ ?? global::StructDictItem.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasParent) return false;
      if (!hasChild) return false;
      if (!Child.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAddSysInfoFieldNames;
    if (hasParent) {
      output.WriteString(1, field_names[1], Parent);
    }
    if (hasChild) {
      output.WriteMessage(2, field_names[0], Child);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasParent) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Parent);
    }
    if (hasChild) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Child);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAddSysInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAddSysInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAddSysInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAddSysInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAddSysInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAddSysInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAddSysInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAddSysInfo result;
    
    private CSAddSysInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAddSysInfo original = result;
        result = new CSAddSysInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAddSysInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAddSysInfo.Descriptor; }
    }
    
    public override CSAddSysInfo DefaultInstanceForType {
      get { return global::CSAddSysInfo.DefaultInstance; }
    }
    
    public override CSAddSysInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAddSysInfo) {
        return MergeFrom((CSAddSysInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAddSysInfo other) {
      if (other == global::CSAddSysInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasParent) {
        Parent = other.Parent;
      }
      if (other.HasChild) {
        MergeChild(other.Child);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAddSysInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAddSysInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasParent = input.ReadString(ref result.parent_);
            break;
          }
          case 18: {
            global::StructDictItem.Builder subBuilder = global::StructDictItem.CreateBuilder();
            if (result.hasChild) {
              subBuilder.MergeFrom(Child);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Child = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasParent {
      get { return result.hasParent; }
    }
    public string Parent {
      get { return result.Parent; }
      set { SetParent(value); }
    }
    public Builder SetParent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasParent = true;
      result.parent_ = value;
      return this;
    }
    public Builder ClearParent() {
      PrepareBuilder();
      result.hasParent = false;
      result.parent_ = "";
      return this;
    }
    
    public bool HasChild {
     get { return result.hasChild; }
    }
    public global::StructDictItem Child {
      get { return result.Child; }
      set { SetChild(value); }
    }
    public Builder SetChild(global::StructDictItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasChild = true;
      result.child_ = value;
      return this;
    }
    public Builder SetChild(global::StructDictItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasChild = true;
      result.child_ = builderForValue.Build();
      return this;
    }
    public Builder MergeChild(global::StructDictItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasChild &&
          result.child_ != global::StructDictItem.DefaultInstance) {
          result.child_ = global::StructDictItem.CreateBuilder(result.child_).MergeFrom(value).BuildPartial();
      } else {
        result.child_ = value;
      }
      result.hasChild = true;
      return this;
    }
    public Builder ClearChild() {
      PrepareBuilder();
      result.hasChild = false;
      result.child_ = null;
      return this;
    }
  }
  static CSAddSysInfo() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSDelSysInfo : pb::GeneratedMessage<CSDelSysInfo, CSDelSysInfo.Builder> {
  private CSDelSysInfo() { }
  private static readonly CSDelSysInfo defaultInstance = new CSDelSysInfo().MakeReadOnly();
  private static readonly string[] _cSDelSysInfoFieldNames = new string[] { "child", "parent" };
  private static readonly uint[] _cSDelSysInfoFieldTags = new uint[] { 18, 10 };
  public static CSDelSysInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSDelSysInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSDelSysInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSDelSysInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSDelSysInfo, CSDelSysInfo.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSDelSysInfo__FieldAccessorTable; }
  }
  
  public const int ParentFieldNumber = 1;
  private bool hasParent;
  private string parent_ = "";
  public bool HasParent {
    get { return hasParent; }
  }
  public string Parent {
    get { return parent_; }
  }
  
  public const int ChildFieldNumber = 2;
  private pbc::PopsicleList<string> child_ = new pbc::PopsicleList<string>();
  public scg::IList<string> ChildList {
    get { return pbc::Lists.AsReadOnly(child_); }
  }
  public int ChildCount {
    get { return child_.Count; }
  }
  public string GetChild(int index) {
    return child_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasParent) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSDelSysInfoFieldNames;
    if (hasParent) {
      output.WriteString(1, field_names[1], Parent);
    }
    if (child_.Count > 0) {
      output.WriteStringArray(2, field_names[0], child_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasParent) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Parent);
    }
    {
      int dataSize = 0;
      foreach (string element in ChildList) {
        dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * child_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSDelSysInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSDelSysInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSDelSysInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSDelSysInfo MakeReadOnly() {
    child_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSDelSysInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSDelSysInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSDelSysInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSDelSysInfo result;
    
    private CSDelSysInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CSDelSysInfo original = result;
        result = new CSDelSysInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSDelSysInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSDelSysInfo.Descriptor; }
    }
    
    public override CSDelSysInfo DefaultInstanceForType {
      get { return global::CSDelSysInfo.DefaultInstance; }
    }
    
    public override CSDelSysInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSDelSysInfo) {
        return MergeFrom((CSDelSysInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSDelSysInfo other) {
      if (other == global::CSDelSysInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasParent) {
        Parent = other.Parent;
      }
      if (other.child_.Count != 0) {
        result.child_.Add(other.child_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSDelSysInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSDelSysInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasParent = input.ReadString(ref result.parent_);
            break;
          }
          case 18: {
            input.ReadStringArray(tag, field_name, result.child_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasParent {
      get { return result.hasParent; }
    }
    public string Parent {
      get { return result.Parent; }
      set { SetParent(value); }
    }
    public Builder SetParent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasParent = true;
      result.parent_ = value;
      return this;
    }
    public Builder ClearParent() {
      PrepareBuilder();
      result.hasParent = false;
      result.parent_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<string> ChildList {
      get { return PrepareBuilder().child_; }
    }
    public int ChildCount {
      get { return result.ChildCount; }
    }
    public string GetChild(int index) {
      return result.GetChild(index);
    }
    public Builder SetChild(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.child_[index] = value;
      return this;
    }
    public Builder AddChild(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.child_.Add(value);
      return this;
    }
    public Builder AddRangeChild(scg::IEnumerable<string> values) {
      PrepareBuilder();
      result.child_.Add(values);
      return this;
    }
    public Builder ClearChild() {
      PrepareBuilder();
      result.child_.Clear();
      return this;
    }
  }
  static CSDelSysInfo() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSUpdateSysInfo : pb::GeneratedMessage<CSUpdateSysInfo, CSUpdateSysInfo.Builder> {
  private CSUpdateSysInfo() { }
  private static readonly CSUpdateSysInfo defaultInstance = new CSUpdateSysInfo().MakeReadOnly();
  private static readonly string[] _cSUpdateSysInfoFieldNames = new string[] { "child", "parent" };
  private static readonly uint[] _cSUpdateSysInfoFieldTags = new uint[] { 18, 10 };
  public static CSUpdateSysInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSUpdateSysInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSUpdateSysInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSUpdateSysInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSUpdateSysInfo, CSUpdateSysInfo.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSUpdateSysInfo__FieldAccessorTable; }
  }
  
  public const int ParentFieldNumber = 1;
  private bool hasParent;
  private string parent_ = "";
  public bool HasParent {
    get { return hasParent; }
  }
  public string Parent {
    get { return parent_; }
  }
  
  public const int ChildFieldNumber = 2;
  private pbc::PopsicleList<global::StructDictItem> child_ = new pbc::PopsicleList<global::StructDictItem>();
  public scg::IList<global::StructDictItem> ChildList {
    get { return child_; }
  }
  public int ChildCount {
    get { return child_.Count; }
  }
  public global::StructDictItem GetChild(int index) {
    return child_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasParent) return false;
      foreach (global::StructDictItem element in ChildList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSUpdateSysInfoFieldNames;
    if (hasParent) {
      output.WriteString(1, field_names[1], Parent);
    }
    if (child_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], child_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasParent) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Parent);
    }
    foreach (global::StructDictItem element in ChildList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSUpdateSysInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSUpdateSysInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSUpdateSysInfo MakeReadOnly() {
    child_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSUpdateSysInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSUpdateSysInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSUpdateSysInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSUpdateSysInfo result;
    
    private CSUpdateSysInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CSUpdateSysInfo original = result;
        result = new CSUpdateSysInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSUpdateSysInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSUpdateSysInfo.Descriptor; }
    }
    
    public override CSUpdateSysInfo DefaultInstanceForType {
      get { return global::CSUpdateSysInfo.DefaultInstance; }
    }
    
    public override CSUpdateSysInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSUpdateSysInfo) {
        return MergeFrom((CSUpdateSysInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSUpdateSysInfo other) {
      if (other == global::CSUpdateSysInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasParent) {
        Parent = other.Parent;
      }
      if (other.child_.Count != 0) {
        result.child_.Add(other.child_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSUpdateSysInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSUpdateSysInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasParent = input.ReadString(ref result.parent_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.child_, global::StructDictItem.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasParent {
      get { return result.hasParent; }
    }
    public string Parent {
      get { return result.Parent; }
      set { SetParent(value); }
    }
    public Builder SetParent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasParent = true;
      result.parent_ = value;
      return this;
    }
    public Builder ClearParent() {
      PrepareBuilder();
      result.hasParent = false;
      result.parent_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::StructDictItem> ChildList {
      get { return PrepareBuilder().child_; }
    }
    public int ChildCount {
      get { return result.ChildCount; }
    }
    public global::StructDictItem GetChild(int index) {
      return result.GetChild(index);
    }
    public Builder SetChild(int index, global::StructDictItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.child_[index] = value;
      return this;
    }
    public Builder SetChild(int index, global::StructDictItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.child_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddChild(global::StructDictItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.child_.Add(value);
      return this;
    }
    public Builder AddChild(global::StructDictItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.child_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeChild(scg::IEnumerable<global::StructDictItem> values) {
      PrepareBuilder();
      result.child_.Add(values);
      return this;
    }
    public Builder ClearChild() {
      PrepareBuilder();
      result.child_.Clear();
      return this;
    }
  }
  static CSUpdateSysInfo() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkCheckin : pb::GeneratedMessage<CSEmkCheckin, CSEmkCheckin.Builder> {
  private CSEmkCheckin() { }
  private static readonly CSEmkCheckin defaultInstance = new CSEmkCheckin().MakeReadOnly();
  private static readonly string[] _cSEmkCheckinFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSEmkCheckinFieldTags = new uint[] { 10 };
  public static CSEmkCheckin DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkCheckin DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkCheckin ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSEmkCheckin__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkCheckin, CSEmkCheckin.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSEmkCheckin__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkCheckinFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkCheckin ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCheckin ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkCheckin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkCheckin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkCheckin MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkCheckin prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkCheckin, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkCheckin cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkCheckin result;
    
    private CSEmkCheckin PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkCheckin original = result;
        result = new CSEmkCheckin();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkCheckin MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkCheckin.Descriptor; }
    }
    
    public override CSEmkCheckin DefaultInstanceForType {
      get { return global::CSEmkCheckin.DefaultInstance; }
    }
    
    public override CSEmkCheckin BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkCheckin) {
        return MergeFrom((CSEmkCheckin) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkCheckin other) {
      if (other == global::CSEmkCheckin.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkCheckinFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkCheckinFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSEmkCheckin() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmkCheckin : pb::GeneratedMessage<SCEmkCheckin, SCEmkCheckin.Builder> {
  private SCEmkCheckin() { }
  private static readonly SCEmkCheckin defaultInstance = new SCEmkCheckin().MakeReadOnly();
  private static readonly string[] _sCEmkCheckinFieldNames = new string[] { "balance", "cardnumber", "name", "right" };
  private static readonly uint[] _sCEmkCheckinFieldTags = new uint[] { 32, 18, 10, 26 };
  public static SCEmkCheckin DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmkCheckin DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmkCheckin ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCEmkCheckin__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmkCheckin, SCEmkCheckin.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCEmkCheckin__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int BalanceFieldNumber = 4;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasBalance) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmkCheckinFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[2], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[3], Right);
    }
    if (hasBalance) {
      output.WriteInt32(4, field_names[0], Balance);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Balance);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmkCheckin ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCheckin ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmkCheckin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkCheckin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmkCheckin MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmkCheckin prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmkCheckin, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmkCheckin cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmkCheckin result;
    
    private SCEmkCheckin PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmkCheckin original = result;
        result = new SCEmkCheckin();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmkCheckin MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmkCheckin.Descriptor; }
    }
    
    public override SCEmkCheckin DefaultInstanceForType {
      get { return global::SCEmkCheckin.DefaultInstance; }
    }
    
    public override SCEmkCheckin BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmkCheckin) {
        return MergeFrom((SCEmkCheckin) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmkCheckin other) {
      if (other == global::SCEmkCheckin.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmkCheckinFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmkCheckinFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
  }
  static SCEmkCheckin() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkCheckout : pb::GeneratedMessage<CSEmkCheckout, CSEmkCheckout.Builder> {
  private CSEmkCheckout() { }
  private static readonly CSEmkCheckout defaultInstance = new CSEmkCheckout().MakeReadOnly();
  private static readonly string[] _cSEmkCheckoutFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSEmkCheckoutFieldTags = new uint[] { 10 };
  public static CSEmkCheckout DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkCheckout DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkCheckout ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSEmkCheckout__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkCheckout, CSEmkCheckout.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSEmkCheckout__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkCheckoutFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkCheckout ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkCheckout ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkCheckout ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkCheckout ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkCheckout MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkCheckout prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkCheckout, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkCheckout cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkCheckout result;
    
    private CSEmkCheckout PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkCheckout original = result;
        result = new CSEmkCheckout();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkCheckout MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkCheckout.Descriptor; }
    }
    
    public override CSEmkCheckout DefaultInstanceForType {
      get { return global::CSEmkCheckout.DefaultInstance; }
    }
    
    public override CSEmkCheckout BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkCheckout) {
        return MergeFrom((CSEmkCheckout) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkCheckout other) {
      if (other == global::CSEmkCheckout.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkCheckoutFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkCheckoutFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSEmkCheckout() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmkCheckout : pb::GeneratedMessage<SCEmkCheckout, SCEmkCheckout.Builder> {
  private SCEmkCheckout() { }
  private static readonly SCEmkCheckout defaultInstance = new SCEmkCheckout().MakeReadOnly();
  private static readonly string[] _sCEmkCheckoutFieldNames = new string[] { "balance", "cardnumber", "name", "right", "usedmoney", "usedtime" };
  private static readonly uint[] _sCEmkCheckoutFieldTags = new uint[] { 32, 18, 10, 26, 40, 48 };
  public static SCEmkCheckout DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmkCheckout DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmkCheckout ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCEmkCheckout__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmkCheckout, SCEmkCheckout.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCEmkCheckout__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int BalanceFieldNumber = 4;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int UsedmoneyFieldNumber = 5;
  private bool hasUsedmoney;
  private int usedmoney_;
  public bool HasUsedmoney {
    get { return hasUsedmoney; }
  }
  public int Usedmoney {
    get { return usedmoney_; }
  }
  
  public const int UsedtimeFieldNumber = 6;
  private bool hasUsedtime;
  private int usedtime_;
  public bool HasUsedtime {
    get { return hasUsedtime; }
  }
  public int Usedtime {
    get { return usedtime_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasBalance) return false;
      if (!hasUsedmoney) return false;
      if (!hasUsedtime) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmkCheckoutFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[2], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[3], Right);
    }
    if (hasBalance) {
      output.WriteInt32(4, field_names[0], Balance);
    }
    if (hasUsedmoney) {
      output.WriteInt32(5, field_names[4], Usedmoney);
    }
    if (hasUsedtime) {
      output.WriteInt32(6, field_names[5], Usedtime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Balance);
    }
    if (hasUsedmoney) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Usedmoney);
    }
    if (hasUsedtime) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Usedtime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmkCheckout ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmkCheckout ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmkCheckout ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkCheckout ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmkCheckout MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmkCheckout prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmkCheckout, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmkCheckout cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmkCheckout result;
    
    private SCEmkCheckout PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmkCheckout original = result;
        result = new SCEmkCheckout();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmkCheckout MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmkCheckout.Descriptor; }
    }
    
    public override SCEmkCheckout DefaultInstanceForType {
      get { return global::SCEmkCheckout.DefaultInstance; }
    }
    
    public override SCEmkCheckout BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmkCheckout) {
        return MergeFrom((SCEmkCheckout) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmkCheckout other) {
      if (other == global::SCEmkCheckout.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasUsedmoney) {
        Usedmoney = other.Usedmoney;
      }
      if (other.HasUsedtime) {
        Usedtime = other.Usedtime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmkCheckoutFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmkCheckoutFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 40: {
            result.hasUsedmoney = input.ReadInt32(ref result.usedmoney_);
            break;
          }
          case 48: {
            result.hasUsedtime = input.ReadInt32(ref result.usedtime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasUsedmoney {
      get { return result.hasUsedmoney; }
    }
    public int Usedmoney {
      get { return result.Usedmoney; }
      set { SetUsedmoney(value); }
    }
    public Builder SetUsedmoney(int value) {
      PrepareBuilder();
      result.hasUsedmoney = true;
      result.usedmoney_ = value;
      return this;
    }
    public Builder ClearUsedmoney() {
      PrepareBuilder();
      result.hasUsedmoney = false;
      result.usedmoney_ = 0;
      return this;
    }
    
    public bool HasUsedtime {
      get { return result.hasUsedtime; }
    }
    public int Usedtime {
      get { return result.Usedtime; }
      set { SetUsedtime(value); }
    }
    public Builder SetUsedtime(int value) {
      PrepareBuilder();
      result.hasUsedtime = true;
      result.usedtime_ = value;
      return this;
    }
    public Builder ClearUsedtime() {
      PrepareBuilder();
      result.hasUsedtime = false;
      result.usedtime_ = 0;
      return this;
    }
  }
  static SCEmkCheckout() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkRecord : pb::GeneratedMessage<CSEmkRecord, CSEmkRecord.Builder> {
  private CSEmkRecord() { }
  private static readonly CSEmkRecord defaultInstance = new CSEmkRecord().MakeReadOnly();
  private static readonly string[] _cSEmkRecordFieldNames = new string[] { "memberid", "page" };
  private static readonly uint[] _cSEmkRecordFieldTags = new uint[] { 16, 10 };
  public static CSEmkRecord DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkRecord DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkRecord ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSEmkRecord__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkRecord, CSEmkRecord.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSEmkRecord__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int MemberidFieldNumber = 2;
  private bool hasMemberid;
  private int memberid_;
  public bool HasMemberid {
    get { return hasMemberid; }
  }
  public int Memberid {
    get { return memberid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!hasMemberid) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkRecordFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[1], Page);
    }
    if (hasMemberid) {
      output.WriteInt32(2, field_names[0], Memberid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasMemberid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Memberid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkRecord ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkRecord ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkRecord ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkRecord ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkRecord ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkRecord MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkRecord prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkRecord, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkRecord cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkRecord result;
    
    private CSEmkRecord PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkRecord original = result;
        result = new CSEmkRecord();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkRecord MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkRecord.Descriptor; }
    }
    
    public override CSEmkRecord DefaultInstanceForType {
      get { return global::CSEmkRecord.DefaultInstance; }
    }
    
    public override CSEmkRecord BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkRecord) {
        return MergeFrom((CSEmkRecord) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkRecord other) {
      if (other == global::CSEmkRecord.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasMemberid) {
        Memberid = other.Memberid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkRecordFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasMemberid = input.ReadInt32(ref result.memberid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasMemberid {
      get { return result.hasMemberid; }
    }
    public int Memberid {
      get { return result.Memberid; }
      set { SetMemberid(value); }
    }
    public Builder SetMemberid(int value) {
      PrepareBuilder();
      result.hasMemberid = true;
      result.memberid_ = value;
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.hasMemberid = false;
      result.memberid_ = 0;
      return this;
    }
  }
  static CSEmkRecord() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmkRecord : pb::GeneratedMessage<SCEmkRecord, SCEmkRecord.Builder> {
  private SCEmkRecord() { }
  private static readonly SCEmkRecord defaultInstance = new SCEmkRecord().MakeReadOnly();
  private static readonly string[] _sCEmkRecordFieldNames = new string[] { "emkinfo" };
  private static readonly uint[] _sCEmkRecordFieldTags = new uint[] { 10 };
  public static SCEmkRecord DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmkRecord DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmkRecord ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCEmkRecord__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmkRecord, SCEmkRecord.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCEmkRecord__FieldAccessorTable; }
  }
  
  public const int EmkinfoFieldNumber = 1;
  private pbc::PopsicleList<global::StructEmbarkation> emkinfo_ = new pbc::PopsicleList<global::StructEmbarkation>();
  public scg::IList<global::StructEmbarkation> EmkinfoList {
    get { return emkinfo_; }
  }
  public int EmkinfoCount {
    get { return emkinfo_.Count; }
  }
  public global::StructEmbarkation GetEmkinfo(int index) {
    return emkinfo_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructEmbarkation element in EmkinfoList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmkRecordFieldNames;
    if (emkinfo_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], emkinfo_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructEmbarkation element in EmkinfoList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmkRecord ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkRecord ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkRecord ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmkRecord ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmkRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmkRecord ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmkRecord MakeReadOnly() {
    emkinfo_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmkRecord prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmkRecord, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmkRecord cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmkRecord result;
    
    private SCEmkRecord PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmkRecord original = result;
        result = new SCEmkRecord();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmkRecord MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmkRecord.Descriptor; }
    }
    
    public override SCEmkRecord DefaultInstanceForType {
      get { return global::SCEmkRecord.DefaultInstance; }
    }
    
    public override SCEmkRecord BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmkRecord) {
        return MergeFrom((SCEmkRecord) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmkRecord other) {
      if (other == global::SCEmkRecord.DefaultInstance) return this;
      PrepareBuilder();
      if (other.emkinfo_.Count != 0) {
        result.emkinfo_.Add(other.emkinfo_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmkRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmkRecordFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.emkinfo_, global::StructEmbarkation.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructEmbarkation> EmkinfoList {
      get { return PrepareBuilder().emkinfo_; }
    }
    public int EmkinfoCount {
      get { return result.EmkinfoCount; }
    }
    public global::StructEmbarkation GetEmkinfo(int index) {
      return result.GetEmkinfo(index);
    }
    public Builder SetEmkinfo(int index, global::StructEmbarkation value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.emkinfo_[index] = value;
      return this;
    }
    public Builder SetEmkinfo(int index, global::StructEmbarkation.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.emkinfo_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddEmkinfo(global::StructEmbarkation value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.emkinfo_.Add(value);
      return this;
    }
    public Builder AddEmkinfo(global::StructEmbarkation.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.emkinfo_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeEmkinfo(scg::IEnumerable<global::StructEmbarkation> values) {
      PrepareBuilder();
      result.emkinfo_.Add(values);
      return this;
    }
    public Builder ClearEmkinfo() {
      PrepareBuilder();
      result.emkinfo_.Clear();
      return this;
    }
  }
  static SCEmkRecord() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmkRecordFind : pb::GeneratedMessage<CSEmkRecordFind, CSEmkRecordFind.Builder> {
  private CSEmkRecordFind() { }
  private static readonly CSEmkRecordFind defaultInstance = new CSEmkRecordFind().MakeReadOnly();
  private static readonly string[] _cSEmkRecordFindFieldNames = new string[] { "begintime", "endtime", "keyword", "page" };
  private static readonly uint[] _cSEmkRecordFindFieldTags = new uint[] { 18, 26, 34, 10 };
  public static CSEmkRecordFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmkRecordFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmkRecordFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSEmkRecordFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmkRecordFind, CSEmkRecordFind.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSEmkRecordFind__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int BegintimeFieldNumber = 2;
  private bool hasBegintime;
  private string begintime_ = "";
  public bool HasBegintime {
    get { return hasBegintime; }
  }
  public string Begintime {
    get { return begintime_; }
  }
  
  public const int EndtimeFieldNumber = 3;
  private bool hasEndtime;
  private string endtime_ = "";
  public bool HasEndtime {
    get { return hasEndtime; }
  }
  public string Endtime {
    get { return endtime_; }
  }
  
  public const int KeywordFieldNumber = 4;
  private bool hasKeyword;
  private string keyword_ = "";
  public bool HasKeyword {
    get { return hasKeyword; }
  }
  public string Keyword {
    get { return keyword_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmkRecordFindFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[3], Page);
    }
    if (hasBegintime) {
      output.WriteString(2, field_names[0], Begintime);
    }
    if (hasEndtime) {
      output.WriteString(3, field_names[1], Endtime);
    }
    if (hasKeyword) {
      output.WriteString(4, field_names[2], Keyword);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasBegintime) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Begintime);
    }
    if (hasEndtime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Endtime);
    }
    if (hasKeyword) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Keyword);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmkRecordFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkRecordFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkRecordFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmkRecordFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmkRecordFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkRecordFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmkRecordFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmkRecordFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmkRecordFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmkRecordFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmkRecordFind MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmkRecordFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmkRecordFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmkRecordFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmkRecordFind result;
    
    private CSEmkRecordFind PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmkRecordFind original = result;
        result = new CSEmkRecordFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmkRecordFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmkRecordFind.Descriptor; }
    }
    
    public override CSEmkRecordFind DefaultInstanceForType {
      get { return global::CSEmkRecordFind.DefaultInstance; }
    }
    
    public override CSEmkRecordFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmkRecordFind) {
        return MergeFrom((CSEmkRecordFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmkRecordFind other) {
      if (other == global::CSEmkRecordFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasBegintime) {
        Begintime = other.Begintime;
      }
      if (other.HasEndtime) {
        Endtime = other.Endtime;
      }
      if (other.HasKeyword) {
        Keyword = other.Keyword;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmkRecordFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmkRecordFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasBegintime = input.ReadString(ref result.begintime_);
            break;
          }
          case 26: {
            result.hasEndtime = input.ReadString(ref result.endtime_);
            break;
          }
          case 34: {
            result.hasKeyword = input.ReadString(ref result.keyword_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasBegintime {
      get { return result.hasBegintime; }
    }
    public string Begintime {
      get { return result.Begintime; }
      set { SetBegintime(value); }
    }
    public Builder SetBegintime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBegintime = true;
      result.begintime_ = value;
      return this;
    }
    public Builder ClearBegintime() {
      PrepareBuilder();
      result.hasBegintime = false;
      result.begintime_ = "";
      return this;
    }
    
    public bool HasEndtime {
      get { return result.hasEndtime; }
    }
    public string Endtime {
      get { return result.Endtime; }
      set { SetEndtime(value); }
    }
    public Builder SetEndtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEndtime = true;
      result.endtime_ = value;
      return this;
    }
    public Builder ClearEndtime() {
      PrepareBuilder();
      result.hasEndtime = false;
      result.endtime_ = "";
      return this;
    }
    
    public bool HasKeyword {
      get { return result.hasKeyword; }
    }
    public string Keyword {
      get { return result.Keyword; }
      set { SetKeyword(value); }
    }
    public Builder SetKeyword(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKeyword = true;
      result.keyword_ = value;
      return this;
    }
    public Builder ClearKeyword() {
      PrepareBuilder();
      result.hasKeyword = false;
      result.keyword_ = "";
      return this;
    }
  }
  static CSEmkRecordFind() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmkRecordFind : pb::GeneratedMessage<SCEmkRecordFind, SCEmkRecordFind.Builder> {
  private SCEmkRecordFind() { }
  private static readonly SCEmkRecordFind defaultInstance = new SCEmkRecordFind().MakeReadOnly();
  private static readonly string[] _sCEmkRecordFindFieldNames = new string[] { "emkinfo" };
  private static readonly uint[] _sCEmkRecordFindFieldTags = new uint[] { 10 };
  public static SCEmkRecordFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmkRecordFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmkRecordFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCEmkRecordFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmkRecordFind, SCEmkRecordFind.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCEmkRecordFind__FieldAccessorTable; }
  }
  
  public const int EmkinfoFieldNumber = 1;
  private pbc::PopsicleList<global::StructEmbarkation> emkinfo_ = new pbc::PopsicleList<global::StructEmbarkation>();
  public scg::IList<global::StructEmbarkation> EmkinfoList {
    get { return emkinfo_; }
  }
  public int EmkinfoCount {
    get { return emkinfo_.Count; }
  }
  public global::StructEmbarkation GetEmkinfo(int index) {
    return emkinfo_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructEmbarkation element in EmkinfoList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmkRecordFindFieldNames;
    if (emkinfo_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], emkinfo_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructEmbarkation element in EmkinfoList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmkRecordFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkRecordFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkRecordFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmkRecordFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmkRecordFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkRecordFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmkRecordFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmkRecordFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmkRecordFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmkRecordFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmkRecordFind MakeReadOnly() {
    emkinfo_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmkRecordFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmkRecordFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmkRecordFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmkRecordFind result;
    
    private SCEmkRecordFind PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmkRecordFind original = result;
        result = new SCEmkRecordFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmkRecordFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmkRecordFind.Descriptor; }
    }
    
    public override SCEmkRecordFind DefaultInstanceForType {
      get { return global::SCEmkRecordFind.DefaultInstance; }
    }
    
    public override SCEmkRecordFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmkRecordFind) {
        return MergeFrom((SCEmkRecordFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmkRecordFind other) {
      if (other == global::SCEmkRecordFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.emkinfo_.Count != 0) {
        result.emkinfo_.Add(other.emkinfo_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmkRecordFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmkRecordFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.emkinfo_, global::StructEmbarkation.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructEmbarkation> EmkinfoList {
      get { return PrepareBuilder().emkinfo_; }
    }
    public int EmkinfoCount {
      get { return result.EmkinfoCount; }
    }
    public global::StructEmbarkation GetEmkinfo(int index) {
      return result.GetEmkinfo(index);
    }
    public Builder SetEmkinfo(int index, global::StructEmbarkation value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.emkinfo_[index] = value;
      return this;
    }
    public Builder SetEmkinfo(int index, global::StructEmbarkation.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.emkinfo_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddEmkinfo(global::StructEmbarkation value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.emkinfo_.Add(value);
      return this;
    }
    public Builder AddEmkinfo(global::StructEmbarkation.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.emkinfo_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeEmkinfo(scg::IEnumerable<global::StructEmbarkation> values) {
      PrepareBuilder();
      result.emkinfo_.Add(values);
      return this;
    }
    public Builder ClearEmkinfo() {
      PrepareBuilder();
      result.emkinfo_.Clear();
      return this;
    }
  }
  static SCEmkRecordFind() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGoodsAdd : pb::GeneratedMessage<CSGoodsAdd, CSGoodsAdd.Builder> {
  private CSGoodsAdd() { }
  private static readonly CSGoodsAdd defaultInstance = new CSGoodsAdd().MakeReadOnly();
  private static readonly string[] _cSGoodsAddFieldNames = new string[] { "goods" };
  private static readonly uint[] _cSGoodsAddFieldTags = new uint[] { 10 };
  public static CSGoodsAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGoodsAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGoodsAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSGoodsAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGoodsAdd, CSGoodsAdd.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSGoodsAdd__FieldAccessorTable; }
  }
  
  public const int GoodsFieldNumber = 1;
  private bool hasGoods;
  private global::StructGoods goods_;
  public bool HasGoods {
    get { return hasGoods; }
  }
  public global::StructGoods Goods {
    get { return goods_ ?? global::StructGoods.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGoods) return false;
      if (!Goods.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGoodsAddFieldNames;
    if (hasGoods) {
      output.WriteMessage(1, field_names[0], Goods);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGoods) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Goods);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGoodsAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGoodsAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGoodsAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGoodsAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGoodsAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGoodsAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGoodsAdd result;
    
    private CSGoodsAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGoodsAdd original = result;
        result = new CSGoodsAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGoodsAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGoodsAdd.Descriptor; }
    }
    
    public override CSGoodsAdd DefaultInstanceForType {
      get { return global::CSGoodsAdd.DefaultInstance; }
    }
    
    public override CSGoodsAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGoodsAdd) {
        return MergeFrom((CSGoodsAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGoodsAdd other) {
      if (other == global::CSGoodsAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGoods) {
        MergeGoods(other.Goods);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGoodsAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGoodsAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructGoods.Builder subBuilder = global::StructGoods.CreateBuilder();
            if (result.hasGoods) {
              subBuilder.MergeFrom(Goods);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Goods = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGoods {
     get { return result.hasGoods; }
    }
    public global::StructGoods Goods {
      get { return result.Goods; }
      set { SetGoods(value); }
    }
    public Builder SetGoods(global::StructGoods value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGoods = true;
      result.goods_ = value;
      return this;
    }
    public Builder SetGoods(global::StructGoods.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasGoods = true;
      result.goods_ = builderForValue.Build();
      return this;
    }
    public Builder MergeGoods(global::StructGoods value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasGoods &&
          result.goods_ != global::StructGoods.DefaultInstance) {
          result.goods_ = global::StructGoods.CreateBuilder(result.goods_).MergeFrom(value).BuildPartial();
      } else {
        result.goods_ = value;
      }
      result.hasGoods = true;
      return this;
    }
    public Builder ClearGoods() {
      PrepareBuilder();
      result.hasGoods = false;
      result.goods_ = null;
      return this;
    }
  }
  static CSGoodsAdd() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGoodsDel : pb::GeneratedMessage<CSGoodsDel, CSGoodsDel.Builder> {
  private CSGoodsDel() { }
  private static readonly CSGoodsDel defaultInstance = new CSGoodsDel().MakeReadOnly();
  private static readonly string[] _cSGoodsDelFieldNames = new string[] { "ids" };
  private static readonly uint[] _cSGoodsDelFieldTags = new uint[] { 8 };
  public static CSGoodsDel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGoodsDel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGoodsDel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSGoodsDel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGoodsDel, CSGoodsDel.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSGoodsDel__FieldAccessorTable; }
  }
  
  public const int IdsFieldNumber = 1;
  private pbc::PopsicleList<int> ids_ = new pbc::PopsicleList<int>();
  public scg::IList<int> IdsList {
    get { return pbc::Lists.AsReadOnly(ids_); }
  }
  public int IdsCount {
    get { return ids_.Count; }
  }
  public int GetIds(int index) {
    return ids_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGoodsDelFieldNames;
    if (ids_.Count > 0) {
      output.WriteInt32Array(1, field_names[0], ids_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (int element in IdsList) {
        dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * ids_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGoodsDel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsDel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGoodsDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGoodsDel MakeReadOnly() {
    ids_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGoodsDel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGoodsDel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGoodsDel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGoodsDel result;
    
    private CSGoodsDel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGoodsDel original = result;
        result = new CSGoodsDel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGoodsDel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGoodsDel.Descriptor; }
    }
    
    public override CSGoodsDel DefaultInstanceForType {
      get { return global::CSGoodsDel.DefaultInstance; }
    }
    
    public override CSGoodsDel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGoodsDel) {
        return MergeFrom((CSGoodsDel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGoodsDel other) {
      if (other == global::CSGoodsDel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.ids_.Count != 0) {
        result.ids_.Add(other.ids_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGoodsDelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGoodsDelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt32Array(tag, field_name, result.ids_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<int> IdsList {
      get { return PrepareBuilder().ids_; }
    }
    public int IdsCount {
      get { return result.IdsCount; }
    }
    public int GetIds(int index) {
      return result.GetIds(index);
    }
    public Builder SetIds(int index, int value) {
      PrepareBuilder();
      result.ids_[index] = value;
      return this;
    }
    public Builder AddIds(int value) {
      PrepareBuilder();
      result.ids_.Add(value);
      return this;
    }
    public Builder AddRangeIds(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.ids_.Add(values);
      return this;
    }
    public Builder ClearIds() {
      PrepareBuilder();
      result.ids_.Clear();
      return this;
    }
  }
  static CSGoodsDel() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGoodsUpdate : pb::GeneratedMessage<CSGoodsUpdate, CSGoodsUpdate.Builder> {
  private CSGoodsUpdate() { }
  private static readonly CSGoodsUpdate defaultInstance = new CSGoodsUpdate().MakeReadOnly();
  private static readonly string[] _cSGoodsUpdateFieldNames = new string[] { "goods" };
  private static readonly uint[] _cSGoodsUpdateFieldTags = new uint[] { 10 };
  public static CSGoodsUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGoodsUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGoodsUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSGoodsUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGoodsUpdate, CSGoodsUpdate.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSGoodsUpdate__FieldAccessorTable; }
  }
  
  public const int GoodsFieldNumber = 1;
  private bool hasGoods;
  private global::StructGoods goods_;
  public bool HasGoods {
    get { return hasGoods; }
  }
  public global::StructGoods Goods {
    get { return goods_ ?? global::StructGoods.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGoods) return false;
      if (!Goods.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGoodsUpdateFieldNames;
    if (hasGoods) {
      output.WriteMessage(1, field_names[0], Goods);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGoods) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Goods);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGoodsUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGoodsUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGoodsUpdate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGoodsUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGoodsUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGoodsUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGoodsUpdate result;
    
    private CSGoodsUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGoodsUpdate original = result;
        result = new CSGoodsUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGoodsUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGoodsUpdate.Descriptor; }
    }
    
    public override CSGoodsUpdate DefaultInstanceForType {
      get { return global::CSGoodsUpdate.DefaultInstance; }
    }
    
    public override CSGoodsUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGoodsUpdate) {
        return MergeFrom((CSGoodsUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGoodsUpdate other) {
      if (other == global::CSGoodsUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGoods) {
        MergeGoods(other.Goods);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGoodsUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGoodsUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructGoods.Builder subBuilder = global::StructGoods.CreateBuilder();
            if (result.hasGoods) {
              subBuilder.MergeFrom(Goods);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Goods = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGoods {
     get { return result.hasGoods; }
    }
    public global::StructGoods Goods {
      get { return result.Goods; }
      set { SetGoods(value); }
    }
    public Builder SetGoods(global::StructGoods value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGoods = true;
      result.goods_ = value;
      return this;
    }
    public Builder SetGoods(global::StructGoods.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasGoods = true;
      result.goods_ = builderForValue.Build();
      return this;
    }
    public Builder MergeGoods(global::StructGoods value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasGoods &&
          result.goods_ != global::StructGoods.DefaultInstance) {
          result.goods_ = global::StructGoods.CreateBuilder(result.goods_).MergeFrom(value).BuildPartial();
      } else {
        result.goods_ = value;
      }
      result.hasGoods = true;
      return this;
    }
    public Builder ClearGoods() {
      PrepareBuilder();
      result.hasGoods = false;
      result.goods_ = null;
      return this;
    }
  }
  static CSGoodsUpdate() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGoodsFind : pb::GeneratedMessage<CSGoodsFind, CSGoodsFind.Builder> {
  private CSGoodsFind() { }
  private static readonly CSGoodsFind defaultInstance = new CSGoodsFind().MakeReadOnly();
  private static readonly string[] _cSGoodsFindFieldNames = new string[] { "category", "keywords", "page" };
  private static readonly uint[] _cSGoodsFindFieldTags = new uint[] { 16, 34, 10 };
  public static CSGoodsFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGoodsFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGoodsFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSGoodsFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGoodsFind, CSGoodsFind.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSGoodsFind__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int CategoryFieldNumber = 2;
  private bool hasCategory;
  private int category_;
  public bool HasCategory {
    get { return hasCategory; }
  }
  public int Category {
    get { return category_; }
  }
  
  public const int KeywordsFieldNumber = 4;
  private bool hasKeywords;
  private string keywords_ = "";
  public bool HasKeywords {
    get { return hasKeywords; }
  }
  public string Keywords {
    get { return keywords_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGoodsFindFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[2], Page);
    }
    if (hasCategory) {
      output.WriteInt32(2, field_names[0], Category);
    }
    if (hasKeywords) {
      output.WriteString(4, field_names[1], Keywords);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasCategory) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Category);
    }
    if (hasKeywords) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Keywords);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGoodsFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGoodsFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGoodsFind MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGoodsFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGoodsFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGoodsFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGoodsFind result;
    
    private CSGoodsFind PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGoodsFind original = result;
        result = new CSGoodsFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGoodsFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGoodsFind.Descriptor; }
    }
    
    public override CSGoodsFind DefaultInstanceForType {
      get { return global::CSGoodsFind.DefaultInstance; }
    }
    
    public override CSGoodsFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGoodsFind) {
        return MergeFrom((CSGoodsFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGoodsFind other) {
      if (other == global::CSGoodsFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasCategory) {
        Category = other.Category;
      }
      if (other.HasKeywords) {
        Keywords = other.Keywords;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGoodsFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGoodsFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasCategory = input.ReadInt32(ref result.category_);
            break;
          }
          case 34: {
            result.hasKeywords = input.ReadString(ref result.keywords_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasCategory {
      get { return result.hasCategory; }
    }
    public int Category {
      get { return result.Category; }
      set { SetCategory(value); }
    }
    public Builder SetCategory(int value) {
      PrepareBuilder();
      result.hasCategory = true;
      result.category_ = value;
      return this;
    }
    public Builder ClearCategory() {
      PrepareBuilder();
      result.hasCategory = false;
      result.category_ = 0;
      return this;
    }
    
    public bool HasKeywords {
      get { return result.hasKeywords; }
    }
    public string Keywords {
      get { return result.Keywords; }
      set { SetKeywords(value); }
    }
    public Builder SetKeywords(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKeywords = true;
      result.keywords_ = value;
      return this;
    }
    public Builder ClearKeywords() {
      PrepareBuilder();
      result.hasKeywords = false;
      result.keywords_ = "";
      return this;
    }
  }
  static CSGoodsFind() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCGoodsFind : pb::GeneratedMessage<SCGoodsFind, SCGoodsFind.Builder> {
  private SCGoodsFind() { }
  private static readonly SCGoodsFind defaultInstance = new SCGoodsFind().MakeReadOnly();
  private static readonly string[] _sCGoodsFindFieldNames = new string[] { "goods" };
  private static readonly uint[] _sCGoodsFindFieldTags = new uint[] { 10 };
  public static SCGoodsFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCGoodsFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCGoodsFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCGoodsFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCGoodsFind, SCGoodsFind.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCGoodsFind__FieldAccessorTable; }
  }
  
  public const int GoodsFieldNumber = 1;
  private pbc::PopsicleList<global::StructGoods> goods_ = new pbc::PopsicleList<global::StructGoods>();
  public scg::IList<global::StructGoods> GoodsList {
    get { return goods_; }
  }
  public int GoodsCount {
    get { return goods_.Count; }
  }
  public global::StructGoods GetGoods(int index) {
    return goods_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructGoods element in GoodsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCGoodsFindFieldNames;
    if (goods_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], goods_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructGoods element in GoodsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCGoodsFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCGoodsFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCGoodsFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGoodsFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCGoodsFind MakeReadOnly() {
    goods_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCGoodsFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCGoodsFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCGoodsFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCGoodsFind result;
    
    private SCGoodsFind PrepareBuilder() {
      if (resultIsReadOnly) {
        SCGoodsFind original = result;
        result = new SCGoodsFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCGoodsFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCGoodsFind.Descriptor; }
    }
    
    public override SCGoodsFind DefaultInstanceForType {
      get { return global::SCGoodsFind.DefaultInstance; }
    }
    
    public override SCGoodsFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCGoodsFind) {
        return MergeFrom((SCGoodsFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCGoodsFind other) {
      if (other == global::SCGoodsFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.goods_.Count != 0) {
        result.goods_.Add(other.goods_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCGoodsFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCGoodsFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.goods_, global::StructGoods.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructGoods> GoodsList {
      get { return PrepareBuilder().goods_; }
    }
    public int GoodsCount {
      get { return result.GoodsCount; }
    }
    public global::StructGoods GetGoods(int index) {
      return result.GetGoods(index);
    }
    public Builder SetGoods(int index, global::StructGoods value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.goods_[index] = value;
      return this;
    }
    public Builder SetGoods(int index, global::StructGoods.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.goods_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddGoods(global::StructGoods value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.goods_.Add(value);
      return this;
    }
    public Builder AddGoods(global::StructGoods.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.goods_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeGoods(scg::IEnumerable<global::StructGoods> values) {
      PrepareBuilder();
      result.goods_.Add(values);
      return this;
    }
    public Builder ClearGoods() {
      PrepareBuilder();
      result.goods_.Clear();
      return this;
    }
  }
  static SCGoodsFind() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGoodsStock : pb::GeneratedMessage<CSGoodsStock, CSGoodsStock.Builder> {
  private CSGoodsStock() { }
  private static readonly CSGoodsStock defaultInstance = new CSGoodsStock().MakeReadOnly();
  private static readonly string[] _cSGoodsStockFieldNames = new string[] { "page" };
  private static readonly uint[] _cSGoodsStockFieldTags = new uint[] { 10 };
  public static CSGoodsStock DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGoodsStock DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGoodsStock ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSGoodsStock__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGoodsStock, CSGoodsStock.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSGoodsStock__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGoodsStockFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[0], Page);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGoodsStock ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsStock ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGoodsStock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGoodsStock MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGoodsStock prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGoodsStock, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGoodsStock cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGoodsStock result;
    
    private CSGoodsStock PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGoodsStock original = result;
        result = new CSGoodsStock();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGoodsStock MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGoodsStock.Descriptor; }
    }
    
    public override CSGoodsStock DefaultInstanceForType {
      get { return global::CSGoodsStock.DefaultInstance; }
    }
    
    public override CSGoodsStock BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGoodsStock) {
        return MergeFrom((CSGoodsStock) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGoodsStock other) {
      if (other == global::CSGoodsStock.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGoodsStockFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGoodsStockFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
  }
  static CSGoodsStock() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCGoodsStock : pb::GeneratedMessage<SCGoodsStock, SCGoodsStock.Builder> {
  private SCGoodsStock() { }
  private static readonly SCGoodsStock defaultInstance = new SCGoodsStock().MakeReadOnly();
  private static readonly string[] _sCGoodsStockFieldNames = new string[] { "goods" };
  private static readonly uint[] _sCGoodsStockFieldTags = new uint[] { 10 };
  public static SCGoodsStock DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCGoodsStock DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCGoodsStock ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCGoodsStock__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCGoodsStock, SCGoodsStock.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCGoodsStock__FieldAccessorTable; }
  }
  
  public const int GoodsFieldNumber = 1;
  private pbc::PopsicleList<global::StructStock> goods_ = new pbc::PopsicleList<global::StructStock>();
  public scg::IList<global::StructStock> GoodsList {
    get { return goods_; }
  }
  public int GoodsCount {
    get { return goods_.Count; }
  }
  public global::StructStock GetGoods(int index) {
    return goods_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructStock element in GoodsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCGoodsStockFieldNames;
    if (goods_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], goods_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructStock element in GoodsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCGoodsStock ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCGoodsStock ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCGoodsStock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCGoodsStock MakeReadOnly() {
    goods_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCGoodsStock prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCGoodsStock, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCGoodsStock cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCGoodsStock result;
    
    private SCGoodsStock PrepareBuilder() {
      if (resultIsReadOnly) {
        SCGoodsStock original = result;
        result = new SCGoodsStock();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCGoodsStock MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCGoodsStock.Descriptor; }
    }
    
    public override SCGoodsStock DefaultInstanceForType {
      get { return global::SCGoodsStock.DefaultInstance; }
    }
    
    public override SCGoodsStock BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCGoodsStock) {
        return MergeFrom((SCGoodsStock) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCGoodsStock other) {
      if (other == global::SCGoodsStock.DefaultInstance) return this;
      PrepareBuilder();
      if (other.goods_.Count != 0) {
        result.goods_.Add(other.goods_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCGoodsStockFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCGoodsStockFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.goods_, global::StructStock.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructStock> GoodsList {
      get { return PrepareBuilder().goods_; }
    }
    public int GoodsCount {
      get { return result.GoodsCount; }
    }
    public global::StructStock GetGoods(int index) {
      return result.GetGoods(index);
    }
    public Builder SetGoods(int index, global::StructStock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.goods_[index] = value;
      return this;
    }
    public Builder SetGoods(int index, global::StructStock.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.goods_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddGoods(global::StructStock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.goods_.Add(value);
      return this;
    }
    public Builder AddGoods(global::StructStock.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.goods_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeGoods(scg::IEnumerable<global::StructStock> values) {
      PrepareBuilder();
      result.goods_.Add(values);
      return this;
    }
    public Builder ClearGoods() {
      PrepareBuilder();
      result.goods_.Clear();
      return this;
    }
  }
  static SCGoodsStock() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSalesRecord : pb::GeneratedMessage<CSSalesRecord, CSSalesRecord.Builder> {
  private CSSalesRecord() { }
  private static readonly CSSalesRecord defaultInstance = new CSSalesRecord().MakeReadOnly();
  private static readonly string[] _cSSalesRecordFieldNames = new string[] { "begintime", "endtime", "goodsid", "page" };
  private static readonly uint[] _cSSalesRecordFieldTags = new uint[] { 26, 34, 16, 10 };
  public static CSSalesRecord DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSalesRecord DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSalesRecord ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSSalesRecord__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSalesRecord, CSSalesRecord.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSSalesRecord__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int GoodsidFieldNumber = 2;
  private bool hasGoodsid;
  private int goodsid_;
  public bool HasGoodsid {
    get { return hasGoodsid; }
  }
  public int Goodsid {
    get { return goodsid_; }
  }
  
  public const int BegintimeFieldNumber = 3;
  private bool hasBegintime;
  private string begintime_ = "";
  public bool HasBegintime {
    get { return hasBegintime; }
  }
  public string Begintime {
    get { return begintime_; }
  }
  
  public const int EndtimeFieldNumber = 4;
  private bool hasEndtime;
  private string endtime_ = "";
  public bool HasEndtime {
    get { return hasEndtime; }
  }
  public string Endtime {
    get { return endtime_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!hasGoodsid) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSalesRecordFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[3], Page);
    }
    if (hasGoodsid) {
      output.WriteInt32(2, field_names[2], Goodsid);
    }
    if (hasBegintime) {
      output.WriteString(3, field_names[0], Begintime);
    }
    if (hasEndtime) {
      output.WriteString(4, field_names[1], Endtime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasGoodsid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Goodsid);
    }
    if (hasBegintime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Begintime);
    }
    if (hasEndtime) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Endtime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSalesRecord ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSalesRecord ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSalesRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSalesRecord MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSalesRecord prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSalesRecord, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSalesRecord cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSalesRecord result;
    
    private CSSalesRecord PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSalesRecord original = result;
        result = new CSSalesRecord();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSalesRecord MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSalesRecord.Descriptor; }
    }
    
    public override CSSalesRecord DefaultInstanceForType {
      get { return global::CSSalesRecord.DefaultInstance; }
    }
    
    public override CSSalesRecord BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSalesRecord) {
        return MergeFrom((CSSalesRecord) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSalesRecord other) {
      if (other == global::CSSalesRecord.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasGoodsid) {
        Goodsid = other.Goodsid;
      }
      if (other.HasBegintime) {
        Begintime = other.Begintime;
      }
      if (other.HasEndtime) {
        Endtime = other.Endtime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSalesRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSalesRecordFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasGoodsid = input.ReadInt32(ref result.goodsid_);
            break;
          }
          case 26: {
            result.hasBegintime = input.ReadString(ref result.begintime_);
            break;
          }
          case 34: {
            result.hasEndtime = input.ReadString(ref result.endtime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasGoodsid {
      get { return result.hasGoodsid; }
    }
    public int Goodsid {
      get { return result.Goodsid; }
      set { SetGoodsid(value); }
    }
    public Builder SetGoodsid(int value) {
      PrepareBuilder();
      result.hasGoodsid = true;
      result.goodsid_ = value;
      return this;
    }
    public Builder ClearGoodsid() {
      PrepareBuilder();
      result.hasGoodsid = false;
      result.goodsid_ = 0;
      return this;
    }
    
    public bool HasBegintime {
      get { return result.hasBegintime; }
    }
    public string Begintime {
      get { return result.Begintime; }
      set { SetBegintime(value); }
    }
    public Builder SetBegintime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBegintime = true;
      result.begintime_ = value;
      return this;
    }
    public Builder ClearBegintime() {
      PrepareBuilder();
      result.hasBegintime = false;
      result.begintime_ = "";
      return this;
    }
    
    public bool HasEndtime {
      get { return result.hasEndtime; }
    }
    public string Endtime {
      get { return result.Endtime; }
      set { SetEndtime(value); }
    }
    public Builder SetEndtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEndtime = true;
      result.endtime_ = value;
      return this;
    }
    public Builder ClearEndtime() {
      PrepareBuilder();
      result.hasEndtime = false;
      result.endtime_ = "";
      return this;
    }
  }
  static CSSalesRecord() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSalesRecord : pb::GeneratedMessage<SCSalesRecord, SCSalesRecord.Builder> {
  private SCSalesRecord() { }
  private static readonly SCSalesRecord defaultInstance = new SCSalesRecord().MakeReadOnly();
  private static readonly string[] _sCSalesRecordFieldNames = new string[] { "sales" };
  private static readonly uint[] _sCSalesRecordFieldTags = new uint[] { 10 };
  public static SCSalesRecord DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSalesRecord DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSalesRecord ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCSalesRecord__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSalesRecord, SCSalesRecord.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCSalesRecord__FieldAccessorTable; }
  }
  
  public const int SalesFieldNumber = 1;
  private pbc::PopsicleList<global::StructSale> sales_ = new pbc::PopsicleList<global::StructSale>();
  public scg::IList<global::StructSale> SalesList {
    get { return sales_; }
  }
  public int SalesCount {
    get { return sales_.Count; }
  }
  public global::StructSale GetSales(int index) {
    return sales_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructSale element in SalesList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSalesRecordFieldNames;
    if (sales_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], sales_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructSale element in SalesList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSalesRecord ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSalesRecord ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSalesRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSalesRecord MakeReadOnly() {
    sales_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSalesRecord prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSalesRecord, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSalesRecord cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSalesRecord result;
    
    private SCSalesRecord PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSalesRecord original = result;
        result = new SCSalesRecord();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSalesRecord MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSalesRecord.Descriptor; }
    }
    
    public override SCSalesRecord DefaultInstanceForType {
      get { return global::SCSalesRecord.DefaultInstance; }
    }
    
    public override SCSalesRecord BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSalesRecord) {
        return MergeFrom((SCSalesRecord) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSalesRecord other) {
      if (other == global::SCSalesRecord.DefaultInstance) return this;
      PrepareBuilder();
      if (other.sales_.Count != 0) {
        result.sales_.Add(other.sales_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSalesRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSalesRecordFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.sales_, global::StructSale.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructSale> SalesList {
      get { return PrepareBuilder().sales_; }
    }
    public int SalesCount {
      get { return result.SalesCount; }
    }
    public global::StructSale GetSales(int index) {
      return result.GetSales(index);
    }
    public Builder SetSales(int index, global::StructSale value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sales_[index] = value;
      return this;
    }
    public Builder SetSales(int index, global::StructSale.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sales_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSales(global::StructSale value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sales_.Add(value);
      return this;
    }
    public Builder AddSales(global::StructSale.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sales_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSales(scg::IEnumerable<global::StructSale> values) {
      PrepareBuilder();
      result.sales_.Add(values);
      return this;
    }
    public Builder ClearSales() {
      PrepareBuilder();
      result.sales_.Clear();
      return this;
    }
  }
  static SCSalesRecord() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSalesTop : pb::GeneratedMessage<CSSalesTop, CSSalesTop.Builder> {
  private CSSalesTop() { }
  private static readonly CSSalesTop defaultInstance = new CSSalesTop().MakeReadOnly();
  private static readonly string[] _cSSalesTopFieldNames = new string[] {  };
  private static readonly uint[] _cSSalesTopFieldTags = new uint[] {  };
  public static CSSalesTop DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSalesTop DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSalesTop ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSSalesTop__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSalesTop, CSSalesTop.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSSalesTop__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSalesTopFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSalesTop ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSalesTop ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSalesTop ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSalesTop ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSalesTop ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSalesTop ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSalesTop ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSalesTop ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSalesTop ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSalesTop ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSalesTop MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSalesTop prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSalesTop, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSalesTop cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSalesTop result;
    
    private CSSalesTop PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSalesTop original = result;
        result = new CSSalesTop();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSalesTop MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSalesTop.Descriptor; }
    }
    
    public override CSSalesTop DefaultInstanceForType {
      get { return global::CSSalesTop.DefaultInstance; }
    }
    
    public override CSSalesTop BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSalesTop) {
        return MergeFrom((CSSalesTop) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSalesTop other) {
      if (other == global::CSSalesTop.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSalesTopFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSalesTopFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSSalesTop() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSalesTop : pb::GeneratedMessage<SCSalesTop, SCSalesTop.Builder> {
  private SCSalesTop() { }
  private static readonly SCSalesTop defaultInstance = new SCSalesTop().MakeReadOnly();
  private static readonly string[] _sCSalesTopFieldNames = new string[] {  };
  private static readonly uint[] _sCSalesTopFieldTags = new uint[] {  };
  public static SCSalesTop DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSalesTop DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSalesTop ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCSalesTop__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSalesTop, SCSalesTop.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCSalesTop__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSalesTopFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSalesTop ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSalesTop ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSalesTop ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSalesTop ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSalesTop ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSalesTop ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSalesTop ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSalesTop ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSalesTop ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSalesTop ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSalesTop MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSalesTop prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSalesTop, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSalesTop cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSalesTop result;
    
    private SCSalesTop PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSalesTop original = result;
        result = new SCSalesTop();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSalesTop MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSalesTop.Descriptor; }
    }
    
    public override SCSalesTop DefaultInstanceForType {
      get { return global::SCSalesTop.DefaultInstance; }
    }
    
    public override SCSalesTop BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSalesTop) {
        return MergeFrom((SCSalesTop) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSalesTop other) {
      if (other == global::SCSalesTop.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSalesTopFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSalesTopFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static SCSalesTop() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSOrderList : pb::GeneratedMessage<CSOrderList, CSOrderList.Builder> {
  private CSOrderList() { }
  private static readonly CSOrderList defaultInstance = new CSOrderList().MakeReadOnly();
  private static readonly string[] _cSOrderListFieldNames = new string[] { "addtime_end", "addtime_start", "page", "proctime_end", "proctime_start", "status", "username" };
  private static readonly uint[] _cSOrderListFieldTags = new uint[] { 34, 26, 10, 50, 42, 16, 58 };
  public static CSOrderList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSOrderList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSOrderList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSOrderList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSOrderList, CSOrderList.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSOrderList__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int StatusFieldNumber = 2;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int AddtimeStartFieldNumber = 3;
  private bool hasAddtimeStart;
  private string addtimeStart_ = "";
  public bool HasAddtimeStart {
    get { return hasAddtimeStart; }
  }
  public string AddtimeStart {
    get { return addtimeStart_; }
  }
  
  public const int AddtimeEndFieldNumber = 4;
  private bool hasAddtimeEnd;
  private string addtimeEnd_ = "";
  public bool HasAddtimeEnd {
    get { return hasAddtimeEnd; }
  }
  public string AddtimeEnd {
    get { return addtimeEnd_; }
  }
  
  public const int ProctimeStartFieldNumber = 5;
  private bool hasProctimeStart;
  private string proctimeStart_ = "";
  public bool HasProctimeStart {
    get { return hasProctimeStart; }
  }
  public string ProctimeStart {
    get { return proctimeStart_; }
  }
  
  public const int ProctimeEndFieldNumber = 6;
  private bool hasProctimeEnd;
  private string proctimeEnd_ = "";
  public bool HasProctimeEnd {
    get { return hasProctimeEnd; }
  }
  public string ProctimeEnd {
    get { return proctimeEnd_; }
  }
  
  public const int UsernameFieldNumber = 7;
  private bool hasUsername;
  private string username_ = "";
  public bool HasUsername {
    get { return hasUsername; }
  }
  public string Username {
    get { return username_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSOrderListFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[2], Page);
    }
    if (hasStatus) {
      output.WriteInt32(2, field_names[5], Status);
    }
    if (hasAddtimeStart) {
      output.WriteString(3, field_names[1], AddtimeStart);
    }
    if (hasAddtimeEnd) {
      output.WriteString(4, field_names[0], AddtimeEnd);
    }
    if (hasProctimeStart) {
      output.WriteString(5, field_names[4], ProctimeStart);
    }
    if (hasProctimeEnd) {
      output.WriteString(6, field_names[3], ProctimeEnd);
    }
    if (hasUsername) {
      output.WriteString(7, field_names[6], Username);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Status);
    }
    if (hasAddtimeStart) {
      size += pb::CodedOutputStream.ComputeStringSize(3, AddtimeStart);
    }
    if (hasAddtimeEnd) {
      size += pb::CodedOutputStream.ComputeStringSize(4, AddtimeEnd);
    }
    if (hasProctimeStart) {
      size += pb::CodedOutputStream.ComputeStringSize(5, ProctimeStart);
    }
    if (hasProctimeEnd) {
      size += pb::CodedOutputStream.ComputeStringSize(6, ProctimeEnd);
    }
    if (hasUsername) {
      size += pb::CodedOutputStream.ComputeStringSize(7, Username);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSOrderList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOrderList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOrderList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOrderList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOrderList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOrderList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSOrderList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSOrderList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSOrderList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOrderList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSOrderList MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSOrderList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSOrderList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSOrderList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSOrderList result;
    
    private CSOrderList PrepareBuilder() {
      if (resultIsReadOnly) {
        CSOrderList original = result;
        result = new CSOrderList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSOrderList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSOrderList.Descriptor; }
    }
    
    public override CSOrderList DefaultInstanceForType {
      get { return global::CSOrderList.DefaultInstance; }
    }
    
    public override CSOrderList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSOrderList) {
        return MergeFrom((CSOrderList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSOrderList other) {
      if (other == global::CSOrderList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasAddtimeStart) {
        AddtimeStart = other.AddtimeStart;
      }
      if (other.HasAddtimeEnd) {
        AddtimeEnd = other.AddtimeEnd;
      }
      if (other.HasProctimeStart) {
        ProctimeStart = other.ProctimeStart;
      }
      if (other.HasProctimeEnd) {
        ProctimeEnd = other.ProctimeEnd;
      }
      if (other.HasUsername) {
        Username = other.Username;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSOrderListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSOrderListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 26: {
            result.hasAddtimeStart = input.ReadString(ref result.addtimeStart_);
            break;
          }
          case 34: {
            result.hasAddtimeEnd = input.ReadString(ref result.addtimeEnd_);
            break;
          }
          case 42: {
            result.hasProctimeStart = input.ReadString(ref result.proctimeStart_);
            break;
          }
          case 50: {
            result.hasProctimeEnd = input.ReadString(ref result.proctimeEnd_);
            break;
          }
          case 58: {
            result.hasUsername = input.ReadString(ref result.username_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasAddtimeStart {
      get { return result.hasAddtimeStart; }
    }
    public string AddtimeStart {
      get { return result.AddtimeStart; }
      set { SetAddtimeStart(value); }
    }
    public Builder SetAddtimeStart(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAddtimeStart = true;
      result.addtimeStart_ = value;
      return this;
    }
    public Builder ClearAddtimeStart() {
      PrepareBuilder();
      result.hasAddtimeStart = false;
      result.addtimeStart_ = "";
      return this;
    }
    
    public bool HasAddtimeEnd {
      get { return result.hasAddtimeEnd; }
    }
    public string AddtimeEnd {
      get { return result.AddtimeEnd; }
      set { SetAddtimeEnd(value); }
    }
    public Builder SetAddtimeEnd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAddtimeEnd = true;
      result.addtimeEnd_ = value;
      return this;
    }
    public Builder ClearAddtimeEnd() {
      PrepareBuilder();
      result.hasAddtimeEnd = false;
      result.addtimeEnd_ = "";
      return this;
    }
    
    public bool HasProctimeStart {
      get { return result.hasProctimeStart; }
    }
    public string ProctimeStart {
      get { return result.ProctimeStart; }
      set { SetProctimeStart(value); }
    }
    public Builder SetProctimeStart(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasProctimeStart = true;
      result.proctimeStart_ = value;
      return this;
    }
    public Builder ClearProctimeStart() {
      PrepareBuilder();
      result.hasProctimeStart = false;
      result.proctimeStart_ = "";
      return this;
    }
    
    public bool HasProctimeEnd {
      get { return result.hasProctimeEnd; }
    }
    public string ProctimeEnd {
      get { return result.ProctimeEnd; }
      set { SetProctimeEnd(value); }
    }
    public Builder SetProctimeEnd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasProctimeEnd = true;
      result.proctimeEnd_ = value;
      return this;
    }
    public Builder ClearProctimeEnd() {
      PrepareBuilder();
      result.hasProctimeEnd = false;
      result.proctimeEnd_ = "";
      return this;
    }
    
    public bool HasUsername {
      get { return result.hasUsername; }
    }
    public string Username {
      get { return result.Username; }
      set { SetUsername(value); }
    }
    public Builder SetUsername(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsername = true;
      result.username_ = value;
      return this;
    }
    public Builder ClearUsername() {
      PrepareBuilder();
      result.hasUsername = false;
      result.username_ = "";
      return this;
    }
  }
  static CSOrderList() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCOrderList : pb::GeneratedMessage<SCOrderList, SCOrderList.Builder> {
  private SCOrderList() { }
  private static readonly SCOrderList defaultInstance = new SCOrderList().MakeReadOnly();
  private static readonly string[] _sCOrderListFieldNames = new string[] { "orders" };
  private static readonly uint[] _sCOrderListFieldTags = new uint[] { 10 };
  public static SCOrderList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCOrderList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCOrderList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCOrderList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCOrderList, SCOrderList.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCOrderList__FieldAccessorTable; }
  }
  
  public const int OrdersFieldNumber = 1;
  private pbc::PopsicleList<global::StructOrder> orders_ = new pbc::PopsicleList<global::StructOrder>();
  public scg::IList<global::StructOrder> OrdersList {
    get { return orders_; }
  }
  public int OrdersCount {
    get { return orders_.Count; }
  }
  public global::StructOrder GetOrders(int index) {
    return orders_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructOrder element in OrdersList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCOrderListFieldNames;
    if (orders_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], orders_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructOrder element in OrdersList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCOrderList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOrderList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOrderList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOrderList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOrderList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOrderList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCOrderList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCOrderList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCOrderList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOrderList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCOrderList MakeReadOnly() {
    orders_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCOrderList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCOrderList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCOrderList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCOrderList result;
    
    private SCOrderList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCOrderList original = result;
        result = new SCOrderList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCOrderList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCOrderList.Descriptor; }
    }
    
    public override SCOrderList DefaultInstanceForType {
      get { return global::SCOrderList.DefaultInstance; }
    }
    
    public override SCOrderList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCOrderList) {
        return MergeFrom((SCOrderList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCOrderList other) {
      if (other == global::SCOrderList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.orders_.Count != 0) {
        result.orders_.Add(other.orders_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCOrderListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCOrderListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.orders_, global::StructOrder.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructOrder> OrdersList {
      get { return PrepareBuilder().orders_; }
    }
    public int OrdersCount {
      get { return result.OrdersCount; }
    }
    public global::StructOrder GetOrders(int index) {
      return result.GetOrders(index);
    }
    public Builder SetOrders(int index, global::StructOrder value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.orders_[index] = value;
      return this;
    }
    public Builder SetOrders(int index, global::StructOrder.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.orders_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddOrders(global::StructOrder value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.orders_.Add(value);
      return this;
    }
    public Builder AddOrders(global::StructOrder.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.orders_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeOrders(scg::IEnumerable<global::StructOrder> values) {
      PrepareBuilder();
      result.orders_.Add(values);
      return this;
    }
    public Builder ClearOrders() {
      PrepareBuilder();
      result.orders_.Clear();
      return this;
    }
  }
  static SCOrderList() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSOrderDetail : pb::GeneratedMessage<CSOrderDetail, CSOrderDetail.Builder> {
  private CSOrderDetail() { }
  private static readonly CSOrderDetail defaultInstance = new CSOrderDetail().MakeReadOnly();
  private static readonly string[] _cSOrderDetailFieldNames = new string[] { "orderid" };
  private static readonly uint[] _cSOrderDetailFieldTags = new uint[] { 8 };
  public static CSOrderDetail DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSOrderDetail DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSOrderDetail ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSOrderDetail__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSOrderDetail, CSOrderDetail.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSOrderDetail__FieldAccessorTable; }
  }
  
  public const int OrderidFieldNumber = 1;
  private bool hasOrderid;
  private int orderid_;
  public bool HasOrderid {
    get { return hasOrderid; }
  }
  public int Orderid {
    get { return orderid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOrderid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSOrderDetailFieldNames;
    if (hasOrderid) {
      output.WriteInt32(1, field_names[0], Orderid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOrderid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Orderid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSOrderDetail ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSOrderDetail ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSOrderDetail ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSOrderDetail MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSOrderDetail prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSOrderDetail, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSOrderDetail cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSOrderDetail result;
    
    private CSOrderDetail PrepareBuilder() {
      if (resultIsReadOnly) {
        CSOrderDetail original = result;
        result = new CSOrderDetail();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSOrderDetail MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSOrderDetail.Descriptor; }
    }
    
    public override CSOrderDetail DefaultInstanceForType {
      get { return global::CSOrderDetail.DefaultInstance; }
    }
    
    public override CSOrderDetail BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSOrderDetail) {
        return MergeFrom((CSOrderDetail) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSOrderDetail other) {
      if (other == global::CSOrderDetail.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOrderid) {
        Orderid = other.Orderid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSOrderDetailFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSOrderDetailFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasOrderid = input.ReadInt32(ref result.orderid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOrderid {
      get { return result.hasOrderid; }
    }
    public int Orderid {
      get { return result.Orderid; }
      set { SetOrderid(value); }
    }
    public Builder SetOrderid(int value) {
      PrepareBuilder();
      result.hasOrderid = true;
      result.orderid_ = value;
      return this;
    }
    public Builder ClearOrderid() {
      PrepareBuilder();
      result.hasOrderid = false;
      result.orderid_ = 0;
      return this;
    }
  }
  static CSOrderDetail() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCOrderDetail : pb::GeneratedMessage<SCOrderDetail, SCOrderDetail.Builder> {
  private SCOrderDetail() { }
  private static readonly SCOrderDetail defaultInstance = new SCOrderDetail().MakeReadOnly();
  private static readonly string[] _sCOrderDetailFieldNames = new string[] { "details" };
  private static readonly uint[] _sCOrderDetailFieldTags = new uint[] { 10 };
  public static SCOrderDetail DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCOrderDetail DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCOrderDetail ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCOrderDetail__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCOrderDetail, SCOrderDetail.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCOrderDetail__FieldAccessorTable; }
  }
  
  public const int DetailsFieldNumber = 1;
  private pbc::PopsicleList<global::StructOrderDetail> details_ = new pbc::PopsicleList<global::StructOrderDetail>();
  public scg::IList<global::StructOrderDetail> DetailsList {
    get { return details_; }
  }
  public int DetailsCount {
    get { return details_.Count; }
  }
  public global::StructOrderDetail GetDetails(int index) {
    return details_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructOrderDetail element in DetailsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCOrderDetailFieldNames;
    if (details_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], details_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructOrderDetail element in DetailsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCOrderDetail ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCOrderDetail ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCOrderDetail ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCOrderDetail MakeReadOnly() {
    details_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCOrderDetail prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCOrderDetail, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCOrderDetail cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCOrderDetail result;
    
    private SCOrderDetail PrepareBuilder() {
      if (resultIsReadOnly) {
        SCOrderDetail original = result;
        result = new SCOrderDetail();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCOrderDetail MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCOrderDetail.Descriptor; }
    }
    
    public override SCOrderDetail DefaultInstanceForType {
      get { return global::SCOrderDetail.DefaultInstance; }
    }
    
    public override SCOrderDetail BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCOrderDetail) {
        return MergeFrom((SCOrderDetail) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCOrderDetail other) {
      if (other == global::SCOrderDetail.DefaultInstance) return this;
      PrepareBuilder();
      if (other.details_.Count != 0) {
        result.details_.Add(other.details_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCOrderDetailFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCOrderDetailFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.details_, global::StructOrderDetail.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructOrderDetail> DetailsList {
      get { return PrepareBuilder().details_; }
    }
    public int DetailsCount {
      get { return result.DetailsCount; }
    }
    public global::StructOrderDetail GetDetails(int index) {
      return result.GetDetails(index);
    }
    public Builder SetDetails(int index, global::StructOrderDetail value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.details_[index] = value;
      return this;
    }
    public Builder SetDetails(int index, global::StructOrderDetail.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.details_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddDetails(global::StructOrderDetail value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.details_.Add(value);
      return this;
    }
    public Builder AddDetails(global::StructOrderDetail.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.details_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeDetails(scg::IEnumerable<global::StructOrderDetail> values) {
      PrepareBuilder();
      result.details_.Add(values);
      return this;
    }
    public Builder ClearDetails() {
      PrepareBuilder();
      result.details_.Clear();
      return this;
    }
  }
  static SCOrderDetail() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSOrderProcess : pb::GeneratedMessage<CSOrderProcess, CSOrderProcess.Builder> {
  private CSOrderProcess() { }
  private static readonly CSOrderProcess defaultInstance = new CSOrderProcess().MakeReadOnly();
  private static readonly string[] _cSOrderProcessFieldNames = new string[] { "orderid" };
  private static readonly uint[] _cSOrderProcessFieldTags = new uint[] { 8 };
  public static CSOrderProcess DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSOrderProcess DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSOrderProcess ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSOrderProcess__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSOrderProcess, CSOrderProcess.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSOrderProcess__FieldAccessorTable; }
  }
  
  public const int OrderidFieldNumber = 1;
  private bool hasOrderid;
  private int orderid_;
  public bool HasOrderid {
    get { return hasOrderid; }
  }
  public int Orderid {
    get { return orderid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOrderid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSOrderProcessFieldNames;
    if (hasOrderid) {
      output.WriteInt32(1, field_names[0], Orderid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOrderid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Orderid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSOrderProcess ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOrderProcess ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOrderProcess ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOrderProcess ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOrderProcess ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOrderProcess ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSOrderProcess ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSOrderProcess ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSOrderProcess ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOrderProcess ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSOrderProcess MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSOrderProcess prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSOrderProcess, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSOrderProcess cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSOrderProcess result;
    
    private CSOrderProcess PrepareBuilder() {
      if (resultIsReadOnly) {
        CSOrderProcess original = result;
        result = new CSOrderProcess();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSOrderProcess MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSOrderProcess.Descriptor; }
    }
    
    public override CSOrderProcess DefaultInstanceForType {
      get { return global::CSOrderProcess.DefaultInstance; }
    }
    
    public override CSOrderProcess BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSOrderProcess) {
        return MergeFrom((CSOrderProcess) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSOrderProcess other) {
      if (other == global::CSOrderProcess.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOrderid) {
        Orderid = other.Orderid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSOrderProcessFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSOrderProcessFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasOrderid = input.ReadInt32(ref result.orderid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOrderid {
      get { return result.hasOrderid; }
    }
    public int Orderid {
      get { return result.Orderid; }
      set { SetOrderid(value); }
    }
    public Builder SetOrderid(int value) {
      PrepareBuilder();
      result.hasOrderid = true;
      result.orderid_ = value;
      return this;
    }
    public Builder ClearOrderid() {
      PrepareBuilder();
      result.hasOrderid = false;
      result.orderid_ = 0;
      return this;
    }
  }
  static CSOrderProcess() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCShiftDeliveredBy : pb::GeneratedMessage<SCShiftDeliveredBy, SCShiftDeliveredBy.Builder> {
  private SCShiftDeliveredBy() { }
  private static readonly SCShiftDeliveredBy defaultInstance = new SCShiftDeliveredBy().MakeReadOnly();
  private static readonly string[] _sCShiftDeliveredByFieldNames = new string[] { "charge_amount", "delivered_by", "sale_amount" };
  private static readonly uint[] _sCShiftDeliveredByFieldTags = new uint[] { 16, 10, 24 };
  public static SCShiftDeliveredBy DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCShiftDeliveredBy DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCShiftDeliveredBy ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCShiftDeliveredBy__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCShiftDeliveredBy, SCShiftDeliveredBy.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCShiftDeliveredBy__FieldAccessorTable; }
  }
  
  public const int DeliveredByFieldNumber = 1;
  private bool hasDeliveredBy;
  private string deliveredBy_ = "";
  public bool HasDeliveredBy {
    get { return hasDeliveredBy; }
  }
  public string DeliveredBy {
    get { return deliveredBy_; }
  }
  
  public const int ChargeAmountFieldNumber = 2;
  private bool hasChargeAmount;
  private int chargeAmount_;
  public bool HasChargeAmount {
    get { return hasChargeAmount; }
  }
  public int ChargeAmount {
    get { return chargeAmount_; }
  }
  
  public const int SaleAmountFieldNumber = 3;
  private bool hasSaleAmount;
  private int saleAmount_;
  public bool HasSaleAmount {
    get { return hasSaleAmount; }
  }
  public int SaleAmount {
    get { return saleAmount_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasDeliveredBy) return false;
      if (!hasChargeAmount) return false;
      if (!hasSaleAmount) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCShiftDeliveredByFieldNames;
    if (hasDeliveredBy) {
      output.WriteString(1, field_names[1], DeliveredBy);
    }
    if (hasChargeAmount) {
      output.WriteInt32(2, field_names[0], ChargeAmount);
    }
    if (hasSaleAmount) {
      output.WriteInt32(3, field_names[2], SaleAmount);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasDeliveredBy) {
      size += pb::CodedOutputStream.ComputeStringSize(1, DeliveredBy);
    }
    if (hasChargeAmount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, ChargeAmount);
    }
    if (hasSaleAmount) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, SaleAmount);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCShiftDeliveredBy ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCShiftDeliveredBy MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCShiftDeliveredBy prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCShiftDeliveredBy, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCShiftDeliveredBy cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCShiftDeliveredBy result;
    
    private SCShiftDeliveredBy PrepareBuilder() {
      if (resultIsReadOnly) {
        SCShiftDeliveredBy original = result;
        result = new SCShiftDeliveredBy();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCShiftDeliveredBy MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCShiftDeliveredBy.Descriptor; }
    }
    
    public override SCShiftDeliveredBy DefaultInstanceForType {
      get { return global::SCShiftDeliveredBy.DefaultInstance; }
    }
    
    public override SCShiftDeliveredBy BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCShiftDeliveredBy) {
        return MergeFrom((SCShiftDeliveredBy) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCShiftDeliveredBy other) {
      if (other == global::SCShiftDeliveredBy.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasDeliveredBy) {
        DeliveredBy = other.DeliveredBy;
      }
      if (other.HasChargeAmount) {
        ChargeAmount = other.ChargeAmount;
      }
      if (other.HasSaleAmount) {
        SaleAmount = other.SaleAmount;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCShiftDeliveredByFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCShiftDeliveredByFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasDeliveredBy = input.ReadString(ref result.deliveredBy_);
            break;
          }
          case 16: {
            result.hasChargeAmount = input.ReadInt32(ref result.chargeAmount_);
            break;
          }
          case 24: {
            result.hasSaleAmount = input.ReadInt32(ref result.saleAmount_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasDeliveredBy {
      get { return result.hasDeliveredBy; }
    }
    public string DeliveredBy {
      get { return result.DeliveredBy; }
      set { SetDeliveredBy(value); }
    }
    public Builder SetDeliveredBy(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDeliveredBy = true;
      result.deliveredBy_ = value;
      return this;
    }
    public Builder ClearDeliveredBy() {
      PrepareBuilder();
      result.hasDeliveredBy = false;
      result.deliveredBy_ = "";
      return this;
    }
    
    public bool HasChargeAmount {
      get { return result.hasChargeAmount; }
    }
    public int ChargeAmount {
      get { return result.ChargeAmount; }
      set { SetChargeAmount(value); }
    }
    public Builder SetChargeAmount(int value) {
      PrepareBuilder();
      result.hasChargeAmount = true;
      result.chargeAmount_ = value;
      return this;
    }
    public Builder ClearChargeAmount() {
      PrepareBuilder();
      result.hasChargeAmount = false;
      result.chargeAmount_ = 0;
      return this;
    }
    
    public bool HasSaleAmount {
      get { return result.hasSaleAmount; }
    }
    public int SaleAmount {
      get { return result.SaleAmount; }
      set { SetSaleAmount(value); }
    }
    public Builder SetSaleAmount(int value) {
      PrepareBuilder();
      result.hasSaleAmount = true;
      result.saleAmount_ = value;
      return this;
    }
    public Builder ClearSaleAmount() {
      PrepareBuilder();
      result.hasSaleAmount = false;
      result.saleAmount_ = 0;
      return this;
    }
  }
  static SCShiftDeliveredBy() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSShiftAdd : pb::GeneratedMessage<CSShiftAdd, CSShiftAdd.Builder> {
  private CSShiftAdd() { }
  private static readonly CSShiftAdd defaultInstance = new CSShiftAdd().MakeReadOnly();
  private static readonly string[] _cSShiftAddFieldNames = new string[] { "delivered_pwd", "ischeck", "received_by", "received_pwd", "remark" };
  private static readonly uint[] _cSShiftAddFieldTags = new uint[] { 10, 32, 18, 26, 42 };
  public static CSShiftAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSShiftAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSShiftAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSShiftAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSShiftAdd, CSShiftAdd.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSShiftAdd__FieldAccessorTable; }
  }
  
  public const int DeliveredPwdFieldNumber = 1;
  private bool hasDeliveredPwd;
  private string deliveredPwd_ = "";
  public bool HasDeliveredPwd {
    get { return hasDeliveredPwd; }
  }
  public string DeliveredPwd {
    get { return deliveredPwd_; }
  }
  
  public const int ReceivedByFieldNumber = 2;
  private bool hasReceivedBy;
  private string receivedBy_ = "";
  public bool HasReceivedBy {
    get { return hasReceivedBy; }
  }
  public string ReceivedBy {
    get { return receivedBy_; }
  }
  
  public const int ReceivedPwdFieldNumber = 3;
  private bool hasReceivedPwd;
  private string receivedPwd_ = "";
  public bool HasReceivedPwd {
    get { return hasReceivedPwd; }
  }
  public string ReceivedPwd {
    get { return receivedPwd_; }
  }
  
  public const int IscheckFieldNumber = 4;
  private bool hasIscheck;
  private int ischeck_;
  public bool HasIscheck {
    get { return hasIscheck; }
  }
  public int Ischeck {
    get { return ischeck_; }
  }
  
  public const int RemarkFieldNumber = 5;
  private bool hasRemark;
  private string remark_ = "";
  public bool HasRemark {
    get { return hasRemark; }
  }
  public string Remark {
    get { return remark_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasDeliveredPwd) return false;
      if (!hasReceivedBy) return false;
      if (!hasReceivedPwd) return false;
      if (!hasIscheck) return false;
      if (!hasRemark) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSShiftAddFieldNames;
    if (hasDeliveredPwd) {
      output.WriteString(1, field_names[0], DeliveredPwd);
    }
    if (hasReceivedBy) {
      output.WriteString(2, field_names[2], ReceivedBy);
    }
    if (hasReceivedPwd) {
      output.WriteString(3, field_names[3], ReceivedPwd);
    }
    if (hasIscheck) {
      output.WriteInt32(4, field_names[1], Ischeck);
    }
    if (hasRemark) {
      output.WriteString(5, field_names[4], Remark);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasDeliveredPwd) {
      size += pb::CodedOutputStream.ComputeStringSize(1, DeliveredPwd);
    }
    if (hasReceivedBy) {
      size += pb::CodedOutputStream.ComputeStringSize(2, ReceivedBy);
    }
    if (hasReceivedPwd) {
      size += pb::CodedOutputStream.ComputeStringSize(3, ReceivedPwd);
    }
    if (hasIscheck) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Ischeck);
    }
    if (hasRemark) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Remark);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSShiftAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSShiftAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSShiftAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSShiftAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSShiftAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSShiftAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSShiftAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSShiftAdd result;
    
    private CSShiftAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSShiftAdd original = result;
        result = new CSShiftAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSShiftAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSShiftAdd.Descriptor; }
    }
    
    public override CSShiftAdd DefaultInstanceForType {
      get { return global::CSShiftAdd.DefaultInstance; }
    }
    
    public override CSShiftAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSShiftAdd) {
        return MergeFrom((CSShiftAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSShiftAdd other) {
      if (other == global::CSShiftAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasDeliveredPwd) {
        DeliveredPwd = other.DeliveredPwd;
      }
      if (other.HasReceivedBy) {
        ReceivedBy = other.ReceivedBy;
      }
      if (other.HasReceivedPwd) {
        ReceivedPwd = other.ReceivedPwd;
      }
      if (other.HasIscheck) {
        Ischeck = other.Ischeck;
      }
      if (other.HasRemark) {
        Remark = other.Remark;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSShiftAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSShiftAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasDeliveredPwd = input.ReadString(ref result.deliveredPwd_);
            break;
          }
          case 18: {
            result.hasReceivedBy = input.ReadString(ref result.receivedBy_);
            break;
          }
          case 26: {
            result.hasReceivedPwd = input.ReadString(ref result.receivedPwd_);
            break;
          }
          case 32: {
            result.hasIscheck = input.ReadInt32(ref result.ischeck_);
            break;
          }
          case 42: {
            result.hasRemark = input.ReadString(ref result.remark_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasDeliveredPwd {
      get { return result.hasDeliveredPwd; }
    }
    public string DeliveredPwd {
      get { return result.DeliveredPwd; }
      set { SetDeliveredPwd(value); }
    }
    public Builder SetDeliveredPwd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDeliveredPwd = true;
      result.deliveredPwd_ = value;
      return this;
    }
    public Builder ClearDeliveredPwd() {
      PrepareBuilder();
      result.hasDeliveredPwd = false;
      result.deliveredPwd_ = "";
      return this;
    }
    
    public bool HasReceivedBy {
      get { return result.hasReceivedBy; }
    }
    public string ReceivedBy {
      get { return result.ReceivedBy; }
      set { SetReceivedBy(value); }
    }
    public Builder SetReceivedBy(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasReceivedBy = true;
      result.receivedBy_ = value;
      return this;
    }
    public Builder ClearReceivedBy() {
      PrepareBuilder();
      result.hasReceivedBy = false;
      result.receivedBy_ = "";
      return this;
    }
    
    public bool HasReceivedPwd {
      get { return result.hasReceivedPwd; }
    }
    public string ReceivedPwd {
      get { return result.ReceivedPwd; }
      set { SetReceivedPwd(value); }
    }
    public Builder SetReceivedPwd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasReceivedPwd = true;
      result.receivedPwd_ = value;
      return this;
    }
    public Builder ClearReceivedPwd() {
      PrepareBuilder();
      result.hasReceivedPwd = false;
      result.receivedPwd_ = "";
      return this;
    }
    
    public bool HasIscheck {
      get { return result.hasIscheck; }
    }
    public int Ischeck {
      get { return result.Ischeck; }
      set { SetIscheck(value); }
    }
    public Builder SetIscheck(int value) {
      PrepareBuilder();
      result.hasIscheck = true;
      result.ischeck_ = value;
      return this;
    }
    public Builder ClearIscheck() {
      PrepareBuilder();
      result.hasIscheck = false;
      result.ischeck_ = 0;
      return this;
    }
    
    public bool HasRemark {
      get { return result.hasRemark; }
    }
    public string Remark {
      get { return result.Remark; }
      set { SetRemark(value); }
    }
    public Builder SetRemark(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRemark = true;
      result.remark_ = value;
      return this;
    }
    public Builder ClearRemark() {
      PrepareBuilder();
      result.hasRemark = false;
      result.remark_ = "";
      return this;
    }
  }
  static CSShiftAdd() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSShiftFind : pb::GeneratedMessage<CSShiftFind, CSShiftFind.Builder> {
  private CSShiftFind() { }
  private static readonly CSShiftFind defaultInstance = new CSShiftFind().MakeReadOnly();
  private static readonly string[] _cSShiftFindFieldNames = new string[] { "page", "starttime", "stoptime" };
  private static readonly uint[] _cSShiftFindFieldTags = new uint[] { 10, 18, 26 };
  public static CSShiftFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSShiftFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSShiftFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSShiftFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSShiftFind, CSShiftFind.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSShiftFind__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int StarttimeFieldNumber = 2;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int StoptimeFieldNumber = 3;
  private bool hasStoptime;
  private string stoptime_ = "";
  public bool HasStoptime {
    get { return hasStoptime; }
  }
  public string Stoptime {
    get { return stoptime_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSShiftFindFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[0], Page);
    }
    if (hasStarttime) {
      output.WriteString(2, field_names[1], Starttime);
    }
    if (hasStoptime) {
      output.WriteString(3, field_names[2], Stoptime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Starttime);
    }
    if (hasStoptime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Stoptime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSShiftFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSShiftFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSShiftFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSShiftFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSShiftFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSShiftFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSShiftFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSShiftFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSShiftFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSShiftFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSShiftFind MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSShiftFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSShiftFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSShiftFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSShiftFind result;
    
    private CSShiftFind PrepareBuilder() {
      if (resultIsReadOnly) {
        CSShiftFind original = result;
        result = new CSShiftFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSShiftFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSShiftFind.Descriptor; }
    }
    
    public override CSShiftFind DefaultInstanceForType {
      get { return global::CSShiftFind.DefaultInstance; }
    }
    
    public override CSShiftFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSShiftFind) {
        return MergeFrom((CSShiftFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSShiftFind other) {
      if (other == global::CSShiftFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasStoptime) {
        Stoptime = other.Stoptime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSShiftFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSShiftFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 26: {
            result.hasStoptime = input.ReadString(ref result.stoptime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasStoptime {
      get { return result.hasStoptime; }
    }
    public string Stoptime {
      get { return result.Stoptime; }
      set { SetStoptime(value); }
    }
    public Builder SetStoptime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStoptime = true;
      result.stoptime_ = value;
      return this;
    }
    public Builder ClearStoptime() {
      PrepareBuilder();
      result.hasStoptime = false;
      result.stoptime_ = "";
      return this;
    }
  }
  static CSShiftFind() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCShiftFind : pb::GeneratedMessage<SCShiftFind, SCShiftFind.Builder> {
  private SCShiftFind() { }
  private static readonly SCShiftFind defaultInstance = new SCShiftFind().MakeReadOnly();
  private static readonly string[] _sCShiftFindFieldNames = new string[] { "shifts" };
  private static readonly uint[] _sCShiftFindFieldTags = new uint[] { 10 };
  public static SCShiftFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCShiftFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCShiftFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCShiftFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCShiftFind, SCShiftFind.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCShiftFind__FieldAccessorTable; }
  }
  
  public const int ShiftsFieldNumber = 1;
  private pbc::PopsicleList<global::StructShift> shifts_ = new pbc::PopsicleList<global::StructShift>();
  public scg::IList<global::StructShift> ShiftsList {
    get { return shifts_; }
  }
  public int ShiftsCount {
    get { return shifts_.Count; }
  }
  public global::StructShift GetShifts(int index) {
    return shifts_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructShift element in ShiftsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCShiftFindFieldNames;
    if (shifts_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], shifts_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructShift element in ShiftsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCShiftFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCShiftFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCShiftFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCShiftFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCShiftFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCShiftFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCShiftFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCShiftFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCShiftFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCShiftFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCShiftFind MakeReadOnly() {
    shifts_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCShiftFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCShiftFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCShiftFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCShiftFind result;
    
    private SCShiftFind PrepareBuilder() {
      if (resultIsReadOnly) {
        SCShiftFind original = result;
        result = new SCShiftFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCShiftFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCShiftFind.Descriptor; }
    }
    
    public override SCShiftFind DefaultInstanceForType {
      get { return global::SCShiftFind.DefaultInstance; }
    }
    
    public override SCShiftFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCShiftFind) {
        return MergeFrom((SCShiftFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCShiftFind other) {
      if (other == global::SCShiftFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.shifts_.Count != 0) {
        result.shifts_.Add(other.shifts_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCShiftFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCShiftFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.shifts_, global::StructShift.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructShift> ShiftsList {
      get { return PrepareBuilder().shifts_; }
    }
    public int ShiftsCount {
      get { return result.ShiftsCount; }
    }
    public global::StructShift GetShifts(int index) {
      return result.GetShifts(index);
    }
    public Builder SetShifts(int index, global::StructShift value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.shifts_[index] = value;
      return this;
    }
    public Builder SetShifts(int index, global::StructShift.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.shifts_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddShifts(global::StructShift value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.shifts_.Add(value);
      return this;
    }
    public Builder AddShifts(global::StructShift.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.shifts_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeShifts(scg::IEnumerable<global::StructShift> values) {
      PrepareBuilder();
      result.shifts_.Add(values);
      return this;
    }
    public Builder ClearShifts() {
      PrepareBuilder();
      result.shifts_.Clear();
      return this;
    }
  }
  static SCShiftFind() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSReconnect : pb::GeneratedMessage<CSReconnect, CSReconnect.Builder> {
  private CSReconnect() { }
  private static readonly CSReconnect defaultInstance = new CSReconnect().MakeReadOnly();
  private static readonly string[] _cSReconnectFieldNames = new string[] { "deviceToken", "password", "userId" };
  private static readonly uint[] _cSReconnectFieldTags = new uint[] { 26, 18, 10 };
  public static CSReconnect DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSReconnect DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSReconnect ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSReconnect__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSReconnect, CSReconnect.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSReconnect__FieldAccessorTable; }
  }
  
  public const int UserIdFieldNumber = 1;
  private bool hasUserId;
  private string userId_ = "";
  public bool HasUserId {
    get { return hasUserId; }
  }
  public string UserId {
    get { return userId_; }
  }
  
  public const int PasswordFieldNumber = 2;
  private bool hasPassword;
  private string password_ = "";
  public bool HasPassword {
    get { return hasPassword; }
  }
  public string Password {
    get { return password_; }
  }
  
  public const int DeviceTokenFieldNumber = 3;
  private bool hasDeviceToken;
  private string deviceToken_ = "";
  public bool HasDeviceToken {
    get { return hasDeviceToken; }
  }
  public string DeviceToken {
    get { return deviceToken_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasUserId) return false;
      if (!hasPassword) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSReconnectFieldNames;
    if (hasUserId) {
      output.WriteString(1, field_names[2], UserId);
    }
    if (hasPassword) {
      output.WriteString(2, field_names[1], Password);
    }
    if (hasDeviceToken) {
      output.WriteString(3, field_names[0], DeviceToken);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUserId) {
      size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
    }
    if (hasPassword) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Password);
    }
    if (hasDeviceToken) {
      size += pb::CodedOutputStream.ComputeStringSize(3, DeviceToken);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSReconnect ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSReconnect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSReconnect ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSReconnect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSReconnect ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSReconnect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSReconnect ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSReconnect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSReconnect ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSReconnect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSReconnect MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSReconnect prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSReconnect, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSReconnect cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSReconnect result;
    
    private CSReconnect PrepareBuilder() {
      if (resultIsReadOnly) {
        CSReconnect original = result;
        result = new CSReconnect();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSReconnect MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSReconnect.Descriptor; }
    }
    
    public override CSReconnect DefaultInstanceForType {
      get { return global::CSReconnect.DefaultInstance; }
    }
    
    public override CSReconnect BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSReconnect) {
        return MergeFrom((CSReconnect) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSReconnect other) {
      if (other == global::CSReconnect.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUserId) {
        UserId = other.UserId;
      }
      if (other.HasPassword) {
        Password = other.Password;
      }
      if (other.HasDeviceToken) {
        DeviceToken = other.DeviceToken;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSReconnectFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSReconnectFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUserId = input.ReadString(ref result.userId_);
            break;
          }
          case 18: {
            result.hasPassword = input.ReadString(ref result.password_);
            break;
          }
          case 26: {
            result.hasDeviceToken = input.ReadString(ref result.deviceToken_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUserId {
      get { return result.hasUserId; }
    }
    public string UserId {
      get { return result.UserId; }
      set { SetUserId(value); }
    }
    public Builder SetUserId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserId = true;
      result.userId_ = value;
      return this;
    }
    public Builder ClearUserId() {
      PrepareBuilder();
      result.hasUserId = false;
      result.userId_ = "";
      return this;
    }
    
    public bool HasPassword {
      get { return result.hasPassword; }
    }
    public string Password {
      get { return result.Password; }
      set { SetPassword(value); }
    }
    public Builder SetPassword(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPassword = true;
      result.password_ = value;
      return this;
    }
    public Builder ClearPassword() {
      PrepareBuilder();
      result.hasPassword = false;
      result.password_ = "";
      return this;
    }
    
    public bool HasDeviceToken {
      get { return result.hasDeviceToken; }
    }
    public string DeviceToken {
      get { return result.DeviceToken; }
      set { SetDeviceToken(value); }
    }
    public Builder SetDeviceToken(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDeviceToken = true;
      result.deviceToken_ = value;
      return this;
    }
    public Builder ClearDeviceToken() {
      PrepareBuilder();
      result.hasDeviceToken = false;
      result.deviceToken_ = "";
      return this;
    }
  }
  static CSReconnect() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCReconnect : pb::GeneratedMessage<SCReconnect, SCReconnect.Builder> {
  private SCReconnect() { }
  private static readonly SCReconnect defaultInstance = new SCReconnect().MakeReadOnly();
  private static readonly string[] _sCReconnectFieldNames = new string[] { "guid", "sessionId" };
  private static readonly uint[] _sCReconnectFieldTags = new uint[] { 16, 8 };
  public static SCReconnect DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCReconnect DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCReconnect ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCReconnect__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCReconnect, SCReconnect.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCReconnect__FieldAccessorTable; }
  }
  
  public const int SessionIdFieldNumber = 1;
  private bool hasSessionId;
  private int sessionId_;
  public bool HasSessionId {
    get { return hasSessionId; }
  }
  public int SessionId {
    get { return sessionId_; }
  }
  
  public const int GuidFieldNumber = 2;
  private bool hasGuid;
  private int guid_;
  public bool HasGuid {
    get { return hasGuid; }
  }
  public int Guid {
    get { return guid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasSessionId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCReconnectFieldNames;
    if (hasSessionId) {
      output.WriteInt32(1, field_names[1], SessionId);
    }
    if (hasGuid) {
      output.WriteInt32(2, field_names[0], Guid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSessionId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, SessionId);
    }
    if (hasGuid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Guid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCReconnect ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCReconnect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCReconnect ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCReconnect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCReconnect ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCReconnect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCReconnect ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCReconnect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCReconnect ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCReconnect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCReconnect MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCReconnect prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCReconnect, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCReconnect cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCReconnect result;
    
    private SCReconnect PrepareBuilder() {
      if (resultIsReadOnly) {
        SCReconnect original = result;
        result = new SCReconnect();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCReconnect MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCReconnect.Descriptor; }
    }
    
    public override SCReconnect DefaultInstanceForType {
      get { return global::SCReconnect.DefaultInstance; }
    }
    
    public override SCReconnect BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCReconnect) {
        return MergeFrom((SCReconnect) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCReconnect other) {
      if (other == global::SCReconnect.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSessionId) {
        SessionId = other.SessionId;
      }
      if (other.HasGuid) {
        Guid = other.Guid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCReconnectFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCReconnectFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSessionId = input.ReadInt32(ref result.sessionId_);
            break;
          }
          case 16: {
            result.hasGuid = input.ReadInt32(ref result.guid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSessionId {
      get { return result.hasSessionId; }
    }
    public int SessionId {
      get { return result.SessionId; }
      set { SetSessionId(value); }
    }
    public Builder SetSessionId(int value) {
      PrepareBuilder();
      result.hasSessionId = true;
      result.sessionId_ = value;
      return this;
    }
    public Builder ClearSessionId() {
      PrepareBuilder();
      result.hasSessionId = false;
      result.sessionId_ = 0;
      return this;
    }
    
    public bool HasGuid {
      get { return result.hasGuid; }
    }
    public int Guid {
      get { return result.Guid; }
      set { SetGuid(value); }
    }
    public Builder SetGuid(int value) {
      PrepareBuilder();
      result.hasGuid = true;
      result.guid_ = value;
      return this;
    }
    public Builder ClearGuid() {
      PrepareBuilder();
      result.hasGuid = false;
      result.guid_ = 0;
      return this;
    }
  }
  static SCReconnect() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSClientOpen : pb::GeneratedMessage<CSClientOpen, CSClientOpen.Builder> {
  private CSClientOpen() { }
  private static readonly CSClientOpen defaultInstance = new CSClientOpen().MakeReadOnly();
  private static readonly string[] _cSClientOpenFieldNames = new string[] { "text" };
  private static readonly uint[] _cSClientOpenFieldTags = new uint[] { 10 };
  public static CSClientOpen DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSClientOpen DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSClientOpen ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSClientOpen__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSClientOpen, CSClientOpen.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSClientOpen__FieldAccessorTable; }
  }
  
  public const int TextFieldNumber = 1;
  private bool hasText;
  private string text_ = "";
  public bool HasText {
    get { return hasText; }
  }
  public string Text {
    get { return text_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasText) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSClientOpenFieldNames;
    if (hasText) {
      output.WriteString(1, field_names[0], Text);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasText) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Text);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSClientOpen ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSClientOpen ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSClientOpen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSClientOpen ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientOpen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSClientOpen MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSClientOpen prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSClientOpen, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSClientOpen cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSClientOpen result;
    
    private CSClientOpen PrepareBuilder() {
      if (resultIsReadOnly) {
        CSClientOpen original = result;
        result = new CSClientOpen();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSClientOpen MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSClientOpen.Descriptor; }
    }
    
    public override CSClientOpen DefaultInstanceForType {
      get { return global::CSClientOpen.DefaultInstance; }
    }
    
    public override CSClientOpen BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSClientOpen) {
        return MergeFrom((CSClientOpen) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSClientOpen other) {
      if (other == global::CSClientOpen.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasText) {
        Text = other.Text;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSClientOpenFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSClientOpenFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasText = input.ReadString(ref result.text_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasText {
      get { return result.hasText; }
    }
    public string Text {
      get { return result.Text; }
      set { SetText(value); }
    }
    public Builder SetText(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasText = true;
      result.text_ = value;
      return this;
    }
    public Builder ClearText() {
      PrepareBuilder();
      result.hasText = false;
      result.text_ = "";
      return this;
    }
  }
  static CSClientOpen() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSClientClose : pb::GeneratedMessage<CSClientClose, CSClientClose.Builder> {
  private CSClientClose() { }
  private static readonly CSClientClose defaultInstance = new CSClientClose().MakeReadOnly();
  private static readonly string[] _cSClientCloseFieldNames = new string[] {  };
  private static readonly uint[] _cSClientCloseFieldTags = new uint[] {  };
  public static CSClientClose DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSClientClose DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSClientClose ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSClientClose__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSClientClose, CSClientClose.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSClientClose__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSClientCloseFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSClientClose ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientClose ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientClose ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientClose ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientClose ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientClose ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSClientClose ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSClientClose ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSClientClose ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientClose ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSClientClose MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSClientClose prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSClientClose, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSClientClose cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSClientClose result;
    
    private CSClientClose PrepareBuilder() {
      if (resultIsReadOnly) {
        CSClientClose original = result;
        result = new CSClientClose();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSClientClose MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSClientClose.Descriptor; }
    }
    
    public override CSClientClose DefaultInstanceForType {
      get { return global::CSClientClose.DefaultInstance; }
    }
    
    public override CSClientClose BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSClientClose) {
        return MergeFrom((CSClientClose) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSClientClose other) {
      if (other == global::CSClientClose.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSClientCloseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSClientCloseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSClientClose() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSLogon : pb::GeneratedMessage<CSLogon, CSLogon.Builder> {
  private CSLogon() { }
  private static readonly CSLogon defaultInstance = new CSLogon().MakeReadOnly();
  private static readonly string[] _cSLogonFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSLogonFieldTags = new uint[] { 10 };
  public static CSLogon DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSLogon DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSLogon ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSLogon__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSLogon, CSLogon.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSLogon__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSLogonFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSLogon ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogon ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogon ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogon ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogon ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogon ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSLogon ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSLogon ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSLogon ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogon ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSLogon MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSLogon prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSLogon, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSLogon cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSLogon result;
    
    private CSLogon PrepareBuilder() {
      if (resultIsReadOnly) {
        CSLogon original = result;
        result = new CSLogon();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSLogon MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSLogon.Descriptor; }
    }
    
    public override CSLogon DefaultInstanceForType {
      get { return global::CSLogon.DefaultInstance; }
    }
    
    public override CSLogon BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSLogon) {
        return MergeFrom((CSLogon) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSLogon other) {
      if (other == global::CSLogon.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSLogonFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSLogonFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSLogon() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCLogon : pb::GeneratedMessage<SCLogon, SCLogon.Builder> {
  private SCLogon() { }
  private static readonly SCLogon defaultInstance = new SCLogon().MakeReadOnly();
  private static readonly string[] _sCLogonFieldNames = new string[] { "balance", "cardnumber", "integal", "memberid", "name", "right" };
  private static readonly uint[] _sCLogonFieldTags = new uint[] { 72, 18, 96, 8, 34, 40 };
  public static SCLogon DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCLogon DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCLogon ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCLogon__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCLogon, SCLogon.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCLogon__FieldAccessorTable; }
  }
  
  public const int MemberidFieldNumber = 1;
  private bool hasMemberid;
  private int memberid_;
  public bool HasMemberid {
    get { return hasMemberid; }
  }
  public int Memberid {
    get { return memberid_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int NameFieldNumber = 4;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int RightFieldNumber = 5;
  private bool hasRight;
  private int right_;
  public bool HasRight {
    get { return hasRight; }
  }
  public int Right {
    get { return right_; }
  }
  
  public const int BalanceFieldNumber = 9;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int IntegalFieldNumber = 12;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMemberid) return false;
      if (!hasCardnumber) return false;
      if (!hasName) return false;
      if (!hasRight) return false;
      if (!hasBalance) return false;
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCLogonFieldNames;
    if (hasMemberid) {
      output.WriteInt32(1, field_names[3], Memberid);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasName) {
      output.WriteString(4, field_names[4], Name);
    }
    if (hasRight) {
      output.WriteInt32(5, field_names[5], Right);
    }
    if (hasBalance) {
      output.WriteInt32(9, field_names[0], Balance);
    }
    if (hasIntegal) {
      output.WriteInt32(12, field_names[2], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMemberid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Memberid);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Name);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Right);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(9, Balance);
    }
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(12, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCLogon ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogon ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogon ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogon ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogon ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogon ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCLogon ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCLogon ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCLogon ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogon ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCLogon MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCLogon prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCLogon, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCLogon cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCLogon result;
    
    private SCLogon PrepareBuilder() {
      if (resultIsReadOnly) {
        SCLogon original = result;
        result = new SCLogon();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCLogon MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCLogon.Descriptor; }
    }
    
    public override SCLogon DefaultInstanceForType {
      get { return global::SCLogon.DefaultInstance; }
    }
    
    public override SCLogon BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCLogon) {
        return MergeFrom((SCLogon) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCLogon other) {
      if (other == global::SCLogon.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMemberid) {
        Memberid = other.Memberid;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCLogonFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCLogonFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMemberid = input.ReadInt32(ref result.memberid_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 34: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 40: {
            result.hasRight = input.ReadInt32(ref result.right_);
            break;
          }
          case 72: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 96: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMemberid {
      get { return result.hasMemberid; }
    }
    public int Memberid {
      get { return result.Memberid; }
      set { SetMemberid(value); }
    }
    public Builder SetMemberid(int value) {
      PrepareBuilder();
      result.hasMemberid = true;
      result.memberid_ = value;
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.hasMemberid = false;
      result.memberid_ = 0;
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public int Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(int value) {
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = 0;
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCLogon() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSLogoff : pb::GeneratedMessage<CSLogoff, CSLogoff.Builder> {
  private CSLogoff() { }
  private static readonly CSLogoff defaultInstance = new CSLogoff().MakeReadOnly();
  private static readonly string[] _cSLogoffFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSLogoffFieldTags = new uint[] { 10 };
  public static CSLogoff DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSLogoff DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSLogoff ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSLogoff__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSLogoff, CSLogoff.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSLogoff__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSLogoffFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSLogoff ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogoff ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogoff ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogoff ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogoff ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogoff ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSLogoff ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSLogoff ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSLogoff ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogoff ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSLogoff MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSLogoff prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSLogoff, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSLogoff cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSLogoff result;
    
    private CSLogoff PrepareBuilder() {
      if (resultIsReadOnly) {
        CSLogoff original = result;
        result = new CSLogoff();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSLogoff MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSLogoff.Descriptor; }
    }
    
    public override CSLogoff DefaultInstanceForType {
      get { return global::CSLogoff.DefaultInstance; }
    }
    
    public override CSLogoff BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSLogoff) {
        return MergeFrom((CSLogoff) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSLogoff other) {
      if (other == global::CSLogoff.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSLogoffFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSLogoffFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSLogoff() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCLogoff : pb::GeneratedMessage<SCLogoff, SCLogoff.Builder> {
  private SCLogoff() { }
  private static readonly SCLogoff defaultInstance = new SCLogoff().MakeReadOnly();
  private static readonly string[] _sCLogoffFieldNames = new string[] { "balance", "cardnumber", "name", "right", "usedmoney", "usedtime" };
  private static readonly uint[] _sCLogoffFieldTags = new uint[] { 32, 18, 10, 26, 40, 48 };
  public static SCLogoff DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCLogoff DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCLogoff ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCLogoff__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCLogoff, SCLogoff.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCLogoff__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int BalanceFieldNumber = 4;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int UsedmoneyFieldNumber = 5;
  private bool hasUsedmoney;
  private int usedmoney_;
  public bool HasUsedmoney {
    get { return hasUsedmoney; }
  }
  public int Usedmoney {
    get { return usedmoney_; }
  }
  
  public const int UsedtimeFieldNumber = 6;
  private bool hasUsedtime;
  private int usedtime_;
  public bool HasUsedtime {
    get { return hasUsedtime; }
  }
  public int Usedtime {
    get { return usedtime_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasBalance) return false;
      if (!hasUsedmoney) return false;
      if (!hasUsedtime) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCLogoffFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[2], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[3], Right);
    }
    if (hasBalance) {
      output.WriteInt32(4, field_names[0], Balance);
    }
    if (hasUsedmoney) {
      output.WriteInt32(5, field_names[4], Usedmoney);
    }
    if (hasUsedtime) {
      output.WriteInt32(6, field_names[5], Usedtime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Balance);
    }
    if (hasUsedmoney) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Usedmoney);
    }
    if (hasUsedtime) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Usedtime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCLogoff ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogoff ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogoff ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogoff ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogoff ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogoff ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCLogoff ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCLogoff ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCLogoff ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogoff ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCLogoff MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCLogoff prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCLogoff, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCLogoff cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCLogoff result;
    
    private SCLogoff PrepareBuilder() {
      if (resultIsReadOnly) {
        SCLogoff original = result;
        result = new SCLogoff();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCLogoff MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCLogoff.Descriptor; }
    }
    
    public override SCLogoff DefaultInstanceForType {
      get { return global::SCLogoff.DefaultInstance; }
    }
    
    public override SCLogoff BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCLogoff) {
        return MergeFrom((SCLogoff) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCLogoff other) {
      if (other == global::SCLogoff.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasUsedmoney) {
        Usedmoney = other.Usedmoney;
      }
      if (other.HasUsedtime) {
        Usedtime = other.Usedtime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCLogoffFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCLogoffFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 40: {
            result.hasUsedmoney = input.ReadInt32(ref result.usedmoney_);
            break;
          }
          case 48: {
            result.hasUsedtime = input.ReadInt32(ref result.usedtime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasUsedmoney {
      get { return result.hasUsedmoney; }
    }
    public int Usedmoney {
      get { return result.Usedmoney; }
      set { SetUsedmoney(value); }
    }
    public Builder SetUsedmoney(int value) {
      PrepareBuilder();
      result.hasUsedmoney = true;
      result.usedmoney_ = value;
      return this;
    }
    public Builder ClearUsedmoney() {
      PrepareBuilder();
      result.hasUsedmoney = false;
      result.usedmoney_ = 0;
      return this;
    }
    
    public bool HasUsedtime {
      get { return result.hasUsedtime; }
    }
    public int Usedtime {
      get { return result.Usedtime; }
      set { SetUsedtime(value); }
    }
    public Builder SetUsedtime(int value) {
      PrepareBuilder();
      result.hasUsedtime = true;
      result.usedtime_ = value;
      return this;
    }
    public Builder ClearUsedtime() {
      PrepareBuilder();
      result.hasUsedtime = false;
      result.usedtime_ = 0;
      return this;
    }
  }
  static SCLogoff() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSHungup : pb::GeneratedMessage<CSHungup, CSHungup.Builder> {
  private CSHungup() { }
  private static readonly CSHungup defaultInstance = new CSHungup().MakeReadOnly();
  private static readonly string[] _cSHungupFieldNames = new string[] { "cardnumber" };
  private static readonly uint[] _cSHungupFieldTags = new uint[] { 10 };
  public static CSHungup DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSHungup DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSHungup ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSHungup__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSHungup, CSHungup.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSHungup__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSHungupFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSHungup ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSHungup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSHungup ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSHungup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSHungup ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSHungup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSHungup ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSHungup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSHungup ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSHungup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSHungup MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSHungup prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSHungup, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSHungup cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSHungup result;
    
    private CSHungup PrepareBuilder() {
      if (resultIsReadOnly) {
        CSHungup original = result;
        result = new CSHungup();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSHungup MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSHungup.Descriptor; }
    }
    
    public override CSHungup DefaultInstanceForType {
      get { return global::CSHungup.DefaultInstance; }
    }
    
    public override CSHungup BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSHungup) {
        return MergeFrom((CSHungup) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSHungup other) {
      if (other == global::CSHungup.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSHungupFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSHungupFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
  }
  static CSHungup() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPreCharge : pb::GeneratedMessage<CSPreCharge, CSPreCharge.Builder> {
  private CSPreCharge() { }
  private static readonly CSPreCharge defaultInstance = new CSPreCharge().MakeReadOnly();
  private static readonly string[] _cSPreChargeFieldNames = new string[] { "amount", "cardnumber", "offical", "paymode" };
  private static readonly uint[] _cSPreChargeFieldTags = new uint[] { 16, 10, 32, 24 };
  public static CSPreCharge DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPreCharge DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPreCharge ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSPreCharge__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPreCharge, CSPreCharge.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSPreCharge__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int AmountFieldNumber = 2;
  private bool hasAmount;
  private int amount_;
  public bool HasAmount {
    get { return hasAmount; }
  }
  public int Amount {
    get { return amount_; }
  }
  
  public const int PaymodeFieldNumber = 3;
  private bool hasPaymode;
  private int paymode_;
  public bool HasPaymode {
    get { return hasPaymode; }
  }
  public int Paymode {
    get { return paymode_; }
  }
  
  public const int OfficalFieldNumber = 4;
  private bool hasOffical;
  private int offical_;
  public bool HasOffical {
    get { return hasOffical; }
  }
  public int Offical {
    get { return offical_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      if (!hasAmount) return false;
      if (!hasPaymode) return false;
      if (!hasOffical) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPreChargeFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[1], Cardnumber);
    }
    if (hasAmount) {
      output.WriteInt32(2, field_names[0], Amount);
    }
    if (hasPaymode) {
      output.WriteInt32(3, field_names[3], Paymode);
    }
    if (hasOffical) {
      output.WriteInt32(4, field_names[2], Offical);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    if (hasAmount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Amount);
    }
    if (hasPaymode) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Paymode);
    }
    if (hasOffical) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Offical);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPreCharge ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPreCharge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPreCharge ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPreCharge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPreCharge ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPreCharge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPreCharge ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPreCharge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPreCharge ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPreCharge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPreCharge MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPreCharge prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPreCharge, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPreCharge cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPreCharge result;
    
    private CSPreCharge PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPreCharge original = result;
        result = new CSPreCharge();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPreCharge MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPreCharge.Descriptor; }
    }
    
    public override CSPreCharge DefaultInstanceForType {
      get { return global::CSPreCharge.DefaultInstance; }
    }
    
    public override CSPreCharge BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPreCharge) {
        return MergeFrom((CSPreCharge) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPreCharge other) {
      if (other == global::CSPreCharge.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasAmount) {
        Amount = other.Amount;
      }
      if (other.HasPaymode) {
        Paymode = other.Paymode;
      }
      if (other.HasOffical) {
        Offical = other.Offical;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPreChargeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPreChargeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 16: {
            result.hasAmount = input.ReadInt32(ref result.amount_);
            break;
          }
          case 24: {
            result.hasPaymode = input.ReadInt32(ref result.paymode_);
            break;
          }
          case 32: {
            result.hasOffical = input.ReadInt32(ref result.offical_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasAmount {
      get { return result.hasAmount; }
    }
    public int Amount {
      get { return result.Amount; }
      set { SetAmount(value); }
    }
    public Builder SetAmount(int value) {
      PrepareBuilder();
      result.hasAmount = true;
      result.amount_ = value;
      return this;
    }
    public Builder ClearAmount() {
      PrepareBuilder();
      result.hasAmount = false;
      result.amount_ = 0;
      return this;
    }
    
    public bool HasPaymode {
      get { return result.hasPaymode; }
    }
    public int Paymode {
      get { return result.Paymode; }
      set { SetPaymode(value); }
    }
    public Builder SetPaymode(int value) {
      PrepareBuilder();
      result.hasPaymode = true;
      result.paymode_ = value;
      return this;
    }
    public Builder ClearPaymode() {
      PrepareBuilder();
      result.hasPaymode = false;
      result.paymode_ = 0;
      return this;
    }
    
    public bool HasOffical {
      get { return result.hasOffical; }
    }
    public int Offical {
      get { return result.Offical; }
      set { SetOffical(value); }
    }
    public Builder SetOffical(int value) {
      PrepareBuilder();
      result.hasOffical = true;
      result.offical_ = value;
      return this;
    }
    public Builder ClearOffical() {
      PrepareBuilder();
      result.hasOffical = false;
      result.offical_ = 0;
      return this;
    }
  }
  static CSPreCharge() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPreCharge : pb::GeneratedMessage<SCPreCharge, SCPreCharge.Builder> {
  private SCPreCharge() { }
  private static readonly SCPreCharge defaultInstance = new SCPreCharge().MakeReadOnly();
  private static readonly string[] _sCPreChargeFieldNames = new string[] { "qrcode" };
  private static readonly uint[] _sCPreChargeFieldTags = new uint[] { 10 };
  public static SCPreCharge DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPreCharge DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPreCharge ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCPreCharge__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPreCharge, SCPreCharge.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCPreCharge__FieldAccessorTable; }
  }
  
  public const int QrcodeFieldNumber = 1;
  private bool hasQrcode;
  private string qrcode_ = "";
  public bool HasQrcode {
    get { return hasQrcode; }
  }
  public string Qrcode {
    get { return qrcode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasQrcode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPreChargeFieldNames;
    if (hasQrcode) {
      output.WriteString(1, field_names[0], Qrcode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasQrcode) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Qrcode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPreCharge ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPreCharge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPreCharge ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPreCharge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPreCharge ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPreCharge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPreCharge ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPreCharge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPreCharge ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPreCharge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPreCharge MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPreCharge prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPreCharge, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPreCharge cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPreCharge result;
    
    private SCPreCharge PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPreCharge original = result;
        result = new SCPreCharge();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPreCharge MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPreCharge.Descriptor; }
    }
    
    public override SCPreCharge DefaultInstanceForType {
      get { return global::SCPreCharge.DefaultInstance; }
    }
    
    public override SCPreCharge BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPreCharge) {
        return MergeFrom((SCPreCharge) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPreCharge other) {
      if (other == global::SCPreCharge.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasQrcode) {
        Qrcode = other.Qrcode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPreChargeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPreChargeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasQrcode = input.ReadString(ref result.qrcode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasQrcode {
      get { return result.hasQrcode; }
    }
    public string Qrcode {
      get { return result.Qrcode; }
      set { SetQrcode(value); }
    }
    public Builder SetQrcode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasQrcode = true;
      result.qrcode_ = value;
      return this;
    }
    public Builder ClearQrcode() {
      PrepareBuilder();
      result.hasQrcode = false;
      result.qrcode_ = "";
      return this;
    }
  }
  static SCPreCharge() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCToCharge : pb::GeneratedMessage<SCToCharge, SCToCharge.Builder> {
  private SCToCharge() { }
  private static readonly SCToCharge defaultInstance = new SCToCharge().MakeReadOnly();
  private static readonly string[] _sCToChargeFieldNames = new string[] { "balance", "cardnumber", "integal", "name", "recharge", "right" };
  private static readonly uint[] _sCToChargeFieldTags = new uint[] { 40, 18, 48, 10, 32, 26 };
  public static SCToCharge DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCToCharge DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCToCharge ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCToCharge__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCToCharge, SCToCharge.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCToCharge__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int RechargeFieldNumber = 4;
  private bool hasRecharge;
  private int recharge_;
  public bool HasRecharge {
    get { return hasRecharge; }
  }
  public int Recharge {
    get { return recharge_; }
  }
  
  public const int BalanceFieldNumber = 5;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int IntegalFieldNumber = 6;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasRecharge) return false;
      if (!hasBalance) return false;
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCToChargeFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[3], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[5], Right);
    }
    if (hasRecharge) {
      output.WriteInt32(4, field_names[4], Recharge);
    }
    if (hasBalance) {
      output.WriteInt32(5, field_names[0], Balance);
    }
    if (hasIntegal) {
      output.WriteInt32(6, field_names[2], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasRecharge) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Recharge);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Balance);
    }
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCToCharge ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCToCharge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCToCharge ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCToCharge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCToCharge ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCToCharge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCToCharge ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCToCharge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCToCharge ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCToCharge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCToCharge MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCToCharge prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCToCharge, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCToCharge cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCToCharge result;
    
    private SCToCharge PrepareBuilder() {
      if (resultIsReadOnly) {
        SCToCharge original = result;
        result = new SCToCharge();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCToCharge MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCToCharge.Descriptor; }
    }
    
    public override SCToCharge DefaultInstanceForType {
      get { return global::SCToCharge.DefaultInstance; }
    }
    
    public override SCToCharge BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCToCharge) {
        return MergeFrom((SCToCharge) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCToCharge other) {
      if (other == global::SCToCharge.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasRecharge) {
        Recharge = other.Recharge;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCToChargeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCToChargeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasRecharge = input.ReadInt32(ref result.recharge_);
            break;
          }
          case 40: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 48: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasRecharge {
      get { return result.hasRecharge; }
    }
    public int Recharge {
      get { return result.Recharge; }
      set { SetRecharge(value); }
    }
    public Builder SetRecharge(int value) {
      PrepareBuilder();
      result.hasRecharge = true;
      result.recharge_ = value;
      return this;
    }
    public Builder ClearRecharge() {
      PrepareBuilder();
      result.hasRecharge = false;
      result.recharge_ = 0;
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCToCharge() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCartAdd : pb::GeneratedMessage<CSCartAdd, CSCartAdd.Builder> {
  private CSCartAdd() { }
  private static readonly CSCartAdd defaultInstance = new CSCartAdd().MakeReadOnly();
  private static readonly string[] _cSCartAddFieldNames = new string[] { "goodsid", "goodsnum" };
  private static readonly uint[] _cSCartAddFieldTags = new uint[] { 8, 16 };
  public static CSCartAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCartAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCartAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSCartAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCartAdd, CSCartAdd.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSCartAdd__FieldAccessorTable; }
  }
  
  public const int GoodsidFieldNumber = 1;
  private bool hasGoodsid;
  private int goodsid_;
  public bool HasGoodsid {
    get { return hasGoodsid; }
  }
  public int Goodsid {
    get { return goodsid_; }
  }
  
  public const int GoodsnumFieldNumber = 2;
  private bool hasGoodsnum;
  private int goodsnum_;
  public bool HasGoodsnum {
    get { return hasGoodsnum; }
  }
  public int Goodsnum {
    get { return goodsnum_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGoodsid) return false;
      if (!hasGoodsnum) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCartAddFieldNames;
    if (hasGoodsid) {
      output.WriteInt32(1, field_names[0], Goodsid);
    }
    if (hasGoodsnum) {
      output.WriteInt32(2, field_names[1], Goodsnum);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGoodsid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Goodsid);
    }
    if (hasGoodsnum) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Goodsnum);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCartAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCartAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCartAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCartAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCartAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCartAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCartAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCartAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCartAdd result;
    
    private CSCartAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCartAdd original = result;
        result = new CSCartAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCartAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCartAdd.Descriptor; }
    }
    
    public override CSCartAdd DefaultInstanceForType {
      get { return global::CSCartAdd.DefaultInstance; }
    }
    
    public override CSCartAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCartAdd) {
        return MergeFrom((CSCartAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCartAdd other) {
      if (other == global::CSCartAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGoodsid) {
        Goodsid = other.Goodsid;
      }
      if (other.HasGoodsnum) {
        Goodsnum = other.Goodsnum;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCartAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCartAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasGoodsid = input.ReadInt32(ref result.goodsid_);
            break;
          }
          case 16: {
            result.hasGoodsnum = input.ReadInt32(ref result.goodsnum_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGoodsid {
      get { return result.hasGoodsid; }
    }
    public int Goodsid {
      get { return result.Goodsid; }
      set { SetGoodsid(value); }
    }
    public Builder SetGoodsid(int value) {
      PrepareBuilder();
      result.hasGoodsid = true;
      result.goodsid_ = value;
      return this;
    }
    public Builder ClearGoodsid() {
      PrepareBuilder();
      result.hasGoodsid = false;
      result.goodsid_ = 0;
      return this;
    }
    
    public bool HasGoodsnum {
      get { return result.hasGoodsnum; }
    }
    public int Goodsnum {
      get { return result.Goodsnum; }
      set { SetGoodsnum(value); }
    }
    public Builder SetGoodsnum(int value) {
      PrepareBuilder();
      result.hasGoodsnum = true;
      result.goodsnum_ = value;
      return this;
    }
    public Builder ClearGoodsnum() {
      PrepareBuilder();
      result.hasGoodsnum = false;
      result.goodsnum_ = 0;
      return this;
    }
  }
  static CSCartAdd() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCartDel : pb::GeneratedMessage<CSCartDel, CSCartDel.Builder> {
  private CSCartDel() { }
  private static readonly CSCartDel defaultInstance = new CSCartDel().MakeReadOnly();
  private static readonly string[] _cSCartDelFieldNames = new string[] { "goodsid", "goodsnum" };
  private static readonly uint[] _cSCartDelFieldTags = new uint[] { 8, 16 };
  public static CSCartDel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCartDel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCartDel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSCartDel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCartDel, CSCartDel.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSCartDel__FieldAccessorTable; }
  }
  
  public const int GoodsidFieldNumber = 1;
  private bool hasGoodsid;
  private int goodsid_;
  public bool HasGoodsid {
    get { return hasGoodsid; }
  }
  public int Goodsid {
    get { return goodsid_; }
  }
  
  public const int GoodsnumFieldNumber = 2;
  private bool hasGoodsnum;
  private int goodsnum_;
  public bool HasGoodsnum {
    get { return hasGoodsnum; }
  }
  public int Goodsnum {
    get { return goodsnum_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGoodsid) return false;
      if (!hasGoodsnum) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCartDelFieldNames;
    if (hasGoodsid) {
      output.WriteInt32(1, field_names[0], Goodsid);
    }
    if (hasGoodsnum) {
      output.WriteInt32(2, field_names[1], Goodsnum);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGoodsid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Goodsid);
    }
    if (hasGoodsnum) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Goodsnum);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCartDel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartDel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartDel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCartDel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCartDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCartDel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCartDel MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCartDel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCartDel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCartDel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCartDel result;
    
    private CSCartDel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCartDel original = result;
        result = new CSCartDel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCartDel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCartDel.Descriptor; }
    }
    
    public override CSCartDel DefaultInstanceForType {
      get { return global::CSCartDel.DefaultInstance; }
    }
    
    public override CSCartDel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCartDel) {
        return MergeFrom((CSCartDel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCartDel other) {
      if (other == global::CSCartDel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGoodsid) {
        Goodsid = other.Goodsid;
      }
      if (other.HasGoodsnum) {
        Goodsnum = other.Goodsnum;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCartDelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCartDelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasGoodsid = input.ReadInt32(ref result.goodsid_);
            break;
          }
          case 16: {
            result.hasGoodsnum = input.ReadInt32(ref result.goodsnum_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGoodsid {
      get { return result.hasGoodsid; }
    }
    public int Goodsid {
      get { return result.Goodsid; }
      set { SetGoodsid(value); }
    }
    public Builder SetGoodsid(int value) {
      PrepareBuilder();
      result.hasGoodsid = true;
      result.goodsid_ = value;
      return this;
    }
    public Builder ClearGoodsid() {
      PrepareBuilder();
      result.hasGoodsid = false;
      result.goodsid_ = 0;
      return this;
    }
    
    public bool HasGoodsnum {
      get { return result.hasGoodsnum; }
    }
    public int Goodsnum {
      get { return result.Goodsnum; }
      set { SetGoodsnum(value); }
    }
    public Builder SetGoodsnum(int value) {
      PrepareBuilder();
      result.hasGoodsnum = true;
      result.goodsnum_ = value;
      return this;
    }
    public Builder ClearGoodsnum() {
      PrepareBuilder();
      result.hasGoodsnum = false;
      result.goodsnum_ = 0;
      return this;
    }
  }
  static CSCartDel() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPreBuy : pb::GeneratedMessage<CSPreBuy, CSPreBuy.Builder> {
  private CSPreBuy() { }
  private static readonly CSPreBuy defaultInstance = new CSPreBuy().MakeReadOnly();
  private static readonly string[] _cSPreBuyFieldNames = new string[] { "cardnumber", "goodsid", "goodsnum" };
  private static readonly uint[] _cSPreBuyFieldTags = new uint[] { 10, 16, 24 };
  public static CSPreBuy DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPreBuy DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPreBuy ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSPreBuy__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPreBuy, CSPreBuy.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSPreBuy__FieldAccessorTable; }
  }
  
  public const int CardnumberFieldNumber = 1;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int GoodsidFieldNumber = 2;
  private bool hasGoodsid;
  private int goodsid_;
  public bool HasGoodsid {
    get { return hasGoodsid; }
  }
  public int Goodsid {
    get { return goodsid_; }
  }
  
  public const int GoodsnumFieldNumber = 3;
  private bool hasGoodsnum;
  private int goodsnum_;
  public bool HasGoodsnum {
    get { return hasGoodsnum; }
  }
  public int Goodsnum {
    get { return goodsnum_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardnumber) return false;
      if (!hasGoodsid) return false;
      if (!hasGoodsnum) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPreBuyFieldNames;
    if (hasCardnumber) {
      output.WriteString(1, field_names[0], Cardnumber);
    }
    if (hasGoodsid) {
      output.WriteInt32(2, field_names[1], Goodsid);
    }
    if (hasGoodsnum) {
      output.WriteInt32(3, field_names[2], Goodsnum);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Cardnumber);
    }
    if (hasGoodsid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Goodsid);
    }
    if (hasGoodsnum) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Goodsnum);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPreBuy ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPreBuy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPreBuy ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPreBuy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPreBuy ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPreBuy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPreBuy ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPreBuy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPreBuy ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPreBuy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPreBuy MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPreBuy prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPreBuy, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPreBuy cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPreBuy result;
    
    private CSPreBuy PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPreBuy original = result;
        result = new CSPreBuy();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPreBuy MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPreBuy.Descriptor; }
    }
    
    public override CSPreBuy DefaultInstanceForType {
      get { return global::CSPreBuy.DefaultInstance; }
    }
    
    public override CSPreBuy BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPreBuy) {
        return MergeFrom((CSPreBuy) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPreBuy other) {
      if (other == global::CSPreBuy.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasGoodsid) {
        Goodsid = other.Goodsid;
      }
      if (other.HasGoodsnum) {
        Goodsnum = other.Goodsnum;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPreBuyFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPreBuyFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 16: {
            result.hasGoodsid = input.ReadInt32(ref result.goodsid_);
            break;
          }
          case 24: {
            result.hasGoodsnum = input.ReadInt32(ref result.goodsnum_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasGoodsid {
      get { return result.hasGoodsid; }
    }
    public int Goodsid {
      get { return result.Goodsid; }
      set { SetGoodsid(value); }
    }
    public Builder SetGoodsid(int value) {
      PrepareBuilder();
      result.hasGoodsid = true;
      result.goodsid_ = value;
      return this;
    }
    public Builder ClearGoodsid() {
      PrepareBuilder();
      result.hasGoodsid = false;
      result.goodsid_ = 0;
      return this;
    }
    
    public bool HasGoodsnum {
      get { return result.hasGoodsnum; }
    }
    public int Goodsnum {
      get { return result.Goodsnum; }
      set { SetGoodsnum(value); }
    }
    public Builder SetGoodsnum(int value) {
      PrepareBuilder();
      result.hasGoodsnum = true;
      result.goodsnum_ = value;
      return this;
    }
    public Builder ClearGoodsnum() {
      PrepareBuilder();
      result.hasGoodsnum = false;
      result.goodsnum_ = 0;
      return this;
    }
  }
  static CSPreBuy() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPreBuy : pb::GeneratedMessage<SCPreBuy, SCPreBuy.Builder> {
  private SCPreBuy() { }
  private static readonly SCPreBuy defaultInstance = new SCPreBuy().MakeReadOnly();
  private static readonly string[] _sCPreBuyFieldNames = new string[] { "qrcode" };
  private static readonly uint[] _sCPreBuyFieldTags = new uint[] { 10 };
  public static SCPreBuy DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPreBuy DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPreBuy ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCPreBuy__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPreBuy, SCPreBuy.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCPreBuy__FieldAccessorTable; }
  }
  
  public const int QrcodeFieldNumber = 1;
  private bool hasQrcode;
  private string qrcode_ = "";
  public bool HasQrcode {
    get { return hasQrcode; }
  }
  public string Qrcode {
    get { return qrcode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasQrcode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPreBuyFieldNames;
    if (hasQrcode) {
      output.WriteString(1, field_names[0], Qrcode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasQrcode) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Qrcode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPreBuy ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPreBuy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPreBuy ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPreBuy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPreBuy ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPreBuy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPreBuy ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPreBuy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPreBuy ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPreBuy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPreBuy MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPreBuy prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPreBuy, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPreBuy cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPreBuy result;
    
    private SCPreBuy PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPreBuy original = result;
        result = new SCPreBuy();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPreBuy MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPreBuy.Descriptor; }
    }
    
    public override SCPreBuy DefaultInstanceForType {
      get { return global::SCPreBuy.DefaultInstance; }
    }
    
    public override SCPreBuy BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPreBuy) {
        return MergeFrom((SCPreBuy) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPreBuy other) {
      if (other == global::SCPreBuy.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasQrcode) {
        Qrcode = other.Qrcode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPreBuyFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPreBuyFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasQrcode = input.ReadString(ref result.qrcode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasQrcode {
      get { return result.hasQrcode; }
    }
    public string Qrcode {
      get { return result.Qrcode; }
      set { SetQrcode(value); }
    }
    public Builder SetQrcode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasQrcode = true;
      result.qrcode_ = value;
      return this;
    }
    public Builder ClearQrcode() {
      PrepareBuilder();
      result.hasQrcode = false;
      result.qrcode_ = "";
      return this;
    }
  }
  static SCPreBuy() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCToBuy : pb::GeneratedMessage<SCToBuy, SCToBuy.Builder> {
  private SCToBuy() { }
  private static readonly SCToBuy defaultInstance = new SCToBuy().MakeReadOnly();
  private static readonly string[] _sCToBuyFieldNames = new string[] { "balance", "cardnumber", "integal", "name", "right", "usedintegal", "usedmoney" };
  private static readonly uint[] _sCToBuyFieldTags = new uint[] { 48, 18, 56, 10, 26, 40, 32 };
  public static SCToBuy DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCToBuy DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCToBuy ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCToBuy__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCToBuy, SCToBuy.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCToBuy__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CardnumberFieldNumber = 2;
  private bool hasCardnumber;
  private string cardnumber_ = "";
  public bool HasCardnumber {
    get { return hasCardnumber; }
  }
  public string Cardnumber {
    get { return cardnumber_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private string right_ = "";
  public bool HasRight {
    get { return hasRight; }
  }
  public string Right {
    get { return right_; }
  }
  
  public const int UsedmoneyFieldNumber = 4;
  private bool hasUsedmoney;
  private int usedmoney_;
  public bool HasUsedmoney {
    get { return hasUsedmoney; }
  }
  public int Usedmoney {
    get { return usedmoney_; }
  }
  
  public const int UsedintegalFieldNumber = 5;
  private bool hasUsedintegal;
  private int usedintegal_;
  public bool HasUsedintegal {
    get { return hasUsedintegal; }
  }
  public int Usedintegal {
    get { return usedintegal_; }
  }
  
  public const int BalanceFieldNumber = 6;
  private bool hasBalance;
  private int balance_;
  public bool HasBalance {
    get { return hasBalance; }
  }
  public int Balance {
    get { return balance_; }
  }
  
  public const int IntegalFieldNumber = 7;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasCardnumber) return false;
      if (!hasRight) return false;
      if (!hasUsedmoney) return false;
      if (!hasUsedintegal) return false;
      if (!hasBalance) return false;
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCToBuyFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[3], Name);
    }
    if (hasCardnumber) {
      output.WriteString(2, field_names[1], Cardnumber);
    }
    if (hasRight) {
      output.WriteString(3, field_names[4], Right);
    }
    if (hasUsedmoney) {
      output.WriteInt32(4, field_names[6], Usedmoney);
    }
    if (hasUsedintegal) {
      output.WriteInt32(5, field_names[5], Usedintegal);
    }
    if (hasBalance) {
      output.WriteInt32(6, field_names[0], Balance);
    }
    if (hasIntegal) {
      output.WriteInt32(7, field_names[2], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasCardnumber) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cardnumber);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Right);
    }
    if (hasUsedmoney) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Usedmoney);
    }
    if (hasUsedintegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Usedintegal);
    }
    if (hasBalance) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Balance);
    }
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCToBuy ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCToBuy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCToBuy ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCToBuy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCToBuy ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCToBuy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCToBuy ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCToBuy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCToBuy ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCToBuy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCToBuy MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCToBuy prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCToBuy, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCToBuy cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCToBuy result;
    
    private SCToBuy PrepareBuilder() {
      if (resultIsReadOnly) {
        SCToBuy original = result;
        result = new SCToBuy();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCToBuy MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCToBuy.Descriptor; }
    }
    
    public override SCToBuy DefaultInstanceForType {
      get { return global::SCToBuy.DefaultInstance; }
    }
    
    public override SCToBuy BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCToBuy) {
        return MergeFrom((SCToBuy) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCToBuy other) {
      if (other == global::SCToBuy.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCardnumber) {
        Cardnumber = other.Cardnumber;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasUsedmoney) {
        Usedmoney = other.Usedmoney;
      }
      if (other.HasUsedintegal) {
        Usedintegal = other.Usedintegal;
      }
      if (other.HasBalance) {
        Balance = other.Balance;
      }
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCToBuyFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCToBuyFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasCardnumber = input.ReadString(ref result.cardnumber_);
            break;
          }
          case 26: {
            result.hasRight = input.ReadString(ref result.right_);
            break;
          }
          case 32: {
            result.hasUsedmoney = input.ReadInt32(ref result.usedmoney_);
            break;
          }
          case 40: {
            result.hasUsedintegal = input.ReadInt32(ref result.usedintegal_);
            break;
          }
          case 48: {
            result.hasBalance = input.ReadInt32(ref result.balance_);
            break;
          }
          case 56: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCardnumber {
      get { return result.hasCardnumber; }
    }
    public string Cardnumber {
      get { return result.Cardnumber; }
      set { SetCardnumber(value); }
    }
    public Builder SetCardnumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardnumber = true;
      result.cardnumber_ = value;
      return this;
    }
    public Builder ClearCardnumber() {
      PrepareBuilder();
      result.hasCardnumber = false;
      result.cardnumber_ = "";
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public string Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = "";
      return this;
    }
    
    public bool HasUsedmoney {
      get { return result.hasUsedmoney; }
    }
    public int Usedmoney {
      get { return result.Usedmoney; }
      set { SetUsedmoney(value); }
    }
    public Builder SetUsedmoney(int value) {
      PrepareBuilder();
      result.hasUsedmoney = true;
      result.usedmoney_ = value;
      return this;
    }
    public Builder ClearUsedmoney() {
      PrepareBuilder();
      result.hasUsedmoney = false;
      result.usedmoney_ = 0;
      return this;
    }
    
    public bool HasUsedintegal {
      get { return result.hasUsedintegal; }
    }
    public int Usedintegal {
      get { return result.Usedintegal; }
      set { SetUsedintegal(value); }
    }
    public Builder SetUsedintegal(int value) {
      PrepareBuilder();
      result.hasUsedintegal = true;
      result.usedintegal_ = value;
      return this;
    }
    public Builder ClearUsedintegal() {
      PrepareBuilder();
      result.hasUsedintegal = false;
      result.usedintegal_ = 0;
      return this;
    }
    
    public bool HasBalance {
      get { return result.hasBalance; }
    }
    public int Balance {
      get { return result.Balance; }
      set { SetBalance(value); }
    }
    public Builder SetBalance(int value) {
      PrepareBuilder();
      result.hasBalance = true;
      result.balance_ = value;
      return this;
    }
    public Builder ClearBalance() {
      PrepareBuilder();
      result.hasBalance = false;
      result.balance_ = 0;
      return this;
    }
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCToBuy() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSysMessage : pb::GeneratedMessage<SCSysMessage, SCSysMessage.Builder> {
  private SCSysMessage() { }
  private static readonly SCSysMessage defaultInstance = new SCSysMessage().MakeReadOnly();
  private static readonly string[] _sCSysMessageFieldNames = new string[] { "cmd", "params" };
  private static readonly uint[] _sCSysMessageFieldTags = new uint[] { 8, 18 };
  public static SCSysMessage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSysMessage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSysMessage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCSysMessage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSysMessage, SCSysMessage.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCSysMessage__FieldAccessorTable; }
  }
  
  public const int CmdFieldNumber = 1;
  private bool hasCmd;
  private int cmd_;
  public bool HasCmd {
    get { return hasCmd; }
  }
  public int Cmd {
    get { return cmd_; }
  }
  
  public const int ParamsFieldNumber = 2;
  private pbc::PopsicleList<string> params_ = new pbc::PopsicleList<string>();
  public scg::IList<string> ParamsList {
    get { return pbc::Lists.AsReadOnly(params_); }
  }
  public int ParamsCount {
    get { return params_.Count; }
  }
  public string GetParams(int index) {
    return params_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCmd) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSysMessageFieldNames;
    if (hasCmd) {
      output.WriteInt32(1, field_names[0], Cmd);
    }
    if (params_.Count > 0) {
      output.WriteStringArray(2, field_names[1], params_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCmd) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Cmd);
    }
    {
      int dataSize = 0;
      foreach (string element in ParamsList) {
        dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * params_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSysMessage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysMessage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysMessage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSysMessage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSysMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSysMessage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSysMessage MakeReadOnly() {
    params_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSysMessage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSysMessage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSysMessage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSysMessage result;
    
    private SCSysMessage PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSysMessage original = result;
        result = new SCSysMessage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSysMessage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSysMessage.Descriptor; }
    }
    
    public override SCSysMessage DefaultInstanceForType {
      get { return global::SCSysMessage.DefaultInstance; }
    }
    
    public override SCSysMessage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSysMessage) {
        return MergeFrom((SCSysMessage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSysMessage other) {
      if (other == global::SCSysMessage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCmd) {
        Cmd = other.Cmd;
      }
      if (other.params_.Count != 0) {
        result.params_.Add(other.params_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSysMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSysMessageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCmd = input.ReadInt32(ref result.cmd_);
            break;
          }
          case 18: {
            input.ReadStringArray(tag, field_name, result.params_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCmd {
      get { return result.hasCmd; }
    }
    public int Cmd {
      get { return result.Cmd; }
      set { SetCmd(value); }
    }
    public Builder SetCmd(int value) {
      PrepareBuilder();
      result.hasCmd = true;
      result.cmd_ = value;
      return this;
    }
    public Builder ClearCmd() {
      PrepareBuilder();
      result.hasCmd = false;
      result.cmd_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<string> ParamsList {
      get { return PrepareBuilder().params_; }
    }
    public int ParamsCount {
      get { return result.ParamsCount; }
    }
    public string GetParams(int index) {
      return result.GetParams(index);
    }
    public Builder SetParams(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.params_[index] = value;
      return this;
    }
    public Builder AddParams(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.params_.Add(value);
      return this;
    }
    public Builder AddRangeParams(scg::IEnumerable<string> values) {
      PrepareBuilder();
      result.params_.Add(values);
      return this;
    }
    public Builder ClearParams() {
      PrepareBuilder();
      result.params_.Clear();
      return this;
    }
  }
  static SCSysMessage() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEvaluate : pb::GeneratedMessage<CSEvaluate, CSEvaluate.Builder> {
  private CSEvaluate() { }
  private static readonly CSEvaluate defaultInstance = new CSEvaluate().MakeReadOnly();
  private static readonly string[] _cSEvaluateFieldNames = new string[] { "devStar", "envStar", "eval", "staffStar" };
  private static readonly uint[] _cSEvaluateFieldTags = new uint[] { 24, 16, 34, 8 };
  public static CSEvaluate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEvaluate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEvaluate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSEvaluate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEvaluate, CSEvaluate.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSEvaluate__FieldAccessorTable; }
  }
  
  public const int StaffStarFieldNumber = 1;
  private bool hasStaffStar;
  private int staffStar_;
  public bool HasStaffStar {
    get { return hasStaffStar; }
  }
  public int StaffStar {
    get { return staffStar_; }
  }
  
  public const int EnvStarFieldNumber = 2;
  private bool hasEnvStar;
  private int envStar_;
  public bool HasEnvStar {
    get { return hasEnvStar; }
  }
  public int EnvStar {
    get { return envStar_; }
  }
  
  public const int DevStarFieldNumber = 3;
  private bool hasDevStar;
  private int devStar_;
  public bool HasDevStar {
    get { return hasDevStar; }
  }
  public int DevStar {
    get { return devStar_; }
  }
  
  public const int EvalFieldNumber = 4;
  private bool hasEval;
  private string eval_ = "";
  public bool HasEval {
    get { return hasEval; }
  }
  public string Eval {
    get { return eval_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasStaffStar) return false;
      if (!hasEnvStar) return false;
      if (!hasDevStar) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEvaluateFieldNames;
    if (hasStaffStar) {
      output.WriteInt32(1, field_names[3], StaffStar);
    }
    if (hasEnvStar) {
      output.WriteInt32(2, field_names[1], EnvStar);
    }
    if (hasDevStar) {
      output.WriteInt32(3, field_names[0], DevStar);
    }
    if (hasEval) {
      output.WriteString(4, field_names[2], Eval);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStaffStar) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, StaffStar);
    }
    if (hasEnvStar) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, EnvStar);
    }
    if (hasDevStar) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, DevStar);
    }
    if (hasEval) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Eval);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEvaluate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEvaluate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEvaluate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEvaluate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEvaluate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEvaluate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEvaluate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEvaluate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEvaluate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEvaluate result;
    
    private CSEvaluate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEvaluate original = result;
        result = new CSEvaluate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEvaluate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEvaluate.Descriptor; }
    }
    
    public override CSEvaluate DefaultInstanceForType {
      get { return global::CSEvaluate.DefaultInstance; }
    }
    
    public override CSEvaluate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEvaluate) {
        return MergeFrom((CSEvaluate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEvaluate other) {
      if (other == global::CSEvaluate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStaffStar) {
        StaffStar = other.StaffStar;
      }
      if (other.HasEnvStar) {
        EnvStar = other.EnvStar;
      }
      if (other.HasDevStar) {
        DevStar = other.DevStar;
      }
      if (other.HasEval) {
        Eval = other.Eval;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEvaluateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEvaluateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasStaffStar = input.ReadInt32(ref result.staffStar_);
            break;
          }
          case 16: {
            result.hasEnvStar = input.ReadInt32(ref result.envStar_);
            break;
          }
          case 24: {
            result.hasDevStar = input.ReadInt32(ref result.devStar_);
            break;
          }
          case 34: {
            result.hasEval = input.ReadString(ref result.eval_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStaffStar {
      get { return result.hasStaffStar; }
    }
    public int StaffStar {
      get { return result.StaffStar; }
      set { SetStaffStar(value); }
    }
    public Builder SetStaffStar(int value) {
      PrepareBuilder();
      result.hasStaffStar = true;
      result.staffStar_ = value;
      return this;
    }
    public Builder ClearStaffStar() {
      PrepareBuilder();
      result.hasStaffStar = false;
      result.staffStar_ = 0;
      return this;
    }
    
    public bool HasEnvStar {
      get { return result.hasEnvStar; }
    }
    public int EnvStar {
      get { return result.EnvStar; }
      set { SetEnvStar(value); }
    }
    public Builder SetEnvStar(int value) {
      PrepareBuilder();
      result.hasEnvStar = true;
      result.envStar_ = value;
      return this;
    }
    public Builder ClearEnvStar() {
      PrepareBuilder();
      result.hasEnvStar = false;
      result.envStar_ = 0;
      return this;
    }
    
    public bool HasDevStar {
      get { return result.hasDevStar; }
    }
    public int DevStar {
      get { return result.DevStar; }
      set { SetDevStar(value); }
    }
    public Builder SetDevStar(int value) {
      PrepareBuilder();
      result.hasDevStar = true;
      result.devStar_ = value;
      return this;
    }
    public Builder ClearDevStar() {
      PrepareBuilder();
      result.hasDevStar = false;
      result.devStar_ = 0;
      return this;
    }
    
    public bool HasEval {
      get { return result.hasEval; }
    }
    public string Eval {
      get { return result.Eval; }
      set { SetEval(value); }
    }
    public Builder SetEval(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEval = true;
      result.eval_ = value;
      return this;
    }
    public Builder ClearEval() {
      PrepareBuilder();
      result.hasEval = false;
      result.eval_ = "";
      return this;
    }
  }
  static CSEvaluate() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEvaluate : pb::GeneratedMessage<SCEvaluate, SCEvaluate.Builder> {
  private SCEvaluate() { }
  private static readonly SCEvaluate defaultInstance = new SCEvaluate().MakeReadOnly();
  private static readonly string[] _sCEvaluateFieldNames = new string[] { "integal" };
  private static readonly uint[] _sCEvaluateFieldTags = new uint[] { 8 };
  public static SCEvaluate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEvaluate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEvaluate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCEvaluate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEvaluate, SCEvaluate.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCEvaluate__FieldAccessorTable; }
  }
  
  public const int IntegalFieldNumber = 1;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEvaluateFieldNames;
    if (hasIntegal) {
      output.WriteInt32(1, field_names[0], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEvaluate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEvaluate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEvaluate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEvaluate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEvaluate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEvaluate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEvaluate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEvaluate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEvaluate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEvaluate result;
    
    private SCEvaluate PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEvaluate original = result;
        result = new SCEvaluate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEvaluate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEvaluate.Descriptor; }
    }
    
    public override SCEvaluate DefaultInstanceForType {
      get { return global::SCEvaluate.DefaultInstance; }
    }
    
    public override SCEvaluate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEvaluate) {
        return MergeFrom((SCEvaluate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEvaluate other) {
      if (other == global::SCEvaluate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEvaluateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEvaluateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCEvaluate() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSVerifyCode : pb::GeneratedMessage<CSVerifyCode, CSVerifyCode.Builder> {
  private CSVerifyCode() { }
  private static readonly CSVerifyCode defaultInstance = new CSVerifyCode().MakeReadOnly();
  private static readonly string[] _cSVerifyCodeFieldNames = new string[] { "phonenumber" };
  private static readonly uint[] _cSVerifyCodeFieldTags = new uint[] { 10 };
  public static CSVerifyCode DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSVerifyCode DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSVerifyCode ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSVerifyCode__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSVerifyCode, CSVerifyCode.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSVerifyCode__FieldAccessorTable; }
  }
  
  public const int PhonenumberFieldNumber = 1;
  private bool hasPhonenumber;
  private string phonenumber_ = "";
  public bool HasPhonenumber {
    get { return hasPhonenumber; }
  }
  public string Phonenumber {
    get { return phonenumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPhonenumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSVerifyCodeFieldNames;
    if (hasPhonenumber) {
      output.WriteString(1, field_names[0], Phonenumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPhonenumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Phonenumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSVerifyCode ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSVerifyCode ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSVerifyCode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSVerifyCode ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSVerifyCode MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSVerifyCode prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSVerifyCode, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSVerifyCode cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSVerifyCode result;
    
    private CSVerifyCode PrepareBuilder() {
      if (resultIsReadOnly) {
        CSVerifyCode original = result;
        result = new CSVerifyCode();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSVerifyCode MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSVerifyCode.Descriptor; }
    }
    
    public override CSVerifyCode DefaultInstanceForType {
      get { return global::CSVerifyCode.DefaultInstance; }
    }
    
    public override CSVerifyCode BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSVerifyCode) {
        return MergeFrom((CSVerifyCode) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSVerifyCode other) {
      if (other == global::CSVerifyCode.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPhonenumber) {
        Phonenumber = other.Phonenumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSVerifyCodeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSVerifyCodeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasPhonenumber = input.ReadString(ref result.phonenumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPhonenumber {
      get { return result.hasPhonenumber; }
    }
    public string Phonenumber {
      get { return result.Phonenumber; }
      set { SetPhonenumber(value); }
    }
    public Builder SetPhonenumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPhonenumber = true;
      result.phonenumber_ = value;
      return this;
    }
    public Builder ClearPhonenumber() {
      PrepareBuilder();
      result.hasPhonenumber = false;
      result.phonenumber_ = "";
      return this;
    }
  }
  static CSVerifyCode() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCVerifyCode : pb::GeneratedMessage<SCVerifyCode, SCVerifyCode.Builder> {
  private SCVerifyCode() { }
  private static readonly SCVerifyCode defaultInstance = new SCVerifyCode().MakeReadOnly();
  private static readonly string[] _sCVerifyCodeFieldNames = new string[] { "verifycode" };
  private static readonly uint[] _sCVerifyCodeFieldTags = new uint[] { 10 };
  public static SCVerifyCode DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCVerifyCode DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCVerifyCode ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCVerifyCode__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCVerifyCode, SCVerifyCode.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCVerifyCode__FieldAccessorTable; }
  }
  
  public const int VerifycodeFieldNumber = 1;
  private bool hasVerifycode;
  private string verifycode_ = "";
  public bool HasVerifycode {
    get { return hasVerifycode; }
  }
  public string Verifycode {
    get { return verifycode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasVerifycode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCVerifyCodeFieldNames;
    if (hasVerifycode) {
      output.WriteString(1, field_names[0], Verifycode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasVerifycode) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Verifycode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCVerifyCode ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCVerifyCode ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCVerifyCode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCVerifyCode ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCVerifyCode MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCVerifyCode prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCVerifyCode, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCVerifyCode cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCVerifyCode result;
    
    private SCVerifyCode PrepareBuilder() {
      if (resultIsReadOnly) {
        SCVerifyCode original = result;
        result = new SCVerifyCode();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCVerifyCode MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCVerifyCode.Descriptor; }
    }
    
    public override SCVerifyCode DefaultInstanceForType {
      get { return global::SCVerifyCode.DefaultInstance; }
    }
    
    public override SCVerifyCode BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCVerifyCode) {
        return MergeFrom((SCVerifyCode) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCVerifyCode other) {
      if (other == global::SCVerifyCode.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasVerifycode) {
        Verifycode = other.Verifycode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCVerifyCodeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCVerifyCodeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasVerifycode = input.ReadString(ref result.verifycode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasVerifycode {
      get { return result.hasVerifycode; }
    }
    public string Verifycode {
      get { return result.Verifycode; }
      set { SetVerifycode(value); }
    }
    public Builder SetVerifycode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasVerifycode = true;
      result.verifycode_ = value;
      return this;
    }
    public Builder ClearVerifycode() {
      PrepareBuilder();
      result.hasVerifycode = false;
      result.verifycode_ = "";
      return this;
    }
  }
  static SCVerifyCode() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSBindMobile : pb::GeneratedMessage<CSBindMobile, CSBindMobile.Builder> {
  private CSBindMobile() { }
  private static readonly CSBindMobile defaultInstance = new CSBindMobile().MakeReadOnly();
  private static readonly string[] _cSBindMobileFieldNames = new string[] { "phonenumber", "verifycode" };
  private static readonly uint[] _cSBindMobileFieldTags = new uint[] { 10, 18 };
  public static CSBindMobile DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSBindMobile DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSBindMobile ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_CSBindMobile__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSBindMobile, CSBindMobile.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_CSBindMobile__FieldAccessorTable; }
  }
  
  public const int PhonenumberFieldNumber = 1;
  private bool hasPhonenumber;
  private string phonenumber_ = "";
  public bool HasPhonenumber {
    get { return hasPhonenumber; }
  }
  public string Phonenumber {
    get { return phonenumber_; }
  }
  
  public const int VerifycodeFieldNumber = 2;
  private bool hasVerifycode;
  private string verifycode_ = "";
  public bool HasVerifycode {
    get { return hasVerifycode; }
  }
  public string Verifycode {
    get { return verifycode_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPhonenumber) return false;
      if (!hasVerifycode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSBindMobileFieldNames;
    if (hasPhonenumber) {
      output.WriteString(1, field_names[0], Phonenumber);
    }
    if (hasVerifycode) {
      output.WriteString(2, field_names[1], Verifycode);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPhonenumber) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Phonenumber);
    }
    if (hasVerifycode) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Verifycode);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSBindMobile ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSBindMobile ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSBindMobile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSBindMobile ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBindMobile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSBindMobile MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSBindMobile prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSBindMobile, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSBindMobile cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSBindMobile result;
    
    private CSBindMobile PrepareBuilder() {
      if (resultIsReadOnly) {
        CSBindMobile original = result;
        result = new CSBindMobile();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSBindMobile MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSBindMobile.Descriptor; }
    }
    
    public override CSBindMobile DefaultInstanceForType {
      get { return global::CSBindMobile.DefaultInstance; }
    }
    
    public override CSBindMobile BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSBindMobile) {
        return MergeFrom((CSBindMobile) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSBindMobile other) {
      if (other == global::CSBindMobile.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPhonenumber) {
        Phonenumber = other.Phonenumber;
      }
      if (other.HasVerifycode) {
        Verifycode = other.Verifycode;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSBindMobileFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSBindMobileFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasPhonenumber = input.ReadString(ref result.phonenumber_);
            break;
          }
          case 18: {
            result.hasVerifycode = input.ReadString(ref result.verifycode_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPhonenumber {
      get { return result.hasPhonenumber; }
    }
    public string Phonenumber {
      get { return result.Phonenumber; }
      set { SetPhonenumber(value); }
    }
    public Builder SetPhonenumber(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPhonenumber = true;
      result.phonenumber_ = value;
      return this;
    }
    public Builder ClearPhonenumber() {
      PrepareBuilder();
      result.hasPhonenumber = false;
      result.phonenumber_ = "";
      return this;
    }
    
    public bool HasVerifycode {
      get { return result.hasVerifycode; }
    }
    public string Verifycode {
      get { return result.Verifycode; }
      set { SetVerifycode(value); }
    }
    public Builder SetVerifycode(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasVerifycode = true;
      result.verifycode_ = value;
      return this;
    }
    public Builder ClearVerifycode() {
      PrepareBuilder();
      result.hasVerifycode = false;
      result.verifycode_ = "";
      return this;
    }
  }
  static CSBindMobile() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCBindMobile : pb::GeneratedMessage<SCBindMobile, SCBindMobile.Builder> {
  private SCBindMobile() { }
  private static readonly SCBindMobile defaultInstance = new SCBindMobile().MakeReadOnly();
  private static readonly string[] _sCBindMobileFieldNames = new string[] { "integal" };
  private static readonly uint[] _sCBindMobileFieldTags = new uint[] { 8 };
  public static SCBindMobile DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCBindMobile DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCBindMobile ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::CoreProtocol.internal__static_SCBindMobile__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCBindMobile, SCBindMobile.Builder> InternalFieldAccessors {
    get { return global::CoreProtocol.internal__static_SCBindMobile__FieldAccessorTable; }
  }
  
  public const int IntegalFieldNumber = 1;
  private bool hasIntegal;
  private int integal_;
  public bool HasIntegal {
    get { return hasIntegal; }
  }
  public int Integal {
    get { return integal_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasIntegal) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCBindMobileFieldNames;
    if (hasIntegal) {
      output.WriteInt32(1, field_names[0], Integal);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasIntegal) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Integal);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCBindMobile ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCBindMobile ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCBindMobile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCBindMobile ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBindMobile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCBindMobile MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCBindMobile prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCBindMobile, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCBindMobile cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCBindMobile result;
    
    private SCBindMobile PrepareBuilder() {
      if (resultIsReadOnly) {
        SCBindMobile original = result;
        result = new SCBindMobile();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCBindMobile MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCBindMobile.Descriptor; }
    }
    
    public override SCBindMobile DefaultInstanceForType {
      get { return global::SCBindMobile.DefaultInstance; }
    }
    
    public override SCBindMobile BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCBindMobile) {
        return MergeFrom((SCBindMobile) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCBindMobile other) {
      if (other == global::SCBindMobile.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIntegal) {
        Integal = other.Integal;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCBindMobileFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCBindMobileFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasIntegal = input.ReadInt32(ref result.integal_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIntegal {
      get { return result.hasIntegal; }
    }
    public int Integal {
      get { return result.Integal; }
      set { SetIntegal(value); }
    }
    public Builder SetIntegal(int value) {
      PrepareBuilder();
      result.hasIntegal = true;
      result.integal_ = value;
      return this;
    }
    public Builder ClearIntegal() {
      PrepareBuilder();
      result.hasIntegal = false;
      result.integal_ = 0;
      return this;
    }
  }
  static SCBindMobile() {
    object.ReferenceEquals(global::CoreProtocol.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
