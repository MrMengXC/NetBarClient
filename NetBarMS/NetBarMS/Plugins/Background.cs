// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Background {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_CSAuthen__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAuthen, global::CSAuthen.Builder> internal__static_CSAuthen__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCAuthen__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCAuthen, global::SCAuthen.Builder> internal__static_SCAuthen__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSLogin__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSLogin, global::CSLogin.Builder> internal__static_CSLogin__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCLogin__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCLogin, global::SCLogin.Builder> internal__static_SCLogin__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAccountInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAccountInfo, global::CSAccountInfo.Builder> internal__static_CSAccountInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCAccountInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCAccountInfo, global::SCAccountInfo.Builder> internal__static_SCAccountInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCRealtimeInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCRealtimeInfo, global::SCRealtimeInfo.Builder> internal__static_SCRealtimeInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSLog__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSLog, global::CSLog.Builder> internal__static_CSLog__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCLog__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCLog, global::SCLog.Builder> internal__static_SCLog__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCCallList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCCallList, global::SCCallList.Builder> internal__static_SCCallList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCallProcess__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCallProcess, global::CSCallProcess.Builder> internal__static_CSCallProcess__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCRoleList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCRoleList, global::SCRoleList.Builder> internal__static_SCRoleList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSRoleAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSRoleAdd, global::CSRoleAdd.Builder> internal__static_CSRoleAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCRoleAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCRoleAdd, global::SCRoleAdd.Builder> internal__static_SCRoleAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSRoleDel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSRoleDel, global::CSRoleDel.Builder> internal__static_CSRoleDel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSRoleUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSRoleUpdate, global::CSRoleUpdate.Builder> internal__static_CSRoleUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSRoleRights__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSRoleRights, global::CSRoleRights.Builder> internal__static_CSRoleRights__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCAccountList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCAccountList, global::SCAccountList.Builder> internal__static_SCAccountList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAccountAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAccountAdd, global::CSAccountAdd.Builder> internal__static_CSAccountAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAccountDel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAccountDel, global::CSAccountDel.Builder> internal__static_CSAccountDel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAccountUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAccountUpdate, global::CSAccountUpdate.Builder> internal__static_CSAccountUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAccountSnsSet__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAccountSnsSet, global::CSAccountSnsSet.Builder> internal__static_CSAccountSnsSet__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSStaffComment__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSStaffComment, global::CSStaffComment.Builder> internal__static_CSStaffComment__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCStaffComment__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCStaffComment, global::SCStaffComment.Builder> internal__static_SCStaffComment__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSStaffPerform__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSStaffPerform, global::CSStaffPerform.Builder> internal__static_CSStaffPerform__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCStaffPerform__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCStaffPerform, global::SCStaffPerform.Builder> internal__static_SCStaffPerform__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEarning__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEarning, global::CSEarning.Builder> internal__static_CSEarning__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEarning__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEarning, global::SCEarning.Builder> internal__static_SCEarning__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCComputerList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCComputerList, global::SCComputerList.Builder> internal__static_SCComputerList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSComputerAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSComputerAdd, global::CSComputerAdd.Builder> internal__static_CSComputerAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSComputerDel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSComputerDel, global::CSComputerDel.Builder> internal__static_CSComputerDel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSComputerUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSComputerUpdate, global::CSComputerUpdate.Builder> internal__static_CSComputerUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSComputerFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSComputerFind, global::CSComputerFind.Builder> internal__static_CSComputerFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCComputerFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCComputerFind, global::SCComputerFind.Builder> internal__static_SCComputerFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberList, global::CSMemberList.Builder> internal__static_CSMemberList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCMemberList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCMemberList, global::SCMemberList.Builder> internal__static_SCMemberList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberDel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberDel, global::CSMemberDel.Builder> internal__static_CSMemberDel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberUpdateStatus__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberUpdateStatus, global::CSMemberUpdateStatus.Builder> internal__static_CSMemberUpdateStatus__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberFind, global::CSMemberFind.Builder> internal__static_CSMemberFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCMemberFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCMemberFind, global::SCMemberFind.Builder> internal__static_SCMemberFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMemberCardInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMemberCardInfo, global::CSMemberCardInfo.Builder> internal__static_CSMemberCardInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCMemberCardInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCMemberCardInfo, global::SCMemberCardInfo.Builder> internal__static_SCMemberCardInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSysBillList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSysBillList, global::SCSysBillList.Builder> internal__static_SCSysBillList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSysBillUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSysBillUpdate, global::CSSysBillUpdate.Builder> internal__static_CSSysBillUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSysBillUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSysBillUpdate, global::SCSysBillUpdate.Builder> internal__static_SCSysBillUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSysInto__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSysInto, global::CSSysInto.Builder> internal__static_CSSysInto__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSysInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSysInfo, global::SCSysInfo.Builder> internal__static_SCSysInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAddSysInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAddSysInfo, global::CSAddSysInfo.Builder> internal__static_CSAddSysInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSDelSysInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSDelSysInfo, global::CSDelSysInfo.Builder> internal__static_CSDelSysInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSUpdateSysInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSUpdateSysInfo, global::CSUpdateSysInfo.Builder> internal__static_CSUpdateSysInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGoodsAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGoodsAdd, global::CSGoodsAdd.Builder> internal__static_CSGoodsAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGoodsDel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGoodsDel, global::CSGoodsDel.Builder> internal__static_CSGoodsDel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGoodsUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGoodsUpdate, global::CSGoodsUpdate.Builder> internal__static_CSGoodsUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGoodsStock__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGoodsStock, global::CSGoodsStock.Builder> internal__static_CSGoodsStock__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCGoodsStock__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCGoodsStock, global::SCGoodsStock.Builder> internal__static_SCGoodsStock__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSalesRecord__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSalesRecord, global::CSSalesRecord.Builder> internal__static_CSSalesRecord__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSalesRecord__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSalesRecord, global::SCSalesRecord.Builder> internal__static_SCSalesRecord__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSalesTop__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSalesTop, global::CSSalesTop.Builder> internal__static_CSSalesTop__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSalesTop__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSalesTop, global::SCSalesTop.Builder> internal__static_SCSalesTop__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSOrderList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSOrderList, global::CSOrderList.Builder> internal__static_CSOrderList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCOrderList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCOrderList, global::SCOrderList.Builder> internal__static_SCOrderList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSOrderDetail__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSOrderDetail, global::CSOrderDetail.Builder> internal__static_CSOrderDetail__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCOrderDetail__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCOrderDetail, global::SCOrderDetail.Builder> internal__static_SCOrderDetail__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCShiftDeliveredBy__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCShiftDeliveredBy, global::SCShiftDeliveredBy.Builder> internal__static_SCShiftDeliveredBy__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSShiftAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSShiftAdd, global::CSShiftAdd.Builder> internal__static_CSShiftAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSShiftFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSShiftFind, global::CSShiftFind.Builder> internal__static_CSShiftFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCShiftFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCShiftFind, global::SCShiftFind.Builder> internal__static_SCShiftFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSQueryCharge__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSQueryCharge, global::CSQueryCharge.Builder> internal__static_CSQueryCharge__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCQueryCharge__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCQueryCharge, global::SCQueryCharge.Builder> internal__static_SCQueryCharge__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSQueryEmk__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSQueryEmk, global::CSQueryEmk.Builder> internal__static_CSQueryEmk__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCQueryEmk__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCQueryEmk, global::SCQueryEmk.Builder> internal__static_SCQueryEmk__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSQueryConsum__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSQueryConsum, global::CSQueryConsum.Builder> internal__static_CSQueryConsum__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCQueryConsum__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCQueryConsum, global::SCQueryConsum.Builder> internal__static_SCQueryConsum__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSQueryApply__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSQueryApply, global::CSQueryApply.Builder> internal__static_CSQueryApply__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCQueryApply__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCQueryApply, global::SCQueryApply.Builder> internal__static_SCQueryApply__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSQueryOccup__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSQueryOccup, global::CSQueryOccup.Builder> internal__static_CSQueryOccup__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCQueryOccup__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCQueryOccup, global::SCQueryOccup.Builder> internal__static_SCQueryOccup__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static Background() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChBCYWNrZ3JvdW5kLnByb3RvGhBCYXNlU3RydWN0LnByb3RvIhgKCENTQXV0", 
          "aGVuEgwKBHRleHQYASACKAkiKwoIU0NBdXRoZW4SEQoJc2Vzc2lvbklkGAEg", 
          "AigFEgwKBGd1aWQYAiABKAUiKwoHQ1NMb2dpbhIOCgZ1c2VySWQYASABKAkS", 
          "EAoIcGFzc3dvcmQYAiABKAkiKgoHU0NMb2dpbhIRCglzZXNzaW9uSWQYASAC", 
          "KAUSDAoEZ3VpZBgCIAEoBSIiCg1DU0FjY291bnRJbmZvEhEKCWFjY291bnRp", 
          "ZBgBIAIoCSJLCg1TQ0FjY291bnRJbmZvEh8KB2FjY291bnQYASACKAsyDi5T", 
          "dHJ1Y3RBY2NvdW50EhkKBHJvbGUYAiACKAsyCy5TdHJ1Y3RSb2xlIjQKDlND", 
          "UmVhbHRpbWVJbmZvEiIKCXJlYWx0aW1lcxgBIAMoCzIPLlN0cnVjdFJlYWxU", 
          "aW1lImkKBUNTTG9nEhkKBHBhZ2UYASACKAsyCy5TdHJ1Y3RQYWdlEhAKCG9w", 
          "ZXJhdG9yGAIgASgJEhEKCXN0YXJ0dGltZRgDIAEoCRIPCgdlbmR0aW1lGAQg", 
          "ASgJEg8KB2tleXdvcmQYBSABKAkiIQoFU0NMb2cSGAoEbG9ncxgBIAMoCzIK", 
          "LlN0cnVjdExvZyIoCgpTQ0NhbGxMaXN0EhoKBWNhbGxzGAEgAygLMgsuU3Ry", 
          "dWN0Q2FsbCIfCg1DU0NhbGxQcm9jZXNzEg4KBmNhbGxpZBgBIAIoBSIoCgpT", 
          "Q1JvbGVMaXN0EhoKBXJvbGVzGAEgAygLMgsuU3RydWN0Um9sZSIZCglDU1Jv", 
          "bGVBZGQSDAoEbmFtZRgBIAIoCSImCglTQ1JvbGVBZGQSGQoEcm9sZRgBIAIo", 
          "CzILLlN0cnVjdFJvbGUiGwoJQ1NSb2xlRGVsEg4KBnJvbGVpZBgBIAIoBSIs", 
          "CgxDU1JvbGVVcGRhdGUSDgoGcm9sZWlkGAEgAigFEgwKBG5hbWUYAiACKAki", 
          "QQoMQ1NSb2xlUmlnaHRzEg4KBnJvbGVpZBgBIAIoBRIRCglyaWdodHR5cGUY", 
          "AiACKAUSDgoGcmlnaHRzGAMgAigJIjAKDVNDQWNjb3VudExpc3QSHwoHYWNj", 
          "b3VudBgBIAMoCzIOLlN0cnVjdEFjY291bnQiLwoMQ1NBY2NvdW50QWRkEh8K", 
          "B2FjY291bnQYASACKAsyDi5TdHJ1Y3RBY2NvdW50Ih8KDENTQWNjb3VudERl", 
          "bBIPCgdhZG1pbmlkGAEgAigJIjIKD0NTQWNjb3VudFVwZGF0ZRIfCgdhY2Nv", 
          "dW50GAEgAigLMg4uU3RydWN0QWNjb3VudCIyCg9DU0FjY291bnRTbnNTZXQS", 
          "HwoHYWNjb3VudBgBIAMoCzIOLlN0cnVjdEFjY291bnQifgoOQ1NTdGFmZkNv", 
          "bW1lbnQSGQoEcGFnZRgBIAIoCzILLlN0cnVjdFBhZ2USDAoEdHlwZRgCIAIo", 
          "BRIRCglzdGFydHRpbWUYAyABKAkSDwoHZW5kdGltZRgEIAEoCRINCgVzdGFm", 
          "ZhgFIAEoCRIQCghjdXN0b21lchgGIAEoCSIyCg5TQ1N0YWZmQ29tbWVudBIg", 
          "Cghjb21tZW50cxgBIAMoCzIOLlN0cnVjdENvbW1lbnQiLQoOQ1NTdGFmZlBl", 
          "cmZvcm0SDAoEeWVhchgBIAIoBRINCgVtb250aBgCIAIoBSIyCg5TQ1N0YWZm", 
          "UGVyZm9ybRIgCghwZXJmb3JtcxgBIAMoCzIOLlN0cnVjdFBlcmZvcm0iLwoJ", 
          "Q1NFYXJuaW5nEhEKCXN0YXJ0dGltZRgBIAIoCRIPCgdlbmR0aW1lGAIgAigJ", 
          "IicKCVNDRWFybmluZxIaCgVlYXJucxgBIAMoCzILLlN0cnVjdEVhcm4iNAoO", 
          "U0NDb21wdXRlckxpc3QSIgoJY29tcHV0ZXJzGAEgAygLMg8uU3RydWN0Q29t", 
          "cHV0ZXIiMgoNQ1NDb21wdXRlckFkZBIhCghjb21wdXRlchgBIAIoCzIPLlN0", 
          "cnVjdENvbXB1dGVyIiMKDUNTQ29tcHV0ZXJEZWwSEgoKY29tcHV0ZXJpZBgB", 
          "IAMoBSI1ChBDU0NvbXB1dGVyVXBkYXRlEiEKCGNvbXB1dGVyGAEgAygLMg8u", 
          "U3RydWN0Q29tcHV0ZXIiHgoOQ1NDb21wdXRlckZpbmQSDAoEbmFtZRgBIAIo", 
          "CSI0Cg5TQ0NvbXB1dGVyRmluZBIiCgljb21wdXRlcnMYASADKAsyDy5TdHJ1", 
          "Y3RDb21wdXRlciIpCgxDU01lbWJlckxpc3QSGQoEcGFnZRgBIAIoCzILLlN0", 
          "cnVjdFBhZ2UiLgoMU0NNZW1iZXJMaXN0Eh4KB21lbWJlcnMYASADKAsyDS5T", 
          "dHJ1Y3RNZW1iZXIiHwoLQ1NNZW1iZXJEZWwSEAoIbWVtYmVyaWQYASADKAUi", 
          "NwoUQ1NNZW1iZXJVcGRhdGVTdGF0dXMSDAoEbWFzaxgBIAIoBRIRCgltZW1i", 
          "ZXJpZHMYAiACKAUiWgoMQ1NNZW1iZXJGaW5kEhkKBHBhZ2UYASACKAsyCy5T", 
          "dHJ1Y3RQYWdlEg4KBnN0YXR1cxgCIAEoBRINCgVyaWdodBgDIAEoBRIQCghr", 
          "ZXl3b3JkcxgEIAEoCSIuCgxTQ01lbWJlckZpbmQSHgoHbWVtYmVycxgBIAMo", 
          "CzINLlN0cnVjdE1lbWJlciIkChBDU01lbWJlckNhcmRJbmZvEhAKCG1lbWJl", 
          "cmlkGAEgAigFIjEKEFNDTWVtYmVyQ2FyZEluZm8SHQoIY2FyZGluZm8YASAC", 
          "KAsyCy5TdHJ1Y3RDYXJkIlcKDVNDU3lzQmlsbExpc3QSIQoIdXNlckFyZWEY", 
          "ASADKAsyDy5TdHJ1Y3RVc2VyQXJlYRIjCgdzZXR0aW5nGAIgAygLMhIuU3Ry", 
          "dWN0QmlsbFNldHRpbmciWQoPQ1NTeXNCaWxsVXBkYXRlEiEKCHVzZXJBcmVh", 
          "GAEgAygLMg8uU3RydWN0VXNlckFyZWESIwoHc2V0dGluZxgCIAMoCzISLlN0", 
          "cnVjdEJpbGxTZXR0aW5nIlkKD1NDU3lzQmlsbFVwZGF0ZRIhCgh1c2VyQXJl", 
          "YRgBIAMoCzIPLlN0cnVjdFVzZXJBcmVhEiMKB3NldHRpbmcYAiADKAsyEi5T", 
          "dHJ1Y3RCaWxsU2V0dGluZyIbCglDU1N5c0ludG8SDgoGcGFyZW50GAEgAigJ", 
          "IjsKCVNDU3lzSW5mbxIOCgZwYXJlbnQYASACKAkSHgoFY2hpbGQYAiADKAsy", 
          "Dy5TdHJ1Y3REaWN0SXRlbSI+CgxDU0FkZFN5c0luZm8SDgoGcGFyZW50GAEg", 
          "AigJEh4KBWNoaWxkGAIgAigLMg8uU3RydWN0RGljdEl0ZW0iLQoMQ1NEZWxT", 
          "eXNJbmZvEg4KBnBhcmVudBgBIAIoCRINCgVjaGlsZBgCIAMoCSJBCg9DU1Vw", 
          "ZGF0ZVN5c0luZm8SDgoGcGFyZW50GAEgAigJEh4KBWNoaWxkGAIgAygLMg8u", 
          "U3RydWN0RGljdEl0ZW0iKQoKQ1NHb29kc0FkZBIbCgVnb29kcxgBIAIoCzIM", 
          "LlN0cnVjdEdvb2RzIhkKCkNTR29vZHNEZWwSCwoDaWRzGAEgAygFIiwKDUNT", 
          "R29vZHNVcGRhdGUSGwoFZ29vZHMYASACKAsyDC5TdHJ1Y3RHb29kcyIpCgxD", 
          "U0dvb2RzU3RvY2sSGQoEcGFnZRgBIAIoCzILLlN0cnVjdFBhZ2UiKwoMU0NH", 
          "b29kc1N0b2NrEhsKBWdvb2RzGAEgAygLMgwuU3RydWN0U3RvY2siXwoNQ1NT", 
          "YWxlc1JlY29yZBIZCgRwYWdlGAEgAigLMgsuU3RydWN0UGFnZRIPCgdnb29k", 
          "c2lkGAIgAigFEhEKCWJlZ2ludGltZRgDIAEoCRIPCgdlbmR0aW1lGAQgASgJ", 
          "IisKDVNDU2FsZXNSZWNvcmQSGgoFc2FsZXMYASADKAsyCy5TdHJ1Y3RTYWxl", 
          "IgwKCkNTU2FsZXNUb3AiDAoKU0NTYWxlc1RvcCKkAQoLQ1NPcmRlckxpc3QS", 
          "GQoEcGFnZRgBIAIoCzILLlN0cnVjdFBhZ2USDgoGc3RhdHVzGAIgASgFEhUK", 
          "DWFkZHRpbWVfc3RhcnQYAyABKAkSEwoLYWRkdGltZV9lbmQYBCABKAkSFgoO", 
          "cHJvY3RpbWVfc3RhcnQYBSABKAkSFAoMcHJvY3RpbWVfZW5kGAYgASgJEhAK", 
          "CHVzZXJuYW1lGAcgASgJIisKC1NDT3JkZXJMaXN0EhwKBm9yZGVycxgBIAMo", 
          "CzIMLlN0cnVjdE9yZGVyIiAKDUNTT3JkZXJEZXRhaWwSDwoHb3JkZXJpZBgB", 
          "IAIoBSI0Cg1TQ09yZGVyRGV0YWlsEiMKB2RldGFpbHMYASADKAsyEi5TdHJ1", 
          "Y3RPcmRlckRldGFpbCJWChJTQ1NoaWZ0RGVsaXZlcmVkQnkSFAoMZGVsaXZl", 
          "cmVkX2J5GAEgAigJEhUKDWNoYXJnZV9hbW91bnQYAiACKAUSEwoLc2FsZV9h", 
          "bW91bnQYAyACKAUibwoKQ1NTaGlmdEFkZBIVCg1kZWxpdmVyZWRfcHdkGAEg", 
          "AigJEhMKC3JlY2VpdmVkX2J5GAIgAigJEhQKDHJlY2VpdmVkX3B3ZBgDIAIo", 
          "CRIPCgdpc2NoZWNrGAQgAigFEg4KBnJlbWFyaxgFIAIoCSJNCgtDU1NoaWZ0", 
          "RmluZBIZCgRwYWdlGAEgAigLMgsuU3RydWN0UGFnZRIRCglzdGFydHRpbWUY", 
          "AiABKAkSEAoIc3RvcHRpbWUYAyABKAkiKwoLU0NTaGlmdEZpbmQSHAoGc2hp", 
          "ZnRzGAEgAygLMgwuU3RydWN0U2hpZnQibgoNQ1NRdWVyeUNoYXJnZRIZCgRw", 
          "YWdlGAEgAigLMgsuU3RydWN0UGFnZRIRCglzdGFydHRpbWUYAiABKAkSEAoI", 
          "c3RvcHRpbWUYAyABKAkSDwoHcGF5bW9kZRgEIAEoBRIMCgRuYW1lGAUgASgJ", 
          "IkIKDVNDUXVlcnlDaGFyZ2USEQoJcGFnZWNvdW50GAEgAigFEh4KB2NoYXJn", 
          "ZXMYAiADKAsyDS5TdHJ1Y3RDaGFyZ2UigAEKCkNTUXVlcnlFbWsSGQoEcGFn", 
          "ZRgBIAIoCzILLlN0cnVjdFBhZ2USEQoJc3RhcnR0aW1lGAIgASgJEhAKCHN0", 
          "b3B0aW1lGAMgASgJEgwKBG5hbWUYBCABKAkSEAoIbWVtYmVyaWQYBSABKAUS", 
          "EgoKY29tcHV0ZXJpZBgGIAEoBSJBCgpTQ1F1ZXJ5RW1rEhEKCXBhZ2Vjb3Vu", 
          "dBgBIAIoBRIgCgRlbWtzGAIgAygLMhIuU3RydWN0RW1iYXJrYXRpb24igQEK", 
          "DUNTUXVlcnlDb25zdW0SGQoEcGFnZRgBIAIoCzILLlN0cnVjdFBhZ2USEQoJ", 
          "c3RhcnR0aW1lGAIgASgJEhAKCHN0b3B0aW1lGAMgASgJEg0KBXVzYWdlGAQg", 
          "ASgFEg8KB3BheW1vZGUYBSABKAUSEAoIbWVtYmVyaWQYBiABKAUiQgoNU0NR", 
          "dWVyeUNvbnN1bRIRCglwYWdlY291bnQYASACKAUSHgoHY29uc3VtcxgCIAMo", 
          "CzINLlN0cnVjdENvbnN1bSJ/CgxDU1F1ZXJ5QXBwbHkSGQoEcGFnZRgBIAIo", 
          "CzILLlN0cnVjdFBhZ2USEQoJc3RhcnR0aW1lGAIgASgJEhAKCHN0b3B0aW1l", 
          "GAMgASgJEhAKCG9wZXJhdG9yGAQgASgJEg8KB3JpZ2h0aWQYBSABKAUSDAoE", 
          "bmFtZRgGIAEoCSI/CgxTQ1F1ZXJ5QXBwbHkSEQoJcGFnZWNvdW50GAEgAigF", 
          "EhwKBmFwcGx5cxgCIAMoCzIMLlN0cnVjdEFwcGx5IiwKDENTUXVlcnlPY2N1", 
          "cBIOCgZhcmVhaWQYASABKAUSDAoEZGF0ZRgCIAEoCSIeCgxTQ1F1ZXJ5T2Nj", 
          "dXASDgoGb2NjdXBzGAEgAygFQjMKHWNvbS5za3lzb2Z0LmNvcmUuYXV0by5t", 
        "ZXNzYWdlQhJCYWNrZ3JvdW5kUHJvdG9jb2w="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_CSAuthen__Descriptor = Descriptor.MessageTypes[0];
      internal__static_CSAuthen__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAuthen, global::CSAuthen.Builder>(internal__static_CSAuthen__Descriptor,
              new string[] { "Text", });
      internal__static_SCAuthen__Descriptor = Descriptor.MessageTypes[1];
      internal__static_SCAuthen__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCAuthen, global::SCAuthen.Builder>(internal__static_SCAuthen__Descriptor,
              new string[] { "SessionId", "Guid", });
      internal__static_CSLogin__Descriptor = Descriptor.MessageTypes[2];
      internal__static_CSLogin__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSLogin, global::CSLogin.Builder>(internal__static_CSLogin__Descriptor,
              new string[] { "UserId", "Password", });
      internal__static_SCLogin__Descriptor = Descriptor.MessageTypes[3];
      internal__static_SCLogin__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCLogin, global::SCLogin.Builder>(internal__static_SCLogin__Descriptor,
              new string[] { "SessionId", "Guid", });
      internal__static_CSAccountInfo__Descriptor = Descriptor.MessageTypes[4];
      internal__static_CSAccountInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAccountInfo, global::CSAccountInfo.Builder>(internal__static_CSAccountInfo__Descriptor,
              new string[] { "Accountid", });
      internal__static_SCAccountInfo__Descriptor = Descriptor.MessageTypes[5];
      internal__static_SCAccountInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCAccountInfo, global::SCAccountInfo.Builder>(internal__static_SCAccountInfo__Descriptor,
              new string[] { "Account", "Role", });
      internal__static_SCRealtimeInfo__Descriptor = Descriptor.MessageTypes[6];
      internal__static_SCRealtimeInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCRealtimeInfo, global::SCRealtimeInfo.Builder>(internal__static_SCRealtimeInfo__Descriptor,
              new string[] { "Realtimes", });
      internal__static_CSLog__Descriptor = Descriptor.MessageTypes[7];
      internal__static_CSLog__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSLog, global::CSLog.Builder>(internal__static_CSLog__Descriptor,
              new string[] { "Page", "Operator", "Starttime", "Endtime", "Keyword", });
      internal__static_SCLog__Descriptor = Descriptor.MessageTypes[8];
      internal__static_SCLog__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCLog, global::SCLog.Builder>(internal__static_SCLog__Descriptor,
              new string[] { "Logs", });
      internal__static_SCCallList__Descriptor = Descriptor.MessageTypes[9];
      internal__static_SCCallList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCCallList, global::SCCallList.Builder>(internal__static_SCCallList__Descriptor,
              new string[] { "Calls", });
      internal__static_CSCallProcess__Descriptor = Descriptor.MessageTypes[10];
      internal__static_CSCallProcess__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCallProcess, global::CSCallProcess.Builder>(internal__static_CSCallProcess__Descriptor,
              new string[] { "Callid", });
      internal__static_SCRoleList__Descriptor = Descriptor.MessageTypes[11];
      internal__static_SCRoleList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCRoleList, global::SCRoleList.Builder>(internal__static_SCRoleList__Descriptor,
              new string[] { "Roles", });
      internal__static_CSRoleAdd__Descriptor = Descriptor.MessageTypes[12];
      internal__static_CSRoleAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSRoleAdd, global::CSRoleAdd.Builder>(internal__static_CSRoleAdd__Descriptor,
              new string[] { "Name", });
      internal__static_SCRoleAdd__Descriptor = Descriptor.MessageTypes[13];
      internal__static_SCRoleAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCRoleAdd, global::SCRoleAdd.Builder>(internal__static_SCRoleAdd__Descriptor,
              new string[] { "Role", });
      internal__static_CSRoleDel__Descriptor = Descriptor.MessageTypes[14];
      internal__static_CSRoleDel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSRoleDel, global::CSRoleDel.Builder>(internal__static_CSRoleDel__Descriptor,
              new string[] { "Roleid", });
      internal__static_CSRoleUpdate__Descriptor = Descriptor.MessageTypes[15];
      internal__static_CSRoleUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSRoleUpdate, global::CSRoleUpdate.Builder>(internal__static_CSRoleUpdate__Descriptor,
              new string[] { "Roleid", "Name", });
      internal__static_CSRoleRights__Descriptor = Descriptor.MessageTypes[16];
      internal__static_CSRoleRights__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSRoleRights, global::CSRoleRights.Builder>(internal__static_CSRoleRights__Descriptor,
              new string[] { "Roleid", "Righttype", "Rights", });
      internal__static_SCAccountList__Descriptor = Descriptor.MessageTypes[17];
      internal__static_SCAccountList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCAccountList, global::SCAccountList.Builder>(internal__static_SCAccountList__Descriptor,
              new string[] { "Account", });
      internal__static_CSAccountAdd__Descriptor = Descriptor.MessageTypes[18];
      internal__static_CSAccountAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAccountAdd, global::CSAccountAdd.Builder>(internal__static_CSAccountAdd__Descriptor,
              new string[] { "Account", });
      internal__static_CSAccountDel__Descriptor = Descriptor.MessageTypes[19];
      internal__static_CSAccountDel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAccountDel, global::CSAccountDel.Builder>(internal__static_CSAccountDel__Descriptor,
              new string[] { "Adminid", });
      internal__static_CSAccountUpdate__Descriptor = Descriptor.MessageTypes[20];
      internal__static_CSAccountUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAccountUpdate, global::CSAccountUpdate.Builder>(internal__static_CSAccountUpdate__Descriptor,
              new string[] { "Account", });
      internal__static_CSAccountSnsSet__Descriptor = Descriptor.MessageTypes[21];
      internal__static_CSAccountSnsSet__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAccountSnsSet, global::CSAccountSnsSet.Builder>(internal__static_CSAccountSnsSet__Descriptor,
              new string[] { "Account", });
      internal__static_CSStaffComment__Descriptor = Descriptor.MessageTypes[22];
      internal__static_CSStaffComment__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSStaffComment, global::CSStaffComment.Builder>(internal__static_CSStaffComment__Descriptor,
              new string[] { "Page", "Type", "Starttime", "Endtime", "Staff", "Customer", });
      internal__static_SCStaffComment__Descriptor = Descriptor.MessageTypes[23];
      internal__static_SCStaffComment__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCStaffComment, global::SCStaffComment.Builder>(internal__static_SCStaffComment__Descriptor,
              new string[] { "Comments", });
      internal__static_CSStaffPerform__Descriptor = Descriptor.MessageTypes[24];
      internal__static_CSStaffPerform__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSStaffPerform, global::CSStaffPerform.Builder>(internal__static_CSStaffPerform__Descriptor,
              new string[] { "Year", "Month", });
      internal__static_SCStaffPerform__Descriptor = Descriptor.MessageTypes[25];
      internal__static_SCStaffPerform__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCStaffPerform, global::SCStaffPerform.Builder>(internal__static_SCStaffPerform__Descriptor,
              new string[] { "Performs", });
      internal__static_CSEarning__Descriptor = Descriptor.MessageTypes[26];
      internal__static_CSEarning__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEarning, global::CSEarning.Builder>(internal__static_CSEarning__Descriptor,
              new string[] { "Starttime", "Endtime", });
      internal__static_SCEarning__Descriptor = Descriptor.MessageTypes[27];
      internal__static_SCEarning__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEarning, global::SCEarning.Builder>(internal__static_SCEarning__Descriptor,
              new string[] { "Earns", });
      internal__static_SCComputerList__Descriptor = Descriptor.MessageTypes[28];
      internal__static_SCComputerList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCComputerList, global::SCComputerList.Builder>(internal__static_SCComputerList__Descriptor,
              new string[] { "Computers", });
      internal__static_CSComputerAdd__Descriptor = Descriptor.MessageTypes[29];
      internal__static_CSComputerAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSComputerAdd, global::CSComputerAdd.Builder>(internal__static_CSComputerAdd__Descriptor,
              new string[] { "Computer", });
      internal__static_CSComputerDel__Descriptor = Descriptor.MessageTypes[30];
      internal__static_CSComputerDel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSComputerDel, global::CSComputerDel.Builder>(internal__static_CSComputerDel__Descriptor,
              new string[] { "Computerid", });
      internal__static_CSComputerUpdate__Descriptor = Descriptor.MessageTypes[31];
      internal__static_CSComputerUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSComputerUpdate, global::CSComputerUpdate.Builder>(internal__static_CSComputerUpdate__Descriptor,
              new string[] { "Computer", });
      internal__static_CSComputerFind__Descriptor = Descriptor.MessageTypes[32];
      internal__static_CSComputerFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSComputerFind, global::CSComputerFind.Builder>(internal__static_CSComputerFind__Descriptor,
              new string[] { "Name", });
      internal__static_SCComputerFind__Descriptor = Descriptor.MessageTypes[33];
      internal__static_SCComputerFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCComputerFind, global::SCComputerFind.Builder>(internal__static_SCComputerFind__Descriptor,
              new string[] { "Computers", });
      internal__static_CSMemberList__Descriptor = Descriptor.MessageTypes[34];
      internal__static_CSMemberList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberList, global::CSMemberList.Builder>(internal__static_CSMemberList__Descriptor,
              new string[] { "Page", });
      internal__static_SCMemberList__Descriptor = Descriptor.MessageTypes[35];
      internal__static_SCMemberList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCMemberList, global::SCMemberList.Builder>(internal__static_SCMemberList__Descriptor,
              new string[] { "Members", });
      internal__static_CSMemberDel__Descriptor = Descriptor.MessageTypes[36];
      internal__static_CSMemberDel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberDel, global::CSMemberDel.Builder>(internal__static_CSMemberDel__Descriptor,
              new string[] { "Memberid", });
      internal__static_CSMemberUpdateStatus__Descriptor = Descriptor.MessageTypes[37];
      internal__static_CSMemberUpdateStatus__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberUpdateStatus, global::CSMemberUpdateStatus.Builder>(internal__static_CSMemberUpdateStatus__Descriptor,
              new string[] { "Mask", "Memberids", });
      internal__static_CSMemberFind__Descriptor = Descriptor.MessageTypes[38];
      internal__static_CSMemberFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberFind, global::CSMemberFind.Builder>(internal__static_CSMemberFind__Descriptor,
              new string[] { "Page", "Status", "Right", "Keywords", });
      internal__static_SCMemberFind__Descriptor = Descriptor.MessageTypes[39];
      internal__static_SCMemberFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCMemberFind, global::SCMemberFind.Builder>(internal__static_SCMemberFind__Descriptor,
              new string[] { "Members", });
      internal__static_CSMemberCardInfo__Descriptor = Descriptor.MessageTypes[40];
      internal__static_CSMemberCardInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMemberCardInfo, global::CSMemberCardInfo.Builder>(internal__static_CSMemberCardInfo__Descriptor,
              new string[] { "Memberid", });
      internal__static_SCMemberCardInfo__Descriptor = Descriptor.MessageTypes[41];
      internal__static_SCMemberCardInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCMemberCardInfo, global::SCMemberCardInfo.Builder>(internal__static_SCMemberCardInfo__Descriptor,
              new string[] { "Cardinfo", });
      internal__static_SCSysBillList__Descriptor = Descriptor.MessageTypes[42];
      internal__static_SCSysBillList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSysBillList, global::SCSysBillList.Builder>(internal__static_SCSysBillList__Descriptor,
              new string[] { "UserArea", "Setting", });
      internal__static_CSSysBillUpdate__Descriptor = Descriptor.MessageTypes[43];
      internal__static_CSSysBillUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSysBillUpdate, global::CSSysBillUpdate.Builder>(internal__static_CSSysBillUpdate__Descriptor,
              new string[] { "UserArea", "Setting", });
      internal__static_SCSysBillUpdate__Descriptor = Descriptor.MessageTypes[44];
      internal__static_SCSysBillUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSysBillUpdate, global::SCSysBillUpdate.Builder>(internal__static_SCSysBillUpdate__Descriptor,
              new string[] { "UserArea", "Setting", });
      internal__static_CSSysInto__Descriptor = Descriptor.MessageTypes[45];
      internal__static_CSSysInto__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSysInto, global::CSSysInto.Builder>(internal__static_CSSysInto__Descriptor,
              new string[] { "Parent", });
      internal__static_SCSysInfo__Descriptor = Descriptor.MessageTypes[46];
      internal__static_SCSysInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSysInfo, global::SCSysInfo.Builder>(internal__static_SCSysInfo__Descriptor,
              new string[] { "Parent", "Child", });
      internal__static_CSAddSysInfo__Descriptor = Descriptor.MessageTypes[47];
      internal__static_CSAddSysInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAddSysInfo, global::CSAddSysInfo.Builder>(internal__static_CSAddSysInfo__Descriptor,
              new string[] { "Parent", "Child", });
      internal__static_CSDelSysInfo__Descriptor = Descriptor.MessageTypes[48];
      internal__static_CSDelSysInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSDelSysInfo, global::CSDelSysInfo.Builder>(internal__static_CSDelSysInfo__Descriptor,
              new string[] { "Parent", "Child", });
      internal__static_CSUpdateSysInfo__Descriptor = Descriptor.MessageTypes[49];
      internal__static_CSUpdateSysInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSUpdateSysInfo, global::CSUpdateSysInfo.Builder>(internal__static_CSUpdateSysInfo__Descriptor,
              new string[] { "Parent", "Child", });
      internal__static_CSGoodsAdd__Descriptor = Descriptor.MessageTypes[50];
      internal__static_CSGoodsAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGoodsAdd, global::CSGoodsAdd.Builder>(internal__static_CSGoodsAdd__Descriptor,
              new string[] { "Goods", });
      internal__static_CSGoodsDel__Descriptor = Descriptor.MessageTypes[51];
      internal__static_CSGoodsDel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGoodsDel, global::CSGoodsDel.Builder>(internal__static_CSGoodsDel__Descriptor,
              new string[] { "Ids", });
      internal__static_CSGoodsUpdate__Descriptor = Descriptor.MessageTypes[52];
      internal__static_CSGoodsUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGoodsUpdate, global::CSGoodsUpdate.Builder>(internal__static_CSGoodsUpdate__Descriptor,
              new string[] { "Goods", });
      internal__static_CSGoodsStock__Descriptor = Descriptor.MessageTypes[53];
      internal__static_CSGoodsStock__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGoodsStock, global::CSGoodsStock.Builder>(internal__static_CSGoodsStock__Descriptor,
              new string[] { "Page", });
      internal__static_SCGoodsStock__Descriptor = Descriptor.MessageTypes[54];
      internal__static_SCGoodsStock__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCGoodsStock, global::SCGoodsStock.Builder>(internal__static_SCGoodsStock__Descriptor,
              new string[] { "Goods", });
      internal__static_CSSalesRecord__Descriptor = Descriptor.MessageTypes[55];
      internal__static_CSSalesRecord__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSalesRecord, global::CSSalesRecord.Builder>(internal__static_CSSalesRecord__Descriptor,
              new string[] { "Page", "Goodsid", "Begintime", "Endtime", });
      internal__static_SCSalesRecord__Descriptor = Descriptor.MessageTypes[56];
      internal__static_SCSalesRecord__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSalesRecord, global::SCSalesRecord.Builder>(internal__static_SCSalesRecord__Descriptor,
              new string[] { "Sales", });
      internal__static_CSSalesTop__Descriptor = Descriptor.MessageTypes[57];
      internal__static_CSSalesTop__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSalesTop, global::CSSalesTop.Builder>(internal__static_CSSalesTop__Descriptor,
              new string[] { });
      internal__static_SCSalesTop__Descriptor = Descriptor.MessageTypes[58];
      internal__static_SCSalesTop__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSalesTop, global::SCSalesTop.Builder>(internal__static_SCSalesTop__Descriptor,
              new string[] { });
      internal__static_CSOrderList__Descriptor = Descriptor.MessageTypes[59];
      internal__static_CSOrderList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSOrderList, global::CSOrderList.Builder>(internal__static_CSOrderList__Descriptor,
              new string[] { "Page", "Status", "AddtimeStart", "AddtimeEnd", "ProctimeStart", "ProctimeEnd", "Username", });
      internal__static_SCOrderList__Descriptor = Descriptor.MessageTypes[60];
      internal__static_SCOrderList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCOrderList, global::SCOrderList.Builder>(internal__static_SCOrderList__Descriptor,
              new string[] { "Orders", });
      internal__static_CSOrderDetail__Descriptor = Descriptor.MessageTypes[61];
      internal__static_CSOrderDetail__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSOrderDetail, global::CSOrderDetail.Builder>(internal__static_CSOrderDetail__Descriptor,
              new string[] { "Orderid", });
      internal__static_SCOrderDetail__Descriptor = Descriptor.MessageTypes[62];
      internal__static_SCOrderDetail__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCOrderDetail, global::SCOrderDetail.Builder>(internal__static_SCOrderDetail__Descriptor,
              new string[] { "Details", });
      internal__static_SCShiftDeliveredBy__Descriptor = Descriptor.MessageTypes[63];
      internal__static_SCShiftDeliveredBy__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCShiftDeliveredBy, global::SCShiftDeliveredBy.Builder>(internal__static_SCShiftDeliveredBy__Descriptor,
              new string[] { "DeliveredBy", "ChargeAmount", "SaleAmount", });
      internal__static_CSShiftAdd__Descriptor = Descriptor.MessageTypes[64];
      internal__static_CSShiftAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSShiftAdd, global::CSShiftAdd.Builder>(internal__static_CSShiftAdd__Descriptor,
              new string[] { "DeliveredPwd", "ReceivedBy", "ReceivedPwd", "Ischeck", "Remark", });
      internal__static_CSShiftFind__Descriptor = Descriptor.MessageTypes[65];
      internal__static_CSShiftFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSShiftFind, global::CSShiftFind.Builder>(internal__static_CSShiftFind__Descriptor,
              new string[] { "Page", "Starttime", "Stoptime", });
      internal__static_SCShiftFind__Descriptor = Descriptor.MessageTypes[66];
      internal__static_SCShiftFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCShiftFind, global::SCShiftFind.Builder>(internal__static_SCShiftFind__Descriptor,
              new string[] { "Shifts", });
      internal__static_CSQueryCharge__Descriptor = Descriptor.MessageTypes[67];
      internal__static_CSQueryCharge__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSQueryCharge, global::CSQueryCharge.Builder>(internal__static_CSQueryCharge__Descriptor,
              new string[] { "Page", "Starttime", "Stoptime", "Paymode", "Name", });
      internal__static_SCQueryCharge__Descriptor = Descriptor.MessageTypes[68];
      internal__static_SCQueryCharge__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCQueryCharge, global::SCQueryCharge.Builder>(internal__static_SCQueryCharge__Descriptor,
              new string[] { "Pagecount", "Charges", });
      internal__static_CSQueryEmk__Descriptor = Descriptor.MessageTypes[69];
      internal__static_CSQueryEmk__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSQueryEmk, global::CSQueryEmk.Builder>(internal__static_CSQueryEmk__Descriptor,
              new string[] { "Page", "Starttime", "Stoptime", "Name", "Memberid", "Computerid", });
      internal__static_SCQueryEmk__Descriptor = Descriptor.MessageTypes[70];
      internal__static_SCQueryEmk__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCQueryEmk, global::SCQueryEmk.Builder>(internal__static_SCQueryEmk__Descriptor,
              new string[] { "Pagecount", "Emks", });
      internal__static_CSQueryConsum__Descriptor = Descriptor.MessageTypes[71];
      internal__static_CSQueryConsum__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSQueryConsum, global::CSQueryConsum.Builder>(internal__static_CSQueryConsum__Descriptor,
              new string[] { "Page", "Starttime", "Stoptime", "Usage", "Paymode", "Memberid", });
      internal__static_SCQueryConsum__Descriptor = Descriptor.MessageTypes[72];
      internal__static_SCQueryConsum__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCQueryConsum, global::SCQueryConsum.Builder>(internal__static_SCQueryConsum__Descriptor,
              new string[] { "Pagecount", "Consums", });
      internal__static_CSQueryApply__Descriptor = Descriptor.MessageTypes[73];
      internal__static_CSQueryApply__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSQueryApply, global::CSQueryApply.Builder>(internal__static_CSQueryApply__Descriptor,
              new string[] { "Page", "Starttime", "Stoptime", "Operator", "Rightid", "Name", });
      internal__static_SCQueryApply__Descriptor = Descriptor.MessageTypes[74];
      internal__static_SCQueryApply__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCQueryApply, global::SCQueryApply.Builder>(internal__static_SCQueryApply__Descriptor,
              new string[] { "Pagecount", "Applys", });
      internal__static_CSQueryOccup__Descriptor = Descriptor.MessageTypes[75];
      internal__static_CSQueryOccup__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSQueryOccup, global::CSQueryOccup.Builder>(internal__static_CSQueryOccup__Descriptor,
              new string[] { "Areaid", "Date", });
      internal__static_SCQueryOccup__Descriptor = Descriptor.MessageTypes[76];
      internal__static_SCQueryOccup__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCQueryOccup, global::SCQueryOccup.Builder>(internal__static_SCQueryOccup__Descriptor,
              new string[] { "Occups", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        global::BaseStruct.Descriptor, 
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAuthen : pb::GeneratedMessage<CSAuthen, CSAuthen.Builder> {
  private CSAuthen() { }
  private static readonly CSAuthen defaultInstance = new CSAuthen().MakeReadOnly();
  private static readonly string[] _cSAuthenFieldNames = new string[] { "text" };
  private static readonly uint[] _cSAuthenFieldTags = new uint[] { 10 };
  public static CSAuthen DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAuthen DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAuthen ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSAuthen__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAuthen, CSAuthen.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSAuthen__FieldAccessorTable; }
  }
  
  public const int TextFieldNumber = 1;
  private bool hasText;
  private string text_ = "";
  public bool HasText {
    get { return hasText; }
  }
  public string Text {
    get { return text_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasText) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAuthenFieldNames;
    if (hasText) {
      output.WriteString(1, field_names[0], Text);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasText) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Text);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAuthen ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAuthen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAuthen ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAuthen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAuthen ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAuthen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAuthen ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAuthen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAuthen ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAuthen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAuthen MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAuthen prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAuthen, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAuthen cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAuthen result;
    
    private CSAuthen PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAuthen original = result;
        result = new CSAuthen();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAuthen MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAuthen.Descriptor; }
    }
    
    public override CSAuthen DefaultInstanceForType {
      get { return global::CSAuthen.DefaultInstance; }
    }
    
    public override CSAuthen BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAuthen) {
        return MergeFrom((CSAuthen) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAuthen other) {
      if (other == global::CSAuthen.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasText) {
        Text = other.Text;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAuthenFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAuthenFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasText = input.ReadString(ref result.text_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasText {
      get { return result.hasText; }
    }
    public string Text {
      get { return result.Text; }
      set { SetText(value); }
    }
    public Builder SetText(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasText = true;
      result.text_ = value;
      return this;
    }
    public Builder ClearText() {
      PrepareBuilder();
      result.hasText = false;
      result.text_ = "";
      return this;
    }
  }
  static CSAuthen() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCAuthen : pb::GeneratedMessage<SCAuthen, SCAuthen.Builder> {
  private SCAuthen() { }
  private static readonly SCAuthen defaultInstance = new SCAuthen().MakeReadOnly();
  private static readonly string[] _sCAuthenFieldNames = new string[] { "guid", "sessionId" };
  private static readonly uint[] _sCAuthenFieldTags = new uint[] { 16, 8 };
  public static SCAuthen DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCAuthen DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCAuthen ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCAuthen__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCAuthen, SCAuthen.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCAuthen__FieldAccessorTable; }
  }
  
  public const int SessionIdFieldNumber = 1;
  private bool hasSessionId;
  private int sessionId_;
  public bool HasSessionId {
    get { return hasSessionId; }
  }
  public int SessionId {
    get { return sessionId_; }
  }
  
  public const int GuidFieldNumber = 2;
  private bool hasGuid;
  private int guid_;
  public bool HasGuid {
    get { return hasGuid; }
  }
  public int Guid {
    get { return guid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasSessionId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCAuthenFieldNames;
    if (hasSessionId) {
      output.WriteInt32(1, field_names[1], SessionId);
    }
    if (hasGuid) {
      output.WriteInt32(2, field_names[0], Guid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSessionId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, SessionId);
    }
    if (hasGuid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Guid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCAuthen ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAuthen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAuthen ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAuthen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAuthen ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAuthen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCAuthen ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCAuthen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCAuthen ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAuthen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCAuthen MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCAuthen prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCAuthen, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCAuthen cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCAuthen result;
    
    private SCAuthen PrepareBuilder() {
      if (resultIsReadOnly) {
        SCAuthen original = result;
        result = new SCAuthen();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCAuthen MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCAuthen.Descriptor; }
    }
    
    public override SCAuthen DefaultInstanceForType {
      get { return global::SCAuthen.DefaultInstance; }
    }
    
    public override SCAuthen BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCAuthen) {
        return MergeFrom((SCAuthen) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCAuthen other) {
      if (other == global::SCAuthen.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSessionId) {
        SessionId = other.SessionId;
      }
      if (other.HasGuid) {
        Guid = other.Guid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCAuthenFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCAuthenFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSessionId = input.ReadInt32(ref result.sessionId_);
            break;
          }
          case 16: {
            result.hasGuid = input.ReadInt32(ref result.guid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSessionId {
      get { return result.hasSessionId; }
    }
    public int SessionId {
      get { return result.SessionId; }
      set { SetSessionId(value); }
    }
    public Builder SetSessionId(int value) {
      PrepareBuilder();
      result.hasSessionId = true;
      result.sessionId_ = value;
      return this;
    }
    public Builder ClearSessionId() {
      PrepareBuilder();
      result.hasSessionId = false;
      result.sessionId_ = 0;
      return this;
    }
    
    public bool HasGuid {
      get { return result.hasGuid; }
    }
    public int Guid {
      get { return result.Guid; }
      set { SetGuid(value); }
    }
    public Builder SetGuid(int value) {
      PrepareBuilder();
      result.hasGuid = true;
      result.guid_ = value;
      return this;
    }
    public Builder ClearGuid() {
      PrepareBuilder();
      result.hasGuid = false;
      result.guid_ = 0;
      return this;
    }
  }
  static SCAuthen() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSLogin : pb::GeneratedMessage<CSLogin, CSLogin.Builder> {
  private CSLogin() { }
  private static readonly CSLogin defaultInstance = new CSLogin().MakeReadOnly();
  private static readonly string[] _cSLoginFieldNames = new string[] { "password", "userId" };
  private static readonly uint[] _cSLoginFieldTags = new uint[] { 18, 10 };
  public static CSLogin DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSLogin DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSLogin ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSLogin__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSLogin, CSLogin.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSLogin__FieldAccessorTable; }
  }
  
  public const int UserIdFieldNumber = 1;
  private bool hasUserId;
  private string userId_ = "";
  public bool HasUserId {
    get { return hasUserId; }
  }
  public string UserId {
    get { return userId_; }
  }
  
  public const int PasswordFieldNumber = 2;
  private bool hasPassword;
  private string password_ = "";
  public bool HasPassword {
    get { return hasPassword; }
  }
  public string Password {
    get { return password_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSLoginFieldNames;
    if (hasUserId) {
      output.WriteString(1, field_names[1], UserId);
    }
    if (hasPassword) {
      output.WriteString(2, field_names[0], Password);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUserId) {
      size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
    }
    if (hasPassword) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Password);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSLogin ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogin ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLogin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLogin ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSLogin ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSLogin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSLogin ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLogin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSLogin MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSLogin prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSLogin, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSLogin cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSLogin result;
    
    private CSLogin PrepareBuilder() {
      if (resultIsReadOnly) {
        CSLogin original = result;
        result = new CSLogin();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSLogin MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSLogin.Descriptor; }
    }
    
    public override CSLogin DefaultInstanceForType {
      get { return global::CSLogin.DefaultInstance; }
    }
    
    public override CSLogin BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSLogin) {
        return MergeFrom((CSLogin) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSLogin other) {
      if (other == global::CSLogin.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUserId) {
        UserId = other.UserId;
      }
      if (other.HasPassword) {
        Password = other.Password;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSLoginFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSLoginFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUserId = input.ReadString(ref result.userId_);
            break;
          }
          case 18: {
            result.hasPassword = input.ReadString(ref result.password_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUserId {
      get { return result.hasUserId; }
    }
    public string UserId {
      get { return result.UserId; }
      set { SetUserId(value); }
    }
    public Builder SetUserId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserId = true;
      result.userId_ = value;
      return this;
    }
    public Builder ClearUserId() {
      PrepareBuilder();
      result.hasUserId = false;
      result.userId_ = "";
      return this;
    }
    
    public bool HasPassword {
      get { return result.hasPassword; }
    }
    public string Password {
      get { return result.Password; }
      set { SetPassword(value); }
    }
    public Builder SetPassword(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPassword = true;
      result.password_ = value;
      return this;
    }
    public Builder ClearPassword() {
      PrepareBuilder();
      result.hasPassword = false;
      result.password_ = "";
      return this;
    }
  }
  static CSLogin() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCLogin : pb::GeneratedMessage<SCLogin, SCLogin.Builder> {
  private SCLogin() { }
  private static readonly SCLogin defaultInstance = new SCLogin().MakeReadOnly();
  private static readonly string[] _sCLoginFieldNames = new string[] { "guid", "sessionId" };
  private static readonly uint[] _sCLoginFieldTags = new uint[] { 16, 8 };
  public static SCLogin DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCLogin DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCLogin ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCLogin__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCLogin, SCLogin.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCLogin__FieldAccessorTable; }
  }
  
  public const int SessionIdFieldNumber = 1;
  private bool hasSessionId;
  private int sessionId_;
  public bool HasSessionId {
    get { return hasSessionId; }
  }
  public int SessionId {
    get { return sessionId_; }
  }
  
  public const int GuidFieldNumber = 2;
  private bool hasGuid;
  private int guid_;
  public bool HasGuid {
    get { return hasGuid; }
  }
  public int Guid {
    get { return guid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasSessionId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCLoginFieldNames;
    if (hasSessionId) {
      output.WriteInt32(1, field_names[1], SessionId);
    }
    if (hasGuid) {
      output.WriteInt32(2, field_names[0], Guid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSessionId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, SessionId);
    }
    if (hasGuid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Guid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCLogin ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogin ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLogin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLogin ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCLogin ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCLogin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCLogin ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLogin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCLogin MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCLogin prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCLogin, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCLogin cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCLogin result;
    
    private SCLogin PrepareBuilder() {
      if (resultIsReadOnly) {
        SCLogin original = result;
        result = new SCLogin();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCLogin MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCLogin.Descriptor; }
    }
    
    public override SCLogin DefaultInstanceForType {
      get { return global::SCLogin.DefaultInstance; }
    }
    
    public override SCLogin BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCLogin) {
        return MergeFrom((SCLogin) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCLogin other) {
      if (other == global::SCLogin.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSessionId) {
        SessionId = other.SessionId;
      }
      if (other.HasGuid) {
        Guid = other.Guid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCLoginFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCLoginFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSessionId = input.ReadInt32(ref result.sessionId_);
            break;
          }
          case 16: {
            result.hasGuid = input.ReadInt32(ref result.guid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSessionId {
      get { return result.hasSessionId; }
    }
    public int SessionId {
      get { return result.SessionId; }
      set { SetSessionId(value); }
    }
    public Builder SetSessionId(int value) {
      PrepareBuilder();
      result.hasSessionId = true;
      result.sessionId_ = value;
      return this;
    }
    public Builder ClearSessionId() {
      PrepareBuilder();
      result.hasSessionId = false;
      result.sessionId_ = 0;
      return this;
    }
    
    public bool HasGuid {
      get { return result.hasGuid; }
    }
    public int Guid {
      get { return result.Guid; }
      set { SetGuid(value); }
    }
    public Builder SetGuid(int value) {
      PrepareBuilder();
      result.hasGuid = true;
      result.guid_ = value;
      return this;
    }
    public Builder ClearGuid() {
      PrepareBuilder();
      result.hasGuid = false;
      result.guid_ = 0;
      return this;
    }
  }
  static SCLogin() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAccountInfo : pb::GeneratedMessage<CSAccountInfo, CSAccountInfo.Builder> {
  private CSAccountInfo() { }
  private static readonly CSAccountInfo defaultInstance = new CSAccountInfo().MakeReadOnly();
  private static readonly string[] _cSAccountInfoFieldNames = new string[] { "accountid" };
  private static readonly uint[] _cSAccountInfoFieldTags = new uint[] { 10 };
  public static CSAccountInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAccountInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAccountInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSAccountInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAccountInfo, CSAccountInfo.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSAccountInfo__FieldAccessorTable; }
  }
  
  public const int AccountidFieldNumber = 1;
  private bool hasAccountid;
  private string accountid_ = "";
  public bool HasAccountid {
    get { return hasAccountid; }
  }
  public string Accountid {
    get { return accountid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAccountid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAccountInfoFieldNames;
    if (hasAccountid) {
      output.WriteString(1, field_names[0], Accountid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAccountid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Accountid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAccountInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAccountInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAccountInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAccountInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAccountInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAccountInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAccountInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAccountInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAccountInfo result;
    
    private CSAccountInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAccountInfo original = result;
        result = new CSAccountInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAccountInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAccountInfo.Descriptor; }
    }
    
    public override CSAccountInfo DefaultInstanceForType {
      get { return global::CSAccountInfo.DefaultInstance; }
    }
    
    public override CSAccountInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAccountInfo) {
        return MergeFrom((CSAccountInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAccountInfo other) {
      if (other == global::CSAccountInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountid) {
        Accountid = other.Accountid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAccountInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAccountInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasAccountid = input.ReadString(ref result.accountid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountid {
      get { return result.hasAccountid; }
    }
    public string Accountid {
      get { return result.Accountid; }
      set { SetAccountid(value); }
    }
    public Builder SetAccountid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccountid = true;
      result.accountid_ = value;
      return this;
    }
    public Builder ClearAccountid() {
      PrepareBuilder();
      result.hasAccountid = false;
      result.accountid_ = "";
      return this;
    }
  }
  static CSAccountInfo() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCAccountInfo : pb::GeneratedMessage<SCAccountInfo, SCAccountInfo.Builder> {
  private SCAccountInfo() { }
  private static readonly SCAccountInfo defaultInstance = new SCAccountInfo().MakeReadOnly();
  private static readonly string[] _sCAccountInfoFieldNames = new string[] { "account", "role" };
  private static readonly uint[] _sCAccountInfoFieldTags = new uint[] { 10, 18 };
  public static SCAccountInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCAccountInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCAccountInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCAccountInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCAccountInfo, SCAccountInfo.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCAccountInfo__FieldAccessorTable; }
  }
  
  public const int AccountFieldNumber = 1;
  private bool hasAccount;
  private global::StructAccount account_;
  public bool HasAccount {
    get { return hasAccount; }
  }
  public global::StructAccount Account {
    get { return account_ ?? global::StructAccount.DefaultInstance; }
  }
  
  public const int RoleFieldNumber = 2;
  private bool hasRole;
  private global::StructRole role_;
  public bool HasRole {
    get { return hasRole; }
  }
  public global::StructRole Role {
    get { return role_ ?? global::StructRole.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAccount) return false;
      if (!hasRole) return false;
      if (!Account.IsInitialized) return false;
      if (!Role.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCAccountInfoFieldNames;
    if (hasAccount) {
      output.WriteMessage(1, field_names[0], Account);
    }
    if (hasRole) {
      output.WriteMessage(2, field_names[1], Role);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAccount) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Account);
    }
    if (hasRole) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Role);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCAccountInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCAccountInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCAccountInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAccountInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCAccountInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCAccountInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCAccountInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCAccountInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCAccountInfo result;
    
    private SCAccountInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        SCAccountInfo original = result;
        result = new SCAccountInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCAccountInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCAccountInfo.Descriptor; }
    }
    
    public override SCAccountInfo DefaultInstanceForType {
      get { return global::SCAccountInfo.DefaultInstance; }
    }
    
    public override SCAccountInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCAccountInfo) {
        return MergeFrom((SCAccountInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCAccountInfo other) {
      if (other == global::SCAccountInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccount) {
        MergeAccount(other.Account);
      }
      if (other.HasRole) {
        MergeRole(other.Role);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCAccountInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCAccountInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructAccount.Builder subBuilder = global::StructAccount.CreateBuilder();
            if (result.hasAccount) {
              subBuilder.MergeFrom(Account);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Account = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::StructRole.Builder subBuilder = global::StructRole.CreateBuilder();
            if (result.hasRole) {
              subBuilder.MergeFrom(Role);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Role = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccount {
     get { return result.hasAccount; }
    }
    public global::StructAccount Account {
      get { return result.Account; }
      set { SetAccount(value); }
    }
    public Builder SetAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = value;
      return this;
    }
    public Builder SetAccount(global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = builderForValue.Build();
      return this;
    }
    public Builder MergeAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasAccount &&
          result.account_ != global::StructAccount.DefaultInstance) {
          result.account_ = global::StructAccount.CreateBuilder(result.account_).MergeFrom(value).BuildPartial();
      } else {
        result.account_ = value;
      }
      result.hasAccount = true;
      return this;
    }
    public Builder ClearAccount() {
      PrepareBuilder();
      result.hasAccount = false;
      result.account_ = null;
      return this;
    }
    
    public bool HasRole {
     get { return result.hasRole; }
    }
    public global::StructRole Role {
      get { return result.Role; }
      set { SetRole(value); }
    }
    public Builder SetRole(global::StructRole value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRole = true;
      result.role_ = value;
      return this;
    }
    public Builder SetRole(global::StructRole.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasRole = true;
      result.role_ = builderForValue.Build();
      return this;
    }
    public Builder MergeRole(global::StructRole value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasRole &&
          result.role_ != global::StructRole.DefaultInstance) {
          result.role_ = global::StructRole.CreateBuilder(result.role_).MergeFrom(value).BuildPartial();
      } else {
        result.role_ = value;
      }
      result.hasRole = true;
      return this;
    }
    public Builder ClearRole() {
      PrepareBuilder();
      result.hasRole = false;
      result.role_ = null;
      return this;
    }
  }
  static SCAccountInfo() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCRealtimeInfo : pb::GeneratedMessage<SCRealtimeInfo, SCRealtimeInfo.Builder> {
  private SCRealtimeInfo() { }
  private static readonly SCRealtimeInfo defaultInstance = new SCRealtimeInfo().MakeReadOnly();
  private static readonly string[] _sCRealtimeInfoFieldNames = new string[] { "realtimes" };
  private static readonly uint[] _sCRealtimeInfoFieldTags = new uint[] { 10 };
  public static SCRealtimeInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCRealtimeInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCRealtimeInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCRealtimeInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCRealtimeInfo, SCRealtimeInfo.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCRealtimeInfo__FieldAccessorTable; }
  }
  
  public const int RealtimesFieldNumber = 1;
  private pbc::PopsicleList<global::StructRealTime> realtimes_ = new pbc::PopsicleList<global::StructRealTime>();
  public scg::IList<global::StructRealTime> RealtimesList {
    get { return realtimes_; }
  }
  public int RealtimesCount {
    get { return realtimes_.Count; }
  }
  public global::StructRealTime GetRealtimes(int index) {
    return realtimes_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructRealTime element in RealtimesList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCRealtimeInfoFieldNames;
    if (realtimes_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], realtimes_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructRealTime element in RealtimesList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCRealtimeInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCRealtimeInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCRealtimeInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRealtimeInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCRealtimeInfo MakeReadOnly() {
    realtimes_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCRealtimeInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCRealtimeInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCRealtimeInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCRealtimeInfo result;
    
    private SCRealtimeInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        SCRealtimeInfo original = result;
        result = new SCRealtimeInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCRealtimeInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCRealtimeInfo.Descriptor; }
    }
    
    public override SCRealtimeInfo DefaultInstanceForType {
      get { return global::SCRealtimeInfo.DefaultInstance; }
    }
    
    public override SCRealtimeInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCRealtimeInfo) {
        return MergeFrom((SCRealtimeInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCRealtimeInfo other) {
      if (other == global::SCRealtimeInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.realtimes_.Count != 0) {
        result.realtimes_.Add(other.realtimes_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCRealtimeInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCRealtimeInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.realtimes_, global::StructRealTime.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructRealTime> RealtimesList {
      get { return PrepareBuilder().realtimes_; }
    }
    public int RealtimesCount {
      get { return result.RealtimesCount; }
    }
    public global::StructRealTime GetRealtimes(int index) {
      return result.GetRealtimes(index);
    }
    public Builder SetRealtimes(int index, global::StructRealTime value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.realtimes_[index] = value;
      return this;
    }
    public Builder SetRealtimes(int index, global::StructRealTime.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.realtimes_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRealtimes(global::StructRealTime value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.realtimes_.Add(value);
      return this;
    }
    public Builder AddRealtimes(global::StructRealTime.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.realtimes_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRealtimes(scg::IEnumerable<global::StructRealTime> values) {
      PrepareBuilder();
      result.realtimes_.Add(values);
      return this;
    }
    public Builder ClearRealtimes() {
      PrepareBuilder();
      result.realtimes_.Clear();
      return this;
    }
  }
  static SCRealtimeInfo() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSLog : pb::GeneratedMessage<CSLog, CSLog.Builder> {
  private CSLog() { }
  private static readonly CSLog defaultInstance = new CSLog().MakeReadOnly();
  private static readonly string[] _cSLogFieldNames = new string[] { "endtime", "keyword", "operator", "page", "starttime" };
  private static readonly uint[] _cSLogFieldTags = new uint[] { 34, 42, 18, 10, 26 };
  public static CSLog DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSLog DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSLog ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSLog__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSLog, CSLog.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSLog__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int OperatorFieldNumber = 2;
  private bool hasOperator;
  private string operator_ = "";
  public bool HasOperator {
    get { return hasOperator; }
  }
  public string Operator {
    get { return operator_; }
  }
  
  public const int StarttimeFieldNumber = 3;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int EndtimeFieldNumber = 4;
  private bool hasEndtime;
  private string endtime_ = "";
  public bool HasEndtime {
    get { return hasEndtime; }
  }
  public string Endtime {
    get { return endtime_; }
  }
  
  public const int KeywordFieldNumber = 5;
  private bool hasKeyword;
  private string keyword_ = "";
  public bool HasKeyword {
    get { return hasKeyword; }
  }
  public string Keyword {
    get { return keyword_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSLogFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[3], Page);
    }
    if (hasOperator) {
      output.WriteString(2, field_names[2], Operator);
    }
    if (hasStarttime) {
      output.WriteString(3, field_names[4], Starttime);
    }
    if (hasEndtime) {
      output.WriteString(4, field_names[0], Endtime);
    }
    if (hasKeyword) {
      output.WriteString(5, field_names[1], Keyword);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasOperator) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Operator);
    }
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Starttime);
    }
    if (hasEndtime) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Endtime);
    }
    if (hasKeyword) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Keyword);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSLog ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLog ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLog ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSLog ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSLog ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLog ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSLog ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSLog ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSLog ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSLog ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSLog MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSLog prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSLog, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSLog cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSLog result;
    
    private CSLog PrepareBuilder() {
      if (resultIsReadOnly) {
        CSLog original = result;
        result = new CSLog();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSLog MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSLog.Descriptor; }
    }
    
    public override CSLog DefaultInstanceForType {
      get { return global::CSLog.DefaultInstance; }
    }
    
    public override CSLog BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSLog) {
        return MergeFrom((CSLog) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSLog other) {
      if (other == global::CSLog.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasOperator) {
        Operator = other.Operator;
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasEndtime) {
        Endtime = other.Endtime;
      }
      if (other.HasKeyword) {
        Keyword = other.Keyword;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSLogFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSLogFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasOperator = input.ReadString(ref result.operator_);
            break;
          }
          case 26: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 34: {
            result.hasEndtime = input.ReadString(ref result.endtime_);
            break;
          }
          case 42: {
            result.hasKeyword = input.ReadString(ref result.keyword_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasOperator {
      get { return result.hasOperator; }
    }
    public string Operator {
      get { return result.Operator; }
      set { SetOperator(value); }
    }
    public Builder SetOperator(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOperator = true;
      result.operator_ = value;
      return this;
    }
    public Builder ClearOperator() {
      PrepareBuilder();
      result.hasOperator = false;
      result.operator_ = "";
      return this;
    }
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasEndtime {
      get { return result.hasEndtime; }
    }
    public string Endtime {
      get { return result.Endtime; }
      set { SetEndtime(value); }
    }
    public Builder SetEndtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEndtime = true;
      result.endtime_ = value;
      return this;
    }
    public Builder ClearEndtime() {
      PrepareBuilder();
      result.hasEndtime = false;
      result.endtime_ = "";
      return this;
    }
    
    public bool HasKeyword {
      get { return result.hasKeyword; }
    }
    public string Keyword {
      get { return result.Keyword; }
      set { SetKeyword(value); }
    }
    public Builder SetKeyword(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKeyword = true;
      result.keyword_ = value;
      return this;
    }
    public Builder ClearKeyword() {
      PrepareBuilder();
      result.hasKeyword = false;
      result.keyword_ = "";
      return this;
    }
  }
  static CSLog() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCLog : pb::GeneratedMessage<SCLog, SCLog.Builder> {
  private SCLog() { }
  private static readonly SCLog defaultInstance = new SCLog().MakeReadOnly();
  private static readonly string[] _sCLogFieldNames = new string[] { "logs" };
  private static readonly uint[] _sCLogFieldTags = new uint[] { 10 };
  public static SCLog DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCLog DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCLog ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCLog__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCLog, SCLog.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCLog__FieldAccessorTable; }
  }
  
  public const int LogsFieldNumber = 1;
  private pbc::PopsicleList<global::StructLog> logs_ = new pbc::PopsicleList<global::StructLog>();
  public scg::IList<global::StructLog> LogsList {
    get { return logs_; }
  }
  public int LogsCount {
    get { return logs_.Count; }
  }
  public global::StructLog GetLogs(int index) {
    return logs_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructLog element in LogsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCLogFieldNames;
    if (logs_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], logs_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructLog element in LogsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCLog ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLog ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLog ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCLog ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCLog ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLog ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCLog ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCLog ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCLog ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCLog ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCLog MakeReadOnly() {
    logs_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCLog prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCLog, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCLog cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCLog result;
    
    private SCLog PrepareBuilder() {
      if (resultIsReadOnly) {
        SCLog original = result;
        result = new SCLog();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCLog MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCLog.Descriptor; }
    }
    
    public override SCLog DefaultInstanceForType {
      get { return global::SCLog.DefaultInstance; }
    }
    
    public override SCLog BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCLog) {
        return MergeFrom((SCLog) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCLog other) {
      if (other == global::SCLog.DefaultInstance) return this;
      PrepareBuilder();
      if (other.logs_.Count != 0) {
        result.logs_.Add(other.logs_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCLogFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCLogFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.logs_, global::StructLog.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructLog> LogsList {
      get { return PrepareBuilder().logs_; }
    }
    public int LogsCount {
      get { return result.LogsCount; }
    }
    public global::StructLog GetLogs(int index) {
      return result.GetLogs(index);
    }
    public Builder SetLogs(int index, global::StructLog value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.logs_[index] = value;
      return this;
    }
    public Builder SetLogs(int index, global::StructLog.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.logs_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddLogs(global::StructLog value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.logs_.Add(value);
      return this;
    }
    public Builder AddLogs(global::StructLog.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.logs_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeLogs(scg::IEnumerable<global::StructLog> values) {
      PrepareBuilder();
      result.logs_.Add(values);
      return this;
    }
    public Builder ClearLogs() {
      PrepareBuilder();
      result.logs_.Clear();
      return this;
    }
  }
  static SCLog() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCCallList : pb::GeneratedMessage<SCCallList, SCCallList.Builder> {
  private SCCallList() { }
  private static readonly SCCallList defaultInstance = new SCCallList().MakeReadOnly();
  private static readonly string[] _sCCallListFieldNames = new string[] { "calls" };
  private static readonly uint[] _sCCallListFieldTags = new uint[] { 10 };
  public static SCCallList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCCallList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCCallList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCCallList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCCallList, SCCallList.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCCallList__FieldAccessorTable; }
  }
  
  public const int CallsFieldNumber = 1;
  private pbc::PopsicleList<global::StructCall> calls_ = new pbc::PopsicleList<global::StructCall>();
  public scg::IList<global::StructCall> CallsList {
    get { return calls_; }
  }
  public int CallsCount {
    get { return calls_.Count; }
  }
  public global::StructCall GetCalls(int index) {
    return calls_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructCall element in CallsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCCallListFieldNames;
    if (calls_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], calls_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructCall element in CallsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCCallList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCallList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCallList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCallList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCallList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCallList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCCallList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCCallList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCCallList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCallList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCCallList MakeReadOnly() {
    calls_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCCallList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCCallList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCCallList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCCallList result;
    
    private SCCallList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCCallList original = result;
        result = new SCCallList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCCallList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCCallList.Descriptor; }
    }
    
    public override SCCallList DefaultInstanceForType {
      get { return global::SCCallList.DefaultInstance; }
    }
    
    public override SCCallList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCCallList) {
        return MergeFrom((SCCallList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCCallList other) {
      if (other == global::SCCallList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.calls_.Count != 0) {
        result.calls_.Add(other.calls_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCCallListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCCallListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.calls_, global::StructCall.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructCall> CallsList {
      get { return PrepareBuilder().calls_; }
    }
    public int CallsCount {
      get { return result.CallsCount; }
    }
    public global::StructCall GetCalls(int index) {
      return result.GetCalls(index);
    }
    public Builder SetCalls(int index, global::StructCall value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.calls_[index] = value;
      return this;
    }
    public Builder SetCalls(int index, global::StructCall.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.calls_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddCalls(global::StructCall value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.calls_.Add(value);
      return this;
    }
    public Builder AddCalls(global::StructCall.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.calls_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeCalls(scg::IEnumerable<global::StructCall> values) {
      PrepareBuilder();
      result.calls_.Add(values);
      return this;
    }
    public Builder ClearCalls() {
      PrepareBuilder();
      result.calls_.Clear();
      return this;
    }
  }
  static SCCallList() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCallProcess : pb::GeneratedMessage<CSCallProcess, CSCallProcess.Builder> {
  private CSCallProcess() { }
  private static readonly CSCallProcess defaultInstance = new CSCallProcess().MakeReadOnly();
  private static readonly string[] _cSCallProcessFieldNames = new string[] { "callid" };
  private static readonly uint[] _cSCallProcessFieldTags = new uint[] { 8 };
  public static CSCallProcess DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCallProcess DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCallProcess ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSCallProcess__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCallProcess, CSCallProcess.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSCallProcess__FieldAccessorTable; }
  }
  
  public const int CallidFieldNumber = 1;
  private bool hasCallid;
  private int callid_;
  public bool HasCallid {
    get { return hasCallid; }
  }
  public int Callid {
    get { return callid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCallid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCallProcessFieldNames;
    if (hasCallid) {
      output.WriteInt32(1, field_names[0], Callid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCallid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Callid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCallProcess ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCallProcess ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCallProcess ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCallProcess ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCallProcess ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCallProcess ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCallProcess ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCallProcess ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCallProcess ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCallProcess ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCallProcess MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCallProcess prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCallProcess, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCallProcess cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCallProcess result;
    
    private CSCallProcess PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCallProcess original = result;
        result = new CSCallProcess();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCallProcess MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCallProcess.Descriptor; }
    }
    
    public override CSCallProcess DefaultInstanceForType {
      get { return global::CSCallProcess.DefaultInstance; }
    }
    
    public override CSCallProcess BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCallProcess) {
        return MergeFrom((CSCallProcess) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCallProcess other) {
      if (other == global::CSCallProcess.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCallid) {
        Callid = other.Callid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCallProcessFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCallProcessFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCallid = input.ReadInt32(ref result.callid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCallid {
      get { return result.hasCallid; }
    }
    public int Callid {
      get { return result.Callid; }
      set { SetCallid(value); }
    }
    public Builder SetCallid(int value) {
      PrepareBuilder();
      result.hasCallid = true;
      result.callid_ = value;
      return this;
    }
    public Builder ClearCallid() {
      PrepareBuilder();
      result.hasCallid = false;
      result.callid_ = 0;
      return this;
    }
  }
  static CSCallProcess() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCRoleList : pb::GeneratedMessage<SCRoleList, SCRoleList.Builder> {
  private SCRoleList() { }
  private static readonly SCRoleList defaultInstance = new SCRoleList().MakeReadOnly();
  private static readonly string[] _sCRoleListFieldNames = new string[] { "roles" };
  private static readonly uint[] _sCRoleListFieldTags = new uint[] { 10 };
  public static SCRoleList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCRoleList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCRoleList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCRoleList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCRoleList, SCRoleList.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCRoleList__FieldAccessorTable; }
  }
  
  public const int RolesFieldNumber = 1;
  private pbc::PopsicleList<global::StructRole> roles_ = new pbc::PopsicleList<global::StructRole>();
  public scg::IList<global::StructRole> RolesList {
    get { return roles_; }
  }
  public int RolesCount {
    get { return roles_.Count; }
  }
  public global::StructRole GetRoles(int index) {
    return roles_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructRole element in RolesList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCRoleListFieldNames;
    if (roles_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], roles_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructRole element in RolesList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCRoleList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRoleList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRoleList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRoleList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRoleList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRoleList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCRoleList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCRoleList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCRoleList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRoleList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCRoleList MakeReadOnly() {
    roles_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCRoleList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCRoleList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCRoleList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCRoleList result;
    
    private SCRoleList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCRoleList original = result;
        result = new SCRoleList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCRoleList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCRoleList.Descriptor; }
    }
    
    public override SCRoleList DefaultInstanceForType {
      get { return global::SCRoleList.DefaultInstance; }
    }
    
    public override SCRoleList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCRoleList) {
        return MergeFrom((SCRoleList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCRoleList other) {
      if (other == global::SCRoleList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.roles_.Count != 0) {
        result.roles_.Add(other.roles_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCRoleListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCRoleListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.roles_, global::StructRole.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructRole> RolesList {
      get { return PrepareBuilder().roles_; }
    }
    public int RolesCount {
      get { return result.RolesCount; }
    }
    public global::StructRole GetRoles(int index) {
      return result.GetRoles(index);
    }
    public Builder SetRoles(int index, global::StructRole value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.roles_[index] = value;
      return this;
    }
    public Builder SetRoles(int index, global::StructRole.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.roles_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRoles(global::StructRole value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.roles_.Add(value);
      return this;
    }
    public Builder AddRoles(global::StructRole.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.roles_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRoles(scg::IEnumerable<global::StructRole> values) {
      PrepareBuilder();
      result.roles_.Add(values);
      return this;
    }
    public Builder ClearRoles() {
      PrepareBuilder();
      result.roles_.Clear();
      return this;
    }
  }
  static SCRoleList() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSRoleAdd : pb::GeneratedMessage<CSRoleAdd, CSRoleAdd.Builder> {
  private CSRoleAdd() { }
  private static readonly CSRoleAdd defaultInstance = new CSRoleAdd().MakeReadOnly();
  private static readonly string[] _cSRoleAddFieldNames = new string[] { "name" };
  private static readonly uint[] _cSRoleAddFieldTags = new uint[] { 10 };
  public static CSRoleAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSRoleAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSRoleAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSRoleAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSRoleAdd, CSRoleAdd.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSRoleAdd__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSRoleAddFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[0], Name);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSRoleAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSRoleAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSRoleAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSRoleAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSRoleAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSRoleAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSRoleAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSRoleAdd result;
    
    private CSRoleAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSRoleAdd original = result;
        result = new CSRoleAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSRoleAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSRoleAdd.Descriptor; }
    }
    
    public override CSRoleAdd DefaultInstanceForType {
      get { return global::CSRoleAdd.DefaultInstance; }
    }
    
    public override CSRoleAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSRoleAdd) {
        return MergeFrom((CSRoleAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSRoleAdd other) {
      if (other == global::CSRoleAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSRoleAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSRoleAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
  }
  static CSRoleAdd() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCRoleAdd : pb::GeneratedMessage<SCRoleAdd, SCRoleAdd.Builder> {
  private SCRoleAdd() { }
  private static readonly SCRoleAdd defaultInstance = new SCRoleAdd().MakeReadOnly();
  private static readonly string[] _sCRoleAddFieldNames = new string[] { "role" };
  private static readonly uint[] _sCRoleAddFieldTags = new uint[] { 10 };
  public static SCRoleAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCRoleAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCRoleAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCRoleAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCRoleAdd, SCRoleAdd.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCRoleAdd__FieldAccessorTable; }
  }
  
  public const int RoleFieldNumber = 1;
  private bool hasRole;
  private global::StructRole role_;
  public bool HasRole {
    get { return hasRole; }
  }
  public global::StructRole Role {
    get { return role_ ?? global::StructRole.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRole) return false;
      if (!Role.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCRoleAddFieldNames;
    if (hasRole) {
      output.WriteMessage(1, field_names[0], Role);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRole) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Role);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCRoleAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCRoleAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCRoleAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRoleAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCRoleAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCRoleAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCRoleAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCRoleAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCRoleAdd result;
    
    private SCRoleAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        SCRoleAdd original = result;
        result = new SCRoleAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCRoleAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCRoleAdd.Descriptor; }
    }
    
    public override SCRoleAdd DefaultInstanceForType {
      get { return global::SCRoleAdd.DefaultInstance; }
    }
    
    public override SCRoleAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCRoleAdd) {
        return MergeFrom((SCRoleAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCRoleAdd other) {
      if (other == global::SCRoleAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRole) {
        MergeRole(other.Role);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCRoleAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCRoleAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructRole.Builder subBuilder = global::StructRole.CreateBuilder();
            if (result.hasRole) {
              subBuilder.MergeFrom(Role);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Role = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRole {
     get { return result.hasRole; }
    }
    public global::StructRole Role {
      get { return result.Role; }
      set { SetRole(value); }
    }
    public Builder SetRole(global::StructRole value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRole = true;
      result.role_ = value;
      return this;
    }
    public Builder SetRole(global::StructRole.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasRole = true;
      result.role_ = builderForValue.Build();
      return this;
    }
    public Builder MergeRole(global::StructRole value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasRole &&
          result.role_ != global::StructRole.DefaultInstance) {
          result.role_ = global::StructRole.CreateBuilder(result.role_).MergeFrom(value).BuildPartial();
      } else {
        result.role_ = value;
      }
      result.hasRole = true;
      return this;
    }
    public Builder ClearRole() {
      PrepareBuilder();
      result.hasRole = false;
      result.role_ = null;
      return this;
    }
  }
  static SCRoleAdd() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSRoleDel : pb::GeneratedMessage<CSRoleDel, CSRoleDel.Builder> {
  private CSRoleDel() { }
  private static readonly CSRoleDel defaultInstance = new CSRoleDel().MakeReadOnly();
  private static readonly string[] _cSRoleDelFieldNames = new string[] { "roleid" };
  private static readonly uint[] _cSRoleDelFieldTags = new uint[] { 8 };
  public static CSRoleDel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSRoleDel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSRoleDel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSRoleDel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSRoleDel, CSRoleDel.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSRoleDel__FieldAccessorTable; }
  }
  
  public const int RoleidFieldNumber = 1;
  private bool hasRoleid;
  private int roleid_;
  public bool HasRoleid {
    get { return hasRoleid; }
  }
  public int Roleid {
    get { return roleid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoleid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSRoleDelFieldNames;
    if (hasRoleid) {
      output.WriteInt32(1, field_names[0], Roleid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRoleid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Roleid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSRoleDel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleDel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleDel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSRoleDel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSRoleDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSRoleDel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSRoleDel MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSRoleDel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSRoleDel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSRoleDel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSRoleDel result;
    
    private CSRoleDel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSRoleDel original = result;
        result = new CSRoleDel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSRoleDel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSRoleDel.Descriptor; }
    }
    
    public override CSRoleDel DefaultInstanceForType {
      get { return global::CSRoleDel.DefaultInstance; }
    }
    
    public override CSRoleDel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSRoleDel) {
        return MergeFrom((CSRoleDel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSRoleDel other) {
      if (other == global::CSRoleDel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoleid) {
        Roleid = other.Roleid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSRoleDelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSRoleDelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRoleid = input.ReadInt32(ref result.roleid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoleid {
      get { return result.hasRoleid; }
    }
    public int Roleid {
      get { return result.Roleid; }
      set { SetRoleid(value); }
    }
    public Builder SetRoleid(int value) {
      PrepareBuilder();
      result.hasRoleid = true;
      result.roleid_ = value;
      return this;
    }
    public Builder ClearRoleid() {
      PrepareBuilder();
      result.hasRoleid = false;
      result.roleid_ = 0;
      return this;
    }
  }
  static CSRoleDel() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSRoleUpdate : pb::GeneratedMessage<CSRoleUpdate, CSRoleUpdate.Builder> {
  private CSRoleUpdate() { }
  private static readonly CSRoleUpdate defaultInstance = new CSRoleUpdate().MakeReadOnly();
  private static readonly string[] _cSRoleUpdateFieldNames = new string[] { "name", "roleid" };
  private static readonly uint[] _cSRoleUpdateFieldTags = new uint[] { 18, 8 };
  public static CSRoleUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSRoleUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSRoleUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSRoleUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSRoleUpdate, CSRoleUpdate.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSRoleUpdate__FieldAccessorTable; }
  }
  
  public const int RoleidFieldNumber = 1;
  private bool hasRoleid;
  private int roleid_;
  public bool HasRoleid {
    get { return hasRoleid; }
  }
  public int Roleid {
    get { return roleid_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoleid) return false;
      if (!hasName) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSRoleUpdateFieldNames;
    if (hasRoleid) {
      output.WriteInt32(1, field_names[1], Roleid);
    }
    if (hasName) {
      output.WriteString(2, field_names[0], Name);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRoleid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Roleid);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Name);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSRoleUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSRoleUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSRoleUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSRoleUpdate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSRoleUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSRoleUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSRoleUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSRoleUpdate result;
    
    private CSRoleUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSRoleUpdate original = result;
        result = new CSRoleUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSRoleUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSRoleUpdate.Descriptor; }
    }
    
    public override CSRoleUpdate DefaultInstanceForType {
      get { return global::CSRoleUpdate.DefaultInstance; }
    }
    
    public override CSRoleUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSRoleUpdate) {
        return MergeFrom((CSRoleUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSRoleUpdate other) {
      if (other == global::CSRoleUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoleid) {
        Roleid = other.Roleid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSRoleUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSRoleUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRoleid = input.ReadInt32(ref result.roleid_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoleid {
      get { return result.hasRoleid; }
    }
    public int Roleid {
      get { return result.Roleid; }
      set { SetRoleid(value); }
    }
    public Builder SetRoleid(int value) {
      PrepareBuilder();
      result.hasRoleid = true;
      result.roleid_ = value;
      return this;
    }
    public Builder ClearRoleid() {
      PrepareBuilder();
      result.hasRoleid = false;
      result.roleid_ = 0;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
  }
  static CSRoleUpdate() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSRoleRights : pb::GeneratedMessage<CSRoleRights, CSRoleRights.Builder> {
  private CSRoleRights() { }
  private static readonly CSRoleRights defaultInstance = new CSRoleRights().MakeReadOnly();
  private static readonly string[] _cSRoleRightsFieldNames = new string[] { "rights", "righttype", "roleid" };
  private static readonly uint[] _cSRoleRightsFieldTags = new uint[] { 26, 16, 8 };
  public static CSRoleRights DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSRoleRights DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSRoleRights ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSRoleRights__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSRoleRights, CSRoleRights.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSRoleRights__FieldAccessorTable; }
  }
  
  public const int RoleidFieldNumber = 1;
  private bool hasRoleid;
  private int roleid_;
  public bool HasRoleid {
    get { return hasRoleid; }
  }
  public int Roleid {
    get { return roleid_; }
  }
  
  public const int RighttypeFieldNumber = 2;
  private bool hasRighttype;
  private int righttype_;
  public bool HasRighttype {
    get { return hasRighttype; }
  }
  public int Righttype {
    get { return righttype_; }
  }
  
  public const int RightsFieldNumber = 3;
  private bool hasRights;
  private string rights_ = "";
  public bool HasRights {
    get { return hasRights; }
  }
  public string Rights {
    get { return rights_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoleid) return false;
      if (!hasRighttype) return false;
      if (!hasRights) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSRoleRightsFieldNames;
    if (hasRoleid) {
      output.WriteInt32(1, field_names[2], Roleid);
    }
    if (hasRighttype) {
      output.WriteInt32(2, field_names[1], Righttype);
    }
    if (hasRights) {
      output.WriteString(3, field_names[0], Rights);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRoleid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Roleid);
    }
    if (hasRighttype) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Righttype);
    }
    if (hasRights) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Rights);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSRoleRights ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleRights ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleRights ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRoleRights ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRoleRights ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleRights ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSRoleRights ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSRoleRights ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSRoleRights ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRoleRights ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSRoleRights MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSRoleRights prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSRoleRights, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSRoleRights cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSRoleRights result;
    
    private CSRoleRights PrepareBuilder() {
      if (resultIsReadOnly) {
        CSRoleRights original = result;
        result = new CSRoleRights();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSRoleRights MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSRoleRights.Descriptor; }
    }
    
    public override CSRoleRights DefaultInstanceForType {
      get { return global::CSRoleRights.DefaultInstance; }
    }
    
    public override CSRoleRights BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSRoleRights) {
        return MergeFrom((CSRoleRights) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSRoleRights other) {
      if (other == global::CSRoleRights.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoleid) {
        Roleid = other.Roleid;
      }
      if (other.HasRighttype) {
        Righttype = other.Righttype;
      }
      if (other.HasRights) {
        Rights = other.Rights;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSRoleRightsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSRoleRightsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRoleid = input.ReadInt32(ref result.roleid_);
            break;
          }
          case 16: {
            result.hasRighttype = input.ReadInt32(ref result.righttype_);
            break;
          }
          case 26: {
            result.hasRights = input.ReadString(ref result.rights_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoleid {
      get { return result.hasRoleid; }
    }
    public int Roleid {
      get { return result.Roleid; }
      set { SetRoleid(value); }
    }
    public Builder SetRoleid(int value) {
      PrepareBuilder();
      result.hasRoleid = true;
      result.roleid_ = value;
      return this;
    }
    public Builder ClearRoleid() {
      PrepareBuilder();
      result.hasRoleid = false;
      result.roleid_ = 0;
      return this;
    }
    
    public bool HasRighttype {
      get { return result.hasRighttype; }
    }
    public int Righttype {
      get { return result.Righttype; }
      set { SetRighttype(value); }
    }
    public Builder SetRighttype(int value) {
      PrepareBuilder();
      result.hasRighttype = true;
      result.righttype_ = value;
      return this;
    }
    public Builder ClearRighttype() {
      PrepareBuilder();
      result.hasRighttype = false;
      result.righttype_ = 0;
      return this;
    }
    
    public bool HasRights {
      get { return result.hasRights; }
    }
    public string Rights {
      get { return result.Rights; }
      set { SetRights(value); }
    }
    public Builder SetRights(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRights = true;
      result.rights_ = value;
      return this;
    }
    public Builder ClearRights() {
      PrepareBuilder();
      result.hasRights = false;
      result.rights_ = "";
      return this;
    }
  }
  static CSRoleRights() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCAccountList : pb::GeneratedMessage<SCAccountList, SCAccountList.Builder> {
  private SCAccountList() { }
  private static readonly SCAccountList defaultInstance = new SCAccountList().MakeReadOnly();
  private static readonly string[] _sCAccountListFieldNames = new string[] { "account" };
  private static readonly uint[] _sCAccountListFieldTags = new uint[] { 10 };
  public static SCAccountList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCAccountList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCAccountList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCAccountList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCAccountList, SCAccountList.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCAccountList__FieldAccessorTable; }
  }
  
  public const int AccountFieldNumber = 1;
  private pbc::PopsicleList<global::StructAccount> account_ = new pbc::PopsicleList<global::StructAccount>();
  public scg::IList<global::StructAccount> AccountList {
    get { return account_; }
  }
  public int AccountCount {
    get { return account_.Count; }
  }
  public global::StructAccount GetAccount(int index) {
    return account_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructAccount element in AccountList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCAccountListFieldNames;
    if (account_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], account_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructAccount element in AccountList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCAccountList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAccountList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAccountList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAccountList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAccountList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAccountList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCAccountList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCAccountList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCAccountList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAccountList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCAccountList MakeReadOnly() {
    account_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCAccountList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCAccountList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCAccountList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCAccountList result;
    
    private SCAccountList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCAccountList original = result;
        result = new SCAccountList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCAccountList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCAccountList.Descriptor; }
    }
    
    public override SCAccountList DefaultInstanceForType {
      get { return global::SCAccountList.DefaultInstance; }
    }
    
    public override SCAccountList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCAccountList) {
        return MergeFrom((SCAccountList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCAccountList other) {
      if (other == global::SCAccountList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.account_.Count != 0) {
        result.account_.Add(other.account_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCAccountListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCAccountListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.account_, global::StructAccount.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructAccount> AccountList {
      get { return PrepareBuilder().account_; }
    }
    public int AccountCount {
      get { return result.AccountCount; }
    }
    public global::StructAccount GetAccount(int index) {
      return result.GetAccount(index);
    }
    public Builder SetAccount(int index, global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.account_[index] = value;
      return this;
    }
    public Builder SetAccount(int index, global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.account_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.account_.Add(value);
      return this;
    }
    public Builder AddAccount(global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.account_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeAccount(scg::IEnumerable<global::StructAccount> values) {
      PrepareBuilder();
      result.account_.Add(values);
      return this;
    }
    public Builder ClearAccount() {
      PrepareBuilder();
      result.account_.Clear();
      return this;
    }
  }
  static SCAccountList() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAccountAdd : pb::GeneratedMessage<CSAccountAdd, CSAccountAdd.Builder> {
  private CSAccountAdd() { }
  private static readonly CSAccountAdd defaultInstance = new CSAccountAdd().MakeReadOnly();
  private static readonly string[] _cSAccountAddFieldNames = new string[] { "account" };
  private static readonly uint[] _cSAccountAddFieldTags = new uint[] { 10 };
  public static CSAccountAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAccountAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAccountAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSAccountAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAccountAdd, CSAccountAdd.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSAccountAdd__FieldAccessorTable; }
  }
  
  public const int AccountFieldNumber = 1;
  private bool hasAccount;
  private global::StructAccount account_;
  public bool HasAccount {
    get { return hasAccount; }
  }
  public global::StructAccount Account {
    get { return account_ ?? global::StructAccount.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAccount) return false;
      if (!Account.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAccountAddFieldNames;
    if (hasAccount) {
      output.WriteMessage(1, field_names[0], Account);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAccount) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Account);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAccountAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAccountAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAccountAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAccountAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAccountAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAccountAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAccountAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAccountAdd result;
    
    private CSAccountAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAccountAdd original = result;
        result = new CSAccountAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAccountAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAccountAdd.Descriptor; }
    }
    
    public override CSAccountAdd DefaultInstanceForType {
      get { return global::CSAccountAdd.DefaultInstance; }
    }
    
    public override CSAccountAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAccountAdd) {
        return MergeFrom((CSAccountAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAccountAdd other) {
      if (other == global::CSAccountAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccount) {
        MergeAccount(other.Account);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAccountAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAccountAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructAccount.Builder subBuilder = global::StructAccount.CreateBuilder();
            if (result.hasAccount) {
              subBuilder.MergeFrom(Account);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Account = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccount {
     get { return result.hasAccount; }
    }
    public global::StructAccount Account {
      get { return result.Account; }
      set { SetAccount(value); }
    }
    public Builder SetAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = value;
      return this;
    }
    public Builder SetAccount(global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = builderForValue.Build();
      return this;
    }
    public Builder MergeAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasAccount &&
          result.account_ != global::StructAccount.DefaultInstance) {
          result.account_ = global::StructAccount.CreateBuilder(result.account_).MergeFrom(value).BuildPartial();
      } else {
        result.account_ = value;
      }
      result.hasAccount = true;
      return this;
    }
    public Builder ClearAccount() {
      PrepareBuilder();
      result.hasAccount = false;
      result.account_ = null;
      return this;
    }
  }
  static CSAccountAdd() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAccountDel : pb::GeneratedMessage<CSAccountDel, CSAccountDel.Builder> {
  private CSAccountDel() { }
  private static readonly CSAccountDel defaultInstance = new CSAccountDel().MakeReadOnly();
  private static readonly string[] _cSAccountDelFieldNames = new string[] { "adminid" };
  private static readonly uint[] _cSAccountDelFieldTags = new uint[] { 10 };
  public static CSAccountDel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAccountDel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAccountDel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSAccountDel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAccountDel, CSAccountDel.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSAccountDel__FieldAccessorTable; }
  }
  
  public const int AdminidFieldNumber = 1;
  private bool hasAdminid;
  private string adminid_ = "";
  public bool HasAdminid {
    get { return hasAdminid; }
  }
  public string Adminid {
    get { return adminid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAdminid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAccountDelFieldNames;
    if (hasAdminid) {
      output.WriteString(1, field_names[0], Adminid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAdminid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Adminid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAccountDel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountDel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountDel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAccountDel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAccountDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAccountDel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAccountDel MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAccountDel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAccountDel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAccountDel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAccountDel result;
    
    private CSAccountDel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAccountDel original = result;
        result = new CSAccountDel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAccountDel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAccountDel.Descriptor; }
    }
    
    public override CSAccountDel DefaultInstanceForType {
      get { return global::CSAccountDel.DefaultInstance; }
    }
    
    public override CSAccountDel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAccountDel) {
        return MergeFrom((CSAccountDel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAccountDel other) {
      if (other == global::CSAccountDel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAdminid) {
        Adminid = other.Adminid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAccountDelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAccountDelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasAdminid = input.ReadString(ref result.adminid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAdminid {
      get { return result.hasAdminid; }
    }
    public string Adminid {
      get { return result.Adminid; }
      set { SetAdminid(value); }
    }
    public Builder SetAdminid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAdminid = true;
      result.adminid_ = value;
      return this;
    }
    public Builder ClearAdminid() {
      PrepareBuilder();
      result.hasAdminid = false;
      result.adminid_ = "";
      return this;
    }
  }
  static CSAccountDel() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAccountUpdate : pb::GeneratedMessage<CSAccountUpdate, CSAccountUpdate.Builder> {
  private CSAccountUpdate() { }
  private static readonly CSAccountUpdate defaultInstance = new CSAccountUpdate().MakeReadOnly();
  private static readonly string[] _cSAccountUpdateFieldNames = new string[] { "account" };
  private static readonly uint[] _cSAccountUpdateFieldTags = new uint[] { 10 };
  public static CSAccountUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAccountUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAccountUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSAccountUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAccountUpdate, CSAccountUpdate.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSAccountUpdate__FieldAccessorTable; }
  }
  
  public const int AccountFieldNumber = 1;
  private bool hasAccount;
  private global::StructAccount account_;
  public bool HasAccount {
    get { return hasAccount; }
  }
  public global::StructAccount Account {
    get { return account_ ?? global::StructAccount.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAccount) return false;
      if (!Account.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAccountUpdateFieldNames;
    if (hasAccount) {
      output.WriteMessage(1, field_names[0], Account);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAccount) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Account);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAccountUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAccountUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAccountUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAccountUpdate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAccountUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAccountUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAccountUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAccountUpdate result;
    
    private CSAccountUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAccountUpdate original = result;
        result = new CSAccountUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAccountUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAccountUpdate.Descriptor; }
    }
    
    public override CSAccountUpdate DefaultInstanceForType {
      get { return global::CSAccountUpdate.DefaultInstance; }
    }
    
    public override CSAccountUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAccountUpdate) {
        return MergeFrom((CSAccountUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAccountUpdate other) {
      if (other == global::CSAccountUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccount) {
        MergeAccount(other.Account);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAccountUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAccountUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructAccount.Builder subBuilder = global::StructAccount.CreateBuilder();
            if (result.hasAccount) {
              subBuilder.MergeFrom(Account);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Account = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccount {
     get { return result.hasAccount; }
    }
    public global::StructAccount Account {
      get { return result.Account; }
      set { SetAccount(value); }
    }
    public Builder SetAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = value;
      return this;
    }
    public Builder SetAccount(global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = builderForValue.Build();
      return this;
    }
    public Builder MergeAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasAccount &&
          result.account_ != global::StructAccount.DefaultInstance) {
          result.account_ = global::StructAccount.CreateBuilder(result.account_).MergeFrom(value).BuildPartial();
      } else {
        result.account_ = value;
      }
      result.hasAccount = true;
      return this;
    }
    public Builder ClearAccount() {
      PrepareBuilder();
      result.hasAccount = false;
      result.account_ = null;
      return this;
    }
  }
  static CSAccountUpdate() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAccountSnsSet : pb::GeneratedMessage<CSAccountSnsSet, CSAccountSnsSet.Builder> {
  private CSAccountSnsSet() { }
  private static readonly CSAccountSnsSet defaultInstance = new CSAccountSnsSet().MakeReadOnly();
  private static readonly string[] _cSAccountSnsSetFieldNames = new string[] { "account" };
  private static readonly uint[] _cSAccountSnsSetFieldTags = new uint[] { 10 };
  public static CSAccountSnsSet DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAccountSnsSet DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAccountSnsSet ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSAccountSnsSet__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAccountSnsSet, CSAccountSnsSet.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSAccountSnsSet__FieldAccessorTable; }
  }
  
  public const int AccountFieldNumber = 1;
  private pbc::PopsicleList<global::StructAccount> account_ = new pbc::PopsicleList<global::StructAccount>();
  public scg::IList<global::StructAccount> AccountList {
    get { return account_; }
  }
  public int AccountCount {
    get { return account_.Count; }
  }
  public global::StructAccount GetAccount(int index) {
    return account_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructAccount element in AccountList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAccountSnsSetFieldNames;
    if (account_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], account_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructAccount element in AccountList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAccountSnsSet ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAccountSnsSet ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAccountSnsSet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAccountSnsSet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAccountSnsSet MakeReadOnly() {
    account_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAccountSnsSet prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAccountSnsSet, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAccountSnsSet cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAccountSnsSet result;
    
    private CSAccountSnsSet PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAccountSnsSet original = result;
        result = new CSAccountSnsSet();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAccountSnsSet MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAccountSnsSet.Descriptor; }
    }
    
    public override CSAccountSnsSet DefaultInstanceForType {
      get { return global::CSAccountSnsSet.DefaultInstance; }
    }
    
    public override CSAccountSnsSet BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAccountSnsSet) {
        return MergeFrom((CSAccountSnsSet) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAccountSnsSet other) {
      if (other == global::CSAccountSnsSet.DefaultInstance) return this;
      PrepareBuilder();
      if (other.account_.Count != 0) {
        result.account_.Add(other.account_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAccountSnsSetFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAccountSnsSetFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.account_, global::StructAccount.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructAccount> AccountList {
      get { return PrepareBuilder().account_; }
    }
    public int AccountCount {
      get { return result.AccountCount; }
    }
    public global::StructAccount GetAccount(int index) {
      return result.GetAccount(index);
    }
    public Builder SetAccount(int index, global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.account_[index] = value;
      return this;
    }
    public Builder SetAccount(int index, global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.account_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddAccount(global::StructAccount value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.account_.Add(value);
      return this;
    }
    public Builder AddAccount(global::StructAccount.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.account_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeAccount(scg::IEnumerable<global::StructAccount> values) {
      PrepareBuilder();
      result.account_.Add(values);
      return this;
    }
    public Builder ClearAccount() {
      PrepareBuilder();
      result.account_.Clear();
      return this;
    }
  }
  static CSAccountSnsSet() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSStaffComment : pb::GeneratedMessage<CSStaffComment, CSStaffComment.Builder> {
  private CSStaffComment() { }
  private static readonly CSStaffComment defaultInstance = new CSStaffComment().MakeReadOnly();
  private static readonly string[] _cSStaffCommentFieldNames = new string[] { "customer", "endtime", "page", "staff", "starttime", "type" };
  private static readonly uint[] _cSStaffCommentFieldTags = new uint[] { 50, 34, 10, 42, 26, 16 };
  public static CSStaffComment DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSStaffComment DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSStaffComment ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSStaffComment__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSStaffComment, CSStaffComment.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSStaffComment__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int StarttimeFieldNumber = 3;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int EndtimeFieldNumber = 4;
  private bool hasEndtime;
  private string endtime_ = "";
  public bool HasEndtime {
    get { return hasEndtime; }
  }
  public string Endtime {
    get { return endtime_; }
  }
  
  public const int StaffFieldNumber = 5;
  private bool hasStaff;
  private string staff_ = "";
  public bool HasStaff {
    get { return hasStaff; }
  }
  public string Staff {
    get { return staff_; }
  }
  
  public const int CustomerFieldNumber = 6;
  private bool hasCustomer;
  private string customer_ = "";
  public bool HasCustomer {
    get { return hasCustomer; }
  }
  public string Customer {
    get { return customer_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!hasType) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSStaffCommentFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[2], Page);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[5], Type);
    }
    if (hasStarttime) {
      output.WriteString(3, field_names[4], Starttime);
    }
    if (hasEndtime) {
      output.WriteString(4, field_names[1], Endtime);
    }
    if (hasStaff) {
      output.WriteString(5, field_names[3], Staff);
    }
    if (hasCustomer) {
      output.WriteString(6, field_names[0], Customer);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Starttime);
    }
    if (hasEndtime) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Endtime);
    }
    if (hasStaff) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Staff);
    }
    if (hasCustomer) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Customer);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSStaffComment ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSStaffComment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSStaffComment ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSStaffComment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSStaffComment ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSStaffComment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSStaffComment ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSStaffComment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSStaffComment ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSStaffComment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSStaffComment MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSStaffComment prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSStaffComment, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSStaffComment cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSStaffComment result;
    
    private CSStaffComment PrepareBuilder() {
      if (resultIsReadOnly) {
        CSStaffComment original = result;
        result = new CSStaffComment();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSStaffComment MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSStaffComment.Descriptor; }
    }
    
    public override CSStaffComment DefaultInstanceForType {
      get { return global::CSStaffComment.DefaultInstance; }
    }
    
    public override CSStaffComment BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSStaffComment) {
        return MergeFrom((CSStaffComment) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSStaffComment other) {
      if (other == global::CSStaffComment.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasEndtime) {
        Endtime = other.Endtime;
      }
      if (other.HasStaff) {
        Staff = other.Staff;
      }
      if (other.HasCustomer) {
        Customer = other.Customer;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSStaffCommentFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSStaffCommentFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 26: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 34: {
            result.hasEndtime = input.ReadString(ref result.endtime_);
            break;
          }
          case 42: {
            result.hasStaff = input.ReadString(ref result.staff_);
            break;
          }
          case 50: {
            result.hasCustomer = input.ReadString(ref result.customer_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasEndtime {
      get { return result.hasEndtime; }
    }
    public string Endtime {
      get { return result.Endtime; }
      set { SetEndtime(value); }
    }
    public Builder SetEndtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEndtime = true;
      result.endtime_ = value;
      return this;
    }
    public Builder ClearEndtime() {
      PrepareBuilder();
      result.hasEndtime = false;
      result.endtime_ = "";
      return this;
    }
    
    public bool HasStaff {
      get { return result.hasStaff; }
    }
    public string Staff {
      get { return result.Staff; }
      set { SetStaff(value); }
    }
    public Builder SetStaff(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStaff = true;
      result.staff_ = value;
      return this;
    }
    public Builder ClearStaff() {
      PrepareBuilder();
      result.hasStaff = false;
      result.staff_ = "";
      return this;
    }
    
    public bool HasCustomer {
      get { return result.hasCustomer; }
    }
    public string Customer {
      get { return result.Customer; }
      set { SetCustomer(value); }
    }
    public Builder SetCustomer(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCustomer = true;
      result.customer_ = value;
      return this;
    }
    public Builder ClearCustomer() {
      PrepareBuilder();
      result.hasCustomer = false;
      result.customer_ = "";
      return this;
    }
  }
  static CSStaffComment() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCStaffComment : pb::GeneratedMessage<SCStaffComment, SCStaffComment.Builder> {
  private SCStaffComment() { }
  private static readonly SCStaffComment defaultInstance = new SCStaffComment().MakeReadOnly();
  private static readonly string[] _sCStaffCommentFieldNames = new string[] { "comments" };
  private static readonly uint[] _sCStaffCommentFieldTags = new uint[] { 10 };
  public static SCStaffComment DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCStaffComment DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCStaffComment ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCStaffComment__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCStaffComment, SCStaffComment.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCStaffComment__FieldAccessorTable; }
  }
  
  public const int CommentsFieldNumber = 1;
  private pbc::PopsicleList<global::StructComment> comments_ = new pbc::PopsicleList<global::StructComment>();
  public scg::IList<global::StructComment> CommentsList {
    get { return comments_; }
  }
  public int CommentsCount {
    get { return comments_.Count; }
  }
  public global::StructComment GetComments(int index) {
    return comments_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructComment element in CommentsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCStaffCommentFieldNames;
    if (comments_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], comments_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructComment element in CommentsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCStaffComment ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCStaffComment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCStaffComment ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCStaffComment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCStaffComment ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCStaffComment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCStaffComment ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCStaffComment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCStaffComment ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCStaffComment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCStaffComment MakeReadOnly() {
    comments_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCStaffComment prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCStaffComment, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCStaffComment cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCStaffComment result;
    
    private SCStaffComment PrepareBuilder() {
      if (resultIsReadOnly) {
        SCStaffComment original = result;
        result = new SCStaffComment();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCStaffComment MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCStaffComment.Descriptor; }
    }
    
    public override SCStaffComment DefaultInstanceForType {
      get { return global::SCStaffComment.DefaultInstance; }
    }
    
    public override SCStaffComment BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCStaffComment) {
        return MergeFrom((SCStaffComment) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCStaffComment other) {
      if (other == global::SCStaffComment.DefaultInstance) return this;
      PrepareBuilder();
      if (other.comments_.Count != 0) {
        result.comments_.Add(other.comments_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCStaffCommentFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCStaffCommentFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.comments_, global::StructComment.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructComment> CommentsList {
      get { return PrepareBuilder().comments_; }
    }
    public int CommentsCount {
      get { return result.CommentsCount; }
    }
    public global::StructComment GetComments(int index) {
      return result.GetComments(index);
    }
    public Builder SetComments(int index, global::StructComment value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.comments_[index] = value;
      return this;
    }
    public Builder SetComments(int index, global::StructComment.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.comments_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddComments(global::StructComment value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.comments_.Add(value);
      return this;
    }
    public Builder AddComments(global::StructComment.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.comments_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeComments(scg::IEnumerable<global::StructComment> values) {
      PrepareBuilder();
      result.comments_.Add(values);
      return this;
    }
    public Builder ClearComments() {
      PrepareBuilder();
      result.comments_.Clear();
      return this;
    }
  }
  static SCStaffComment() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSStaffPerform : pb::GeneratedMessage<CSStaffPerform, CSStaffPerform.Builder> {
  private CSStaffPerform() { }
  private static readonly CSStaffPerform defaultInstance = new CSStaffPerform().MakeReadOnly();
  private static readonly string[] _cSStaffPerformFieldNames = new string[] { "month", "year" };
  private static readonly uint[] _cSStaffPerformFieldTags = new uint[] { 16, 8 };
  public static CSStaffPerform DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSStaffPerform DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSStaffPerform ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSStaffPerform__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSStaffPerform, CSStaffPerform.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSStaffPerform__FieldAccessorTable; }
  }
  
  public const int YearFieldNumber = 1;
  private bool hasYear;
  private int year_;
  public bool HasYear {
    get { return hasYear; }
  }
  public int Year {
    get { return year_; }
  }
  
  public const int MonthFieldNumber = 2;
  private bool hasMonth;
  private int month_;
  public bool HasMonth {
    get { return hasMonth; }
  }
  public int Month {
    get { return month_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasYear) return false;
      if (!hasMonth) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSStaffPerformFieldNames;
    if (hasYear) {
      output.WriteInt32(1, field_names[1], Year);
    }
    if (hasMonth) {
      output.WriteInt32(2, field_names[0], Month);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasYear) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Year);
    }
    if (hasMonth) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Month);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSStaffPerform ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSStaffPerform ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSStaffPerform ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSStaffPerform ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSStaffPerform MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSStaffPerform prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSStaffPerform, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSStaffPerform cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSStaffPerform result;
    
    private CSStaffPerform PrepareBuilder() {
      if (resultIsReadOnly) {
        CSStaffPerform original = result;
        result = new CSStaffPerform();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSStaffPerform MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSStaffPerform.Descriptor; }
    }
    
    public override CSStaffPerform DefaultInstanceForType {
      get { return global::CSStaffPerform.DefaultInstance; }
    }
    
    public override CSStaffPerform BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSStaffPerform) {
        return MergeFrom((CSStaffPerform) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSStaffPerform other) {
      if (other == global::CSStaffPerform.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasYear) {
        Year = other.Year;
      }
      if (other.HasMonth) {
        Month = other.Month;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSStaffPerformFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSStaffPerformFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasYear = input.ReadInt32(ref result.year_);
            break;
          }
          case 16: {
            result.hasMonth = input.ReadInt32(ref result.month_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasYear {
      get { return result.hasYear; }
    }
    public int Year {
      get { return result.Year; }
      set { SetYear(value); }
    }
    public Builder SetYear(int value) {
      PrepareBuilder();
      result.hasYear = true;
      result.year_ = value;
      return this;
    }
    public Builder ClearYear() {
      PrepareBuilder();
      result.hasYear = false;
      result.year_ = 0;
      return this;
    }
    
    public bool HasMonth {
      get { return result.hasMonth; }
    }
    public int Month {
      get { return result.Month; }
      set { SetMonth(value); }
    }
    public Builder SetMonth(int value) {
      PrepareBuilder();
      result.hasMonth = true;
      result.month_ = value;
      return this;
    }
    public Builder ClearMonth() {
      PrepareBuilder();
      result.hasMonth = false;
      result.month_ = 0;
      return this;
    }
  }
  static CSStaffPerform() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCStaffPerform : pb::GeneratedMessage<SCStaffPerform, SCStaffPerform.Builder> {
  private SCStaffPerform() { }
  private static readonly SCStaffPerform defaultInstance = new SCStaffPerform().MakeReadOnly();
  private static readonly string[] _sCStaffPerformFieldNames = new string[] { "performs" };
  private static readonly uint[] _sCStaffPerformFieldTags = new uint[] { 10 };
  public static SCStaffPerform DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCStaffPerform DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCStaffPerform ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCStaffPerform__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCStaffPerform, SCStaffPerform.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCStaffPerform__FieldAccessorTable; }
  }
  
  public const int PerformsFieldNumber = 1;
  private pbc::PopsicleList<global::StructPerform> performs_ = new pbc::PopsicleList<global::StructPerform>();
  public scg::IList<global::StructPerform> PerformsList {
    get { return performs_; }
  }
  public int PerformsCount {
    get { return performs_.Count; }
  }
  public global::StructPerform GetPerforms(int index) {
    return performs_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructPerform element in PerformsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCStaffPerformFieldNames;
    if (performs_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], performs_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructPerform element in PerformsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCStaffPerform ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCStaffPerform ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCStaffPerform ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCStaffPerform ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCStaffPerform MakeReadOnly() {
    performs_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCStaffPerform prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCStaffPerform, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCStaffPerform cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCStaffPerform result;
    
    private SCStaffPerform PrepareBuilder() {
      if (resultIsReadOnly) {
        SCStaffPerform original = result;
        result = new SCStaffPerform();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCStaffPerform MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCStaffPerform.Descriptor; }
    }
    
    public override SCStaffPerform DefaultInstanceForType {
      get { return global::SCStaffPerform.DefaultInstance; }
    }
    
    public override SCStaffPerform BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCStaffPerform) {
        return MergeFrom((SCStaffPerform) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCStaffPerform other) {
      if (other == global::SCStaffPerform.DefaultInstance) return this;
      PrepareBuilder();
      if (other.performs_.Count != 0) {
        result.performs_.Add(other.performs_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCStaffPerformFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCStaffPerformFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.performs_, global::StructPerform.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructPerform> PerformsList {
      get { return PrepareBuilder().performs_; }
    }
    public int PerformsCount {
      get { return result.PerformsCount; }
    }
    public global::StructPerform GetPerforms(int index) {
      return result.GetPerforms(index);
    }
    public Builder SetPerforms(int index, global::StructPerform value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.performs_[index] = value;
      return this;
    }
    public Builder SetPerforms(int index, global::StructPerform.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.performs_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPerforms(global::StructPerform value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.performs_.Add(value);
      return this;
    }
    public Builder AddPerforms(global::StructPerform.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.performs_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePerforms(scg::IEnumerable<global::StructPerform> values) {
      PrepareBuilder();
      result.performs_.Add(values);
      return this;
    }
    public Builder ClearPerforms() {
      PrepareBuilder();
      result.performs_.Clear();
      return this;
    }
  }
  static SCStaffPerform() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEarning : pb::GeneratedMessage<CSEarning, CSEarning.Builder> {
  private CSEarning() { }
  private static readonly CSEarning defaultInstance = new CSEarning().MakeReadOnly();
  private static readonly string[] _cSEarningFieldNames = new string[] { "endtime", "starttime" };
  private static readonly uint[] _cSEarningFieldTags = new uint[] { 18, 10 };
  public static CSEarning DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEarning DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEarning ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSEarning__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEarning, CSEarning.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSEarning__FieldAccessorTable; }
  }
  
  public const int StarttimeFieldNumber = 1;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int EndtimeFieldNumber = 2;
  private bool hasEndtime;
  private string endtime_ = "";
  public bool HasEndtime {
    get { return hasEndtime; }
  }
  public string Endtime {
    get { return endtime_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasStarttime) return false;
      if (!hasEndtime) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEarningFieldNames;
    if (hasStarttime) {
      output.WriteString(1, field_names[1], Starttime);
    }
    if (hasEndtime) {
      output.WriteString(2, field_names[0], Endtime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Starttime);
    }
    if (hasEndtime) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Endtime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEarning ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEarning ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEarning ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEarning ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEarning ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEarning ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEarning ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEarning ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEarning ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEarning ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEarning MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEarning prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEarning, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEarning cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEarning result;
    
    private CSEarning PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEarning original = result;
        result = new CSEarning();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEarning MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEarning.Descriptor; }
    }
    
    public override CSEarning DefaultInstanceForType {
      get { return global::CSEarning.DefaultInstance; }
    }
    
    public override CSEarning BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEarning) {
        return MergeFrom((CSEarning) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEarning other) {
      if (other == global::CSEarning.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasEndtime) {
        Endtime = other.Endtime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEarningFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEarningFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 18: {
            result.hasEndtime = input.ReadString(ref result.endtime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasEndtime {
      get { return result.hasEndtime; }
    }
    public string Endtime {
      get { return result.Endtime; }
      set { SetEndtime(value); }
    }
    public Builder SetEndtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEndtime = true;
      result.endtime_ = value;
      return this;
    }
    public Builder ClearEndtime() {
      PrepareBuilder();
      result.hasEndtime = false;
      result.endtime_ = "";
      return this;
    }
  }
  static CSEarning() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEarning : pb::GeneratedMessage<SCEarning, SCEarning.Builder> {
  private SCEarning() { }
  private static readonly SCEarning defaultInstance = new SCEarning().MakeReadOnly();
  private static readonly string[] _sCEarningFieldNames = new string[] { "earns" };
  private static readonly uint[] _sCEarningFieldTags = new uint[] { 10 };
  public static SCEarning DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEarning DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEarning ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCEarning__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEarning, SCEarning.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCEarning__FieldAccessorTable; }
  }
  
  public const int EarnsFieldNumber = 1;
  private pbc::PopsicleList<global::StructEarn> earns_ = new pbc::PopsicleList<global::StructEarn>();
  public scg::IList<global::StructEarn> EarnsList {
    get { return earns_; }
  }
  public int EarnsCount {
    get { return earns_.Count; }
  }
  public global::StructEarn GetEarns(int index) {
    return earns_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructEarn element in EarnsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEarningFieldNames;
    if (earns_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], earns_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructEarn element in EarnsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEarning ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEarning ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEarning ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEarning ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEarning ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEarning ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEarning ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEarning ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEarning ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEarning ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEarning MakeReadOnly() {
    earns_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEarning prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEarning, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEarning cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEarning result;
    
    private SCEarning PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEarning original = result;
        result = new SCEarning();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEarning MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEarning.Descriptor; }
    }
    
    public override SCEarning DefaultInstanceForType {
      get { return global::SCEarning.DefaultInstance; }
    }
    
    public override SCEarning BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEarning) {
        return MergeFrom((SCEarning) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEarning other) {
      if (other == global::SCEarning.DefaultInstance) return this;
      PrepareBuilder();
      if (other.earns_.Count != 0) {
        result.earns_.Add(other.earns_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEarningFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEarningFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.earns_, global::StructEarn.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructEarn> EarnsList {
      get { return PrepareBuilder().earns_; }
    }
    public int EarnsCount {
      get { return result.EarnsCount; }
    }
    public global::StructEarn GetEarns(int index) {
      return result.GetEarns(index);
    }
    public Builder SetEarns(int index, global::StructEarn value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.earns_[index] = value;
      return this;
    }
    public Builder SetEarns(int index, global::StructEarn.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.earns_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddEarns(global::StructEarn value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.earns_.Add(value);
      return this;
    }
    public Builder AddEarns(global::StructEarn.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.earns_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeEarns(scg::IEnumerable<global::StructEarn> values) {
      PrepareBuilder();
      result.earns_.Add(values);
      return this;
    }
    public Builder ClearEarns() {
      PrepareBuilder();
      result.earns_.Clear();
      return this;
    }
  }
  static SCEarning() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCComputerList : pb::GeneratedMessage<SCComputerList, SCComputerList.Builder> {
  private SCComputerList() { }
  private static readonly SCComputerList defaultInstance = new SCComputerList().MakeReadOnly();
  private static readonly string[] _sCComputerListFieldNames = new string[] { "computers" };
  private static readonly uint[] _sCComputerListFieldTags = new uint[] { 10 };
  public static SCComputerList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCComputerList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCComputerList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCComputerList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCComputerList, SCComputerList.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCComputerList__FieldAccessorTable; }
  }
  
  public const int ComputersFieldNumber = 1;
  private pbc::PopsicleList<global::StructComputer> computers_ = new pbc::PopsicleList<global::StructComputer>();
  public scg::IList<global::StructComputer> ComputersList {
    get { return computers_; }
  }
  public int ComputersCount {
    get { return computers_.Count; }
  }
  public global::StructComputer GetComputers(int index) {
    return computers_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructComputer element in ComputersList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCComputerListFieldNames;
    if (computers_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], computers_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructComputer element in ComputersList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCComputerList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCComputerList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCComputerList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCComputerList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCComputerList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCComputerList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCComputerList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCComputerList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCComputerList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCComputerList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCComputerList MakeReadOnly() {
    computers_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCComputerList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCComputerList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCComputerList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCComputerList result;
    
    private SCComputerList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCComputerList original = result;
        result = new SCComputerList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCComputerList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCComputerList.Descriptor; }
    }
    
    public override SCComputerList DefaultInstanceForType {
      get { return global::SCComputerList.DefaultInstance; }
    }
    
    public override SCComputerList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCComputerList) {
        return MergeFrom((SCComputerList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCComputerList other) {
      if (other == global::SCComputerList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.computers_.Count != 0) {
        result.computers_.Add(other.computers_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCComputerListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCComputerListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.computers_, global::StructComputer.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructComputer> ComputersList {
      get { return PrepareBuilder().computers_; }
    }
    public int ComputersCount {
      get { return result.ComputersCount; }
    }
    public global::StructComputer GetComputers(int index) {
      return result.GetComputers(index);
    }
    public Builder SetComputers(int index, global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.computers_[index] = value;
      return this;
    }
    public Builder SetComputers(int index, global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.computers_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddComputers(global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.computers_.Add(value);
      return this;
    }
    public Builder AddComputers(global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.computers_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeComputers(scg::IEnumerable<global::StructComputer> values) {
      PrepareBuilder();
      result.computers_.Add(values);
      return this;
    }
    public Builder ClearComputers() {
      PrepareBuilder();
      result.computers_.Clear();
      return this;
    }
  }
  static SCComputerList() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSComputerAdd : pb::GeneratedMessage<CSComputerAdd, CSComputerAdd.Builder> {
  private CSComputerAdd() { }
  private static readonly CSComputerAdd defaultInstance = new CSComputerAdd().MakeReadOnly();
  private static readonly string[] _cSComputerAddFieldNames = new string[] { "computer" };
  private static readonly uint[] _cSComputerAddFieldTags = new uint[] { 10 };
  public static CSComputerAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSComputerAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSComputerAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSComputerAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSComputerAdd, CSComputerAdd.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSComputerAdd__FieldAccessorTable; }
  }
  
  public const int ComputerFieldNumber = 1;
  private bool hasComputer;
  private global::StructComputer computer_;
  public bool HasComputer {
    get { return hasComputer; }
  }
  public global::StructComputer Computer {
    get { return computer_ ?? global::StructComputer.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasComputer) return false;
      if (!Computer.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSComputerAddFieldNames;
    if (hasComputer) {
      output.WriteMessage(1, field_names[0], Computer);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasComputer) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Computer);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSComputerAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSComputerAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSComputerAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSComputerAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSComputerAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSComputerAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSComputerAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSComputerAdd result;
    
    private CSComputerAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSComputerAdd original = result;
        result = new CSComputerAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSComputerAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSComputerAdd.Descriptor; }
    }
    
    public override CSComputerAdd DefaultInstanceForType {
      get { return global::CSComputerAdd.DefaultInstance; }
    }
    
    public override CSComputerAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSComputerAdd) {
        return MergeFrom((CSComputerAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSComputerAdd other) {
      if (other == global::CSComputerAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasComputer) {
        MergeComputer(other.Computer);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSComputerAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSComputerAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructComputer.Builder subBuilder = global::StructComputer.CreateBuilder();
            if (result.hasComputer) {
              subBuilder.MergeFrom(Computer);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Computer = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasComputer {
     get { return result.hasComputer; }
    }
    public global::StructComputer Computer {
      get { return result.Computer; }
      set { SetComputer(value); }
    }
    public Builder SetComputer(global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasComputer = true;
      result.computer_ = value;
      return this;
    }
    public Builder SetComputer(global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasComputer = true;
      result.computer_ = builderForValue.Build();
      return this;
    }
    public Builder MergeComputer(global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasComputer &&
          result.computer_ != global::StructComputer.DefaultInstance) {
          result.computer_ = global::StructComputer.CreateBuilder(result.computer_).MergeFrom(value).BuildPartial();
      } else {
        result.computer_ = value;
      }
      result.hasComputer = true;
      return this;
    }
    public Builder ClearComputer() {
      PrepareBuilder();
      result.hasComputer = false;
      result.computer_ = null;
      return this;
    }
  }
  static CSComputerAdd() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSComputerDel : pb::GeneratedMessage<CSComputerDel, CSComputerDel.Builder> {
  private CSComputerDel() { }
  private static readonly CSComputerDel defaultInstance = new CSComputerDel().MakeReadOnly();
  private static readonly string[] _cSComputerDelFieldNames = new string[] { "computerid" };
  private static readonly uint[] _cSComputerDelFieldTags = new uint[] { 8 };
  public static CSComputerDel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSComputerDel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSComputerDel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSComputerDel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSComputerDel, CSComputerDel.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSComputerDel__FieldAccessorTable; }
  }
  
  public const int ComputeridFieldNumber = 1;
  private pbc::PopsicleList<int> computerid_ = new pbc::PopsicleList<int>();
  public scg::IList<int> ComputeridList {
    get { return pbc::Lists.AsReadOnly(computerid_); }
  }
  public int ComputeridCount {
    get { return computerid_.Count; }
  }
  public int GetComputerid(int index) {
    return computerid_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSComputerDelFieldNames;
    if (computerid_.Count > 0) {
      output.WriteInt32Array(1, field_names[0], computerid_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (int element in ComputeridList) {
        dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * computerid_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSComputerDel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerDel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerDel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSComputerDel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSComputerDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSComputerDel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSComputerDel MakeReadOnly() {
    computerid_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSComputerDel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSComputerDel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSComputerDel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSComputerDel result;
    
    private CSComputerDel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSComputerDel original = result;
        result = new CSComputerDel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSComputerDel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSComputerDel.Descriptor; }
    }
    
    public override CSComputerDel DefaultInstanceForType {
      get { return global::CSComputerDel.DefaultInstance; }
    }
    
    public override CSComputerDel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSComputerDel) {
        return MergeFrom((CSComputerDel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSComputerDel other) {
      if (other == global::CSComputerDel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.computerid_.Count != 0) {
        result.computerid_.Add(other.computerid_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSComputerDelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSComputerDelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt32Array(tag, field_name, result.computerid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<int> ComputeridList {
      get { return PrepareBuilder().computerid_; }
    }
    public int ComputeridCount {
      get { return result.ComputeridCount; }
    }
    public int GetComputerid(int index) {
      return result.GetComputerid(index);
    }
    public Builder SetComputerid(int index, int value) {
      PrepareBuilder();
      result.computerid_[index] = value;
      return this;
    }
    public Builder AddComputerid(int value) {
      PrepareBuilder();
      result.computerid_.Add(value);
      return this;
    }
    public Builder AddRangeComputerid(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.computerid_.Add(values);
      return this;
    }
    public Builder ClearComputerid() {
      PrepareBuilder();
      result.computerid_.Clear();
      return this;
    }
  }
  static CSComputerDel() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSComputerUpdate : pb::GeneratedMessage<CSComputerUpdate, CSComputerUpdate.Builder> {
  private CSComputerUpdate() { }
  private static readonly CSComputerUpdate defaultInstance = new CSComputerUpdate().MakeReadOnly();
  private static readonly string[] _cSComputerUpdateFieldNames = new string[] { "computer" };
  private static readonly uint[] _cSComputerUpdateFieldTags = new uint[] { 10 };
  public static CSComputerUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSComputerUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSComputerUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSComputerUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSComputerUpdate, CSComputerUpdate.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSComputerUpdate__FieldAccessorTable; }
  }
  
  public const int ComputerFieldNumber = 1;
  private pbc::PopsicleList<global::StructComputer> computer_ = new pbc::PopsicleList<global::StructComputer>();
  public scg::IList<global::StructComputer> ComputerList {
    get { return computer_; }
  }
  public int ComputerCount {
    get { return computer_.Count; }
  }
  public global::StructComputer GetComputer(int index) {
    return computer_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructComputer element in ComputerList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSComputerUpdateFieldNames;
    if (computer_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], computer_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructComputer element in ComputerList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSComputerUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSComputerUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSComputerUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSComputerUpdate MakeReadOnly() {
    computer_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSComputerUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSComputerUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSComputerUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSComputerUpdate result;
    
    private CSComputerUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSComputerUpdate original = result;
        result = new CSComputerUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSComputerUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSComputerUpdate.Descriptor; }
    }
    
    public override CSComputerUpdate DefaultInstanceForType {
      get { return global::CSComputerUpdate.DefaultInstance; }
    }
    
    public override CSComputerUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSComputerUpdate) {
        return MergeFrom((CSComputerUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSComputerUpdate other) {
      if (other == global::CSComputerUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.computer_.Count != 0) {
        result.computer_.Add(other.computer_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSComputerUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSComputerUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.computer_, global::StructComputer.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructComputer> ComputerList {
      get { return PrepareBuilder().computer_; }
    }
    public int ComputerCount {
      get { return result.ComputerCount; }
    }
    public global::StructComputer GetComputer(int index) {
      return result.GetComputer(index);
    }
    public Builder SetComputer(int index, global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.computer_[index] = value;
      return this;
    }
    public Builder SetComputer(int index, global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.computer_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddComputer(global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.computer_.Add(value);
      return this;
    }
    public Builder AddComputer(global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.computer_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeComputer(scg::IEnumerable<global::StructComputer> values) {
      PrepareBuilder();
      result.computer_.Add(values);
      return this;
    }
    public Builder ClearComputer() {
      PrepareBuilder();
      result.computer_.Clear();
      return this;
    }
  }
  static CSComputerUpdate() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSComputerFind : pb::GeneratedMessage<CSComputerFind, CSComputerFind.Builder> {
  private CSComputerFind() { }
  private static readonly CSComputerFind defaultInstance = new CSComputerFind().MakeReadOnly();
  private static readonly string[] _cSComputerFindFieldNames = new string[] { "name" };
  private static readonly uint[] _cSComputerFindFieldTags = new uint[] { 10 };
  public static CSComputerFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSComputerFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSComputerFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSComputerFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSComputerFind, CSComputerFind.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSComputerFind__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSComputerFindFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[0], Name);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSComputerFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSComputerFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSComputerFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSComputerFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSComputerFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSComputerFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSComputerFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSComputerFind MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSComputerFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSComputerFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSComputerFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSComputerFind result;
    
    private CSComputerFind PrepareBuilder() {
      if (resultIsReadOnly) {
        CSComputerFind original = result;
        result = new CSComputerFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSComputerFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSComputerFind.Descriptor; }
    }
    
    public override CSComputerFind DefaultInstanceForType {
      get { return global::CSComputerFind.DefaultInstance; }
    }
    
    public override CSComputerFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSComputerFind) {
        return MergeFrom((CSComputerFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSComputerFind other) {
      if (other == global::CSComputerFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSComputerFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSComputerFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
  }
  static CSComputerFind() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCComputerFind : pb::GeneratedMessage<SCComputerFind, SCComputerFind.Builder> {
  private SCComputerFind() { }
  private static readonly SCComputerFind defaultInstance = new SCComputerFind().MakeReadOnly();
  private static readonly string[] _sCComputerFindFieldNames = new string[] { "computers" };
  private static readonly uint[] _sCComputerFindFieldTags = new uint[] { 10 };
  public static SCComputerFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCComputerFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCComputerFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCComputerFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCComputerFind, SCComputerFind.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCComputerFind__FieldAccessorTable; }
  }
  
  public const int ComputersFieldNumber = 1;
  private pbc::PopsicleList<global::StructComputer> computers_ = new pbc::PopsicleList<global::StructComputer>();
  public scg::IList<global::StructComputer> ComputersList {
    get { return computers_; }
  }
  public int ComputersCount {
    get { return computers_.Count; }
  }
  public global::StructComputer GetComputers(int index) {
    return computers_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructComputer element in ComputersList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCComputerFindFieldNames;
    if (computers_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], computers_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructComputer element in ComputersList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCComputerFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCComputerFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCComputerFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCComputerFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCComputerFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCComputerFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCComputerFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCComputerFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCComputerFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCComputerFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCComputerFind MakeReadOnly() {
    computers_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCComputerFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCComputerFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCComputerFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCComputerFind result;
    
    private SCComputerFind PrepareBuilder() {
      if (resultIsReadOnly) {
        SCComputerFind original = result;
        result = new SCComputerFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCComputerFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCComputerFind.Descriptor; }
    }
    
    public override SCComputerFind DefaultInstanceForType {
      get { return global::SCComputerFind.DefaultInstance; }
    }
    
    public override SCComputerFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCComputerFind) {
        return MergeFrom((SCComputerFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCComputerFind other) {
      if (other == global::SCComputerFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.computers_.Count != 0) {
        result.computers_.Add(other.computers_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCComputerFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCComputerFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.computers_, global::StructComputer.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructComputer> ComputersList {
      get { return PrepareBuilder().computers_; }
    }
    public int ComputersCount {
      get { return result.ComputersCount; }
    }
    public global::StructComputer GetComputers(int index) {
      return result.GetComputers(index);
    }
    public Builder SetComputers(int index, global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.computers_[index] = value;
      return this;
    }
    public Builder SetComputers(int index, global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.computers_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddComputers(global::StructComputer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.computers_.Add(value);
      return this;
    }
    public Builder AddComputers(global::StructComputer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.computers_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeComputers(scg::IEnumerable<global::StructComputer> values) {
      PrepareBuilder();
      result.computers_.Add(values);
      return this;
    }
    public Builder ClearComputers() {
      PrepareBuilder();
      result.computers_.Clear();
      return this;
    }
  }
  static SCComputerFind() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberList : pb::GeneratedMessage<CSMemberList, CSMemberList.Builder> {
  private CSMemberList() { }
  private static readonly CSMemberList defaultInstance = new CSMemberList().MakeReadOnly();
  private static readonly string[] _cSMemberListFieldNames = new string[] { "page" };
  private static readonly uint[] _cSMemberListFieldTags = new uint[] { 10 };
  public static CSMemberList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSMemberList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberList, CSMemberList.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSMemberList__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberListFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[0], Page);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberList MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberList result;
    
    private CSMemberList PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberList original = result;
        result = new CSMemberList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberList.Descriptor; }
    }
    
    public override CSMemberList DefaultInstanceForType {
      get { return global::CSMemberList.DefaultInstance; }
    }
    
    public override CSMemberList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberList) {
        return MergeFrom((CSMemberList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberList other) {
      if (other == global::CSMemberList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
  }
  static CSMemberList() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCMemberList : pb::GeneratedMessage<SCMemberList, SCMemberList.Builder> {
  private SCMemberList() { }
  private static readonly SCMemberList defaultInstance = new SCMemberList().MakeReadOnly();
  private static readonly string[] _sCMemberListFieldNames = new string[] { "members" };
  private static readonly uint[] _sCMemberListFieldTags = new uint[] { 10 };
  public static SCMemberList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCMemberList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCMemberList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCMemberList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCMemberList, SCMemberList.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCMemberList__FieldAccessorTable; }
  }
  
  public const int MembersFieldNumber = 1;
  private pbc::PopsicleList<global::StructMember> members_ = new pbc::PopsicleList<global::StructMember>();
  public scg::IList<global::StructMember> MembersList {
    get { return members_; }
  }
  public int MembersCount {
    get { return members_.Count; }
  }
  public global::StructMember GetMembers(int index) {
    return members_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructMember element in MembersList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCMemberListFieldNames;
    if (members_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], members_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructMember element in MembersList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCMemberList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCMemberList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCMemberList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCMemberList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCMemberList MakeReadOnly() {
    members_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCMemberList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCMemberList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCMemberList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCMemberList result;
    
    private SCMemberList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCMemberList original = result;
        result = new SCMemberList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCMemberList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCMemberList.Descriptor; }
    }
    
    public override SCMemberList DefaultInstanceForType {
      get { return global::SCMemberList.DefaultInstance; }
    }
    
    public override SCMemberList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCMemberList) {
        return MergeFrom((SCMemberList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCMemberList other) {
      if (other == global::SCMemberList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.members_.Count != 0) {
        result.members_.Add(other.members_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCMemberListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCMemberListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.members_, global::StructMember.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructMember> MembersList {
      get { return PrepareBuilder().members_; }
    }
    public int MembersCount {
      get { return result.MembersCount; }
    }
    public global::StructMember GetMembers(int index) {
      return result.GetMembers(index);
    }
    public Builder SetMembers(int index, global::StructMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.members_[index] = value;
      return this;
    }
    public Builder SetMembers(int index, global::StructMember.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.members_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMembers(global::StructMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.members_.Add(value);
      return this;
    }
    public Builder AddMembers(global::StructMember.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.members_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMembers(scg::IEnumerable<global::StructMember> values) {
      PrepareBuilder();
      result.members_.Add(values);
      return this;
    }
    public Builder ClearMembers() {
      PrepareBuilder();
      result.members_.Clear();
      return this;
    }
  }
  static SCMemberList() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberDel : pb::GeneratedMessage<CSMemberDel, CSMemberDel.Builder> {
  private CSMemberDel() { }
  private static readonly CSMemberDel defaultInstance = new CSMemberDel().MakeReadOnly();
  private static readonly string[] _cSMemberDelFieldNames = new string[] { "memberid" };
  private static readonly uint[] _cSMemberDelFieldTags = new uint[] { 8 };
  public static CSMemberDel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberDel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberDel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSMemberDel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberDel, CSMemberDel.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSMemberDel__FieldAccessorTable; }
  }
  
  public const int MemberidFieldNumber = 1;
  private pbc::PopsicleList<int> memberid_ = new pbc::PopsicleList<int>();
  public scg::IList<int> MemberidList {
    get { return pbc::Lists.AsReadOnly(memberid_); }
  }
  public int MemberidCount {
    get { return memberid_.Count; }
  }
  public int GetMemberid(int index) {
    return memberid_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberDelFieldNames;
    if (memberid_.Count > 0) {
      output.WriteInt32Array(1, field_names[0], memberid_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (int element in MemberidList) {
        dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * memberid_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberDel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberDel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberDel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberDel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberDel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberDel MakeReadOnly() {
    memberid_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberDel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberDel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberDel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberDel result;
    
    private CSMemberDel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberDel original = result;
        result = new CSMemberDel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberDel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberDel.Descriptor; }
    }
    
    public override CSMemberDel DefaultInstanceForType {
      get { return global::CSMemberDel.DefaultInstance; }
    }
    
    public override CSMemberDel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberDel) {
        return MergeFrom((CSMemberDel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberDel other) {
      if (other == global::CSMemberDel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.memberid_.Count != 0) {
        result.memberid_.Add(other.memberid_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberDelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberDelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt32Array(tag, field_name, result.memberid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<int> MemberidList {
      get { return PrepareBuilder().memberid_; }
    }
    public int MemberidCount {
      get { return result.MemberidCount; }
    }
    public int GetMemberid(int index) {
      return result.GetMemberid(index);
    }
    public Builder SetMemberid(int index, int value) {
      PrepareBuilder();
      result.memberid_[index] = value;
      return this;
    }
    public Builder AddMemberid(int value) {
      PrepareBuilder();
      result.memberid_.Add(value);
      return this;
    }
    public Builder AddRangeMemberid(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.memberid_.Add(values);
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.memberid_.Clear();
      return this;
    }
  }
  static CSMemberDel() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberUpdateStatus : pb::GeneratedMessage<CSMemberUpdateStatus, CSMemberUpdateStatus.Builder> {
  private CSMemberUpdateStatus() { }
  private static readonly CSMemberUpdateStatus defaultInstance = new CSMemberUpdateStatus().MakeReadOnly();
  private static readonly string[] _cSMemberUpdateStatusFieldNames = new string[] { "mask", "memberids" };
  private static readonly uint[] _cSMemberUpdateStatusFieldTags = new uint[] { 8, 16 };
  public static CSMemberUpdateStatus DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberUpdateStatus DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberUpdateStatus ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSMemberUpdateStatus__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberUpdateStatus, CSMemberUpdateStatus.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSMemberUpdateStatus__FieldAccessorTable; }
  }
  
  public const int MaskFieldNumber = 1;
  private bool hasMask;
  private int mask_;
  public bool HasMask {
    get { return hasMask; }
  }
  public int Mask {
    get { return mask_; }
  }
  
  public const int MemberidsFieldNumber = 2;
  private bool hasMemberids;
  private int memberids_;
  public bool HasMemberids {
    get { return hasMemberids; }
  }
  public int Memberids {
    get { return memberids_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMask) return false;
      if (!hasMemberids) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberUpdateStatusFieldNames;
    if (hasMask) {
      output.WriteInt32(1, field_names[0], Mask);
    }
    if (hasMemberids) {
      output.WriteInt32(2, field_names[1], Memberids);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMask) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Mask);
    }
    if (hasMemberids) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Memberids);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberUpdateStatus ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberUpdateStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberUpdateStatus MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberUpdateStatus prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberUpdateStatus, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberUpdateStatus cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberUpdateStatus result;
    
    private CSMemberUpdateStatus PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberUpdateStatus original = result;
        result = new CSMemberUpdateStatus();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberUpdateStatus MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberUpdateStatus.Descriptor; }
    }
    
    public override CSMemberUpdateStatus DefaultInstanceForType {
      get { return global::CSMemberUpdateStatus.DefaultInstance; }
    }
    
    public override CSMemberUpdateStatus BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberUpdateStatus) {
        return MergeFrom((CSMemberUpdateStatus) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberUpdateStatus other) {
      if (other == global::CSMemberUpdateStatus.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMask) {
        Mask = other.Mask;
      }
      if (other.HasMemberids) {
        Memberids = other.Memberids;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberUpdateStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberUpdateStatusFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMask = input.ReadInt32(ref result.mask_);
            break;
          }
          case 16: {
            result.hasMemberids = input.ReadInt32(ref result.memberids_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMask {
      get { return result.hasMask; }
    }
    public int Mask {
      get { return result.Mask; }
      set { SetMask(value); }
    }
    public Builder SetMask(int value) {
      PrepareBuilder();
      result.hasMask = true;
      result.mask_ = value;
      return this;
    }
    public Builder ClearMask() {
      PrepareBuilder();
      result.hasMask = false;
      result.mask_ = 0;
      return this;
    }
    
    public bool HasMemberids {
      get { return result.hasMemberids; }
    }
    public int Memberids {
      get { return result.Memberids; }
      set { SetMemberids(value); }
    }
    public Builder SetMemberids(int value) {
      PrepareBuilder();
      result.hasMemberids = true;
      result.memberids_ = value;
      return this;
    }
    public Builder ClearMemberids() {
      PrepareBuilder();
      result.hasMemberids = false;
      result.memberids_ = 0;
      return this;
    }
  }
  static CSMemberUpdateStatus() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberFind : pb::GeneratedMessage<CSMemberFind, CSMemberFind.Builder> {
  private CSMemberFind() { }
  private static readonly CSMemberFind defaultInstance = new CSMemberFind().MakeReadOnly();
  private static readonly string[] _cSMemberFindFieldNames = new string[] { "keywords", "page", "right", "status" };
  private static readonly uint[] _cSMemberFindFieldTags = new uint[] { 34, 10, 24, 16 };
  public static CSMemberFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSMemberFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberFind, CSMemberFind.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSMemberFind__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int StatusFieldNumber = 2;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int RightFieldNumber = 3;
  private bool hasRight;
  private int right_;
  public bool HasRight {
    get { return hasRight; }
  }
  public int Right {
    get { return right_; }
  }
  
  public const int KeywordsFieldNumber = 4;
  private bool hasKeywords;
  private string keywords_ = "";
  public bool HasKeywords {
    get { return hasKeywords; }
  }
  public string Keywords {
    get { return keywords_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberFindFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[1], Page);
    }
    if (hasStatus) {
      output.WriteInt32(2, field_names[3], Status);
    }
    if (hasRight) {
      output.WriteInt32(3, field_names[2], Right);
    }
    if (hasKeywords) {
      output.WriteString(4, field_names[0], Keywords);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Status);
    }
    if (hasRight) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Right);
    }
    if (hasKeywords) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Keywords);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberFind MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberFind result;
    
    private CSMemberFind PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberFind original = result;
        result = new CSMemberFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberFind.Descriptor; }
    }
    
    public override CSMemberFind DefaultInstanceForType {
      get { return global::CSMemberFind.DefaultInstance; }
    }
    
    public override CSMemberFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberFind) {
        return MergeFrom((CSMemberFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberFind other) {
      if (other == global::CSMemberFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasKeywords) {
        Keywords = other.Keywords;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 24: {
            result.hasRight = input.ReadInt32(ref result.right_);
            break;
          }
          case 34: {
            result.hasKeywords = input.ReadString(ref result.keywords_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasRight {
      get { return result.hasRight; }
    }
    public int Right {
      get { return result.Right; }
      set { SetRight(value); }
    }
    public Builder SetRight(int value) {
      PrepareBuilder();
      result.hasRight = true;
      result.right_ = value;
      return this;
    }
    public Builder ClearRight() {
      PrepareBuilder();
      result.hasRight = false;
      result.right_ = 0;
      return this;
    }
    
    public bool HasKeywords {
      get { return result.hasKeywords; }
    }
    public string Keywords {
      get { return result.Keywords; }
      set { SetKeywords(value); }
    }
    public Builder SetKeywords(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKeywords = true;
      result.keywords_ = value;
      return this;
    }
    public Builder ClearKeywords() {
      PrepareBuilder();
      result.hasKeywords = false;
      result.keywords_ = "";
      return this;
    }
  }
  static CSMemberFind() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCMemberFind : pb::GeneratedMessage<SCMemberFind, SCMemberFind.Builder> {
  private SCMemberFind() { }
  private static readonly SCMemberFind defaultInstance = new SCMemberFind().MakeReadOnly();
  private static readonly string[] _sCMemberFindFieldNames = new string[] { "members" };
  private static readonly uint[] _sCMemberFindFieldTags = new uint[] { 10 };
  public static SCMemberFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCMemberFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCMemberFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCMemberFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCMemberFind, SCMemberFind.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCMemberFind__FieldAccessorTable; }
  }
  
  public const int MembersFieldNumber = 1;
  private pbc::PopsicleList<global::StructMember> members_ = new pbc::PopsicleList<global::StructMember>();
  public scg::IList<global::StructMember> MembersList {
    get { return members_; }
  }
  public int MembersCount {
    get { return members_.Count; }
  }
  public global::StructMember GetMembers(int index) {
    return members_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructMember element in MembersList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCMemberFindFieldNames;
    if (members_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], members_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructMember element in MembersList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCMemberFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCMemberFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCMemberFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCMemberFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCMemberFind MakeReadOnly() {
    members_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCMemberFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCMemberFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCMemberFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCMemberFind result;
    
    private SCMemberFind PrepareBuilder() {
      if (resultIsReadOnly) {
        SCMemberFind original = result;
        result = new SCMemberFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCMemberFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCMemberFind.Descriptor; }
    }
    
    public override SCMemberFind DefaultInstanceForType {
      get { return global::SCMemberFind.DefaultInstance; }
    }
    
    public override SCMemberFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCMemberFind) {
        return MergeFrom((SCMemberFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCMemberFind other) {
      if (other == global::SCMemberFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.members_.Count != 0) {
        result.members_.Add(other.members_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCMemberFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCMemberFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.members_, global::StructMember.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructMember> MembersList {
      get { return PrepareBuilder().members_; }
    }
    public int MembersCount {
      get { return result.MembersCount; }
    }
    public global::StructMember GetMembers(int index) {
      return result.GetMembers(index);
    }
    public Builder SetMembers(int index, global::StructMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.members_[index] = value;
      return this;
    }
    public Builder SetMembers(int index, global::StructMember.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.members_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMembers(global::StructMember value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.members_.Add(value);
      return this;
    }
    public Builder AddMembers(global::StructMember.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.members_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMembers(scg::IEnumerable<global::StructMember> values) {
      PrepareBuilder();
      result.members_.Add(values);
      return this;
    }
    public Builder ClearMembers() {
      PrepareBuilder();
      result.members_.Clear();
      return this;
    }
  }
  static SCMemberFind() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMemberCardInfo : pb::GeneratedMessage<CSMemberCardInfo, CSMemberCardInfo.Builder> {
  private CSMemberCardInfo() { }
  private static readonly CSMemberCardInfo defaultInstance = new CSMemberCardInfo().MakeReadOnly();
  private static readonly string[] _cSMemberCardInfoFieldNames = new string[] { "memberid" };
  private static readonly uint[] _cSMemberCardInfoFieldTags = new uint[] { 8 };
  public static CSMemberCardInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMemberCardInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMemberCardInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSMemberCardInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMemberCardInfo, CSMemberCardInfo.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSMemberCardInfo__FieldAccessorTable; }
  }
  
  public const int MemberidFieldNumber = 1;
  private bool hasMemberid;
  private int memberid_;
  public bool HasMemberid {
    get { return hasMemberid; }
  }
  public int Memberid {
    get { return memberid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMemberid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMemberCardInfoFieldNames;
    if (hasMemberid) {
      output.WriteInt32(1, field_names[0], Memberid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMemberid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Memberid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMemberCardInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMemberCardInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMemberCardInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMemberCardInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMemberCardInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMemberCardInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMemberCardInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMemberCardInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMemberCardInfo result;
    
    private CSMemberCardInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMemberCardInfo original = result;
        result = new CSMemberCardInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMemberCardInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMemberCardInfo.Descriptor; }
    }
    
    public override CSMemberCardInfo DefaultInstanceForType {
      get { return global::CSMemberCardInfo.DefaultInstance; }
    }
    
    public override CSMemberCardInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMemberCardInfo) {
        return MergeFrom((CSMemberCardInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMemberCardInfo other) {
      if (other == global::CSMemberCardInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMemberid) {
        Memberid = other.Memberid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMemberCardInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMemberCardInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMemberid = input.ReadInt32(ref result.memberid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMemberid {
      get { return result.hasMemberid; }
    }
    public int Memberid {
      get { return result.Memberid; }
      set { SetMemberid(value); }
    }
    public Builder SetMemberid(int value) {
      PrepareBuilder();
      result.hasMemberid = true;
      result.memberid_ = value;
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.hasMemberid = false;
      result.memberid_ = 0;
      return this;
    }
  }
  static CSMemberCardInfo() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCMemberCardInfo : pb::GeneratedMessage<SCMemberCardInfo, SCMemberCardInfo.Builder> {
  private SCMemberCardInfo() { }
  private static readonly SCMemberCardInfo defaultInstance = new SCMemberCardInfo().MakeReadOnly();
  private static readonly string[] _sCMemberCardInfoFieldNames = new string[] { "cardinfo" };
  private static readonly uint[] _sCMemberCardInfoFieldTags = new uint[] { 10 };
  public static SCMemberCardInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCMemberCardInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCMemberCardInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCMemberCardInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCMemberCardInfo, SCMemberCardInfo.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCMemberCardInfo__FieldAccessorTable; }
  }
  
  public const int CardinfoFieldNumber = 1;
  private bool hasCardinfo;
  private global::StructCard cardinfo_;
  public bool HasCardinfo {
    get { return hasCardinfo; }
  }
  public global::StructCard Cardinfo {
    get { return cardinfo_ ?? global::StructCard.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCardinfo) return false;
      if (!Cardinfo.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCMemberCardInfoFieldNames;
    if (hasCardinfo) {
      output.WriteMessage(1, field_names[0], Cardinfo);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCardinfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Cardinfo);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCMemberCardInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCMemberCardInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCMemberCardInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMemberCardInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCMemberCardInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCMemberCardInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCMemberCardInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCMemberCardInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCMemberCardInfo result;
    
    private SCMemberCardInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        SCMemberCardInfo original = result;
        result = new SCMemberCardInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCMemberCardInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCMemberCardInfo.Descriptor; }
    }
    
    public override SCMemberCardInfo DefaultInstanceForType {
      get { return global::SCMemberCardInfo.DefaultInstance; }
    }
    
    public override SCMemberCardInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCMemberCardInfo) {
        return MergeFrom((SCMemberCardInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCMemberCardInfo other) {
      if (other == global::SCMemberCardInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCardinfo) {
        MergeCardinfo(other.Cardinfo);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCMemberCardInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCMemberCardInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructCard.Builder subBuilder = global::StructCard.CreateBuilder();
            if (result.hasCardinfo) {
              subBuilder.MergeFrom(Cardinfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Cardinfo = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCardinfo {
     get { return result.hasCardinfo; }
    }
    public global::StructCard Cardinfo {
      get { return result.Cardinfo; }
      set { SetCardinfo(value); }
    }
    public Builder SetCardinfo(global::StructCard value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCardinfo = true;
      result.cardinfo_ = value;
      return this;
    }
    public Builder SetCardinfo(global::StructCard.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCardinfo = true;
      result.cardinfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCardinfo(global::StructCard value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCardinfo &&
          result.cardinfo_ != global::StructCard.DefaultInstance) {
          result.cardinfo_ = global::StructCard.CreateBuilder(result.cardinfo_).MergeFrom(value).BuildPartial();
      } else {
        result.cardinfo_ = value;
      }
      result.hasCardinfo = true;
      return this;
    }
    public Builder ClearCardinfo() {
      PrepareBuilder();
      result.hasCardinfo = false;
      result.cardinfo_ = null;
      return this;
    }
  }
  static SCMemberCardInfo() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSysBillList : pb::GeneratedMessage<SCSysBillList, SCSysBillList.Builder> {
  private SCSysBillList() { }
  private static readonly SCSysBillList defaultInstance = new SCSysBillList().MakeReadOnly();
  private static readonly string[] _sCSysBillListFieldNames = new string[] { "setting", "userArea" };
  private static readonly uint[] _sCSysBillListFieldTags = new uint[] { 18, 10 };
  public static SCSysBillList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSysBillList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSysBillList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCSysBillList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSysBillList, SCSysBillList.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCSysBillList__FieldAccessorTable; }
  }
  
  public const int UserAreaFieldNumber = 1;
  private pbc::PopsicleList<global::StructUserArea> userArea_ = new pbc::PopsicleList<global::StructUserArea>();
  public scg::IList<global::StructUserArea> UserAreaList {
    get { return userArea_; }
  }
  public int UserAreaCount {
    get { return userArea_.Count; }
  }
  public global::StructUserArea GetUserArea(int index) {
    return userArea_[index];
  }
  
  public const int SettingFieldNumber = 2;
  private pbc::PopsicleList<global::StructBillSetting> setting_ = new pbc::PopsicleList<global::StructBillSetting>();
  public scg::IList<global::StructBillSetting> SettingList {
    get { return setting_; }
  }
  public int SettingCount {
    get { return setting_.Count; }
  }
  public global::StructBillSetting GetSetting(int index) {
    return setting_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructUserArea element in UserAreaList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::StructBillSetting element in SettingList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSysBillListFieldNames;
    if (userArea_.Count > 0) {
      output.WriteMessageArray(1, field_names[1], userArea_);
    }
    if (setting_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], setting_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructUserArea element in UserAreaList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    foreach (global::StructBillSetting element in SettingList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSysBillList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysBillList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysBillList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysBillList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysBillList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysBillList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSysBillList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSysBillList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSysBillList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysBillList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSysBillList MakeReadOnly() {
    userArea_.MakeReadOnly();
    setting_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSysBillList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSysBillList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSysBillList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSysBillList result;
    
    private SCSysBillList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSysBillList original = result;
        result = new SCSysBillList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSysBillList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSysBillList.Descriptor; }
    }
    
    public override SCSysBillList DefaultInstanceForType {
      get { return global::SCSysBillList.DefaultInstance; }
    }
    
    public override SCSysBillList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSysBillList) {
        return MergeFrom((SCSysBillList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSysBillList other) {
      if (other == global::SCSysBillList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.userArea_.Count != 0) {
        result.userArea_.Add(other.userArea_);
      }
      if (other.setting_.Count != 0) {
        result.setting_.Add(other.setting_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSysBillListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSysBillListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.userArea_, global::StructUserArea.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.setting_, global::StructBillSetting.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructUserArea> UserAreaList {
      get { return PrepareBuilder().userArea_; }
    }
    public int UserAreaCount {
      get { return result.UserAreaCount; }
    }
    public global::StructUserArea GetUserArea(int index) {
      return result.GetUserArea(index);
    }
    public Builder SetUserArea(int index, global::StructUserArea value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userArea_[index] = value;
      return this;
    }
    public Builder SetUserArea(int index, global::StructUserArea.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userArea_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddUserArea(global::StructUserArea value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userArea_.Add(value);
      return this;
    }
    public Builder AddUserArea(global::StructUserArea.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userArea_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeUserArea(scg::IEnumerable<global::StructUserArea> values) {
      PrepareBuilder();
      result.userArea_.Add(values);
      return this;
    }
    public Builder ClearUserArea() {
      PrepareBuilder();
      result.userArea_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::StructBillSetting> SettingList {
      get { return PrepareBuilder().setting_; }
    }
    public int SettingCount {
      get { return result.SettingCount; }
    }
    public global::StructBillSetting GetSetting(int index) {
      return result.GetSetting(index);
    }
    public Builder SetSetting(int index, global::StructBillSetting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.setting_[index] = value;
      return this;
    }
    public Builder SetSetting(int index, global::StructBillSetting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.setting_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSetting(global::StructBillSetting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.setting_.Add(value);
      return this;
    }
    public Builder AddSetting(global::StructBillSetting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.setting_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSetting(scg::IEnumerable<global::StructBillSetting> values) {
      PrepareBuilder();
      result.setting_.Add(values);
      return this;
    }
    public Builder ClearSetting() {
      PrepareBuilder();
      result.setting_.Clear();
      return this;
    }
  }
  static SCSysBillList() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSysBillUpdate : pb::GeneratedMessage<CSSysBillUpdate, CSSysBillUpdate.Builder> {
  private CSSysBillUpdate() { }
  private static readonly CSSysBillUpdate defaultInstance = new CSSysBillUpdate().MakeReadOnly();
  private static readonly string[] _cSSysBillUpdateFieldNames = new string[] { "setting", "userArea" };
  private static readonly uint[] _cSSysBillUpdateFieldTags = new uint[] { 18, 10 };
  public static CSSysBillUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSysBillUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSysBillUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSSysBillUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSysBillUpdate, CSSysBillUpdate.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSSysBillUpdate__FieldAccessorTable; }
  }
  
  public const int UserAreaFieldNumber = 1;
  private pbc::PopsicleList<global::StructUserArea> userArea_ = new pbc::PopsicleList<global::StructUserArea>();
  public scg::IList<global::StructUserArea> UserAreaList {
    get { return userArea_; }
  }
  public int UserAreaCount {
    get { return userArea_.Count; }
  }
  public global::StructUserArea GetUserArea(int index) {
    return userArea_[index];
  }
  
  public const int SettingFieldNumber = 2;
  private pbc::PopsicleList<global::StructBillSetting> setting_ = new pbc::PopsicleList<global::StructBillSetting>();
  public scg::IList<global::StructBillSetting> SettingList {
    get { return setting_; }
  }
  public int SettingCount {
    get { return setting_.Count; }
  }
  public global::StructBillSetting GetSetting(int index) {
    return setting_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructUserArea element in UserAreaList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::StructBillSetting element in SettingList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSysBillUpdateFieldNames;
    if (userArea_.Count > 0) {
      output.WriteMessageArray(1, field_names[1], userArea_);
    }
    if (setting_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], setting_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructUserArea element in UserAreaList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    foreach (global::StructBillSetting element in SettingList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSysBillUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSysBillUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSysBillUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSysBillUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSysBillUpdate MakeReadOnly() {
    userArea_.MakeReadOnly();
    setting_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSysBillUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSysBillUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSysBillUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSysBillUpdate result;
    
    private CSSysBillUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSysBillUpdate original = result;
        result = new CSSysBillUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSysBillUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSysBillUpdate.Descriptor; }
    }
    
    public override CSSysBillUpdate DefaultInstanceForType {
      get { return global::CSSysBillUpdate.DefaultInstance; }
    }
    
    public override CSSysBillUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSysBillUpdate) {
        return MergeFrom((CSSysBillUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSysBillUpdate other) {
      if (other == global::CSSysBillUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.userArea_.Count != 0) {
        result.userArea_.Add(other.userArea_);
      }
      if (other.setting_.Count != 0) {
        result.setting_.Add(other.setting_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSysBillUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSysBillUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.userArea_, global::StructUserArea.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.setting_, global::StructBillSetting.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructUserArea> UserAreaList {
      get { return PrepareBuilder().userArea_; }
    }
    public int UserAreaCount {
      get { return result.UserAreaCount; }
    }
    public global::StructUserArea GetUserArea(int index) {
      return result.GetUserArea(index);
    }
    public Builder SetUserArea(int index, global::StructUserArea value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userArea_[index] = value;
      return this;
    }
    public Builder SetUserArea(int index, global::StructUserArea.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userArea_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddUserArea(global::StructUserArea value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userArea_.Add(value);
      return this;
    }
    public Builder AddUserArea(global::StructUserArea.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userArea_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeUserArea(scg::IEnumerable<global::StructUserArea> values) {
      PrepareBuilder();
      result.userArea_.Add(values);
      return this;
    }
    public Builder ClearUserArea() {
      PrepareBuilder();
      result.userArea_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::StructBillSetting> SettingList {
      get { return PrepareBuilder().setting_; }
    }
    public int SettingCount {
      get { return result.SettingCount; }
    }
    public global::StructBillSetting GetSetting(int index) {
      return result.GetSetting(index);
    }
    public Builder SetSetting(int index, global::StructBillSetting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.setting_[index] = value;
      return this;
    }
    public Builder SetSetting(int index, global::StructBillSetting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.setting_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSetting(global::StructBillSetting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.setting_.Add(value);
      return this;
    }
    public Builder AddSetting(global::StructBillSetting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.setting_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSetting(scg::IEnumerable<global::StructBillSetting> values) {
      PrepareBuilder();
      result.setting_.Add(values);
      return this;
    }
    public Builder ClearSetting() {
      PrepareBuilder();
      result.setting_.Clear();
      return this;
    }
  }
  static CSSysBillUpdate() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSysBillUpdate : pb::GeneratedMessage<SCSysBillUpdate, SCSysBillUpdate.Builder> {
  private SCSysBillUpdate() { }
  private static readonly SCSysBillUpdate defaultInstance = new SCSysBillUpdate().MakeReadOnly();
  private static readonly string[] _sCSysBillUpdateFieldNames = new string[] { "setting", "userArea" };
  private static readonly uint[] _sCSysBillUpdateFieldTags = new uint[] { 18, 10 };
  public static SCSysBillUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSysBillUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSysBillUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCSysBillUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSysBillUpdate, SCSysBillUpdate.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCSysBillUpdate__FieldAccessorTable; }
  }
  
  public const int UserAreaFieldNumber = 1;
  private pbc::PopsicleList<global::StructUserArea> userArea_ = new pbc::PopsicleList<global::StructUserArea>();
  public scg::IList<global::StructUserArea> UserAreaList {
    get { return userArea_; }
  }
  public int UserAreaCount {
    get { return userArea_.Count; }
  }
  public global::StructUserArea GetUserArea(int index) {
    return userArea_[index];
  }
  
  public const int SettingFieldNumber = 2;
  private pbc::PopsicleList<global::StructBillSetting> setting_ = new pbc::PopsicleList<global::StructBillSetting>();
  public scg::IList<global::StructBillSetting> SettingList {
    get { return setting_; }
  }
  public int SettingCount {
    get { return setting_.Count; }
  }
  public global::StructBillSetting GetSetting(int index) {
    return setting_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructUserArea element in UserAreaList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::StructBillSetting element in SettingList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSysBillUpdateFieldNames;
    if (userArea_.Count > 0) {
      output.WriteMessageArray(1, field_names[1], userArea_);
    }
    if (setting_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], setting_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructUserArea element in UserAreaList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    foreach (global::StructBillSetting element in SettingList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSysBillUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSysBillUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSysBillUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysBillUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSysBillUpdate MakeReadOnly() {
    userArea_.MakeReadOnly();
    setting_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSysBillUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSysBillUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSysBillUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSysBillUpdate result;
    
    private SCSysBillUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSysBillUpdate original = result;
        result = new SCSysBillUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSysBillUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSysBillUpdate.Descriptor; }
    }
    
    public override SCSysBillUpdate DefaultInstanceForType {
      get { return global::SCSysBillUpdate.DefaultInstance; }
    }
    
    public override SCSysBillUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSysBillUpdate) {
        return MergeFrom((SCSysBillUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSysBillUpdate other) {
      if (other == global::SCSysBillUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.userArea_.Count != 0) {
        result.userArea_.Add(other.userArea_);
      }
      if (other.setting_.Count != 0) {
        result.setting_.Add(other.setting_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSysBillUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSysBillUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.userArea_, global::StructUserArea.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.setting_, global::StructBillSetting.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructUserArea> UserAreaList {
      get { return PrepareBuilder().userArea_; }
    }
    public int UserAreaCount {
      get { return result.UserAreaCount; }
    }
    public global::StructUserArea GetUserArea(int index) {
      return result.GetUserArea(index);
    }
    public Builder SetUserArea(int index, global::StructUserArea value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userArea_[index] = value;
      return this;
    }
    public Builder SetUserArea(int index, global::StructUserArea.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userArea_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddUserArea(global::StructUserArea value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userArea_.Add(value);
      return this;
    }
    public Builder AddUserArea(global::StructUserArea.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userArea_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeUserArea(scg::IEnumerable<global::StructUserArea> values) {
      PrepareBuilder();
      result.userArea_.Add(values);
      return this;
    }
    public Builder ClearUserArea() {
      PrepareBuilder();
      result.userArea_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::StructBillSetting> SettingList {
      get { return PrepareBuilder().setting_; }
    }
    public int SettingCount {
      get { return result.SettingCount; }
    }
    public global::StructBillSetting GetSetting(int index) {
      return result.GetSetting(index);
    }
    public Builder SetSetting(int index, global::StructBillSetting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.setting_[index] = value;
      return this;
    }
    public Builder SetSetting(int index, global::StructBillSetting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.setting_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSetting(global::StructBillSetting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.setting_.Add(value);
      return this;
    }
    public Builder AddSetting(global::StructBillSetting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.setting_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSetting(scg::IEnumerable<global::StructBillSetting> values) {
      PrepareBuilder();
      result.setting_.Add(values);
      return this;
    }
    public Builder ClearSetting() {
      PrepareBuilder();
      result.setting_.Clear();
      return this;
    }
  }
  static SCSysBillUpdate() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSysInto : pb::GeneratedMessage<CSSysInto, CSSysInto.Builder> {
  private CSSysInto() { }
  private static readonly CSSysInto defaultInstance = new CSSysInto().MakeReadOnly();
  private static readonly string[] _cSSysIntoFieldNames = new string[] { "parent" };
  private static readonly uint[] _cSSysIntoFieldTags = new uint[] { 10 };
  public static CSSysInto DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSysInto DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSysInto ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSSysInto__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSysInto, CSSysInto.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSSysInto__FieldAccessorTable; }
  }
  
  public const int ParentFieldNumber = 1;
  private bool hasParent;
  private string parent_ = "";
  public bool HasParent {
    get { return hasParent; }
  }
  public string Parent {
    get { return parent_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasParent) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSysIntoFieldNames;
    if (hasParent) {
      output.WriteString(1, field_names[0], Parent);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasParent) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Parent);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSysInto ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSysInto ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSysInto ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSysInto ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSysInto ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSysInto ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSysInto ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSysInto ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSysInto ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSysInto ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSysInto MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSysInto prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSysInto, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSysInto cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSysInto result;
    
    private CSSysInto PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSysInto original = result;
        result = new CSSysInto();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSysInto MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSysInto.Descriptor; }
    }
    
    public override CSSysInto DefaultInstanceForType {
      get { return global::CSSysInto.DefaultInstance; }
    }
    
    public override CSSysInto BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSysInto) {
        return MergeFrom((CSSysInto) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSysInto other) {
      if (other == global::CSSysInto.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasParent) {
        Parent = other.Parent;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSysIntoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSysIntoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasParent = input.ReadString(ref result.parent_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasParent {
      get { return result.hasParent; }
    }
    public string Parent {
      get { return result.Parent; }
      set { SetParent(value); }
    }
    public Builder SetParent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasParent = true;
      result.parent_ = value;
      return this;
    }
    public Builder ClearParent() {
      PrepareBuilder();
      result.hasParent = false;
      result.parent_ = "";
      return this;
    }
  }
  static CSSysInto() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSysInfo : pb::GeneratedMessage<SCSysInfo, SCSysInfo.Builder> {
  private SCSysInfo() { }
  private static readonly SCSysInfo defaultInstance = new SCSysInfo().MakeReadOnly();
  private static readonly string[] _sCSysInfoFieldNames = new string[] { "child", "parent" };
  private static readonly uint[] _sCSysInfoFieldTags = new uint[] { 18, 10 };
  public static SCSysInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSysInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSysInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCSysInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSysInfo, SCSysInfo.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCSysInfo__FieldAccessorTable; }
  }
  
  public const int ParentFieldNumber = 1;
  private bool hasParent;
  private string parent_ = "";
  public bool HasParent {
    get { return hasParent; }
  }
  public string Parent {
    get { return parent_; }
  }
  
  public const int ChildFieldNumber = 2;
  private pbc::PopsicleList<global::StructDictItem> child_ = new pbc::PopsicleList<global::StructDictItem>();
  public scg::IList<global::StructDictItem> ChildList {
    get { return child_; }
  }
  public int ChildCount {
    get { return child_.Count; }
  }
  public global::StructDictItem GetChild(int index) {
    return child_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasParent) return false;
      foreach (global::StructDictItem element in ChildList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSysInfoFieldNames;
    if (hasParent) {
      output.WriteString(1, field_names[1], Parent);
    }
    if (child_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], child_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasParent) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Parent);
    }
    foreach (global::StructDictItem element in ChildList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSysInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSysInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSysInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSysInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSysInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSysInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSysInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSysInfo MakeReadOnly() {
    child_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSysInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSysInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSysInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSysInfo result;
    
    private SCSysInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSysInfo original = result;
        result = new SCSysInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSysInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSysInfo.Descriptor; }
    }
    
    public override SCSysInfo DefaultInstanceForType {
      get { return global::SCSysInfo.DefaultInstance; }
    }
    
    public override SCSysInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSysInfo) {
        return MergeFrom((SCSysInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSysInfo other) {
      if (other == global::SCSysInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasParent) {
        Parent = other.Parent;
      }
      if (other.child_.Count != 0) {
        result.child_.Add(other.child_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSysInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSysInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasParent = input.ReadString(ref result.parent_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.child_, global::StructDictItem.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasParent {
      get { return result.hasParent; }
    }
    public string Parent {
      get { return result.Parent; }
      set { SetParent(value); }
    }
    public Builder SetParent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasParent = true;
      result.parent_ = value;
      return this;
    }
    public Builder ClearParent() {
      PrepareBuilder();
      result.hasParent = false;
      result.parent_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::StructDictItem> ChildList {
      get { return PrepareBuilder().child_; }
    }
    public int ChildCount {
      get { return result.ChildCount; }
    }
    public global::StructDictItem GetChild(int index) {
      return result.GetChild(index);
    }
    public Builder SetChild(int index, global::StructDictItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.child_[index] = value;
      return this;
    }
    public Builder SetChild(int index, global::StructDictItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.child_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddChild(global::StructDictItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.child_.Add(value);
      return this;
    }
    public Builder AddChild(global::StructDictItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.child_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeChild(scg::IEnumerable<global::StructDictItem> values) {
      PrepareBuilder();
      result.child_.Add(values);
      return this;
    }
    public Builder ClearChild() {
      PrepareBuilder();
      result.child_.Clear();
      return this;
    }
  }
  static SCSysInfo() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAddSysInfo : pb::GeneratedMessage<CSAddSysInfo, CSAddSysInfo.Builder> {
  private CSAddSysInfo() { }
  private static readonly CSAddSysInfo defaultInstance = new CSAddSysInfo().MakeReadOnly();
  private static readonly string[] _cSAddSysInfoFieldNames = new string[] { "child", "parent" };
  private static readonly uint[] _cSAddSysInfoFieldTags = new uint[] { 18, 10 };
  public static CSAddSysInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAddSysInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAddSysInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSAddSysInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAddSysInfo, CSAddSysInfo.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSAddSysInfo__FieldAccessorTable; }
  }
  
  public const int ParentFieldNumber = 1;
  private bool hasParent;
  private string parent_ = "";
  public bool HasParent {
    get { return hasParent; }
  }
  public string Parent {
    get { return parent_; }
  }
  
  public const int ChildFieldNumber = 2;
  private bool hasChild;
  private global::StructDictItem child_;
  public bool HasChild {
    get { return hasChild; }
  }
  public global::StructDictItem Child {
    get { return child_ ?? global::StructDictItem.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasParent) return false;
      if (!hasChild) return false;
      if (!Child.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAddSysInfoFieldNames;
    if (hasParent) {
      output.WriteString(1, field_names[1], Parent);
    }
    if (hasChild) {
      output.WriteMessage(2, field_names[0], Child);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasParent) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Parent);
    }
    if (hasChild) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Child);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAddSysInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAddSysInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAddSysInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAddSysInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAddSysInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAddSysInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAddSysInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAddSysInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAddSysInfo result;
    
    private CSAddSysInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAddSysInfo original = result;
        result = new CSAddSysInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAddSysInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAddSysInfo.Descriptor; }
    }
    
    public override CSAddSysInfo DefaultInstanceForType {
      get { return global::CSAddSysInfo.DefaultInstance; }
    }
    
    public override CSAddSysInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAddSysInfo) {
        return MergeFrom((CSAddSysInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAddSysInfo other) {
      if (other == global::CSAddSysInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasParent) {
        Parent = other.Parent;
      }
      if (other.HasChild) {
        MergeChild(other.Child);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAddSysInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAddSysInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasParent = input.ReadString(ref result.parent_);
            break;
          }
          case 18: {
            global::StructDictItem.Builder subBuilder = global::StructDictItem.CreateBuilder();
            if (result.hasChild) {
              subBuilder.MergeFrom(Child);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Child = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasParent {
      get { return result.hasParent; }
    }
    public string Parent {
      get { return result.Parent; }
      set { SetParent(value); }
    }
    public Builder SetParent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasParent = true;
      result.parent_ = value;
      return this;
    }
    public Builder ClearParent() {
      PrepareBuilder();
      result.hasParent = false;
      result.parent_ = "";
      return this;
    }
    
    public bool HasChild {
     get { return result.hasChild; }
    }
    public global::StructDictItem Child {
      get { return result.Child; }
      set { SetChild(value); }
    }
    public Builder SetChild(global::StructDictItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasChild = true;
      result.child_ = value;
      return this;
    }
    public Builder SetChild(global::StructDictItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasChild = true;
      result.child_ = builderForValue.Build();
      return this;
    }
    public Builder MergeChild(global::StructDictItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasChild &&
          result.child_ != global::StructDictItem.DefaultInstance) {
          result.child_ = global::StructDictItem.CreateBuilder(result.child_).MergeFrom(value).BuildPartial();
      } else {
        result.child_ = value;
      }
      result.hasChild = true;
      return this;
    }
    public Builder ClearChild() {
      PrepareBuilder();
      result.hasChild = false;
      result.child_ = null;
      return this;
    }
  }
  static CSAddSysInfo() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSDelSysInfo : pb::GeneratedMessage<CSDelSysInfo, CSDelSysInfo.Builder> {
  private CSDelSysInfo() { }
  private static readonly CSDelSysInfo defaultInstance = new CSDelSysInfo().MakeReadOnly();
  private static readonly string[] _cSDelSysInfoFieldNames = new string[] { "child", "parent" };
  private static readonly uint[] _cSDelSysInfoFieldTags = new uint[] { 18, 10 };
  public static CSDelSysInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSDelSysInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSDelSysInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSDelSysInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSDelSysInfo, CSDelSysInfo.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSDelSysInfo__FieldAccessorTable; }
  }
  
  public const int ParentFieldNumber = 1;
  private bool hasParent;
  private string parent_ = "";
  public bool HasParent {
    get { return hasParent; }
  }
  public string Parent {
    get { return parent_; }
  }
  
  public const int ChildFieldNumber = 2;
  private pbc::PopsicleList<string> child_ = new pbc::PopsicleList<string>();
  public scg::IList<string> ChildList {
    get { return pbc::Lists.AsReadOnly(child_); }
  }
  public int ChildCount {
    get { return child_.Count; }
  }
  public string GetChild(int index) {
    return child_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasParent) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSDelSysInfoFieldNames;
    if (hasParent) {
      output.WriteString(1, field_names[1], Parent);
    }
    if (child_.Count > 0) {
      output.WriteStringArray(2, field_names[0], child_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasParent) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Parent);
    }
    {
      int dataSize = 0;
      foreach (string element in ChildList) {
        dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * child_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSDelSysInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSDelSysInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSDelSysInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSDelSysInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSDelSysInfo MakeReadOnly() {
    child_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSDelSysInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSDelSysInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSDelSysInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSDelSysInfo result;
    
    private CSDelSysInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CSDelSysInfo original = result;
        result = new CSDelSysInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSDelSysInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSDelSysInfo.Descriptor; }
    }
    
    public override CSDelSysInfo DefaultInstanceForType {
      get { return global::CSDelSysInfo.DefaultInstance; }
    }
    
    public override CSDelSysInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSDelSysInfo) {
        return MergeFrom((CSDelSysInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSDelSysInfo other) {
      if (other == global::CSDelSysInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasParent) {
        Parent = other.Parent;
      }
      if (other.child_.Count != 0) {
        result.child_.Add(other.child_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSDelSysInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSDelSysInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasParent = input.ReadString(ref result.parent_);
            break;
          }
          case 18: {
            input.ReadStringArray(tag, field_name, result.child_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasParent {
      get { return result.hasParent; }
    }
    public string Parent {
      get { return result.Parent; }
      set { SetParent(value); }
    }
    public Builder SetParent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasParent = true;
      result.parent_ = value;
      return this;
    }
    public Builder ClearParent() {
      PrepareBuilder();
      result.hasParent = false;
      result.parent_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<string> ChildList {
      get { return PrepareBuilder().child_; }
    }
    public int ChildCount {
      get { return result.ChildCount; }
    }
    public string GetChild(int index) {
      return result.GetChild(index);
    }
    public Builder SetChild(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.child_[index] = value;
      return this;
    }
    public Builder AddChild(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.child_.Add(value);
      return this;
    }
    public Builder AddRangeChild(scg::IEnumerable<string> values) {
      PrepareBuilder();
      result.child_.Add(values);
      return this;
    }
    public Builder ClearChild() {
      PrepareBuilder();
      result.child_.Clear();
      return this;
    }
  }
  static CSDelSysInfo() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSUpdateSysInfo : pb::GeneratedMessage<CSUpdateSysInfo, CSUpdateSysInfo.Builder> {
  private CSUpdateSysInfo() { }
  private static readonly CSUpdateSysInfo defaultInstance = new CSUpdateSysInfo().MakeReadOnly();
  private static readonly string[] _cSUpdateSysInfoFieldNames = new string[] { "child", "parent" };
  private static readonly uint[] _cSUpdateSysInfoFieldTags = new uint[] { 18, 10 };
  public static CSUpdateSysInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSUpdateSysInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSUpdateSysInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSUpdateSysInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSUpdateSysInfo, CSUpdateSysInfo.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSUpdateSysInfo__FieldAccessorTable; }
  }
  
  public const int ParentFieldNumber = 1;
  private bool hasParent;
  private string parent_ = "";
  public bool HasParent {
    get { return hasParent; }
  }
  public string Parent {
    get { return parent_; }
  }
  
  public const int ChildFieldNumber = 2;
  private pbc::PopsicleList<global::StructDictItem> child_ = new pbc::PopsicleList<global::StructDictItem>();
  public scg::IList<global::StructDictItem> ChildList {
    get { return child_; }
  }
  public int ChildCount {
    get { return child_.Count; }
  }
  public global::StructDictItem GetChild(int index) {
    return child_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasParent) return false;
      foreach (global::StructDictItem element in ChildList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSUpdateSysInfoFieldNames;
    if (hasParent) {
      output.WriteString(1, field_names[1], Parent);
    }
    if (child_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], child_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasParent) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Parent);
    }
    foreach (global::StructDictItem element in ChildList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSUpdateSysInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSUpdateSysInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSUpdateSysInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSUpdateSysInfo MakeReadOnly() {
    child_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSUpdateSysInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSUpdateSysInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSUpdateSysInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSUpdateSysInfo result;
    
    private CSUpdateSysInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CSUpdateSysInfo original = result;
        result = new CSUpdateSysInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSUpdateSysInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSUpdateSysInfo.Descriptor; }
    }
    
    public override CSUpdateSysInfo DefaultInstanceForType {
      get { return global::CSUpdateSysInfo.DefaultInstance; }
    }
    
    public override CSUpdateSysInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSUpdateSysInfo) {
        return MergeFrom((CSUpdateSysInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSUpdateSysInfo other) {
      if (other == global::CSUpdateSysInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasParent) {
        Parent = other.Parent;
      }
      if (other.child_.Count != 0) {
        result.child_.Add(other.child_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSUpdateSysInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSUpdateSysInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasParent = input.ReadString(ref result.parent_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.child_, global::StructDictItem.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasParent {
      get { return result.hasParent; }
    }
    public string Parent {
      get { return result.Parent; }
      set { SetParent(value); }
    }
    public Builder SetParent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasParent = true;
      result.parent_ = value;
      return this;
    }
    public Builder ClearParent() {
      PrepareBuilder();
      result.hasParent = false;
      result.parent_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::StructDictItem> ChildList {
      get { return PrepareBuilder().child_; }
    }
    public int ChildCount {
      get { return result.ChildCount; }
    }
    public global::StructDictItem GetChild(int index) {
      return result.GetChild(index);
    }
    public Builder SetChild(int index, global::StructDictItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.child_[index] = value;
      return this;
    }
    public Builder SetChild(int index, global::StructDictItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.child_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddChild(global::StructDictItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.child_.Add(value);
      return this;
    }
    public Builder AddChild(global::StructDictItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.child_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeChild(scg::IEnumerable<global::StructDictItem> values) {
      PrepareBuilder();
      result.child_.Add(values);
      return this;
    }
    public Builder ClearChild() {
      PrepareBuilder();
      result.child_.Clear();
      return this;
    }
  }
  static CSUpdateSysInfo() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGoodsAdd : pb::GeneratedMessage<CSGoodsAdd, CSGoodsAdd.Builder> {
  private CSGoodsAdd() { }
  private static readonly CSGoodsAdd defaultInstance = new CSGoodsAdd().MakeReadOnly();
  private static readonly string[] _cSGoodsAddFieldNames = new string[] { "goods" };
  private static readonly uint[] _cSGoodsAddFieldTags = new uint[] { 10 };
  public static CSGoodsAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGoodsAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGoodsAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSGoodsAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGoodsAdd, CSGoodsAdd.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSGoodsAdd__FieldAccessorTable; }
  }
  
  public const int GoodsFieldNumber = 1;
  private bool hasGoods;
  private global::StructGoods goods_;
  public bool HasGoods {
    get { return hasGoods; }
  }
  public global::StructGoods Goods {
    get { return goods_ ?? global::StructGoods.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGoods) return false;
      if (!Goods.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGoodsAddFieldNames;
    if (hasGoods) {
      output.WriteMessage(1, field_names[0], Goods);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGoods) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Goods);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGoodsAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGoodsAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGoodsAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGoodsAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGoodsAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGoodsAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGoodsAdd result;
    
    private CSGoodsAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGoodsAdd original = result;
        result = new CSGoodsAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGoodsAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGoodsAdd.Descriptor; }
    }
    
    public override CSGoodsAdd DefaultInstanceForType {
      get { return global::CSGoodsAdd.DefaultInstance; }
    }
    
    public override CSGoodsAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGoodsAdd) {
        return MergeFrom((CSGoodsAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGoodsAdd other) {
      if (other == global::CSGoodsAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGoods) {
        MergeGoods(other.Goods);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGoodsAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGoodsAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructGoods.Builder subBuilder = global::StructGoods.CreateBuilder();
            if (result.hasGoods) {
              subBuilder.MergeFrom(Goods);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Goods = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGoods {
     get { return result.hasGoods; }
    }
    public global::StructGoods Goods {
      get { return result.Goods; }
      set { SetGoods(value); }
    }
    public Builder SetGoods(global::StructGoods value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGoods = true;
      result.goods_ = value;
      return this;
    }
    public Builder SetGoods(global::StructGoods.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasGoods = true;
      result.goods_ = builderForValue.Build();
      return this;
    }
    public Builder MergeGoods(global::StructGoods value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasGoods &&
          result.goods_ != global::StructGoods.DefaultInstance) {
          result.goods_ = global::StructGoods.CreateBuilder(result.goods_).MergeFrom(value).BuildPartial();
      } else {
        result.goods_ = value;
      }
      result.hasGoods = true;
      return this;
    }
    public Builder ClearGoods() {
      PrepareBuilder();
      result.hasGoods = false;
      result.goods_ = null;
      return this;
    }
  }
  static CSGoodsAdd() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGoodsDel : pb::GeneratedMessage<CSGoodsDel, CSGoodsDel.Builder> {
  private CSGoodsDel() { }
  private static readonly CSGoodsDel defaultInstance = new CSGoodsDel().MakeReadOnly();
  private static readonly string[] _cSGoodsDelFieldNames = new string[] { "ids" };
  private static readonly uint[] _cSGoodsDelFieldTags = new uint[] { 8 };
  public static CSGoodsDel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGoodsDel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGoodsDel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSGoodsDel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGoodsDel, CSGoodsDel.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSGoodsDel__FieldAccessorTable; }
  }
  
  public const int IdsFieldNumber = 1;
  private pbc::PopsicleList<int> ids_ = new pbc::PopsicleList<int>();
  public scg::IList<int> IdsList {
    get { return pbc::Lists.AsReadOnly(ids_); }
  }
  public int IdsCount {
    get { return ids_.Count; }
  }
  public int GetIds(int index) {
    return ids_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGoodsDelFieldNames;
    if (ids_.Count > 0) {
      output.WriteInt32Array(1, field_names[0], ids_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (int element in IdsList) {
        dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * ids_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGoodsDel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsDel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGoodsDel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsDel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGoodsDel MakeReadOnly() {
    ids_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGoodsDel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGoodsDel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGoodsDel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGoodsDel result;
    
    private CSGoodsDel PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGoodsDel original = result;
        result = new CSGoodsDel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGoodsDel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGoodsDel.Descriptor; }
    }
    
    public override CSGoodsDel DefaultInstanceForType {
      get { return global::CSGoodsDel.DefaultInstance; }
    }
    
    public override CSGoodsDel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGoodsDel) {
        return MergeFrom((CSGoodsDel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGoodsDel other) {
      if (other == global::CSGoodsDel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.ids_.Count != 0) {
        result.ids_.Add(other.ids_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGoodsDelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGoodsDelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt32Array(tag, field_name, result.ids_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<int> IdsList {
      get { return PrepareBuilder().ids_; }
    }
    public int IdsCount {
      get { return result.IdsCount; }
    }
    public int GetIds(int index) {
      return result.GetIds(index);
    }
    public Builder SetIds(int index, int value) {
      PrepareBuilder();
      result.ids_[index] = value;
      return this;
    }
    public Builder AddIds(int value) {
      PrepareBuilder();
      result.ids_.Add(value);
      return this;
    }
    public Builder AddRangeIds(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.ids_.Add(values);
      return this;
    }
    public Builder ClearIds() {
      PrepareBuilder();
      result.ids_.Clear();
      return this;
    }
  }
  static CSGoodsDel() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGoodsUpdate : pb::GeneratedMessage<CSGoodsUpdate, CSGoodsUpdate.Builder> {
  private CSGoodsUpdate() { }
  private static readonly CSGoodsUpdate defaultInstance = new CSGoodsUpdate().MakeReadOnly();
  private static readonly string[] _cSGoodsUpdateFieldNames = new string[] { "goods" };
  private static readonly uint[] _cSGoodsUpdateFieldTags = new uint[] { 10 };
  public static CSGoodsUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGoodsUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGoodsUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSGoodsUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGoodsUpdate, CSGoodsUpdate.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSGoodsUpdate__FieldAccessorTable; }
  }
  
  public const int GoodsFieldNumber = 1;
  private bool hasGoods;
  private global::StructGoods goods_;
  public bool HasGoods {
    get { return hasGoods; }
  }
  public global::StructGoods Goods {
    get { return goods_ ?? global::StructGoods.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGoods) return false;
      if (!Goods.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGoodsUpdateFieldNames;
    if (hasGoods) {
      output.WriteMessage(1, field_names[0], Goods);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGoods) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Goods);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGoodsUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGoodsUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGoodsUpdate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGoodsUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGoodsUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGoodsUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGoodsUpdate result;
    
    private CSGoodsUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGoodsUpdate original = result;
        result = new CSGoodsUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGoodsUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGoodsUpdate.Descriptor; }
    }
    
    public override CSGoodsUpdate DefaultInstanceForType {
      get { return global::CSGoodsUpdate.DefaultInstance; }
    }
    
    public override CSGoodsUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGoodsUpdate) {
        return MergeFrom((CSGoodsUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGoodsUpdate other) {
      if (other == global::CSGoodsUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGoods) {
        MergeGoods(other.Goods);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGoodsUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGoodsUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructGoods.Builder subBuilder = global::StructGoods.CreateBuilder();
            if (result.hasGoods) {
              subBuilder.MergeFrom(Goods);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Goods = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGoods {
     get { return result.hasGoods; }
    }
    public global::StructGoods Goods {
      get { return result.Goods; }
      set { SetGoods(value); }
    }
    public Builder SetGoods(global::StructGoods value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGoods = true;
      result.goods_ = value;
      return this;
    }
    public Builder SetGoods(global::StructGoods.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasGoods = true;
      result.goods_ = builderForValue.Build();
      return this;
    }
    public Builder MergeGoods(global::StructGoods value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasGoods &&
          result.goods_ != global::StructGoods.DefaultInstance) {
          result.goods_ = global::StructGoods.CreateBuilder(result.goods_).MergeFrom(value).BuildPartial();
      } else {
        result.goods_ = value;
      }
      result.hasGoods = true;
      return this;
    }
    public Builder ClearGoods() {
      PrepareBuilder();
      result.hasGoods = false;
      result.goods_ = null;
      return this;
    }
  }
  static CSGoodsUpdate() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGoodsStock : pb::GeneratedMessage<CSGoodsStock, CSGoodsStock.Builder> {
  private CSGoodsStock() { }
  private static readonly CSGoodsStock defaultInstance = new CSGoodsStock().MakeReadOnly();
  private static readonly string[] _cSGoodsStockFieldNames = new string[] { "page" };
  private static readonly uint[] _cSGoodsStockFieldTags = new uint[] { 10 };
  public static CSGoodsStock DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGoodsStock DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGoodsStock ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSGoodsStock__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGoodsStock, CSGoodsStock.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSGoodsStock__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGoodsStockFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[0], Page);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGoodsStock ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGoodsStock ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGoodsStock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGoodsStock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGoodsStock MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGoodsStock prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGoodsStock, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGoodsStock cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGoodsStock result;
    
    private CSGoodsStock PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGoodsStock original = result;
        result = new CSGoodsStock();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGoodsStock MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGoodsStock.Descriptor; }
    }
    
    public override CSGoodsStock DefaultInstanceForType {
      get { return global::CSGoodsStock.DefaultInstance; }
    }
    
    public override CSGoodsStock BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGoodsStock) {
        return MergeFrom((CSGoodsStock) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGoodsStock other) {
      if (other == global::CSGoodsStock.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGoodsStockFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGoodsStockFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
  }
  static CSGoodsStock() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCGoodsStock : pb::GeneratedMessage<SCGoodsStock, SCGoodsStock.Builder> {
  private SCGoodsStock() { }
  private static readonly SCGoodsStock defaultInstance = new SCGoodsStock().MakeReadOnly();
  private static readonly string[] _sCGoodsStockFieldNames = new string[] { "goods" };
  private static readonly uint[] _sCGoodsStockFieldTags = new uint[] { 10 };
  public static SCGoodsStock DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCGoodsStock DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCGoodsStock ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCGoodsStock__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCGoodsStock, SCGoodsStock.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCGoodsStock__FieldAccessorTable; }
  }
  
  public const int GoodsFieldNumber = 1;
  private pbc::PopsicleList<global::StructStock> goods_ = new pbc::PopsicleList<global::StructStock>();
  public scg::IList<global::StructStock> GoodsList {
    get { return goods_; }
  }
  public int GoodsCount {
    get { return goods_.Count; }
  }
  public global::StructStock GetGoods(int index) {
    return goods_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructStock element in GoodsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCGoodsStockFieldNames;
    if (goods_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], goods_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructStock element in GoodsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCGoodsStock ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCGoodsStock ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCGoodsStock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGoodsStock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCGoodsStock MakeReadOnly() {
    goods_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCGoodsStock prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCGoodsStock, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCGoodsStock cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCGoodsStock result;
    
    private SCGoodsStock PrepareBuilder() {
      if (resultIsReadOnly) {
        SCGoodsStock original = result;
        result = new SCGoodsStock();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCGoodsStock MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCGoodsStock.Descriptor; }
    }
    
    public override SCGoodsStock DefaultInstanceForType {
      get { return global::SCGoodsStock.DefaultInstance; }
    }
    
    public override SCGoodsStock BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCGoodsStock) {
        return MergeFrom((SCGoodsStock) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCGoodsStock other) {
      if (other == global::SCGoodsStock.DefaultInstance) return this;
      PrepareBuilder();
      if (other.goods_.Count != 0) {
        result.goods_.Add(other.goods_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCGoodsStockFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCGoodsStockFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.goods_, global::StructStock.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructStock> GoodsList {
      get { return PrepareBuilder().goods_; }
    }
    public int GoodsCount {
      get { return result.GoodsCount; }
    }
    public global::StructStock GetGoods(int index) {
      return result.GetGoods(index);
    }
    public Builder SetGoods(int index, global::StructStock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.goods_[index] = value;
      return this;
    }
    public Builder SetGoods(int index, global::StructStock.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.goods_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddGoods(global::StructStock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.goods_.Add(value);
      return this;
    }
    public Builder AddGoods(global::StructStock.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.goods_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeGoods(scg::IEnumerable<global::StructStock> values) {
      PrepareBuilder();
      result.goods_.Add(values);
      return this;
    }
    public Builder ClearGoods() {
      PrepareBuilder();
      result.goods_.Clear();
      return this;
    }
  }
  static SCGoodsStock() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSalesRecord : pb::GeneratedMessage<CSSalesRecord, CSSalesRecord.Builder> {
  private CSSalesRecord() { }
  private static readonly CSSalesRecord defaultInstance = new CSSalesRecord().MakeReadOnly();
  private static readonly string[] _cSSalesRecordFieldNames = new string[] { "begintime", "endtime", "goodsid", "page" };
  private static readonly uint[] _cSSalesRecordFieldTags = new uint[] { 26, 34, 16, 10 };
  public static CSSalesRecord DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSalesRecord DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSalesRecord ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSSalesRecord__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSalesRecord, CSSalesRecord.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSSalesRecord__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int GoodsidFieldNumber = 2;
  private bool hasGoodsid;
  private int goodsid_;
  public bool HasGoodsid {
    get { return hasGoodsid; }
  }
  public int Goodsid {
    get { return goodsid_; }
  }
  
  public const int BegintimeFieldNumber = 3;
  private bool hasBegintime;
  private string begintime_ = "";
  public bool HasBegintime {
    get { return hasBegintime; }
  }
  public string Begintime {
    get { return begintime_; }
  }
  
  public const int EndtimeFieldNumber = 4;
  private bool hasEndtime;
  private string endtime_ = "";
  public bool HasEndtime {
    get { return hasEndtime; }
  }
  public string Endtime {
    get { return endtime_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!hasGoodsid) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSalesRecordFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[3], Page);
    }
    if (hasGoodsid) {
      output.WriteInt32(2, field_names[2], Goodsid);
    }
    if (hasBegintime) {
      output.WriteString(3, field_names[0], Begintime);
    }
    if (hasEndtime) {
      output.WriteString(4, field_names[1], Endtime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasGoodsid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Goodsid);
    }
    if (hasBegintime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Begintime);
    }
    if (hasEndtime) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Endtime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSalesRecord ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSalesRecord ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSalesRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSalesRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSalesRecord MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSalesRecord prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSalesRecord, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSalesRecord cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSalesRecord result;
    
    private CSSalesRecord PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSalesRecord original = result;
        result = new CSSalesRecord();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSalesRecord MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSalesRecord.Descriptor; }
    }
    
    public override CSSalesRecord DefaultInstanceForType {
      get { return global::CSSalesRecord.DefaultInstance; }
    }
    
    public override CSSalesRecord BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSalesRecord) {
        return MergeFrom((CSSalesRecord) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSalesRecord other) {
      if (other == global::CSSalesRecord.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasGoodsid) {
        Goodsid = other.Goodsid;
      }
      if (other.HasBegintime) {
        Begintime = other.Begintime;
      }
      if (other.HasEndtime) {
        Endtime = other.Endtime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSalesRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSalesRecordFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasGoodsid = input.ReadInt32(ref result.goodsid_);
            break;
          }
          case 26: {
            result.hasBegintime = input.ReadString(ref result.begintime_);
            break;
          }
          case 34: {
            result.hasEndtime = input.ReadString(ref result.endtime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasGoodsid {
      get { return result.hasGoodsid; }
    }
    public int Goodsid {
      get { return result.Goodsid; }
      set { SetGoodsid(value); }
    }
    public Builder SetGoodsid(int value) {
      PrepareBuilder();
      result.hasGoodsid = true;
      result.goodsid_ = value;
      return this;
    }
    public Builder ClearGoodsid() {
      PrepareBuilder();
      result.hasGoodsid = false;
      result.goodsid_ = 0;
      return this;
    }
    
    public bool HasBegintime {
      get { return result.hasBegintime; }
    }
    public string Begintime {
      get { return result.Begintime; }
      set { SetBegintime(value); }
    }
    public Builder SetBegintime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBegintime = true;
      result.begintime_ = value;
      return this;
    }
    public Builder ClearBegintime() {
      PrepareBuilder();
      result.hasBegintime = false;
      result.begintime_ = "";
      return this;
    }
    
    public bool HasEndtime {
      get { return result.hasEndtime; }
    }
    public string Endtime {
      get { return result.Endtime; }
      set { SetEndtime(value); }
    }
    public Builder SetEndtime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEndtime = true;
      result.endtime_ = value;
      return this;
    }
    public Builder ClearEndtime() {
      PrepareBuilder();
      result.hasEndtime = false;
      result.endtime_ = "";
      return this;
    }
  }
  static CSSalesRecord() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSalesRecord : pb::GeneratedMessage<SCSalesRecord, SCSalesRecord.Builder> {
  private SCSalesRecord() { }
  private static readonly SCSalesRecord defaultInstance = new SCSalesRecord().MakeReadOnly();
  private static readonly string[] _sCSalesRecordFieldNames = new string[] { "sales" };
  private static readonly uint[] _sCSalesRecordFieldTags = new uint[] { 10 };
  public static SCSalesRecord DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSalesRecord DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSalesRecord ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCSalesRecord__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSalesRecord, SCSalesRecord.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCSalesRecord__FieldAccessorTable; }
  }
  
  public const int SalesFieldNumber = 1;
  private pbc::PopsicleList<global::StructSale> sales_ = new pbc::PopsicleList<global::StructSale>();
  public scg::IList<global::StructSale> SalesList {
    get { return sales_; }
  }
  public int SalesCount {
    get { return sales_.Count; }
  }
  public global::StructSale GetSales(int index) {
    return sales_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructSale element in SalesList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSalesRecordFieldNames;
    if (sales_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], sales_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructSale element in SalesList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSalesRecord ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSalesRecord ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSalesRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSalesRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSalesRecord MakeReadOnly() {
    sales_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSalesRecord prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSalesRecord, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSalesRecord cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSalesRecord result;
    
    private SCSalesRecord PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSalesRecord original = result;
        result = new SCSalesRecord();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSalesRecord MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSalesRecord.Descriptor; }
    }
    
    public override SCSalesRecord DefaultInstanceForType {
      get { return global::SCSalesRecord.DefaultInstance; }
    }
    
    public override SCSalesRecord BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSalesRecord) {
        return MergeFrom((SCSalesRecord) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSalesRecord other) {
      if (other == global::SCSalesRecord.DefaultInstance) return this;
      PrepareBuilder();
      if (other.sales_.Count != 0) {
        result.sales_.Add(other.sales_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSalesRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSalesRecordFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.sales_, global::StructSale.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructSale> SalesList {
      get { return PrepareBuilder().sales_; }
    }
    public int SalesCount {
      get { return result.SalesCount; }
    }
    public global::StructSale GetSales(int index) {
      return result.GetSales(index);
    }
    public Builder SetSales(int index, global::StructSale value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sales_[index] = value;
      return this;
    }
    public Builder SetSales(int index, global::StructSale.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sales_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSales(global::StructSale value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sales_.Add(value);
      return this;
    }
    public Builder AddSales(global::StructSale.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sales_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSales(scg::IEnumerable<global::StructSale> values) {
      PrepareBuilder();
      result.sales_.Add(values);
      return this;
    }
    public Builder ClearSales() {
      PrepareBuilder();
      result.sales_.Clear();
      return this;
    }
  }
  static SCSalesRecord() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSalesTop : pb::GeneratedMessage<CSSalesTop, CSSalesTop.Builder> {
  private CSSalesTop() { }
  private static readonly CSSalesTop defaultInstance = new CSSalesTop().MakeReadOnly();
  private static readonly string[] _cSSalesTopFieldNames = new string[] {  };
  private static readonly uint[] _cSSalesTopFieldTags = new uint[] {  };
  public static CSSalesTop DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSalesTop DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSalesTop ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSSalesTop__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSalesTop, CSSalesTop.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSSalesTop__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSalesTopFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSalesTop ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSalesTop ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSalesTop ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSalesTop ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSalesTop ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSalesTop ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSalesTop ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSalesTop ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSalesTop ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSalesTop ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSalesTop MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSalesTop prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSalesTop, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSalesTop cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSalesTop result;
    
    private CSSalesTop PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSalesTop original = result;
        result = new CSSalesTop();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSalesTop MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSalesTop.Descriptor; }
    }
    
    public override CSSalesTop DefaultInstanceForType {
      get { return global::CSSalesTop.DefaultInstance; }
    }
    
    public override CSSalesTop BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSalesTop) {
        return MergeFrom((CSSalesTop) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSalesTop other) {
      if (other == global::CSSalesTop.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSalesTopFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSalesTopFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSSalesTop() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSalesTop : pb::GeneratedMessage<SCSalesTop, SCSalesTop.Builder> {
  private SCSalesTop() { }
  private static readonly SCSalesTop defaultInstance = new SCSalesTop().MakeReadOnly();
  private static readonly string[] _sCSalesTopFieldNames = new string[] {  };
  private static readonly uint[] _sCSalesTopFieldTags = new uint[] {  };
  public static SCSalesTop DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSalesTop DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSalesTop ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCSalesTop__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSalesTop, SCSalesTop.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCSalesTop__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSalesTopFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSalesTop ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSalesTop ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSalesTop ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSalesTop ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSalesTop ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSalesTop ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSalesTop ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSalesTop ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSalesTop ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSalesTop ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSalesTop MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSalesTop prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSalesTop, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSalesTop cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSalesTop result;
    
    private SCSalesTop PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSalesTop original = result;
        result = new SCSalesTop();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSalesTop MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSalesTop.Descriptor; }
    }
    
    public override SCSalesTop DefaultInstanceForType {
      get { return global::SCSalesTop.DefaultInstance; }
    }
    
    public override SCSalesTop BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSalesTop) {
        return MergeFrom((SCSalesTop) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSalesTop other) {
      if (other == global::SCSalesTop.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSalesTopFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSalesTopFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static SCSalesTop() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSOrderList : pb::GeneratedMessage<CSOrderList, CSOrderList.Builder> {
  private CSOrderList() { }
  private static readonly CSOrderList defaultInstance = new CSOrderList().MakeReadOnly();
  private static readonly string[] _cSOrderListFieldNames = new string[] { "addtime_end", "addtime_start", "page", "proctime_end", "proctime_start", "status", "username" };
  private static readonly uint[] _cSOrderListFieldTags = new uint[] { 34, 26, 10, 50, 42, 16, 58 };
  public static CSOrderList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSOrderList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSOrderList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSOrderList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSOrderList, CSOrderList.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSOrderList__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int StatusFieldNumber = 2;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int AddtimeStartFieldNumber = 3;
  private bool hasAddtimeStart;
  private string addtimeStart_ = "";
  public bool HasAddtimeStart {
    get { return hasAddtimeStart; }
  }
  public string AddtimeStart {
    get { return addtimeStart_; }
  }
  
  public const int AddtimeEndFieldNumber = 4;
  private bool hasAddtimeEnd;
  private string addtimeEnd_ = "";
  public bool HasAddtimeEnd {
    get { return hasAddtimeEnd; }
  }
  public string AddtimeEnd {
    get { return addtimeEnd_; }
  }
  
  public const int ProctimeStartFieldNumber = 5;
  private bool hasProctimeStart;
  private string proctimeStart_ = "";
  public bool HasProctimeStart {
    get { return hasProctimeStart; }
  }
  public string ProctimeStart {
    get { return proctimeStart_; }
  }
  
  public const int ProctimeEndFieldNumber = 6;
  private bool hasProctimeEnd;
  private string proctimeEnd_ = "";
  public bool HasProctimeEnd {
    get { return hasProctimeEnd; }
  }
  public string ProctimeEnd {
    get { return proctimeEnd_; }
  }
  
  public const int UsernameFieldNumber = 7;
  private bool hasUsername;
  private string username_ = "";
  public bool HasUsername {
    get { return hasUsername; }
  }
  public string Username {
    get { return username_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSOrderListFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[2], Page);
    }
    if (hasStatus) {
      output.WriteInt32(2, field_names[5], Status);
    }
    if (hasAddtimeStart) {
      output.WriteString(3, field_names[1], AddtimeStart);
    }
    if (hasAddtimeEnd) {
      output.WriteString(4, field_names[0], AddtimeEnd);
    }
    if (hasProctimeStart) {
      output.WriteString(5, field_names[4], ProctimeStart);
    }
    if (hasProctimeEnd) {
      output.WriteString(6, field_names[3], ProctimeEnd);
    }
    if (hasUsername) {
      output.WriteString(7, field_names[6], Username);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Status);
    }
    if (hasAddtimeStart) {
      size += pb::CodedOutputStream.ComputeStringSize(3, AddtimeStart);
    }
    if (hasAddtimeEnd) {
      size += pb::CodedOutputStream.ComputeStringSize(4, AddtimeEnd);
    }
    if (hasProctimeStart) {
      size += pb::CodedOutputStream.ComputeStringSize(5, ProctimeStart);
    }
    if (hasProctimeEnd) {
      size += pb::CodedOutputStream.ComputeStringSize(6, ProctimeEnd);
    }
    if (hasUsername) {
      size += pb::CodedOutputStream.ComputeStringSize(7, Username);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSOrderList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOrderList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOrderList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOrderList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOrderList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOrderList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSOrderList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSOrderList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSOrderList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOrderList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSOrderList MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSOrderList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSOrderList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSOrderList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSOrderList result;
    
    private CSOrderList PrepareBuilder() {
      if (resultIsReadOnly) {
        CSOrderList original = result;
        result = new CSOrderList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSOrderList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSOrderList.Descriptor; }
    }
    
    public override CSOrderList DefaultInstanceForType {
      get { return global::CSOrderList.DefaultInstance; }
    }
    
    public override CSOrderList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSOrderList) {
        return MergeFrom((CSOrderList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSOrderList other) {
      if (other == global::CSOrderList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasAddtimeStart) {
        AddtimeStart = other.AddtimeStart;
      }
      if (other.HasAddtimeEnd) {
        AddtimeEnd = other.AddtimeEnd;
      }
      if (other.HasProctimeStart) {
        ProctimeStart = other.ProctimeStart;
      }
      if (other.HasProctimeEnd) {
        ProctimeEnd = other.ProctimeEnd;
      }
      if (other.HasUsername) {
        Username = other.Username;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSOrderListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSOrderListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 26: {
            result.hasAddtimeStart = input.ReadString(ref result.addtimeStart_);
            break;
          }
          case 34: {
            result.hasAddtimeEnd = input.ReadString(ref result.addtimeEnd_);
            break;
          }
          case 42: {
            result.hasProctimeStart = input.ReadString(ref result.proctimeStart_);
            break;
          }
          case 50: {
            result.hasProctimeEnd = input.ReadString(ref result.proctimeEnd_);
            break;
          }
          case 58: {
            result.hasUsername = input.ReadString(ref result.username_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasAddtimeStart {
      get { return result.hasAddtimeStart; }
    }
    public string AddtimeStart {
      get { return result.AddtimeStart; }
      set { SetAddtimeStart(value); }
    }
    public Builder SetAddtimeStart(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAddtimeStart = true;
      result.addtimeStart_ = value;
      return this;
    }
    public Builder ClearAddtimeStart() {
      PrepareBuilder();
      result.hasAddtimeStart = false;
      result.addtimeStart_ = "";
      return this;
    }
    
    public bool HasAddtimeEnd {
      get { return result.hasAddtimeEnd; }
    }
    public string AddtimeEnd {
      get { return result.AddtimeEnd; }
      set { SetAddtimeEnd(value); }
    }
    public Builder SetAddtimeEnd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAddtimeEnd = true;
      result.addtimeEnd_ = value;
      return this;
    }
    public Builder ClearAddtimeEnd() {
      PrepareBuilder();
      result.hasAddtimeEnd = false;
      result.addtimeEnd_ = "";
      return this;
    }
    
    public bool HasProctimeStart {
      get { return result.hasProctimeStart; }
    }
    public string ProctimeStart {
      get { return result.ProctimeStart; }
      set { SetProctimeStart(value); }
    }
    public Builder SetProctimeStart(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasProctimeStart = true;
      result.proctimeStart_ = value;
      return this;
    }
    public Builder ClearProctimeStart() {
      PrepareBuilder();
      result.hasProctimeStart = false;
      result.proctimeStart_ = "";
      return this;
    }
    
    public bool HasProctimeEnd {
      get { return result.hasProctimeEnd; }
    }
    public string ProctimeEnd {
      get { return result.ProctimeEnd; }
      set { SetProctimeEnd(value); }
    }
    public Builder SetProctimeEnd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasProctimeEnd = true;
      result.proctimeEnd_ = value;
      return this;
    }
    public Builder ClearProctimeEnd() {
      PrepareBuilder();
      result.hasProctimeEnd = false;
      result.proctimeEnd_ = "";
      return this;
    }
    
    public bool HasUsername {
      get { return result.hasUsername; }
    }
    public string Username {
      get { return result.Username; }
      set { SetUsername(value); }
    }
    public Builder SetUsername(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsername = true;
      result.username_ = value;
      return this;
    }
    public Builder ClearUsername() {
      PrepareBuilder();
      result.hasUsername = false;
      result.username_ = "";
      return this;
    }
  }
  static CSOrderList() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCOrderList : pb::GeneratedMessage<SCOrderList, SCOrderList.Builder> {
  private SCOrderList() { }
  private static readonly SCOrderList defaultInstance = new SCOrderList().MakeReadOnly();
  private static readonly string[] _sCOrderListFieldNames = new string[] { "orders" };
  private static readonly uint[] _sCOrderListFieldTags = new uint[] { 10 };
  public static SCOrderList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCOrderList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCOrderList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCOrderList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCOrderList, SCOrderList.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCOrderList__FieldAccessorTable; }
  }
  
  public const int OrdersFieldNumber = 1;
  private pbc::PopsicleList<global::StructOrder> orders_ = new pbc::PopsicleList<global::StructOrder>();
  public scg::IList<global::StructOrder> OrdersList {
    get { return orders_; }
  }
  public int OrdersCount {
    get { return orders_.Count; }
  }
  public global::StructOrder GetOrders(int index) {
    return orders_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructOrder element in OrdersList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCOrderListFieldNames;
    if (orders_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], orders_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructOrder element in OrdersList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCOrderList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOrderList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOrderList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOrderList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOrderList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOrderList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCOrderList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCOrderList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCOrderList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOrderList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCOrderList MakeReadOnly() {
    orders_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCOrderList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCOrderList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCOrderList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCOrderList result;
    
    private SCOrderList PrepareBuilder() {
      if (resultIsReadOnly) {
        SCOrderList original = result;
        result = new SCOrderList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCOrderList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCOrderList.Descriptor; }
    }
    
    public override SCOrderList DefaultInstanceForType {
      get { return global::SCOrderList.DefaultInstance; }
    }
    
    public override SCOrderList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCOrderList) {
        return MergeFrom((SCOrderList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCOrderList other) {
      if (other == global::SCOrderList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.orders_.Count != 0) {
        result.orders_.Add(other.orders_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCOrderListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCOrderListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.orders_, global::StructOrder.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructOrder> OrdersList {
      get { return PrepareBuilder().orders_; }
    }
    public int OrdersCount {
      get { return result.OrdersCount; }
    }
    public global::StructOrder GetOrders(int index) {
      return result.GetOrders(index);
    }
    public Builder SetOrders(int index, global::StructOrder value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.orders_[index] = value;
      return this;
    }
    public Builder SetOrders(int index, global::StructOrder.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.orders_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddOrders(global::StructOrder value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.orders_.Add(value);
      return this;
    }
    public Builder AddOrders(global::StructOrder.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.orders_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeOrders(scg::IEnumerable<global::StructOrder> values) {
      PrepareBuilder();
      result.orders_.Add(values);
      return this;
    }
    public Builder ClearOrders() {
      PrepareBuilder();
      result.orders_.Clear();
      return this;
    }
  }
  static SCOrderList() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSOrderDetail : pb::GeneratedMessage<CSOrderDetail, CSOrderDetail.Builder> {
  private CSOrderDetail() { }
  private static readonly CSOrderDetail defaultInstance = new CSOrderDetail().MakeReadOnly();
  private static readonly string[] _cSOrderDetailFieldNames = new string[] { "orderid" };
  private static readonly uint[] _cSOrderDetailFieldTags = new uint[] { 8 };
  public static CSOrderDetail DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSOrderDetail DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSOrderDetail ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSOrderDetail__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSOrderDetail, CSOrderDetail.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSOrderDetail__FieldAccessorTable; }
  }
  
  public const int OrderidFieldNumber = 1;
  private bool hasOrderid;
  private int orderid_;
  public bool HasOrderid {
    get { return hasOrderid; }
  }
  public int Orderid {
    get { return orderid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOrderid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSOrderDetailFieldNames;
    if (hasOrderid) {
      output.WriteInt32(1, field_names[0], Orderid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOrderid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Orderid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSOrderDetail ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSOrderDetail ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSOrderDetail ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOrderDetail ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSOrderDetail MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSOrderDetail prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSOrderDetail, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSOrderDetail cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSOrderDetail result;
    
    private CSOrderDetail PrepareBuilder() {
      if (resultIsReadOnly) {
        CSOrderDetail original = result;
        result = new CSOrderDetail();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSOrderDetail MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSOrderDetail.Descriptor; }
    }
    
    public override CSOrderDetail DefaultInstanceForType {
      get { return global::CSOrderDetail.DefaultInstance; }
    }
    
    public override CSOrderDetail BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSOrderDetail) {
        return MergeFrom((CSOrderDetail) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSOrderDetail other) {
      if (other == global::CSOrderDetail.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOrderid) {
        Orderid = other.Orderid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSOrderDetailFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSOrderDetailFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasOrderid = input.ReadInt32(ref result.orderid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOrderid {
      get { return result.hasOrderid; }
    }
    public int Orderid {
      get { return result.Orderid; }
      set { SetOrderid(value); }
    }
    public Builder SetOrderid(int value) {
      PrepareBuilder();
      result.hasOrderid = true;
      result.orderid_ = value;
      return this;
    }
    public Builder ClearOrderid() {
      PrepareBuilder();
      result.hasOrderid = false;
      result.orderid_ = 0;
      return this;
    }
  }
  static CSOrderDetail() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCOrderDetail : pb::GeneratedMessage<SCOrderDetail, SCOrderDetail.Builder> {
  private SCOrderDetail() { }
  private static readonly SCOrderDetail defaultInstance = new SCOrderDetail().MakeReadOnly();
  private static readonly string[] _sCOrderDetailFieldNames = new string[] { "details" };
  private static readonly uint[] _sCOrderDetailFieldTags = new uint[] { 10 };
  public static SCOrderDetail DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCOrderDetail DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCOrderDetail ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCOrderDetail__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCOrderDetail, SCOrderDetail.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCOrderDetail__FieldAccessorTable; }
  }
  
  public const int DetailsFieldNumber = 1;
  private pbc::PopsicleList<global::StructOrderDetail> details_ = new pbc::PopsicleList<global::StructOrderDetail>();
  public scg::IList<global::StructOrderDetail> DetailsList {
    get { return details_; }
  }
  public int DetailsCount {
    get { return details_.Count; }
  }
  public global::StructOrderDetail GetDetails(int index) {
    return details_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructOrderDetail element in DetailsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCOrderDetailFieldNames;
    if (details_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], details_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructOrderDetail element in DetailsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCOrderDetail ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCOrderDetail ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCOrderDetail ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOrderDetail ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCOrderDetail MakeReadOnly() {
    details_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCOrderDetail prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCOrderDetail, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCOrderDetail cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCOrderDetail result;
    
    private SCOrderDetail PrepareBuilder() {
      if (resultIsReadOnly) {
        SCOrderDetail original = result;
        result = new SCOrderDetail();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCOrderDetail MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCOrderDetail.Descriptor; }
    }
    
    public override SCOrderDetail DefaultInstanceForType {
      get { return global::SCOrderDetail.DefaultInstance; }
    }
    
    public override SCOrderDetail BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCOrderDetail) {
        return MergeFrom((SCOrderDetail) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCOrderDetail other) {
      if (other == global::SCOrderDetail.DefaultInstance) return this;
      PrepareBuilder();
      if (other.details_.Count != 0) {
        result.details_.Add(other.details_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCOrderDetailFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCOrderDetailFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.details_, global::StructOrderDetail.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructOrderDetail> DetailsList {
      get { return PrepareBuilder().details_; }
    }
    public int DetailsCount {
      get { return result.DetailsCount; }
    }
    public global::StructOrderDetail GetDetails(int index) {
      return result.GetDetails(index);
    }
    public Builder SetDetails(int index, global::StructOrderDetail value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.details_[index] = value;
      return this;
    }
    public Builder SetDetails(int index, global::StructOrderDetail.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.details_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddDetails(global::StructOrderDetail value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.details_.Add(value);
      return this;
    }
    public Builder AddDetails(global::StructOrderDetail.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.details_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeDetails(scg::IEnumerable<global::StructOrderDetail> values) {
      PrepareBuilder();
      result.details_.Add(values);
      return this;
    }
    public Builder ClearDetails() {
      PrepareBuilder();
      result.details_.Clear();
      return this;
    }
  }
  static SCOrderDetail() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCShiftDeliveredBy : pb::GeneratedMessage<SCShiftDeliveredBy, SCShiftDeliveredBy.Builder> {
  private SCShiftDeliveredBy() { }
  private static readonly SCShiftDeliveredBy defaultInstance = new SCShiftDeliveredBy().MakeReadOnly();
  private static readonly string[] _sCShiftDeliveredByFieldNames = new string[] { "charge_amount", "delivered_by", "sale_amount" };
  private static readonly uint[] _sCShiftDeliveredByFieldTags = new uint[] { 16, 10, 24 };
  public static SCShiftDeliveredBy DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCShiftDeliveredBy DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCShiftDeliveredBy ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCShiftDeliveredBy__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCShiftDeliveredBy, SCShiftDeliveredBy.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCShiftDeliveredBy__FieldAccessorTable; }
  }
  
  public const int DeliveredByFieldNumber = 1;
  private bool hasDeliveredBy;
  private string deliveredBy_ = "";
  public bool HasDeliveredBy {
    get { return hasDeliveredBy; }
  }
  public string DeliveredBy {
    get { return deliveredBy_; }
  }
  
  public const int ChargeAmountFieldNumber = 2;
  private bool hasChargeAmount;
  private int chargeAmount_;
  public bool HasChargeAmount {
    get { return hasChargeAmount; }
  }
  public int ChargeAmount {
    get { return chargeAmount_; }
  }
  
  public const int SaleAmountFieldNumber = 3;
  private bool hasSaleAmount;
  private int saleAmount_;
  public bool HasSaleAmount {
    get { return hasSaleAmount; }
  }
  public int SaleAmount {
    get { return saleAmount_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasDeliveredBy) return false;
      if (!hasChargeAmount) return false;
      if (!hasSaleAmount) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCShiftDeliveredByFieldNames;
    if (hasDeliveredBy) {
      output.WriteString(1, field_names[1], DeliveredBy);
    }
    if (hasChargeAmount) {
      output.WriteInt32(2, field_names[0], ChargeAmount);
    }
    if (hasSaleAmount) {
      output.WriteInt32(3, field_names[2], SaleAmount);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasDeliveredBy) {
      size += pb::CodedOutputStream.ComputeStringSize(1, DeliveredBy);
    }
    if (hasChargeAmount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, ChargeAmount);
    }
    if (hasSaleAmount) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, SaleAmount);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCShiftDeliveredBy ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCShiftDeliveredBy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCShiftDeliveredBy MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCShiftDeliveredBy prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCShiftDeliveredBy, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCShiftDeliveredBy cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCShiftDeliveredBy result;
    
    private SCShiftDeliveredBy PrepareBuilder() {
      if (resultIsReadOnly) {
        SCShiftDeliveredBy original = result;
        result = new SCShiftDeliveredBy();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCShiftDeliveredBy MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCShiftDeliveredBy.Descriptor; }
    }
    
    public override SCShiftDeliveredBy DefaultInstanceForType {
      get { return global::SCShiftDeliveredBy.DefaultInstance; }
    }
    
    public override SCShiftDeliveredBy BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCShiftDeliveredBy) {
        return MergeFrom((SCShiftDeliveredBy) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCShiftDeliveredBy other) {
      if (other == global::SCShiftDeliveredBy.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasDeliveredBy) {
        DeliveredBy = other.DeliveredBy;
      }
      if (other.HasChargeAmount) {
        ChargeAmount = other.ChargeAmount;
      }
      if (other.HasSaleAmount) {
        SaleAmount = other.SaleAmount;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCShiftDeliveredByFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCShiftDeliveredByFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasDeliveredBy = input.ReadString(ref result.deliveredBy_);
            break;
          }
          case 16: {
            result.hasChargeAmount = input.ReadInt32(ref result.chargeAmount_);
            break;
          }
          case 24: {
            result.hasSaleAmount = input.ReadInt32(ref result.saleAmount_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasDeliveredBy {
      get { return result.hasDeliveredBy; }
    }
    public string DeliveredBy {
      get { return result.DeliveredBy; }
      set { SetDeliveredBy(value); }
    }
    public Builder SetDeliveredBy(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDeliveredBy = true;
      result.deliveredBy_ = value;
      return this;
    }
    public Builder ClearDeliveredBy() {
      PrepareBuilder();
      result.hasDeliveredBy = false;
      result.deliveredBy_ = "";
      return this;
    }
    
    public bool HasChargeAmount {
      get { return result.hasChargeAmount; }
    }
    public int ChargeAmount {
      get { return result.ChargeAmount; }
      set { SetChargeAmount(value); }
    }
    public Builder SetChargeAmount(int value) {
      PrepareBuilder();
      result.hasChargeAmount = true;
      result.chargeAmount_ = value;
      return this;
    }
    public Builder ClearChargeAmount() {
      PrepareBuilder();
      result.hasChargeAmount = false;
      result.chargeAmount_ = 0;
      return this;
    }
    
    public bool HasSaleAmount {
      get { return result.hasSaleAmount; }
    }
    public int SaleAmount {
      get { return result.SaleAmount; }
      set { SetSaleAmount(value); }
    }
    public Builder SetSaleAmount(int value) {
      PrepareBuilder();
      result.hasSaleAmount = true;
      result.saleAmount_ = value;
      return this;
    }
    public Builder ClearSaleAmount() {
      PrepareBuilder();
      result.hasSaleAmount = false;
      result.saleAmount_ = 0;
      return this;
    }
  }
  static SCShiftDeliveredBy() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSShiftAdd : pb::GeneratedMessage<CSShiftAdd, CSShiftAdd.Builder> {
  private CSShiftAdd() { }
  private static readonly CSShiftAdd defaultInstance = new CSShiftAdd().MakeReadOnly();
  private static readonly string[] _cSShiftAddFieldNames = new string[] { "delivered_pwd", "ischeck", "received_by", "received_pwd", "remark" };
  private static readonly uint[] _cSShiftAddFieldTags = new uint[] { 10, 32, 18, 26, 42 };
  public static CSShiftAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSShiftAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSShiftAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSShiftAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSShiftAdd, CSShiftAdd.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSShiftAdd__FieldAccessorTable; }
  }
  
  public const int DeliveredPwdFieldNumber = 1;
  private bool hasDeliveredPwd;
  private string deliveredPwd_ = "";
  public bool HasDeliveredPwd {
    get { return hasDeliveredPwd; }
  }
  public string DeliveredPwd {
    get { return deliveredPwd_; }
  }
  
  public const int ReceivedByFieldNumber = 2;
  private bool hasReceivedBy;
  private string receivedBy_ = "";
  public bool HasReceivedBy {
    get { return hasReceivedBy; }
  }
  public string ReceivedBy {
    get { return receivedBy_; }
  }
  
  public const int ReceivedPwdFieldNumber = 3;
  private bool hasReceivedPwd;
  private string receivedPwd_ = "";
  public bool HasReceivedPwd {
    get { return hasReceivedPwd; }
  }
  public string ReceivedPwd {
    get { return receivedPwd_; }
  }
  
  public const int IscheckFieldNumber = 4;
  private bool hasIscheck;
  private int ischeck_;
  public bool HasIscheck {
    get { return hasIscheck; }
  }
  public int Ischeck {
    get { return ischeck_; }
  }
  
  public const int RemarkFieldNumber = 5;
  private bool hasRemark;
  private string remark_ = "";
  public bool HasRemark {
    get { return hasRemark; }
  }
  public string Remark {
    get { return remark_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasDeliveredPwd) return false;
      if (!hasReceivedBy) return false;
      if (!hasReceivedPwd) return false;
      if (!hasIscheck) return false;
      if (!hasRemark) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSShiftAddFieldNames;
    if (hasDeliveredPwd) {
      output.WriteString(1, field_names[0], DeliveredPwd);
    }
    if (hasReceivedBy) {
      output.WriteString(2, field_names[2], ReceivedBy);
    }
    if (hasReceivedPwd) {
      output.WriteString(3, field_names[3], ReceivedPwd);
    }
    if (hasIscheck) {
      output.WriteInt32(4, field_names[1], Ischeck);
    }
    if (hasRemark) {
      output.WriteString(5, field_names[4], Remark);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasDeliveredPwd) {
      size += pb::CodedOutputStream.ComputeStringSize(1, DeliveredPwd);
    }
    if (hasReceivedBy) {
      size += pb::CodedOutputStream.ComputeStringSize(2, ReceivedBy);
    }
    if (hasReceivedPwd) {
      size += pb::CodedOutputStream.ComputeStringSize(3, ReceivedPwd);
    }
    if (hasIscheck) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Ischeck);
    }
    if (hasRemark) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Remark);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSShiftAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSShiftAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSShiftAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSShiftAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSShiftAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSShiftAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSShiftAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSShiftAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSShiftAdd result;
    
    private CSShiftAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        CSShiftAdd original = result;
        result = new CSShiftAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSShiftAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSShiftAdd.Descriptor; }
    }
    
    public override CSShiftAdd DefaultInstanceForType {
      get { return global::CSShiftAdd.DefaultInstance; }
    }
    
    public override CSShiftAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSShiftAdd) {
        return MergeFrom((CSShiftAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSShiftAdd other) {
      if (other == global::CSShiftAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasDeliveredPwd) {
        DeliveredPwd = other.DeliveredPwd;
      }
      if (other.HasReceivedBy) {
        ReceivedBy = other.ReceivedBy;
      }
      if (other.HasReceivedPwd) {
        ReceivedPwd = other.ReceivedPwd;
      }
      if (other.HasIscheck) {
        Ischeck = other.Ischeck;
      }
      if (other.HasRemark) {
        Remark = other.Remark;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSShiftAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSShiftAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasDeliveredPwd = input.ReadString(ref result.deliveredPwd_);
            break;
          }
          case 18: {
            result.hasReceivedBy = input.ReadString(ref result.receivedBy_);
            break;
          }
          case 26: {
            result.hasReceivedPwd = input.ReadString(ref result.receivedPwd_);
            break;
          }
          case 32: {
            result.hasIscheck = input.ReadInt32(ref result.ischeck_);
            break;
          }
          case 42: {
            result.hasRemark = input.ReadString(ref result.remark_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasDeliveredPwd {
      get { return result.hasDeliveredPwd; }
    }
    public string DeliveredPwd {
      get { return result.DeliveredPwd; }
      set { SetDeliveredPwd(value); }
    }
    public Builder SetDeliveredPwd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDeliveredPwd = true;
      result.deliveredPwd_ = value;
      return this;
    }
    public Builder ClearDeliveredPwd() {
      PrepareBuilder();
      result.hasDeliveredPwd = false;
      result.deliveredPwd_ = "";
      return this;
    }
    
    public bool HasReceivedBy {
      get { return result.hasReceivedBy; }
    }
    public string ReceivedBy {
      get { return result.ReceivedBy; }
      set { SetReceivedBy(value); }
    }
    public Builder SetReceivedBy(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasReceivedBy = true;
      result.receivedBy_ = value;
      return this;
    }
    public Builder ClearReceivedBy() {
      PrepareBuilder();
      result.hasReceivedBy = false;
      result.receivedBy_ = "";
      return this;
    }
    
    public bool HasReceivedPwd {
      get { return result.hasReceivedPwd; }
    }
    public string ReceivedPwd {
      get { return result.ReceivedPwd; }
      set { SetReceivedPwd(value); }
    }
    public Builder SetReceivedPwd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasReceivedPwd = true;
      result.receivedPwd_ = value;
      return this;
    }
    public Builder ClearReceivedPwd() {
      PrepareBuilder();
      result.hasReceivedPwd = false;
      result.receivedPwd_ = "";
      return this;
    }
    
    public bool HasIscheck {
      get { return result.hasIscheck; }
    }
    public int Ischeck {
      get { return result.Ischeck; }
      set { SetIscheck(value); }
    }
    public Builder SetIscheck(int value) {
      PrepareBuilder();
      result.hasIscheck = true;
      result.ischeck_ = value;
      return this;
    }
    public Builder ClearIscheck() {
      PrepareBuilder();
      result.hasIscheck = false;
      result.ischeck_ = 0;
      return this;
    }
    
    public bool HasRemark {
      get { return result.hasRemark; }
    }
    public string Remark {
      get { return result.Remark; }
      set { SetRemark(value); }
    }
    public Builder SetRemark(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRemark = true;
      result.remark_ = value;
      return this;
    }
    public Builder ClearRemark() {
      PrepareBuilder();
      result.hasRemark = false;
      result.remark_ = "";
      return this;
    }
  }
  static CSShiftAdd() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSShiftFind : pb::GeneratedMessage<CSShiftFind, CSShiftFind.Builder> {
  private CSShiftFind() { }
  private static readonly CSShiftFind defaultInstance = new CSShiftFind().MakeReadOnly();
  private static readonly string[] _cSShiftFindFieldNames = new string[] { "page", "starttime", "stoptime" };
  private static readonly uint[] _cSShiftFindFieldTags = new uint[] { 10, 18, 26 };
  public static CSShiftFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSShiftFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSShiftFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSShiftFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSShiftFind, CSShiftFind.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSShiftFind__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int StarttimeFieldNumber = 2;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int StoptimeFieldNumber = 3;
  private bool hasStoptime;
  private string stoptime_ = "";
  public bool HasStoptime {
    get { return hasStoptime; }
  }
  public string Stoptime {
    get { return stoptime_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSShiftFindFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[0], Page);
    }
    if (hasStarttime) {
      output.WriteString(2, field_names[1], Starttime);
    }
    if (hasStoptime) {
      output.WriteString(3, field_names[2], Stoptime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Starttime);
    }
    if (hasStoptime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Stoptime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSShiftFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSShiftFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSShiftFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSShiftFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSShiftFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSShiftFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSShiftFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSShiftFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSShiftFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSShiftFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSShiftFind MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSShiftFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSShiftFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSShiftFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSShiftFind result;
    
    private CSShiftFind PrepareBuilder() {
      if (resultIsReadOnly) {
        CSShiftFind original = result;
        result = new CSShiftFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSShiftFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSShiftFind.Descriptor; }
    }
    
    public override CSShiftFind DefaultInstanceForType {
      get { return global::CSShiftFind.DefaultInstance; }
    }
    
    public override CSShiftFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSShiftFind) {
        return MergeFrom((CSShiftFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSShiftFind other) {
      if (other == global::CSShiftFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasStoptime) {
        Stoptime = other.Stoptime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSShiftFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSShiftFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 26: {
            result.hasStoptime = input.ReadString(ref result.stoptime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasStoptime {
      get { return result.hasStoptime; }
    }
    public string Stoptime {
      get { return result.Stoptime; }
      set { SetStoptime(value); }
    }
    public Builder SetStoptime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStoptime = true;
      result.stoptime_ = value;
      return this;
    }
    public Builder ClearStoptime() {
      PrepareBuilder();
      result.hasStoptime = false;
      result.stoptime_ = "";
      return this;
    }
  }
  static CSShiftFind() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCShiftFind : pb::GeneratedMessage<SCShiftFind, SCShiftFind.Builder> {
  private SCShiftFind() { }
  private static readonly SCShiftFind defaultInstance = new SCShiftFind().MakeReadOnly();
  private static readonly string[] _sCShiftFindFieldNames = new string[] { "shifts" };
  private static readonly uint[] _sCShiftFindFieldTags = new uint[] { 10 };
  public static SCShiftFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCShiftFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCShiftFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCShiftFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCShiftFind, SCShiftFind.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCShiftFind__FieldAccessorTable; }
  }
  
  public const int ShiftsFieldNumber = 1;
  private pbc::PopsicleList<global::StructShift> shifts_ = new pbc::PopsicleList<global::StructShift>();
  public scg::IList<global::StructShift> ShiftsList {
    get { return shifts_; }
  }
  public int ShiftsCount {
    get { return shifts_.Count; }
  }
  public global::StructShift GetShifts(int index) {
    return shifts_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StructShift element in ShiftsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCShiftFindFieldNames;
    if (shifts_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], shifts_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::StructShift element in ShiftsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCShiftFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCShiftFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCShiftFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCShiftFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCShiftFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCShiftFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCShiftFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCShiftFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCShiftFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCShiftFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCShiftFind MakeReadOnly() {
    shifts_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCShiftFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCShiftFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCShiftFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCShiftFind result;
    
    private SCShiftFind PrepareBuilder() {
      if (resultIsReadOnly) {
        SCShiftFind original = result;
        result = new SCShiftFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCShiftFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCShiftFind.Descriptor; }
    }
    
    public override SCShiftFind DefaultInstanceForType {
      get { return global::SCShiftFind.DefaultInstance; }
    }
    
    public override SCShiftFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCShiftFind) {
        return MergeFrom((SCShiftFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCShiftFind other) {
      if (other == global::SCShiftFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.shifts_.Count != 0) {
        result.shifts_.Add(other.shifts_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCShiftFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCShiftFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.shifts_, global::StructShift.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StructShift> ShiftsList {
      get { return PrepareBuilder().shifts_; }
    }
    public int ShiftsCount {
      get { return result.ShiftsCount; }
    }
    public global::StructShift GetShifts(int index) {
      return result.GetShifts(index);
    }
    public Builder SetShifts(int index, global::StructShift value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.shifts_[index] = value;
      return this;
    }
    public Builder SetShifts(int index, global::StructShift.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.shifts_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddShifts(global::StructShift value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.shifts_.Add(value);
      return this;
    }
    public Builder AddShifts(global::StructShift.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.shifts_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeShifts(scg::IEnumerable<global::StructShift> values) {
      PrepareBuilder();
      result.shifts_.Add(values);
      return this;
    }
    public Builder ClearShifts() {
      PrepareBuilder();
      result.shifts_.Clear();
      return this;
    }
  }
  static SCShiftFind() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSQueryCharge : pb::GeneratedMessage<CSQueryCharge, CSQueryCharge.Builder> {
  private CSQueryCharge() { }
  private static readonly CSQueryCharge defaultInstance = new CSQueryCharge().MakeReadOnly();
  private static readonly string[] _cSQueryChargeFieldNames = new string[] { "name", "page", "paymode", "starttime", "stoptime" };
  private static readonly uint[] _cSQueryChargeFieldTags = new uint[] { 42, 10, 32, 18, 26 };
  public static CSQueryCharge DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSQueryCharge DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSQueryCharge ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSQueryCharge__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSQueryCharge, CSQueryCharge.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSQueryCharge__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int StarttimeFieldNumber = 2;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int StoptimeFieldNumber = 3;
  private bool hasStoptime;
  private string stoptime_ = "";
  public bool HasStoptime {
    get { return hasStoptime; }
  }
  public string Stoptime {
    get { return stoptime_; }
  }
  
  public const int PaymodeFieldNumber = 4;
  private bool hasPaymode;
  private int paymode_;
  public bool HasPaymode {
    get { return hasPaymode; }
  }
  public int Paymode {
    get { return paymode_; }
  }
  
  public const int NameFieldNumber = 5;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSQueryChargeFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[1], Page);
    }
    if (hasStarttime) {
      output.WriteString(2, field_names[3], Starttime);
    }
    if (hasStoptime) {
      output.WriteString(3, field_names[4], Stoptime);
    }
    if (hasPaymode) {
      output.WriteInt32(4, field_names[2], Paymode);
    }
    if (hasName) {
      output.WriteString(5, field_names[0], Name);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Starttime);
    }
    if (hasStoptime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Stoptime);
    }
    if (hasPaymode) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Paymode);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Name);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSQueryCharge ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSQueryCharge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSQueryCharge ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSQueryCharge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSQueryCharge ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSQueryCharge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSQueryCharge ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSQueryCharge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSQueryCharge ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSQueryCharge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSQueryCharge MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSQueryCharge prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSQueryCharge, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSQueryCharge cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSQueryCharge result;
    
    private CSQueryCharge PrepareBuilder() {
      if (resultIsReadOnly) {
        CSQueryCharge original = result;
        result = new CSQueryCharge();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSQueryCharge MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSQueryCharge.Descriptor; }
    }
    
    public override CSQueryCharge DefaultInstanceForType {
      get { return global::CSQueryCharge.DefaultInstance; }
    }
    
    public override CSQueryCharge BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSQueryCharge) {
        return MergeFrom((CSQueryCharge) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSQueryCharge other) {
      if (other == global::CSQueryCharge.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasStoptime) {
        Stoptime = other.Stoptime;
      }
      if (other.HasPaymode) {
        Paymode = other.Paymode;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSQueryChargeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSQueryChargeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 26: {
            result.hasStoptime = input.ReadString(ref result.stoptime_);
            break;
          }
          case 32: {
            result.hasPaymode = input.ReadInt32(ref result.paymode_);
            break;
          }
          case 42: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasStoptime {
      get { return result.hasStoptime; }
    }
    public string Stoptime {
      get { return result.Stoptime; }
      set { SetStoptime(value); }
    }
    public Builder SetStoptime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStoptime = true;
      result.stoptime_ = value;
      return this;
    }
    public Builder ClearStoptime() {
      PrepareBuilder();
      result.hasStoptime = false;
      result.stoptime_ = "";
      return this;
    }
    
    public bool HasPaymode {
      get { return result.hasPaymode; }
    }
    public int Paymode {
      get { return result.Paymode; }
      set { SetPaymode(value); }
    }
    public Builder SetPaymode(int value) {
      PrepareBuilder();
      result.hasPaymode = true;
      result.paymode_ = value;
      return this;
    }
    public Builder ClearPaymode() {
      PrepareBuilder();
      result.hasPaymode = false;
      result.paymode_ = 0;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
  }
  static CSQueryCharge() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCQueryCharge : pb::GeneratedMessage<SCQueryCharge, SCQueryCharge.Builder> {
  private SCQueryCharge() { }
  private static readonly SCQueryCharge defaultInstance = new SCQueryCharge().MakeReadOnly();
  private static readonly string[] _sCQueryChargeFieldNames = new string[] { "charges", "pagecount" };
  private static readonly uint[] _sCQueryChargeFieldTags = new uint[] { 18, 8 };
  public static SCQueryCharge DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCQueryCharge DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCQueryCharge ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCQueryCharge__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCQueryCharge, SCQueryCharge.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCQueryCharge__FieldAccessorTable; }
  }
  
  public const int PagecountFieldNumber = 1;
  private bool hasPagecount;
  private int pagecount_;
  public bool HasPagecount {
    get { return hasPagecount; }
  }
  public int Pagecount {
    get { return pagecount_; }
  }
  
  public const int ChargesFieldNumber = 2;
  private pbc::PopsicleList<global::StructCharge> charges_ = new pbc::PopsicleList<global::StructCharge>();
  public scg::IList<global::StructCharge> ChargesList {
    get { return charges_; }
  }
  public int ChargesCount {
    get { return charges_.Count; }
  }
  public global::StructCharge GetCharges(int index) {
    return charges_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPagecount) return false;
      foreach (global::StructCharge element in ChargesList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCQueryChargeFieldNames;
    if (hasPagecount) {
      output.WriteInt32(1, field_names[1], Pagecount);
    }
    if (charges_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], charges_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPagecount) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Pagecount);
    }
    foreach (global::StructCharge element in ChargesList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCQueryCharge ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCQueryCharge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCQueryCharge ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCQueryCharge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCQueryCharge ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCQueryCharge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCQueryCharge ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCQueryCharge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCQueryCharge ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCQueryCharge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCQueryCharge MakeReadOnly() {
    charges_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCQueryCharge prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCQueryCharge, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCQueryCharge cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCQueryCharge result;
    
    private SCQueryCharge PrepareBuilder() {
      if (resultIsReadOnly) {
        SCQueryCharge original = result;
        result = new SCQueryCharge();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCQueryCharge MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCQueryCharge.Descriptor; }
    }
    
    public override SCQueryCharge DefaultInstanceForType {
      get { return global::SCQueryCharge.DefaultInstance; }
    }
    
    public override SCQueryCharge BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCQueryCharge) {
        return MergeFrom((SCQueryCharge) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCQueryCharge other) {
      if (other == global::SCQueryCharge.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPagecount) {
        Pagecount = other.Pagecount;
      }
      if (other.charges_.Count != 0) {
        result.charges_.Add(other.charges_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCQueryChargeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCQueryChargeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPagecount = input.ReadInt32(ref result.pagecount_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.charges_, global::StructCharge.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPagecount {
      get { return result.hasPagecount; }
    }
    public int Pagecount {
      get { return result.Pagecount; }
      set { SetPagecount(value); }
    }
    public Builder SetPagecount(int value) {
      PrepareBuilder();
      result.hasPagecount = true;
      result.pagecount_ = value;
      return this;
    }
    public Builder ClearPagecount() {
      PrepareBuilder();
      result.hasPagecount = false;
      result.pagecount_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::StructCharge> ChargesList {
      get { return PrepareBuilder().charges_; }
    }
    public int ChargesCount {
      get { return result.ChargesCount; }
    }
    public global::StructCharge GetCharges(int index) {
      return result.GetCharges(index);
    }
    public Builder SetCharges(int index, global::StructCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.charges_[index] = value;
      return this;
    }
    public Builder SetCharges(int index, global::StructCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.charges_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddCharges(global::StructCharge value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.charges_.Add(value);
      return this;
    }
    public Builder AddCharges(global::StructCharge.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.charges_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeCharges(scg::IEnumerable<global::StructCharge> values) {
      PrepareBuilder();
      result.charges_.Add(values);
      return this;
    }
    public Builder ClearCharges() {
      PrepareBuilder();
      result.charges_.Clear();
      return this;
    }
  }
  static SCQueryCharge() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSQueryEmk : pb::GeneratedMessage<CSQueryEmk, CSQueryEmk.Builder> {
  private CSQueryEmk() { }
  private static readonly CSQueryEmk defaultInstance = new CSQueryEmk().MakeReadOnly();
  private static readonly string[] _cSQueryEmkFieldNames = new string[] { "computerid", "memberid", "name", "page", "starttime", "stoptime" };
  private static readonly uint[] _cSQueryEmkFieldTags = new uint[] { 48, 40, 34, 10, 18, 26 };
  public static CSQueryEmk DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSQueryEmk DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSQueryEmk ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSQueryEmk__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSQueryEmk, CSQueryEmk.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSQueryEmk__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int StarttimeFieldNumber = 2;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int StoptimeFieldNumber = 3;
  private bool hasStoptime;
  private string stoptime_ = "";
  public bool HasStoptime {
    get { return hasStoptime; }
  }
  public string Stoptime {
    get { return stoptime_; }
  }
  
  public const int NameFieldNumber = 4;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int MemberidFieldNumber = 5;
  private bool hasMemberid;
  private int memberid_;
  public bool HasMemberid {
    get { return hasMemberid; }
  }
  public int Memberid {
    get { return memberid_; }
  }
  
  public const int ComputeridFieldNumber = 6;
  private bool hasComputerid;
  private int computerid_;
  public bool HasComputerid {
    get { return hasComputerid; }
  }
  public int Computerid {
    get { return computerid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSQueryEmkFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[3], Page);
    }
    if (hasStarttime) {
      output.WriteString(2, field_names[4], Starttime);
    }
    if (hasStoptime) {
      output.WriteString(3, field_names[5], Stoptime);
    }
    if (hasName) {
      output.WriteString(4, field_names[2], Name);
    }
    if (hasMemberid) {
      output.WriteInt32(5, field_names[1], Memberid);
    }
    if (hasComputerid) {
      output.WriteInt32(6, field_names[0], Computerid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Starttime);
    }
    if (hasStoptime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Stoptime);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Name);
    }
    if (hasMemberid) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Memberid);
    }
    if (hasComputerid) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Computerid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSQueryEmk ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSQueryEmk ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSQueryEmk ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSQueryEmk ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSQueryEmk ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSQueryEmk ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSQueryEmk ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSQueryEmk ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSQueryEmk ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSQueryEmk ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSQueryEmk MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSQueryEmk prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSQueryEmk, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSQueryEmk cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSQueryEmk result;
    
    private CSQueryEmk PrepareBuilder() {
      if (resultIsReadOnly) {
        CSQueryEmk original = result;
        result = new CSQueryEmk();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSQueryEmk MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSQueryEmk.Descriptor; }
    }
    
    public override CSQueryEmk DefaultInstanceForType {
      get { return global::CSQueryEmk.DefaultInstance; }
    }
    
    public override CSQueryEmk BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSQueryEmk) {
        return MergeFrom((CSQueryEmk) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSQueryEmk other) {
      if (other == global::CSQueryEmk.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasStoptime) {
        Stoptime = other.Stoptime;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasMemberid) {
        Memberid = other.Memberid;
      }
      if (other.HasComputerid) {
        Computerid = other.Computerid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSQueryEmkFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSQueryEmkFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 26: {
            result.hasStoptime = input.ReadString(ref result.stoptime_);
            break;
          }
          case 34: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 40: {
            result.hasMemberid = input.ReadInt32(ref result.memberid_);
            break;
          }
          case 48: {
            result.hasComputerid = input.ReadInt32(ref result.computerid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasStoptime {
      get { return result.hasStoptime; }
    }
    public string Stoptime {
      get { return result.Stoptime; }
      set { SetStoptime(value); }
    }
    public Builder SetStoptime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStoptime = true;
      result.stoptime_ = value;
      return this;
    }
    public Builder ClearStoptime() {
      PrepareBuilder();
      result.hasStoptime = false;
      result.stoptime_ = "";
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasMemberid {
      get { return result.hasMemberid; }
    }
    public int Memberid {
      get { return result.Memberid; }
      set { SetMemberid(value); }
    }
    public Builder SetMemberid(int value) {
      PrepareBuilder();
      result.hasMemberid = true;
      result.memberid_ = value;
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.hasMemberid = false;
      result.memberid_ = 0;
      return this;
    }
    
    public bool HasComputerid {
      get { return result.hasComputerid; }
    }
    public int Computerid {
      get { return result.Computerid; }
      set { SetComputerid(value); }
    }
    public Builder SetComputerid(int value) {
      PrepareBuilder();
      result.hasComputerid = true;
      result.computerid_ = value;
      return this;
    }
    public Builder ClearComputerid() {
      PrepareBuilder();
      result.hasComputerid = false;
      result.computerid_ = 0;
      return this;
    }
  }
  static CSQueryEmk() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCQueryEmk : pb::GeneratedMessage<SCQueryEmk, SCQueryEmk.Builder> {
  private SCQueryEmk() { }
  private static readonly SCQueryEmk defaultInstance = new SCQueryEmk().MakeReadOnly();
  private static readonly string[] _sCQueryEmkFieldNames = new string[] { "emks", "pagecount" };
  private static readonly uint[] _sCQueryEmkFieldTags = new uint[] { 18, 8 };
  public static SCQueryEmk DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCQueryEmk DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCQueryEmk ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCQueryEmk__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCQueryEmk, SCQueryEmk.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCQueryEmk__FieldAccessorTable; }
  }
  
  public const int PagecountFieldNumber = 1;
  private bool hasPagecount;
  private int pagecount_;
  public bool HasPagecount {
    get { return hasPagecount; }
  }
  public int Pagecount {
    get { return pagecount_; }
  }
  
  public const int EmksFieldNumber = 2;
  private pbc::PopsicleList<global::StructEmbarkation> emks_ = new pbc::PopsicleList<global::StructEmbarkation>();
  public scg::IList<global::StructEmbarkation> EmksList {
    get { return emks_; }
  }
  public int EmksCount {
    get { return emks_.Count; }
  }
  public global::StructEmbarkation GetEmks(int index) {
    return emks_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPagecount) return false;
      foreach (global::StructEmbarkation element in EmksList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCQueryEmkFieldNames;
    if (hasPagecount) {
      output.WriteInt32(1, field_names[1], Pagecount);
    }
    if (emks_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], emks_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPagecount) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Pagecount);
    }
    foreach (global::StructEmbarkation element in EmksList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCQueryEmk ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCQueryEmk ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCQueryEmk ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCQueryEmk ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCQueryEmk ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCQueryEmk ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCQueryEmk ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCQueryEmk ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCQueryEmk ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCQueryEmk ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCQueryEmk MakeReadOnly() {
    emks_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCQueryEmk prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCQueryEmk, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCQueryEmk cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCQueryEmk result;
    
    private SCQueryEmk PrepareBuilder() {
      if (resultIsReadOnly) {
        SCQueryEmk original = result;
        result = new SCQueryEmk();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCQueryEmk MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCQueryEmk.Descriptor; }
    }
    
    public override SCQueryEmk DefaultInstanceForType {
      get { return global::SCQueryEmk.DefaultInstance; }
    }
    
    public override SCQueryEmk BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCQueryEmk) {
        return MergeFrom((SCQueryEmk) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCQueryEmk other) {
      if (other == global::SCQueryEmk.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPagecount) {
        Pagecount = other.Pagecount;
      }
      if (other.emks_.Count != 0) {
        result.emks_.Add(other.emks_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCQueryEmkFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCQueryEmkFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPagecount = input.ReadInt32(ref result.pagecount_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.emks_, global::StructEmbarkation.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPagecount {
      get { return result.hasPagecount; }
    }
    public int Pagecount {
      get { return result.Pagecount; }
      set { SetPagecount(value); }
    }
    public Builder SetPagecount(int value) {
      PrepareBuilder();
      result.hasPagecount = true;
      result.pagecount_ = value;
      return this;
    }
    public Builder ClearPagecount() {
      PrepareBuilder();
      result.hasPagecount = false;
      result.pagecount_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::StructEmbarkation> EmksList {
      get { return PrepareBuilder().emks_; }
    }
    public int EmksCount {
      get { return result.EmksCount; }
    }
    public global::StructEmbarkation GetEmks(int index) {
      return result.GetEmks(index);
    }
    public Builder SetEmks(int index, global::StructEmbarkation value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.emks_[index] = value;
      return this;
    }
    public Builder SetEmks(int index, global::StructEmbarkation.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.emks_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddEmks(global::StructEmbarkation value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.emks_.Add(value);
      return this;
    }
    public Builder AddEmks(global::StructEmbarkation.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.emks_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeEmks(scg::IEnumerable<global::StructEmbarkation> values) {
      PrepareBuilder();
      result.emks_.Add(values);
      return this;
    }
    public Builder ClearEmks() {
      PrepareBuilder();
      result.emks_.Clear();
      return this;
    }
  }
  static SCQueryEmk() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSQueryConsum : pb::GeneratedMessage<CSQueryConsum, CSQueryConsum.Builder> {
  private CSQueryConsum() { }
  private static readonly CSQueryConsum defaultInstance = new CSQueryConsum().MakeReadOnly();
  private static readonly string[] _cSQueryConsumFieldNames = new string[] { "memberid", "page", "paymode", "starttime", "stoptime", "usage" };
  private static readonly uint[] _cSQueryConsumFieldTags = new uint[] { 48, 10, 40, 18, 26, 32 };
  public static CSQueryConsum DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSQueryConsum DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSQueryConsum ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSQueryConsum__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSQueryConsum, CSQueryConsum.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSQueryConsum__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int StarttimeFieldNumber = 2;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int StoptimeFieldNumber = 3;
  private bool hasStoptime;
  private string stoptime_ = "";
  public bool HasStoptime {
    get { return hasStoptime; }
  }
  public string Stoptime {
    get { return stoptime_; }
  }
  
  public const int UsageFieldNumber = 4;
  private bool hasUsage;
  private int usage_;
  public bool HasUsage {
    get { return hasUsage; }
  }
  public int Usage {
    get { return usage_; }
  }
  
  public const int PaymodeFieldNumber = 5;
  private bool hasPaymode;
  private int paymode_;
  public bool HasPaymode {
    get { return hasPaymode; }
  }
  public int Paymode {
    get { return paymode_; }
  }
  
  public const int MemberidFieldNumber = 6;
  private bool hasMemberid;
  private int memberid_;
  public bool HasMemberid {
    get { return hasMemberid; }
  }
  public int Memberid {
    get { return memberid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSQueryConsumFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[1], Page);
    }
    if (hasStarttime) {
      output.WriteString(2, field_names[3], Starttime);
    }
    if (hasStoptime) {
      output.WriteString(3, field_names[4], Stoptime);
    }
    if (hasUsage) {
      output.WriteInt32(4, field_names[5], Usage);
    }
    if (hasPaymode) {
      output.WriteInt32(5, field_names[2], Paymode);
    }
    if (hasMemberid) {
      output.WriteInt32(6, field_names[0], Memberid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Starttime);
    }
    if (hasStoptime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Stoptime);
    }
    if (hasUsage) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Usage);
    }
    if (hasPaymode) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Paymode);
    }
    if (hasMemberid) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Memberid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSQueryConsum ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSQueryConsum ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSQueryConsum ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSQueryConsum ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSQueryConsum ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSQueryConsum ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSQueryConsum ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSQueryConsum ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSQueryConsum ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSQueryConsum ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSQueryConsum MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSQueryConsum prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSQueryConsum, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSQueryConsum cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSQueryConsum result;
    
    private CSQueryConsum PrepareBuilder() {
      if (resultIsReadOnly) {
        CSQueryConsum original = result;
        result = new CSQueryConsum();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSQueryConsum MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSQueryConsum.Descriptor; }
    }
    
    public override CSQueryConsum DefaultInstanceForType {
      get { return global::CSQueryConsum.DefaultInstance; }
    }
    
    public override CSQueryConsum BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSQueryConsum) {
        return MergeFrom((CSQueryConsum) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSQueryConsum other) {
      if (other == global::CSQueryConsum.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasStoptime) {
        Stoptime = other.Stoptime;
      }
      if (other.HasUsage) {
        Usage = other.Usage;
      }
      if (other.HasPaymode) {
        Paymode = other.Paymode;
      }
      if (other.HasMemberid) {
        Memberid = other.Memberid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSQueryConsumFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSQueryConsumFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 26: {
            result.hasStoptime = input.ReadString(ref result.stoptime_);
            break;
          }
          case 32: {
            result.hasUsage = input.ReadInt32(ref result.usage_);
            break;
          }
          case 40: {
            result.hasPaymode = input.ReadInt32(ref result.paymode_);
            break;
          }
          case 48: {
            result.hasMemberid = input.ReadInt32(ref result.memberid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasStoptime {
      get { return result.hasStoptime; }
    }
    public string Stoptime {
      get { return result.Stoptime; }
      set { SetStoptime(value); }
    }
    public Builder SetStoptime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStoptime = true;
      result.stoptime_ = value;
      return this;
    }
    public Builder ClearStoptime() {
      PrepareBuilder();
      result.hasStoptime = false;
      result.stoptime_ = "";
      return this;
    }
    
    public bool HasUsage {
      get { return result.hasUsage; }
    }
    public int Usage {
      get { return result.Usage; }
      set { SetUsage(value); }
    }
    public Builder SetUsage(int value) {
      PrepareBuilder();
      result.hasUsage = true;
      result.usage_ = value;
      return this;
    }
    public Builder ClearUsage() {
      PrepareBuilder();
      result.hasUsage = false;
      result.usage_ = 0;
      return this;
    }
    
    public bool HasPaymode {
      get { return result.hasPaymode; }
    }
    public int Paymode {
      get { return result.Paymode; }
      set { SetPaymode(value); }
    }
    public Builder SetPaymode(int value) {
      PrepareBuilder();
      result.hasPaymode = true;
      result.paymode_ = value;
      return this;
    }
    public Builder ClearPaymode() {
      PrepareBuilder();
      result.hasPaymode = false;
      result.paymode_ = 0;
      return this;
    }
    
    public bool HasMemberid {
      get { return result.hasMemberid; }
    }
    public int Memberid {
      get { return result.Memberid; }
      set { SetMemberid(value); }
    }
    public Builder SetMemberid(int value) {
      PrepareBuilder();
      result.hasMemberid = true;
      result.memberid_ = value;
      return this;
    }
    public Builder ClearMemberid() {
      PrepareBuilder();
      result.hasMemberid = false;
      result.memberid_ = 0;
      return this;
    }
  }
  static CSQueryConsum() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCQueryConsum : pb::GeneratedMessage<SCQueryConsum, SCQueryConsum.Builder> {
  private SCQueryConsum() { }
  private static readonly SCQueryConsum defaultInstance = new SCQueryConsum().MakeReadOnly();
  private static readonly string[] _sCQueryConsumFieldNames = new string[] { "consums", "pagecount" };
  private static readonly uint[] _sCQueryConsumFieldTags = new uint[] { 18, 8 };
  public static SCQueryConsum DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCQueryConsum DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCQueryConsum ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCQueryConsum__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCQueryConsum, SCQueryConsum.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCQueryConsum__FieldAccessorTable; }
  }
  
  public const int PagecountFieldNumber = 1;
  private bool hasPagecount;
  private int pagecount_;
  public bool HasPagecount {
    get { return hasPagecount; }
  }
  public int Pagecount {
    get { return pagecount_; }
  }
  
  public const int ConsumsFieldNumber = 2;
  private pbc::PopsicleList<global::StructConsum> consums_ = new pbc::PopsicleList<global::StructConsum>();
  public scg::IList<global::StructConsum> ConsumsList {
    get { return consums_; }
  }
  public int ConsumsCount {
    get { return consums_.Count; }
  }
  public global::StructConsum GetConsums(int index) {
    return consums_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPagecount) return false;
      foreach (global::StructConsum element in ConsumsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCQueryConsumFieldNames;
    if (hasPagecount) {
      output.WriteInt32(1, field_names[1], Pagecount);
    }
    if (consums_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], consums_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPagecount) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Pagecount);
    }
    foreach (global::StructConsum element in ConsumsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCQueryConsum ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCQueryConsum ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCQueryConsum ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCQueryConsum ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCQueryConsum ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCQueryConsum ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCQueryConsum ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCQueryConsum ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCQueryConsum ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCQueryConsum ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCQueryConsum MakeReadOnly() {
    consums_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCQueryConsum prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCQueryConsum, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCQueryConsum cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCQueryConsum result;
    
    private SCQueryConsum PrepareBuilder() {
      if (resultIsReadOnly) {
        SCQueryConsum original = result;
        result = new SCQueryConsum();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCQueryConsum MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCQueryConsum.Descriptor; }
    }
    
    public override SCQueryConsum DefaultInstanceForType {
      get { return global::SCQueryConsum.DefaultInstance; }
    }
    
    public override SCQueryConsum BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCQueryConsum) {
        return MergeFrom((SCQueryConsum) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCQueryConsum other) {
      if (other == global::SCQueryConsum.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPagecount) {
        Pagecount = other.Pagecount;
      }
      if (other.consums_.Count != 0) {
        result.consums_.Add(other.consums_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCQueryConsumFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCQueryConsumFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPagecount = input.ReadInt32(ref result.pagecount_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.consums_, global::StructConsum.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPagecount {
      get { return result.hasPagecount; }
    }
    public int Pagecount {
      get { return result.Pagecount; }
      set { SetPagecount(value); }
    }
    public Builder SetPagecount(int value) {
      PrepareBuilder();
      result.hasPagecount = true;
      result.pagecount_ = value;
      return this;
    }
    public Builder ClearPagecount() {
      PrepareBuilder();
      result.hasPagecount = false;
      result.pagecount_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::StructConsum> ConsumsList {
      get { return PrepareBuilder().consums_; }
    }
    public int ConsumsCount {
      get { return result.ConsumsCount; }
    }
    public global::StructConsum GetConsums(int index) {
      return result.GetConsums(index);
    }
    public Builder SetConsums(int index, global::StructConsum value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.consums_[index] = value;
      return this;
    }
    public Builder SetConsums(int index, global::StructConsum.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.consums_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddConsums(global::StructConsum value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.consums_.Add(value);
      return this;
    }
    public Builder AddConsums(global::StructConsum.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.consums_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeConsums(scg::IEnumerable<global::StructConsum> values) {
      PrepareBuilder();
      result.consums_.Add(values);
      return this;
    }
    public Builder ClearConsums() {
      PrepareBuilder();
      result.consums_.Clear();
      return this;
    }
  }
  static SCQueryConsum() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSQueryApply : pb::GeneratedMessage<CSQueryApply, CSQueryApply.Builder> {
  private CSQueryApply() { }
  private static readonly CSQueryApply defaultInstance = new CSQueryApply().MakeReadOnly();
  private static readonly string[] _cSQueryApplyFieldNames = new string[] { "name", "operator", "page", "rightid", "starttime", "stoptime" };
  private static readonly uint[] _cSQueryApplyFieldTags = new uint[] { 50, 34, 10, 40, 18, 26 };
  public static CSQueryApply DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSQueryApply DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSQueryApply ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSQueryApply__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSQueryApply, CSQueryApply.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSQueryApply__FieldAccessorTable; }
  }
  
  public const int PageFieldNumber = 1;
  private bool hasPage;
  private global::StructPage page_;
  public bool HasPage {
    get { return hasPage; }
  }
  public global::StructPage Page {
    get { return page_ ?? global::StructPage.DefaultInstance; }
  }
  
  public const int StarttimeFieldNumber = 2;
  private bool hasStarttime;
  private string starttime_ = "";
  public bool HasStarttime {
    get { return hasStarttime; }
  }
  public string Starttime {
    get { return starttime_; }
  }
  
  public const int StoptimeFieldNumber = 3;
  private bool hasStoptime;
  private string stoptime_ = "";
  public bool HasStoptime {
    get { return hasStoptime; }
  }
  public string Stoptime {
    get { return stoptime_; }
  }
  
  public const int OperatorFieldNumber = 4;
  private bool hasOperator;
  private string operator_ = "";
  public bool HasOperator {
    get { return hasOperator; }
  }
  public string Operator {
    get { return operator_; }
  }
  
  public const int RightidFieldNumber = 5;
  private bool hasRightid;
  private int rightid_;
  public bool HasRightid {
    get { return hasRightid; }
  }
  public int Rightid {
    get { return rightid_; }
  }
  
  public const int NameFieldNumber = 6;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPage) return false;
      if (!Page.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSQueryApplyFieldNames;
    if (hasPage) {
      output.WriteMessage(1, field_names[2], Page);
    }
    if (hasStarttime) {
      output.WriteString(2, field_names[4], Starttime);
    }
    if (hasStoptime) {
      output.WriteString(3, field_names[5], Stoptime);
    }
    if (hasOperator) {
      output.WriteString(4, field_names[1], Operator);
    }
    if (hasRightid) {
      output.WriteInt32(5, field_names[3], Rightid);
    }
    if (hasName) {
      output.WriteString(6, field_names[0], Name);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPage) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Page);
    }
    if (hasStarttime) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Starttime);
    }
    if (hasStoptime) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Stoptime);
    }
    if (hasOperator) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Operator);
    }
    if (hasRightid) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Rightid);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Name);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSQueryApply ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSQueryApply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSQueryApply ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSQueryApply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSQueryApply ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSQueryApply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSQueryApply ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSQueryApply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSQueryApply ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSQueryApply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSQueryApply MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSQueryApply prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSQueryApply, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSQueryApply cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSQueryApply result;
    
    private CSQueryApply PrepareBuilder() {
      if (resultIsReadOnly) {
        CSQueryApply original = result;
        result = new CSQueryApply();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSQueryApply MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSQueryApply.Descriptor; }
    }
    
    public override CSQueryApply DefaultInstanceForType {
      get { return global::CSQueryApply.DefaultInstance; }
    }
    
    public override CSQueryApply BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSQueryApply) {
        return MergeFrom((CSQueryApply) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSQueryApply other) {
      if (other == global::CSQueryApply.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPage) {
        MergePage(other.Page);
      }
      if (other.HasStarttime) {
        Starttime = other.Starttime;
      }
      if (other.HasStoptime) {
        Stoptime = other.Stoptime;
      }
      if (other.HasOperator) {
        Operator = other.Operator;
      }
      if (other.HasRightid) {
        Rightid = other.Rightid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSQueryApplyFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSQueryApplyFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::StructPage.Builder subBuilder = global::StructPage.CreateBuilder();
            if (result.hasPage) {
              subBuilder.MergeFrom(Page);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Page = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasStarttime = input.ReadString(ref result.starttime_);
            break;
          }
          case 26: {
            result.hasStoptime = input.ReadString(ref result.stoptime_);
            break;
          }
          case 34: {
            result.hasOperator = input.ReadString(ref result.operator_);
            break;
          }
          case 40: {
            result.hasRightid = input.ReadInt32(ref result.rightid_);
            break;
          }
          case 50: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPage {
     get { return result.hasPage; }
    }
    public global::StructPage Page {
      get { return result.Page; }
      set { SetPage(value); }
    }
    public Builder SetPage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = value;
      return this;
    }
    public Builder SetPage(global::StructPage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPage = true;
      result.page_ = builderForValue.Build();
      return this;
    }
    public Builder MergePage(global::StructPage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPage &&
          result.page_ != global::StructPage.DefaultInstance) {
          result.page_ = global::StructPage.CreateBuilder(result.page_).MergeFrom(value).BuildPartial();
      } else {
        result.page_ = value;
      }
      result.hasPage = true;
      return this;
    }
    public Builder ClearPage() {
      PrepareBuilder();
      result.hasPage = false;
      result.page_ = null;
      return this;
    }
    
    public bool HasStarttime {
      get { return result.hasStarttime; }
    }
    public string Starttime {
      get { return result.Starttime; }
      set { SetStarttime(value); }
    }
    public Builder SetStarttime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStarttime = true;
      result.starttime_ = value;
      return this;
    }
    public Builder ClearStarttime() {
      PrepareBuilder();
      result.hasStarttime = false;
      result.starttime_ = "";
      return this;
    }
    
    public bool HasStoptime {
      get { return result.hasStoptime; }
    }
    public string Stoptime {
      get { return result.Stoptime; }
      set { SetStoptime(value); }
    }
    public Builder SetStoptime(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStoptime = true;
      result.stoptime_ = value;
      return this;
    }
    public Builder ClearStoptime() {
      PrepareBuilder();
      result.hasStoptime = false;
      result.stoptime_ = "";
      return this;
    }
    
    public bool HasOperator {
      get { return result.hasOperator; }
    }
    public string Operator {
      get { return result.Operator; }
      set { SetOperator(value); }
    }
    public Builder SetOperator(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOperator = true;
      result.operator_ = value;
      return this;
    }
    public Builder ClearOperator() {
      PrepareBuilder();
      result.hasOperator = false;
      result.operator_ = "";
      return this;
    }
    
    public bool HasRightid {
      get { return result.hasRightid; }
    }
    public int Rightid {
      get { return result.Rightid; }
      set { SetRightid(value); }
    }
    public Builder SetRightid(int value) {
      PrepareBuilder();
      result.hasRightid = true;
      result.rightid_ = value;
      return this;
    }
    public Builder ClearRightid() {
      PrepareBuilder();
      result.hasRightid = false;
      result.rightid_ = 0;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
  }
  static CSQueryApply() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCQueryApply : pb::GeneratedMessage<SCQueryApply, SCQueryApply.Builder> {
  private SCQueryApply() { }
  private static readonly SCQueryApply defaultInstance = new SCQueryApply().MakeReadOnly();
  private static readonly string[] _sCQueryApplyFieldNames = new string[] { "applys", "pagecount" };
  private static readonly uint[] _sCQueryApplyFieldTags = new uint[] { 18, 8 };
  public static SCQueryApply DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCQueryApply DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCQueryApply ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCQueryApply__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCQueryApply, SCQueryApply.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCQueryApply__FieldAccessorTable; }
  }
  
  public const int PagecountFieldNumber = 1;
  private bool hasPagecount;
  private int pagecount_;
  public bool HasPagecount {
    get { return hasPagecount; }
  }
  public int Pagecount {
    get { return pagecount_; }
  }
  
  public const int ApplysFieldNumber = 2;
  private pbc::PopsicleList<global::StructApply> applys_ = new pbc::PopsicleList<global::StructApply>();
  public scg::IList<global::StructApply> ApplysList {
    get { return applys_; }
  }
  public int ApplysCount {
    get { return applys_.Count; }
  }
  public global::StructApply GetApplys(int index) {
    return applys_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPagecount) return false;
      foreach (global::StructApply element in ApplysList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCQueryApplyFieldNames;
    if (hasPagecount) {
      output.WriteInt32(1, field_names[1], Pagecount);
    }
    if (applys_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], applys_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPagecount) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Pagecount);
    }
    foreach (global::StructApply element in ApplysList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCQueryApply ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCQueryApply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCQueryApply ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCQueryApply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCQueryApply ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCQueryApply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCQueryApply ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCQueryApply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCQueryApply ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCQueryApply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCQueryApply MakeReadOnly() {
    applys_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCQueryApply prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCQueryApply, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCQueryApply cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCQueryApply result;
    
    private SCQueryApply PrepareBuilder() {
      if (resultIsReadOnly) {
        SCQueryApply original = result;
        result = new SCQueryApply();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCQueryApply MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCQueryApply.Descriptor; }
    }
    
    public override SCQueryApply DefaultInstanceForType {
      get { return global::SCQueryApply.DefaultInstance; }
    }
    
    public override SCQueryApply BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCQueryApply) {
        return MergeFrom((SCQueryApply) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCQueryApply other) {
      if (other == global::SCQueryApply.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPagecount) {
        Pagecount = other.Pagecount;
      }
      if (other.applys_.Count != 0) {
        result.applys_.Add(other.applys_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCQueryApplyFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCQueryApplyFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPagecount = input.ReadInt32(ref result.pagecount_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.applys_, global::StructApply.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPagecount {
      get { return result.hasPagecount; }
    }
    public int Pagecount {
      get { return result.Pagecount; }
      set { SetPagecount(value); }
    }
    public Builder SetPagecount(int value) {
      PrepareBuilder();
      result.hasPagecount = true;
      result.pagecount_ = value;
      return this;
    }
    public Builder ClearPagecount() {
      PrepareBuilder();
      result.hasPagecount = false;
      result.pagecount_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::StructApply> ApplysList {
      get { return PrepareBuilder().applys_; }
    }
    public int ApplysCount {
      get { return result.ApplysCount; }
    }
    public global::StructApply GetApplys(int index) {
      return result.GetApplys(index);
    }
    public Builder SetApplys(int index, global::StructApply value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.applys_[index] = value;
      return this;
    }
    public Builder SetApplys(int index, global::StructApply.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.applys_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddApplys(global::StructApply value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.applys_.Add(value);
      return this;
    }
    public Builder AddApplys(global::StructApply.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.applys_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeApplys(scg::IEnumerable<global::StructApply> values) {
      PrepareBuilder();
      result.applys_.Add(values);
      return this;
    }
    public Builder ClearApplys() {
      PrepareBuilder();
      result.applys_.Clear();
      return this;
    }
  }
  static SCQueryApply() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSQueryOccup : pb::GeneratedMessage<CSQueryOccup, CSQueryOccup.Builder> {
  private CSQueryOccup() { }
  private static readonly CSQueryOccup defaultInstance = new CSQueryOccup().MakeReadOnly();
  private static readonly string[] _cSQueryOccupFieldNames = new string[] { "areaid", "date" };
  private static readonly uint[] _cSQueryOccupFieldTags = new uint[] { 8, 18 };
  public static CSQueryOccup DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSQueryOccup DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSQueryOccup ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_CSQueryOccup__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSQueryOccup, CSQueryOccup.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_CSQueryOccup__FieldAccessorTable; }
  }
  
  public const int AreaidFieldNumber = 1;
  private bool hasAreaid;
  private int areaid_;
  public bool HasAreaid {
    get { return hasAreaid; }
  }
  public int Areaid {
    get { return areaid_; }
  }
  
  public const int DateFieldNumber = 2;
  private bool hasDate;
  private string date_ = "";
  public bool HasDate {
    get { return hasDate; }
  }
  public string Date {
    get { return date_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSQueryOccupFieldNames;
    if (hasAreaid) {
      output.WriteInt32(1, field_names[0], Areaid);
    }
    if (hasDate) {
      output.WriteString(2, field_names[1], Date);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAreaid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Areaid);
    }
    if (hasDate) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Date);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSQueryOccup ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSQueryOccup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSQueryOccup ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSQueryOccup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSQueryOccup ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSQueryOccup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSQueryOccup ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSQueryOccup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSQueryOccup ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSQueryOccup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSQueryOccup MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSQueryOccup prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSQueryOccup, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSQueryOccup cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSQueryOccup result;
    
    private CSQueryOccup PrepareBuilder() {
      if (resultIsReadOnly) {
        CSQueryOccup original = result;
        result = new CSQueryOccup();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSQueryOccup MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSQueryOccup.Descriptor; }
    }
    
    public override CSQueryOccup DefaultInstanceForType {
      get { return global::CSQueryOccup.DefaultInstance; }
    }
    
    public override CSQueryOccup BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSQueryOccup) {
        return MergeFrom((CSQueryOccup) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSQueryOccup other) {
      if (other == global::CSQueryOccup.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAreaid) {
        Areaid = other.Areaid;
      }
      if (other.HasDate) {
        Date = other.Date;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSQueryOccupFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSQueryOccupFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAreaid = input.ReadInt32(ref result.areaid_);
            break;
          }
          case 18: {
            result.hasDate = input.ReadString(ref result.date_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAreaid {
      get { return result.hasAreaid; }
    }
    public int Areaid {
      get { return result.Areaid; }
      set { SetAreaid(value); }
    }
    public Builder SetAreaid(int value) {
      PrepareBuilder();
      result.hasAreaid = true;
      result.areaid_ = value;
      return this;
    }
    public Builder ClearAreaid() {
      PrepareBuilder();
      result.hasAreaid = false;
      result.areaid_ = 0;
      return this;
    }
    
    public bool HasDate {
      get { return result.hasDate; }
    }
    public string Date {
      get { return result.Date; }
      set { SetDate(value); }
    }
    public Builder SetDate(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDate = true;
      result.date_ = value;
      return this;
    }
    public Builder ClearDate() {
      PrepareBuilder();
      result.hasDate = false;
      result.date_ = "";
      return this;
    }
  }
  static CSQueryOccup() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCQueryOccup : pb::GeneratedMessage<SCQueryOccup, SCQueryOccup.Builder> {
  private SCQueryOccup() { }
  private static readonly SCQueryOccup defaultInstance = new SCQueryOccup().MakeReadOnly();
  private static readonly string[] _sCQueryOccupFieldNames = new string[] { "occups" };
  private static readonly uint[] _sCQueryOccupFieldTags = new uint[] { 8 };
  public static SCQueryOccup DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCQueryOccup DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCQueryOccup ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Background.internal__static_SCQueryOccup__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCQueryOccup, SCQueryOccup.Builder> InternalFieldAccessors {
    get { return global::Background.internal__static_SCQueryOccup__FieldAccessorTable; }
  }
  
  public const int OccupsFieldNumber = 1;
  private pbc::PopsicleList<int> occups_ = new pbc::PopsicleList<int>();
  public scg::IList<int> OccupsList {
    get { return pbc::Lists.AsReadOnly(occups_); }
  }
  public int OccupsCount {
    get { return occups_.Count; }
  }
  public int GetOccups(int index) {
    return occups_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCQueryOccupFieldNames;
    if (occups_.Count > 0) {
      output.WriteInt32Array(1, field_names[0], occups_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (int element in OccupsList) {
        dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * occups_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCQueryOccup ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCQueryOccup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCQueryOccup ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCQueryOccup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCQueryOccup ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCQueryOccup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCQueryOccup ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCQueryOccup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCQueryOccup ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCQueryOccup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCQueryOccup MakeReadOnly() {
    occups_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCQueryOccup prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCQueryOccup, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCQueryOccup cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCQueryOccup result;
    
    private SCQueryOccup PrepareBuilder() {
      if (resultIsReadOnly) {
        SCQueryOccup original = result;
        result = new SCQueryOccup();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCQueryOccup MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCQueryOccup.Descriptor; }
    }
    
    public override SCQueryOccup DefaultInstanceForType {
      get { return global::SCQueryOccup.DefaultInstance; }
    }
    
    public override SCQueryOccup BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCQueryOccup) {
        return MergeFrom((SCQueryOccup) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCQueryOccup other) {
      if (other == global::SCQueryOccup.DefaultInstance) return this;
      PrepareBuilder();
      if (other.occups_.Count != 0) {
        result.occups_.Add(other.occups_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCQueryOccupFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCQueryOccupFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt32Array(tag, field_name, result.occups_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<int> OccupsList {
      get { return PrepareBuilder().occups_; }
    }
    public int OccupsCount {
      get { return result.OccupsCount; }
    }
    public int GetOccups(int index) {
      return result.GetOccups(index);
    }
    public Builder SetOccups(int index, int value) {
      PrepareBuilder();
      result.occups_[index] = value;
      return this;
    }
    public Builder AddOccups(int value) {
      PrepareBuilder();
      result.occups_.Add(value);
      return this;
    }
    public Builder AddRangeOccups(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.occups_.Add(values);
      return this;
    }
    public Builder ClearOccups() {
      PrepareBuilder();
      result.occups_.Clear();
      return this;
    }
  }
  static SCQueryOccup() {
    object.ReferenceEquals(global::Background.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
